
Bare_MCU_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ec  080039ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039ec  080039ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039ec  080039ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08003a00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08003a00  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199d  00000000  00000000  0002ab6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd4d  00000000  00000000  0002d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab53  00000000  00000000  0005d665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125ea0  00000000  00000000  000681b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  0018e0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003994 	.word	0x08003994

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003994 	.word	0x08003994

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 f9f8 	bl	80005f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f827 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f8db 	bl	80003c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f871 	bl	80002f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000212:	480f      	ldr	r0, [pc, #60]	; (8000250 <main+0x54>)
 8000214:	f000 fdd4 	bl	8000dc0 <HAL_ADC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000218:	217f      	movs	r1, #127	; 0x7f
 800021a:	480d      	ldr	r0, [pc, #52]	; (8000250 <main+0x54>)
 800021c:	f001 fbde 	bl	80019dc <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  	  AD_RES = 0;
	  HAL_ADC_Start(&hadc1);
 8000220:	480b      	ldr	r0, [pc, #44]	; (8000250 <main+0x54>)
 8000222:	f000 fdcd 	bl	8000dc0 <HAL_ADC_Start>
	  HAL_StatusTypeDef stat = HAL_ADC_PollForConversion(&hadc1, 1000);
 8000226:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x54>)
 800022c:	f000 fe2b 	bl	8000e86 <HAL_ADC_PollForConversion>
 8000230:	4603      	mov	r3, r0
 8000232:	71fb      	strb	r3, [r7, #7]
      if (stat==HAL_OK){
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d106      	bne.n	8000248 <main+0x4c>
          AD_RES = HAL_ADC_GetValue(&hadc1);
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0x54>)
 800023c:	f000 feb2 	bl	8000fa4 <HAL_ADC_GetValue>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <main+0x58>)
 8000246:	801a      	strh	r2, [r3, #0]
      };
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      HAL_Delay(1);
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fa49 	bl	80006e0 <HAL_Delay>
  {
 800024e:	e7e7      	b.n	8000220 <main+0x24>
 8000250:	2000002c 	.word	0x2000002c
 8000254:	20000028 	.word	0x20000028

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b096      	sub	sp, #88	; 0x58
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2244      	movs	r2, #68	; 0x44
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fb8c 	bl	8003984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800027a:	2000      	movs	r0, #0
 800027c:	f001 fea6 	bl	8001fcc <HAL_PWREx_ControlVoltageScaling>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000286:	f000 f8cd 	bl	8000424 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	2303      	movs	r3, #3
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800029c:	2302      	movs	r3, #2
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80002a0:	231e      	movs	r3, #30
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a4:	2302      	movs	r3, #2
 80002a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 ff2d 	bl	8002114 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002c0:	f000 f8b0 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2105      	movs	r1, #5
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fb33 	bl	8002948 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002e8:	f000 f89c 	bl	8000424 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3758      	adds	r7, #88	; 0x58
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fa:	463b      	mov	r3, r7
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <MX_ADC1_Init+0xc4>)
 800030c:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <MX_ADC1_Init+0xc8>)
 800030e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000310:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000312:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000318:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <MX_ADC1_Init+0xc4>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031e:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_ADC1_Init+0xc4>)
 800032c:	2204      	movs	r2, #4
 800032e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000332:	2200      	movs	r2, #0
 8000334:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000338:	2200      	movs	r2, #0
 800033a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MX_ADC1_Init+0xc4>)
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_ADC1_Init+0xc4>)
 800034c:	2200      	movs	r2, #0
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000352:	2200      	movs	r2, #0
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000358:	2200      	movs	r2, #0
 800035a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035e:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000360:	2200      	movs	r2, #0
 8000362:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000366:	2200      	movs	r2, #0
 8000368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_ADC1_Init+0xc4>)
 800036e:	2204      	movs	r2, #4
 8000370:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000372:	4811      	ldr	r0, [pc, #68]	; (80003b8 <MX_ADC1_Init+0xc4>)
 8000374:	f000 fbd8 	bl	8000b28 <HAL_ADC_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800037e:	f000 f851 	bl	8000424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_ADC1_Init+0xcc>)
 8000384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2306      	movs	r3, #6
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038e:	237f      	movs	r3, #127	; 0x7f
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2304      	movs	r3, #4
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <MX_ADC1_Init+0xc4>)
 80003a0:	f000 fe0e 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80003aa:	f000 f83b 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	2000002c 	.word	0x2000002c
 80003bc:	50040000 	.word	0x50040000
 80003c0:	36902000 	.word	0x36902000

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	4a14      	ldr	r2, [pc, #80]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	f003 0304 	and.w	r3, r3, #4
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	4a08      	ldr	r2, [pc, #32]	; (8000420 <MX_GPIO_Init+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_GPIO_Init+0x5c>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

}
 8000412:	bf00      	nop
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6613      	str	r3, [r2, #96]	; 0x60
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	6593      	str	r3, [r2, #88]	; 0x58
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_MspInit+0x44>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b0b0      	sub	sp, #192	; 0xc0
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	229c      	movs	r2, #156	; 0x9c
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f003 fa73 	bl	8003984 <memset>
  if(hadc->Instance==ADC1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <HAL_ADC_MspInit+0xa8>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d137      	bne.n	8000518 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80004b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fcc6 	bl	8002e4c <HAL_RCCEx_PeriphCLKConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80004c6:	f7ff ffad 	bl	8000424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <HAL_ADC_MspInit+0xac>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <HAL_ADC_MspInit+0xac>)
 80004d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <HAL_ADC_MspInit+0xac>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <HAL_ADC_MspInit+0xac>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <HAL_ADC_MspInit+0xac>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <HAL_ADC_MspInit+0xac>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004fa:	2310      	movs	r3, #16
 80004fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000500:	230b      	movs	r3, #11
 8000502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000510:	4619      	mov	r1, r3
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_ADC_MspInit+0xb0>)
 8000514:	f001 fba8 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	37c0      	adds	r7, #192	; 0xc0
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	50040000 	.word	0x50040000
 8000524:	40021000 	.word	0x40021000
 8000528:	48000800 	.word	0x48000800

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler+0x4>

08000532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>

0800053e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <UsageFault_Handler+0x4>

0800054a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f892 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <SystemInit+0x20>)
 8000586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <SystemInit+0x20>)
 800058c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a8:	f7ff ffea 	bl	8000580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	; (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	; (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d2:	f003 f9b3 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005d6:	f7ff fe11 	bl	80001fc <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e8:	080039f4 	.word	0x080039f4
  ldr r2, =_sbss
 80005ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f0:	20000098 	.word	0x20000098

080005f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_IRQHandler>

080005f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f001 fafd 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000606:	200f      	movs	r0, #15
 8000608:	f000 f80e 	bl	8000628 <HAL_InitTick>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	e001      	b.n	800061c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000618:	f7ff ff0a 	bl	8000430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800061c:	79fb      	ldrb	r3, [r7, #7]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_InitTick+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d023      	beq.n	8000684 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_InitTick+0x70>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_InitTick+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fafb 	bl	8001c4e <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10f      	bne.n	800067e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d809      	bhi.n	8000678 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066c:	f001 fad3 	bl	8001c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <HAL_InitTick+0x74>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	e007      	b.n	8000688 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e004      	b.n	8000688 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	e001      	b.n	8000688 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000008 	.word	0x20000008
 8000698:	20000000 	.word	0x20000000
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000094 	.word	0x20000094

080006c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000094 	.word	0x20000094

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff ffee 	bl	80006c8 <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_Delay+0x44>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffde 	bl	80006c8 <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008

08000728 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	431a      	orrs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	431a      	orrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	609a      	str	r2, [r3, #8]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3360      	adds	r3, #96	; 0x60
 80007a2:	461a      	mov	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <LL_ADC_SetOffset+0x44>)
 80007b2:	4013      	ands	r3, r2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	430a      	orrs	r2, r1
 80007be:	4313      	orrs	r3, r2
 80007c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007c8:	bf00      	nop
 80007ca:	371c      	adds	r7, #28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	03fff000 	.word	0x03fff000

080007d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3360      	adds	r3, #96	; 0x60
 80007e6:	461a      	mov	r2, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000804:	b480      	push	{r7}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3360      	adds	r3, #96	; 0x60
 8000814:	461a      	mov	r2, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	431a      	orrs	r2, r3
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	615a      	str	r2, [r3, #20]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000886:	b480      	push	{r7}
 8000888:	b087      	sub	sp, #28
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3330      	adds	r3, #48	; 0x30
 8000896:	461a      	mov	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	f003 030c 	and.w	r3, r3, #12
 80008a2:	4413      	add	r3, r2
 80008a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	f003 031f 	and.w	r3, r3, #31
 80008b0:	211f      	movs	r1, #31
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	401a      	ands	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	0e9b      	lsrs	r3, r3, #26
 80008be:	f003 011f 	and.w	r1, r3, #31
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	431a      	orrs	r2, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008d2:	bf00      	nop
 80008d4:	371c      	adds	r7, #28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008de:	b480      	push	{r7}
 80008e0:	b087      	sub	sp, #28
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3314      	adds	r3, #20
 80008ee:	461a      	mov	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	0e5b      	lsrs	r3, r3, #25
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	0d1b      	lsrs	r3, r3, #20
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	2107      	movs	r1, #7
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	401a      	ands	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	0d1b      	lsrs	r3, r3, #20
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	431a      	orrs	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000928:	bf00      	nop
 800092a:	371c      	adds	r7, #28
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800094c:	43db      	mvns	r3, r3
 800094e:	401a      	ands	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0318 	and.w	r3, r3, #24
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000958:	40d9      	lsrs	r1, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	400b      	ands	r3, r1
 800095e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000962:	431a      	orrs	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	0007ffff 	.word	0x0007ffff

0800097c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800098c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	6093      	str	r3, [r2, #8]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009b4:	d101      	bne.n	80009ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80009d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a04:	d101      	bne.n	8000a0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a2c:	f043 0201 	orr.w	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a54:	f043 0202 	orr.w	r2, r3, #2
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d101      	bne.n	8000a80 <LL_ADC_IsEnabled+0x18>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <LL_ADC_IsEnabled+0x1a>
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d101      	bne.n	8000aa6 <LL_ADC_IsDisableOngoing+0x18>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <LL_ADC_IsDisableOngoing+0x1a>
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ac8:	f043 0204 	orr.w	r2, r3, #4
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d101      	bne.n	8000af4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d101      	bne.n	8000b1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e12f      	b.n	8000da2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fc91 	bl	8000478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff19 	bl	80009a0 <LL_ADC_IsDeepPowerDownEnabled>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d004      	beq.n	8000b7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff feff 	bl	800097c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff34 	bl	80009f0 <LL_ADC_IsInternalRegulatorEnabled>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d115      	bne.n	8000bba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff18 	bl	80009c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b98:	4b84      	ldr	r3, [pc, #528]	; (8000dac <HAL_ADC_Init+0x284>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	099b      	lsrs	r3, r3, #6
 8000b9e:	4a84      	ldr	r2, [pc, #528]	; (8000db0 <HAL_ADC_Init+0x288>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	099b      	lsrs	r3, r3, #6
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bac:	e002      	b.n	8000bb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f9      	bne.n	8000bae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff16 	bl	80009f0 <LL_ADC_IsInternalRegulatorEnabled>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10d      	bne.n	8000be6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f043 0210 	orr.w	r2, r3, #16
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff76 	bl	8000adc <LL_ADC_REG_IsConversionOngoing>
 8000bf0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 80c8 	bne.w	8000d90 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 80c4 	bne.w	8000d90 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c10:	f043 0202 	orr.w	r2, r3, #2
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff23 	bl	8000a68 <LL_ADC_IsEnabled>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10b      	bne.n	8000c40 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c28:	4862      	ldr	r0, [pc, #392]	; (8000db4 <HAL_ADC_Init+0x28c>)
 8000c2a:	f7ff ff1d 	bl	8000a68 <LL_ADC_IsEnabled>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	485f      	ldr	r0, [pc, #380]	; (8000db8 <HAL_ADC_Init+0x290>)
 8000c3c:	f7ff fd74 	bl	8000728 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e5b      	ldrb	r3, [r3, #25]
 8000c44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000c50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000c56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d106      	bne.n	8000c7c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c72:	3b01      	subs	r3, #1
 8000c74:	045b      	lsls	r3, r3, #17
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d009      	beq.n	8000c98 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_ADC_Init+0x294>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	69b9      	ldr	r1, [r7, #24]
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff13 	bl	8000adc <LL_ADC_REG_IsConversionOngoing>
 8000cb6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff20 	bl	8000b02 <LL_ADC_INJ_IsConversionOngoing>
 8000cc2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d140      	bne.n	8000d4c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d13d      	bne.n	8000d4c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7e1b      	ldrb	r3, [r3, #24]
 8000cd8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cda:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ce2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cf2:	f023 0306 	bic.w	r3, r3, #6
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d118      	bne.n	8000d3c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d14:	f023 0304 	bic.w	r3, r3, #4
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d20:	4311      	orrs	r1, r2
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d26:	4311      	orrs	r1, r2
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 0201 	orr.w	r2, r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	e007      	b.n	8000d4c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10c      	bne.n	8000d6e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f023 010f 	bic.w	r1, r3, #15
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d6c:	e007      	b.n	8000d7e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 020f 	bic.w	r2, r2, #15
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f023 0303 	bic.w	r3, r3, #3
 8000d86:	f043 0201 	orr.w	r2, r3, #1
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	659a      	str	r2, [r3, #88]	; 0x58
 8000d8e:	e007      	b.n	8000da0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d94:	f043 0210 	orr.w	r2, r3, #16
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000
 8000db0:	053e2d63 	.word	0x053e2d63
 8000db4:	50040000 	.word	0x50040000
 8000db8:	50040300 	.word	0x50040300
 8000dbc:	fff0c007 	.word	0xfff0c007

08000dc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe85 	bl	8000adc <LL_ADC_REG_IsConversionOngoing>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d14f      	bne.n	8000e78 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Start+0x26>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e04b      	b.n	8000e7e <HAL_ADC_Start+0xbe>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fce2 	bl	80017b8 <ADC_Enable>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d137      	bne.n	8000e6e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e1e:	d106      	bne.n	8000e2e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e24:	f023 0206 	bic.w	r2, r3, #6
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e2c:	e002      	b.n	8000e34 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	221c      	movs	r2, #28
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe24 	bl	8000ab4 <LL_ADC_REG_StartConversion>
 8000e6c:	e006      	b.n	8000e7c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000e76:	e001      	b.n	8000e7c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d102      	bne.n	8000e9e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e010      	b.n	8000ec0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	f043 0220 	orr.w	r2, r3, #32
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e06f      	b.n	8000f9c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ec0:	f7ff fc02 	bl	80006c8 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ec6:	e021      	b.n	8000f0c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ece:	d01d      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000ed0:	f7ff fbfa 	bl	80006c8 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d302      	bcc.n	8000ee6 <HAL_ADC_PollForConversion+0x60>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d112      	bne.n	8000f0c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10b      	bne.n	8000f0c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	f043 0204 	orr.w	r2, r3, #4
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e047      	b.n	8000f9c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0d6      	beq.n	8000ec8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fc98 	bl	8000860 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01c      	beq.n	8000f70 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7e5b      	ldrb	r3, [r3, #25]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d111      	bne.n	8000f70 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d104      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2208      	movs	r2, #8
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e008      	b.n	8000f9a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d103      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0b6      	sub	sp, #216	; 0xd8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x22>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e3d5      	b.n	800178e <HAL_ADC_ConfigChannel+0x7ce>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd74 	bl	8000adc <LL_ADC_REG_IsConversionOngoing>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 83ba 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b05      	cmp	r3, #5
 8001002:	d824      	bhi.n	800104e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	3b02      	subs	r3, #2
 800100a:	2b03      	cmp	r3, #3
 800100c:	d81b      	bhi.n	8001046 <HAL_ADC_ConfigChannel+0x86>
 800100e:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <HAL_ADC_ConfigChannel+0x54>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	08001025 	.word	0x08001025
 8001018:	0800102d 	.word	0x0800102d
 800101c:	08001035 	.word	0x08001035
 8001020:	0800103d 	.word	0x0800103d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	220c      	movs	r2, #12
 8001028:	605a      	str	r2, [r3, #4]
          break;
 800102a:	e011      	b.n	8001050 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2212      	movs	r2, #18
 8001030:	605a      	str	r2, [r3, #4]
          break;
 8001032:	e00d      	b.n	8001050 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2218      	movs	r2, #24
 8001038:	605a      	str	r2, [r3, #4]
          break;
 800103a:	e009      	b.n	8001050 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001042:	605a      	str	r2, [r3, #4]
          break;
 8001044:	e004      	b.n	8001050 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2206      	movs	r2, #6
 800104a:	605a      	str	r2, [r3, #4]
          break;
 800104c:	e000      	b.n	8001050 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800104e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6859      	ldr	r1, [r3, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	f7ff fc12 	bl	8000886 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fd38 	bl	8000adc <LL_ADC_REG_IsConversionOngoing>
 800106c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd44 	bl	8000b02 <LL_ADC_INJ_IsConversionOngoing>
 800107a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800107e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 81c1 	bne.w	800140a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800108c:	2b00      	cmp	r3, #0
 800108e:	f040 81bc 	bne.w	800140a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800109a:	d10f      	bne.n	80010bc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc19 	bl	80008de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fbc0 	bl	800083a <LL_ADC_SetSamplingTimeCommonConfig>
 80010ba:	e00e      	b.n	80010da <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	461a      	mov	r2, r3
 80010ca:	f7ff fc08 	bl	80008de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fbb0 	bl	800083a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00a      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6919      	ldr	r1, [r3, #16]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800110c:	f7ff fb40 	bl	8000790 <LL_ADC_SetOffset>
 8001110:	e17b      	b.n	800140a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fb5d 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10a      	bne.n	800113e <HAL_ADC_ConfigChannel+0x17e>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fb52 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	0e9b      	lsrs	r3, r3, #26
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	e01e      	b.n	800117c <HAL_ADC_ConfigChannel+0x1bc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fb47 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800115c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800116c:	2320      	movs	r3, #32
 800116e:	e004      	b.n	800117a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x1d4>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e9b      	lsrs	r3, r3, #26
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	e018      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x206>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80011a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80011b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80011b8:	2320      	movs	r3, #32
 80011ba:	e004      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80011bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d106      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fb16 	bl	8000804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fafa 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x244>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff faef 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	0e9b      	lsrs	r3, r3, #26
 80011fe:	f003 021f 	and.w	r2, r3, #31
 8001202:	e01e      	b.n	8001242 <HAL_ADC_ConfigChannel+0x282>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fae4 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800122a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001232:	2320      	movs	r3, #32
 8001234:	e004      	b.n	8001240 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <HAL_ADC_ConfigChannel+0x29a>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0e9b      	lsrs	r3, r3, #26
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	e018      	b.n	800128c <HAL_ADC_ConfigChannel+0x2cc>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800126e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800127e:	2320      	movs	r3, #32
 8001280:	e004      	b.n	800128c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001282:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800128c:	429a      	cmp	r2, r3
 800128e:	d106      	bne.n	800129e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fab3 	bl	8000804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fa97 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10a      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x30a>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2102      	movs	r1, #2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa8c 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	0e9b      	lsrs	r3, r3, #26
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	e01e      	b.n	8001308 <HAL_ADC_ConfigChannel+0x348>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2102      	movs	r1, #2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fa81 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80012e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80012f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80012f8:	2320      	movs	r3, #32
 80012fa:	e004      	b.n	8001306 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80012fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001300:	fab3 f383 	clz	r3, r3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x360>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0e9b      	lsrs	r3, r3, #26
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	e016      	b.n	800134e <HAL_ADC_ConfigChannel+0x38e>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800132c:	fa93 f3a3 	rbit	r3, r3
 8001330:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001332:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001340:	2320      	movs	r3, #32
 8001342:	e004      	b.n	800134e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800134e:	429a      	cmp	r2, r3
 8001350:	d106      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fa52 	bl	8000804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2103      	movs	r1, #3
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fa36 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10a      	bne.n	800138c <HAL_ADC_ConfigChannel+0x3cc>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2103      	movs	r1, #3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fa2b 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	0e9b      	lsrs	r3, r3, #26
 8001386:	f003 021f 	and.w	r2, r3, #31
 800138a:	e017      	b.n	80013bc <HAL_ADC_ConfigChannel+0x3fc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2103      	movs	r1, #3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fa20 	bl	80007d8 <LL_ADC_GetOffsetChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80013a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80013a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80013ae:	2320      	movs	r3, #32
 80013b0:	e003      	b.n	80013ba <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80013b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x414>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0e9b      	lsrs	r3, r3, #26
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	e011      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x438>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80013e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80013e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80013ec:	2320      	movs	r3, #32
 80013ee:	e003      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80013f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d106      	bne.n	800140a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	2103      	movs	r1, #3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f9fd 	bl	8000804 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fb2a 	bl	8000a68 <LL_ADC_IsEnabled>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8140 	bne.w	800169c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	461a      	mov	r2, r3
 800142a:	f7ff fa83 	bl	8000934 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	4a8f      	ldr	r2, [pc, #572]	; (8001670 <HAL_ADC_ConfigChannel+0x6b0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	f040 8131 	bne.w	800169c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10b      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x4a2>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	3301      	adds	r3, #1
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2b09      	cmp	r3, #9
 8001458:	bf94      	ite	ls
 800145a:	2301      	movls	r3, #1
 800145c:	2300      	movhi	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	e019      	b.n	8001496 <HAL_ADC_ConfigChannel+0x4d6>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001472:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800147a:	2320      	movs	r3, #32
 800147c:	e003      	b.n	8001486 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800147e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2b09      	cmp	r3, #9
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001496:	2b00      	cmp	r3, #0
 8001498:	d079      	beq.n	800158e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x4f6>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	0e9b      	lsrs	r3, r3, #26
 80014ac:	3301      	adds	r3, #1
 80014ae:	069b      	lsls	r3, r3, #26
 80014b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014b4:	e015      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x522>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80014c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80014c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80014ce:	2320      	movs	r3, #32
 80014d0:	e003      	b.n	80014da <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80014d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	069b      	lsls	r3, r3, #26
 80014de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x542>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0e9b      	lsrs	r3, r3, #26
 80014f4:	3301      	adds	r3, #1
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	e017      	b.n	8001532 <HAL_ADC_ConfigChannel+0x572>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800151a:	2320      	movs	r3, #32
 800151c:	e003      	b.n	8001526 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800151e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	ea42 0103 	orr.w	r1, r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x598>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0e9b      	lsrs	r3, r3, #26
 8001548:	3301      	adds	r3, #1
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	e018      	b.n	800158a <HAL_ADC_ConfigChannel+0x5ca>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001570:	2320      	movs	r3, #32
 8001572:	e003      	b.n	800157c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f003 021f 	and.w	r2, r3, #31
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800158a:	430b      	orrs	r3, r1
 800158c:	e081      	b.n	8001692 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x5ea>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0e9b      	lsrs	r3, r3, #26
 80015a0:	3301      	adds	r3, #1
 80015a2:	069b      	lsls	r3, r3, #26
 80015a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a8:	e015      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x616>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e003      	b.n	80015ce <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80015c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	069b      	lsls	r3, r3, #26
 80015d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x636>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0e9b      	lsrs	r3, r3, #26
 80015e8:	3301      	adds	r3, #1
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	e017      	b.n	8001626 <HAL_ADC_ConfigChannel+0x666>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	61fb      	str	r3, [r7, #28]
  return result;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800160e:	2320      	movs	r3, #32
 8001610:	e003      	b.n	800161a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	ea42 0103 	orr.w	r1, r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10d      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x692>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0e9b      	lsrs	r3, r3, #26
 800163c:	3301      	adds	r3, #1
 800163e:	f003 021f 	and.w	r2, r3, #31
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	3b1e      	subs	r3, #30
 800164a:	051b      	lsls	r3, r3, #20
 800164c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001650:	e01e      	b.n	8001690 <HAL_ADC_ConfigChannel+0x6d0>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	613b      	str	r3, [r7, #16]
  return result;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800166a:	2320      	movs	r3, #32
 800166c:	e006      	b.n	800167c <HAL_ADC_ConfigChannel+0x6bc>
 800166e:	bf00      	nop
 8001670:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	f003 021f 	and.w	r2, r3, #31
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	3b1e      	subs	r3, #30
 800168a:	051b      	lsls	r3, r3, #20
 800168c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001690:	430b      	orrs	r3, r1
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6892      	ldr	r2, [r2, #8]
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f921 	bl	80008de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_ADC_ConfigChannel+0x7d8>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d06c      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016a8:	483c      	ldr	r0, [pc, #240]	; (800179c <HAL_ADC_ConfigChannel+0x7dc>)
 80016aa:	f7ff f863 	bl	8000774 <LL_ADC_GetCommonPathInternalCh>
 80016ae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <HAL_ADC_ConfigChannel+0x7e0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d127      	bne.n	800170c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d121      	bne.n	800170c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a35      	ldr	r2, [pc, #212]	; (80017a4 <HAL_ADC_ConfigChannel+0x7e4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d157      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016da:	4619      	mov	r1, r3
 80016dc:	482f      	ldr	r0, [pc, #188]	; (800179c <HAL_ADC_ConfigChannel+0x7dc>)
 80016de:	f7ff f836 	bl	800074e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_ADC_ConfigChannel+0x7e8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	4a30      	ldr	r2, [pc, #192]	; (80017ac <HAL_ADC_ConfigChannel+0x7ec>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800170a:	e03a      	b.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d113      	bne.n	800173e <HAL_ADC_ConfigChannel+0x77e>
 8001716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800171a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10d      	bne.n	800173e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12a      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800172c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001734:	4619      	mov	r1, r3
 8001736:	4819      	ldr	r0, [pc, #100]	; (800179c <HAL_ADC_ConfigChannel+0x7dc>)
 8001738:	f7ff f809 	bl	800074e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800173c:	e021      	b.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d11c      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800174c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_ADC_ConfigChannel+0x7e4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d111      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_ADC_ConfigChannel+0x7dc>)
 800176a:	f7fe fff0 	bl	800074e <LL_ADC_SetCommonPathInternalCh>
 800176e:	e008      	b.n	8001782 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800178a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800178e:	4618      	mov	r0, r3
 8001790:	37d8      	adds	r7, #216	; 0xd8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	80080000 	.word	0x80080000
 800179c:	50040300 	.word	0x50040300
 80017a0:	c7520000 	.word	0xc7520000
 80017a4:	50040000 	.word	0x50040000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	053e2d63 	.word	0x053e2d63
 80017b0:	cb840000 	.word	0xcb840000
 80017b4:	80000001 	.word	0x80000001

080017b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f94d 	bl	8000a68 <LL_ADC_IsEnabled>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d169      	bne.n	80018a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <ADC_Enable+0xfc>)
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00d      	beq.n	80017fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f043 0210 	orr.w	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e055      	b.n	80018aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f908 	bl	8000a18 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001808:	482b      	ldr	r0, [pc, #172]	; (80018b8 <ADC_Enable+0x100>)
 800180a:	f7fe ffb3 	bl	8000774 <LL_ADC_GetCommonPathInternalCh>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <ADC_Enable+0x104>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <ADC_Enable+0x108>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001832:	e002      	b.n	800183a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3b01      	subs	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f9      	bne.n	8001834 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001840:	f7fe ff42 	bl	80006c8 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001846:	e028      	b.n	800189a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff f90b 	bl	8000a68 <LL_ADC_IsEnabled>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d104      	bne.n	8001862 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f8db 	bl	8000a18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001862:	f7fe ff31 	bl	80006c8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d914      	bls.n	800189a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d00d      	beq.n	800189a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f043 0210 	orr.w	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e007      	b.n	80018aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d1cf      	bne.n	8001848 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	8000003f 	.word	0x8000003f
 80018b8:	50040300 	.word	0x50040300
 80018bc:	20000000 	.word	0x20000000
 80018c0:	053e2d63 	.word	0x053e2d63

080018c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f8dc 	bl	8000a8e <LL_ADC_IsDisableOngoing>
 80018d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f8c3 	bl	8000a68 <LL_ADC_IsEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d047      	beq.n	8001978 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d144      	bne.n	8001978 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030d 	and.w	r3, r3, #13
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10c      	bne.n	8001916 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f89d 	bl	8000a40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2203      	movs	r2, #3
 800190c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800190e:	f7fe fedb 	bl	80006c8 <HAL_GetTick>
 8001912:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001914:	e029      	b.n	800196a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e023      	b.n	800197a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001932:	f7fe fec9 	bl	80006c8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d914      	bls.n	800196a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00d      	beq.n	800196a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e007      	b.n	800197a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1dc      	bne.n	8001932 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <LL_ADC_StartCalibration>:
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001994:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800199e:	4313      	orrs	r3, r2
 80019a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019c8:	d101      	bne.n	80019ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e04d      	b.n	8001a94 <HAL_ADCEx_Calibration_Start+0xb8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff5f 	bl	80018c4 <ADC_Disable>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d136      	bne.n	8001a7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a18:	f023 0302 	bic.w	r3, r3, #2
 8001a1c:	f043 0202 	orr.w	r2, r3, #2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ffa9 	bl	8001982 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001a30:	e014      	b.n	8001a5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	3301      	adds	r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001a3e:	d30d      	bcc.n	8001a5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f023 0312 	bic.w	r3, r3, #18
 8001a48:	f043 0210 	orr.w	r2, r3, #16
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e01b      	b.n	8001a94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ffa7 	bl	80019b4 <LL_ADC_IsCalibrationOnGoing>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e2      	bne.n	8001a32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a7c:	e005      	b.n	8001a8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff47 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5c 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e166      	b.n	8001f46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8158 	beq.w	8001f40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	6939      	ldr	r1, [r7, #16]
 8001d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80b2 	beq.w	8001f40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_GPIO_Init+0x2fc>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	4a60      	ldr	r2, [pc, #384]	; (8001f64 <HAL_GPIO_Init+0x2fc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6613      	str	r3, [r2, #96]	; 0x60
 8001de8:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <HAL_GPIO_Init+0x2fc>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df4:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_GPIO_Init+0x300>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e1e:	d02b      	beq.n	8001e78 <HAL_GPIO_Init+0x210>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d025      	beq.n	8001e74 <HAL_GPIO_Init+0x20c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_GPIO_Init+0x308>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d01f      	beq.n	8001e70 <HAL_GPIO_Init+0x208>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <HAL_GPIO_Init+0x30c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d019      	beq.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a4f      	ldr	r2, [pc, #316]	; (8001f78 <HAL_GPIO_Init+0x310>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_GPIO_Init+0x200>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4e      	ldr	r2, [pc, #312]	; (8001f7c <HAL_GPIO_Init+0x314>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1fc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a4d      	ldr	r2, [pc, #308]	; (8001f80 <HAL_GPIO_Init+0x318>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1f8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_GPIO_Init+0x31c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1f4>
 8001e58:	2307      	movs	r3, #7
 8001e5a:	e00e      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	e00c      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e60:	2306      	movs	r3, #6
 8001e62:	e00a      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e64:	2305      	movs	r3, #5
 8001e66:	e008      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e006      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e004      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	f002 0203 	and.w	r2, r2, #3
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	4093      	lsls	r3, r2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e8a:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_GPIO_Init+0x300>)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ebc:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee6:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f ae91 	bne.w	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	48000800 	.word	0x48000800
 8001f74:	48000c00 	.word	0x48000c00
 8001f78:	48001000 	.word	0x48001000
 8001f7c:	48001400 	.word	0x48001400
 8001f80:	48001800 	.word	0x48001800
 8001f84:	48001c00 	.word	0x48001c00
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa2:	e00b      	b.n	8001fbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb2:	d102      	bne.n	8001fba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	e000      	b.n	8001fbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001fba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d141      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fda:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	d131      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fe8:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fee:	4a46      	ldr	r2, [pc, #280]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff8:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002000:	4a41      	ldr	r2, [pc, #260]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002008:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2232      	movs	r2, #50	; 0x32
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4a3f      	ldr	r2, [pc, #252]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	0c9b      	lsrs	r3, r3, #18
 800201a:	3301      	adds	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800201e:	e002      	b.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3b01      	subs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002032:	d102      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f2      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d158      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e057      	b.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002052:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800205c:	e04d      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002064:	d141      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d131      	bne.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800207a:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2232      	movs	r2, #50	; 0x32
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	3301      	adds	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020aa:	e002      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020be:	d102      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f2      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d2:	d112      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e011      	b.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020e8:	e007      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40007000 	.word	0x40007000
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	f000 bc08 	b.w	8002938 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002132:	4b94      	ldr	r3, [pc, #592]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80e4 	beq.w	8002312 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_RCC_OscConfig+0x4c>
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	f040 808b 	bne.w	800226e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 8087 	bne.w	800226e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002160:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x64>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e3df      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_RCC_OscConfig+0x7e>
 8002188:	4b7e      	ldr	r3, [pc, #504]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	e005      	b.n	800219e <HAL_RCC_OscConfig+0x8a>
 8002192:	4b7c      	ldr	r3, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219e:	4293      	cmp	r3, r2
 80021a0:	d223      	bcs.n	80021ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fd92 	bl	8002cd0 <RCC_SetFlashLatencyFromMSIRange>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e3c0      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a72      	ldr	r2, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	496d      	ldr	r1, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d4:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	4968      	ldr	r1, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e025      	b.n	8002236 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ea:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a65      	ldr	r2, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4960      	ldr	r1, [pc, #384]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002208:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	495b      	ldr	r1, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fd52 	bl	8002cd0 <RCC_SetFlashLatencyFromMSIRange>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e380      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002236:	f000 fcc1 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4950      	ldr	r1, [pc, #320]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a4e      	ldr	r2, [pc, #312]	; (800238c <HAL_RCC_OscConfig+0x278>)
 8002254:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002256:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f9e4 	bl	8000628 <HAL_InitTick>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d052      	beq.n	8002310 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	e364      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d032      	beq.n	80022dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002276:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002282:	f7fe fa21 	bl	80006c8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228a:	f7fe fa1d 	bl	80006c8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e34d      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a35      	ldr	r2, [pc, #212]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4930      	ldr	r1, [pc, #192]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	492b      	ldr	r1, [pc, #172]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
 80022da:	e01a      	b.n	8002312 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a28      	ldr	r2, [pc, #160]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e8:	f7fe f9ee 	bl	80006c8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f0:	f7fe f9ea 	bl	80006c8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e31a      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1dc>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d073      	beq.n	8002406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d005      	beq.n	8002330 <HAL_RCC_OscConfig+0x21c>
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d10e      	bne.n	8002348 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d063      	beq.n	8002404 <HAL_RCC_OscConfig+0x2f0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d15f      	bne.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e2f7      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x24c>
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e025      	b.n	80023ac <HAL_RCC_OscConfig+0x298>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d114      	bne.n	8002394 <HAL_RCC_OscConfig+0x280>
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a02      	ldr	r2, [pc, #8]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e013      	b.n	80023ac <HAL_RCC_OscConfig+0x298>
 8002384:	40021000 	.word	0x40021000
 8002388:	080039ac 	.word	0x080039ac
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004
 8002394:	4ba0      	ldr	r3, [pc, #640]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a9f      	ldr	r2, [pc, #636]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b9d      	ldr	r3, [pc, #628]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a9c      	ldr	r2, [pc, #624]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe f988 	bl	80006c8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe f984 	bl	80006c8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e2b4      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ce:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x2a8>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe f974 	bl	80006c8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe f970 	bl	80006c8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2a0      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2d0>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d060      	beq.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x310>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d119      	bne.n	8002452 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d116      	bne.n	8002452 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	4b7c      	ldr	r3, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x328>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e27d      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	4973      	ldr	r1, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	e040      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d023      	beq.n	80024a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe f92f 	bl	80006c8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe f92b 	bl	80006c8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e25b      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	495f      	ldr	r1, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e018      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5c      	ldr	r2, [pc, #368]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe f90b 	bl	80006c8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe f907 	bl	80006c8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e237      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03c      	beq.n	800255a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe f8e6 	bl	80006c8 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe f8e2 	bl	80006c8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e212      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <HAL_RCC_OscConfig+0x3ec>
 8002520:	e01b      	b.n	800255a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002528:	4a3b      	ldr	r2, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe f8c9 	bl	80006c8 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe f8c5 	bl	80006c8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1f5      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80a6 	beq.w	80026b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10d      	bne.n	8002594 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6593      	str	r3, [r2, #88]	; 0x58
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002590:	2301      	movs	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_OscConfig+0x508>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d118      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_OscConfig+0x508>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1d      	ldr	r2, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x508>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ac:	f7fe f88c 	bl	80006c8 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b4:	f7fe f888 	bl	80006c8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1b8      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_RCC_OscConfig+0x508>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_RCC_OscConfig+0x4d8>
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ea:	e029      	b.n	8002640 <HAL_RCC_OscConfig+0x52c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_OscConfig+0x50c>
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x52c>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	4b9d      	ldr	r3, [pc, #628]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	4a9c      	ldr	r2, [pc, #624]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002630:	4b99      	ldr	r3, [pc, #612]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a98      	ldr	r2, [pc, #608]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe f83e 	bl	80006c8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe f83a 	bl	80006c8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e168      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ed      	beq.n	8002650 <HAL_RCC_OscConfig+0x53c>
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe f827 	bl	80006c8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe f823 	bl	80006c8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e151      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002694:	4b80      	ldr	r3, [pc, #512]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ed      	bne.n	800267e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a8:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	4a7a      	ldr	r2, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03c      	beq.n	800273a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01c      	beq.n	8002702 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c8:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80026ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ce:	4a72      	ldr	r2, [pc, #456]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fd fff6 	bl	80006c8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e0:	f7fd fff2 	bl	80006c8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e122      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f2:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80026f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCC_OscConfig+0x5cc>
 8002700:	e01b      	b.n	800273a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fd ffd9 	bl	80006c8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271a:	f7fd ffd5 	bl	80006c8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e105      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 800272e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ef      	bne.n	800271a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80f9 	beq.w	8002936 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 80cf 	bne.w	80028ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800274e:	4b52      	ldr	r3, [pc, #328]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	429a      	cmp	r2, r3
 8002760:	d12c      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	3b01      	subs	r3, #1
 800276e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d123      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d11b      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d113      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d109      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d071      	beq.n	80028a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d068      	beq.n	8002894 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c2:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0ac      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 80027e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ea:	f7fd ff6d 	bl	80006c8 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fd ff69 	bl	80006c8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e099      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x788>)
 8002816:	4013      	ands	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002820:	3a01      	subs	r2, #1
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282a:	0212      	lsls	r2, r2, #8
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002832:	0852      	lsrs	r2, r2, #1
 8002834:	3a01      	subs	r2, #1
 8002836:	0552      	lsls	r2, r2, #21
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	0652      	lsls	r2, r2, #25
 8002844:	4311      	orrs	r1, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800284a:	06d2      	lsls	r2, r2, #27
 800284c:	430a      	orrs	r2, r1
 800284e:	4912      	ldr	r1, [pc, #72]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002850:	4313      	orrs	r3, r2
 8002852:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800286c:	f7fd ff2c 	bl	80006c8 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fd ff28 	bl	80006c8 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e058      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002892:	e050      	b.n	8002936 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e04f      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
 8002898:	40021000 	.word	0x40021000
 800289c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d144      	bne.n	8002936 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028c4:	f7fd ff00 	bl	80006c8 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fd fefc 	bl	80006c8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e02c      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x7b8>
 80028ea:	e024      	b.n	8002936 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d01f      	beq.n	8002932 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 80028f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fd fee3 	bl	80006c8 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fd fedf 	bl	80006c8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e00f      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	4905      	ldr	r1, [pc, #20]	; (8002940 <HAL_RCC_OscConfig+0x82c>)
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x830>)
 800292c:	4013      	ands	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
 8002930:	e001      	b.n	8002936 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	feeefffc 	.word	0xfeeefffc

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e11d      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b90      	ldr	r3, [pc, #576]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d910      	bls.n	8002990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	498b      	ldr	r1, [pc, #556]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e105      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d908      	bls.n	80029be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b7e      	ldr	r3, [pc, #504]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	497b      	ldr	r1, [pc, #492]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d079      	beq.n	8002abe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d11e      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0dc      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80029e2:	f000 f9cf 	bl	8002d84 <RCC_GetSysClockFreqFromPLLSource>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4a70      	ldr	r2, [pc, #448]	; (8002bac <HAL_RCC_ClockConfig+0x264>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d946      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029ee:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d140      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029fa:	4b6b      	ldr	r3, [pc, #428]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a02:	4a69      	ldr	r2, [pc, #420]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e035      	b.n	8002a7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a18:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d115      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b9      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a30:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0ad      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0a5      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a50:	f000 f8b4 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a55      	ldr	r2, [pc, #340]	; (8002bac <HAL_RCC_ClockConfig+0x264>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d90f      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a68:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a70:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 0203 	bic.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4947      	ldr	r1, [pc, #284]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8e:	f7fd fe1b 	bl	80006c8 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fd fe17 	bl	80006c8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e077      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aac:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 020c 	and.w	r2, r3, #12
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d1eb      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a37      	ldr	r2, [pc, #220]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ace:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d208      	bcs.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	492b      	ldr	r1, [pc, #172]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d210      	bcs.n	8002b2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 020f 	bic.w	r2, r3, #15
 8002b14:	4923      	ldr	r1, [pc, #140]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e036      	b.n	8002b9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4918      	ldr	r1, [pc, #96]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4910      	ldr	r1, [pc, #64]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b6c:	f000 f826 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <HAL_RCC_ClockConfig+0x268>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x26c>)
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fd49 	bl	8000628 <HAL_InitTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	04c4b400 	.word	0x04c4b400
 8002bb0:	080039ac 	.word	0x080039ac
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d11e      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c34:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e004      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d134      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0xac>
 8002c60:	e005      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c6a:	617b      	str	r3, [r7, #20]
      break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	617b      	str	r3, [r7, #20]
      break;
 8002c72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3301      	adds	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	0e5b      	lsrs	r3, r3, #25
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	080039bc 	.word	0x080039bc
 8002ccc:	00f42400 	.word	0x00f42400

08002cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce8:	f7ff f950 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
 8002cec:	6178      	str	r0, [r7, #20]
 8002cee:	e014      	b.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d08:	f7ff f940 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
 8002d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d20:	d10b      	bne.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b80      	cmp	r3, #128	; 0x80
 8002d26:	d913      	bls.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d2c:	d902      	bls.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d2e:	2302      	movs	r3, #2
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e00d      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d34:	2301      	movs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e00a      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3e:	d902      	bls.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d40:	2302      	movs	r3, #2
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e004      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b70      	cmp	r3, #112	; 0x70
 8002d4a:	d101      	bne.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 020f 	bic.w	r2, r3, #15
 8002d58:	4909      	ldr	r1, [pc, #36]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40022000 	.word	0x40022000

08002d84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d00b      	beq.n	8002db2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d825      	bhi.n	8002dec <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d008      	beq.n	8002db8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11f      	bne.n	8002dec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dae:	613b      	str	r3, [r7, #16]
    break;
 8002db0:	e01f      	b.n	8002df2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002db4:	613b      	str	r3, [r7, #16]
    break;
 8002db6:	e01c      	b.n	8002df2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e005      	b.n	8002de0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	613b      	str	r3, [r7, #16]
    break;
 8002dea:	e002      	b.n	8002df2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
    break;
 8002df0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	fb03 f202 	mul.w	r2, r3, r2
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0e5b      	lsrs	r3, r3, #25
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e32:	683b      	ldr	r3, [r7, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	080039bc 	.word	0x080039bc

08002e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e54:	2300      	movs	r3, #0
 8002e56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e58:	2300      	movs	r3, #0
 8002e5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d040      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d02a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d825      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e74:	2b60      	cmp	r3, #96	; 0x60
 8002e76:	d026      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e78:	2b60      	cmp	r3, #96	; 0x60
 8002e7a:	d821      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d006      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d81d      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d010      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002e8c:	e018      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e8e:	4b89      	ldr	r3, [pc, #548]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	4a88      	ldr	r2, [pc, #544]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e9a:	e015      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fb62 	bl	800356c <RCCEx_PLLSAI1_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eac:	e00c      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3320      	adds	r3, #32
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fc4d 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebe:	e003      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	74fb      	strb	r3, [r7, #19]
      break;
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ece:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ed4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002edc:	4975      	ldr	r1, [pc, #468]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ee4:	e001      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d047      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	d030      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f04:	d82a      	bhi.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f0a:	d02a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f10:	d824      	bhi.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d81e      	bhi.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d010      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f28:	e018      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f2a:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4a61      	ldr	r2, [pc, #388]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f36:	e015      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb14 	bl	800356c <RCCEx_PLLSAI1_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f48:	e00c      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3320      	adds	r3, #32
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fbff 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e003      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	74fb      	strb	r3, [r7, #19]
      break;
 8002f60:	e000      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f6a:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	494e      	ldr	r1, [pc, #312]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f80:	e001      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 809f 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002fba:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd6:	f7fd fb77 	bl	80006c8 <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fdc:	e009      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7fd fb73 	bl	80006c8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d902      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	74fb      	strb	r3, [r7, #19]
        break;
 8002ff0:	e005      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ef      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d15b      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01f      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	429a      	cmp	r2, r3
 8003020:	d019      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800302e:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fd fb32 	bl	80006c8 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003066:	e00b      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fd fb2e 	bl	80006c8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d902      	bls.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	74fb      	strb	r3, [r7, #19]
            break;
 800307e:	e006      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ec      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10c      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a4:	4903      	ldr	r1, [pc, #12]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ac:	e008      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	74bb      	strb	r3, [r7, #18]
 80030b2:	e005      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c0:	7c7b      	ldrb	r3, [r7, #17]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4ba0      	ldr	r3, [pc, #640]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	4a9f      	ldr	r2, [pc, #636]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030de:	4b9a      	ldr	r3, [pc, #616]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 0203 	bic.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	4996      	ldr	r1, [pc, #600]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003100:	4b91      	ldr	r3, [pc, #580]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 020c 	bic.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	498e      	ldr	r1, [pc, #568]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	4985      	ldr	r1, [pc, #532]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003144:	4b80      	ldr	r3, [pc, #512]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	497d      	ldr	r1, [pc, #500]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003174:	4974      	ldr	r1, [pc, #464]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	496c      	ldr	r1, [pc, #432]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031aa:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	4963      	ldr	r1, [pc, #396]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031da:	495b      	ldr	r1, [pc, #364]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	4952      	ldr	r1, [pc, #328]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	494a      	ldr	r1, [pc, #296]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003232:	4b45      	ldr	r3, [pc, #276]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	4941      	ldr	r1, [pc, #260]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003254:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	4939      	ldr	r1, [pc, #228]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	4930      	ldr	r1, [pc, #192]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003294:	d106      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a0:	60d3      	str	r3, [r2, #12]
 80032a2:	e011      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f959 	bl	800356c <RCCEx_PLLSAI1_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d04d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032dc:	d108      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032ee:	e012      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80032f0:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f6:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330e:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331e:	d106      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332a:	60d3      	str	r3, [r2, #12]
 800332c:	e020      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003336:	d109      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a02      	ldr	r2, [pc, #8]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003342:	60d3      	str	r3, [r2, #12]
 8003344:	e014      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2101      	movs	r1, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f905 	bl	800356c <RCCEx_PLLSAI1_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d028      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800337c:	4b7a      	ldr	r3, [pc, #488]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	4977      	ldr	r1, [pc, #476]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339a:	d106      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b72      	ldr	r3, [pc, #456]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
 80033a8:	e011      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b2:	d10c      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f8d6 	bl	800356c <RCCEx_PLLSAI1_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01e      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ea:	495f      	ldr	r1, [pc, #380]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f8b1 	bl	800356c <RCCEx_PLLSAI1_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003424:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342a:	f023 0204 	bic.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	494c      	ldr	r1, [pc, #304]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344e:	f023 0218 	bic.w	r2, r3, #24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	4943      	ldr	r1, [pc, #268]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d035      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800346c:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fd f926 	bl	80006c8 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800347e:	e009      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003480:	f7fd f922 	bl	80006c8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d902      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	74fb      	strb	r3, [r7, #19]
        break;
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ef      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d113      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b6:	492c      	ldr	r1, [pc, #176]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3320      	adds	r3, #32
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f945 	bl	8003754 <RCCEx_PLLSAI2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01e      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	491c      	ldr	r1, [pc, #112]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d10c      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3320      	adds	r3, #32
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f920 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003550:	d105      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800355e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000

0800356c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003586:	4b6f      	ldr	r3, [pc, #444]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0203 	and.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d103      	bne.n	800359e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
       ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d142      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e03f      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d018      	beq.n	80035de <RCCEx_PLLSAI1_Config+0x72>
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d825      	bhi.n	80035fc <RCCEx_PLLSAI1_Config+0x90>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d002      	beq.n	80035ba <RCCEx_PLLSAI1_Config+0x4e>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d009      	beq.n	80035cc <RCCEx_PLLSAI1_Config+0x60>
 80035b8:	e020      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ba:	4b62      	ldr	r3, [pc, #392]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11d      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ca:	e01a      	b.n	8003602 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035cc:	4b5d      	ldr	r3, [pc, #372]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035dc:	e013      	b.n	8003606 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035de:	4b59      	ldr	r3, [pc, #356]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ea:	4b56      	ldr	r3, [pc, #344]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035fa:	e006      	b.n	800360a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e004      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800360a:	bf00      	nop
    }

    if(status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d108      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003612:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4949      	ldr	r1, [pc, #292]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8086 	bne.w	8003738 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800362c:	4b45      	ldr	r3, [pc, #276]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a44      	ldr	r2, [pc, #272]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd f846 	bl	80006c8 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fd f842 	bl	80006c8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
        break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ef      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d168      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d113      	bne.n	8003694 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003672:	4013      	ands	r3, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	06d2      	lsls	r2, r2, #27
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6852      	ldr	r2, [r2, #4]
 8003686:	3a01      	subs	r2, #1
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	430a      	orrs	r2, r1
 800368c:	492d      	ldr	r1, [pc, #180]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]
 8003692:	e02d      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d115      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800369a:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	0211      	lsls	r1, r2, #8
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6912      	ldr	r2, [r2, #16]
 80036ac:	0852      	lsrs	r2, r2, #1
 80036ae:	3a01      	subs	r2, #1
 80036b0:	0552      	lsls	r2, r2, #21
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6852      	ldr	r2, [r2, #4]
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	430a      	orrs	r2, r1
 80036be:	4921      	ldr	r1, [pc, #132]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
 80036c4:	e014      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	4b21      	ldr	r3, [pc, #132]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	0211      	lsls	r1, r2, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6952      	ldr	r2, [r2, #20]
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0652      	lsls	r2, r2, #25
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6852      	ldr	r2, [r2, #4]
 80036e4:	3a01      	subs	r2, #1
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4916      	ldr	r1, [pc, #88]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fc ffe4 	bl	80006c8 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003704:	f7fc ffe0 	bl	80006c8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
          break;
 8003716:	e005      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	4904      	ldr	r1, [pc, #16]	; (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	07ff800f 	.word	0x07ff800f
 800374c:	ff9f800f 	.word	0xff9f800f
 8003750:	f9ff800f 	.word	0xf9ff800f

08003754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003762:	4b72      	ldr	r3, [pc, #456]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800376e:	4b6f      	ldr	r3, [pc, #444]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d103      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
       ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d142      	bne.n	800380c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	e03f      	b.n	800380c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d018      	beq.n	80037c6 <RCCEx_PLLSAI2_Config+0x72>
 8003794:	2b03      	cmp	r3, #3
 8003796:	d825      	bhi.n	80037e4 <RCCEx_PLLSAI2_Config+0x90>
 8003798:	2b01      	cmp	r3, #1
 800379a:	d002      	beq.n	80037a2 <RCCEx_PLLSAI2_Config+0x4e>
 800379c:	2b02      	cmp	r3, #2
 800379e:	d009      	beq.n	80037b4 <RCCEx_PLLSAI2_Config+0x60>
 80037a0:	e020      	b.n	80037e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037a2:	4b62      	ldr	r3, [pc, #392]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11d      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b2:	e01a      	b.n	80037ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b4:	4b5d      	ldr	r3, [pc, #372]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c4:	e013      	b.n	80037ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c6:	4b59      	ldr	r3, [pc, #356]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d2:	4b56      	ldr	r3, [pc, #344]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037e2:	e006      	b.n	80037f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      break;
 80037e8:	e004      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d108      	bne.n	800380c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80037fa:	4b4c      	ldr	r3, [pc, #304]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4949      	ldr	r1, [pc, #292]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8086 	bne.w	8003920 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003814:	4b45      	ldr	r3, [pc, #276]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a44      	ldr	r2, [pc, #272]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fc ff52 	bl	80006c8 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003826:	e009      	b.n	800383c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003828:	f7fc ff4e 	bl	80006c8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	73fb      	strb	r3, [r7, #15]
        break;
 800383a:	e005      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800383c:	4b3b      	ldr	r3, [pc, #236]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ef      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d168      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d113      	bne.n	800387c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	4b35      	ldr	r3, [pc, #212]	; (8003930 <RCCEx_PLLSAI2_Config+0x1dc>)
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	06d2      	lsls	r2, r2, #27
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6852      	ldr	r2, [r2, #4]
 800386e:	3a01      	subs	r2, #1
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	492d      	ldr	r1, [pc, #180]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	614b      	str	r3, [r1, #20]
 800387a:	e02d      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d115      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6892      	ldr	r2, [r2, #8]
 800388e:	0211      	lsls	r1, r2, #8
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6912      	ldr	r2, [r2, #16]
 8003894:	0852      	lsrs	r2, r2, #1
 8003896:	3a01      	subs	r2, #1
 8003898:	0552      	lsls	r2, r2, #21
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	430a      	orrs	r2, r1
 80038a6:	4921      	ldr	r1, [pc, #132]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	614b      	str	r3, [r1, #20]
 80038ac:	e014      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <RCCEx_PLLSAI2_Config+0x1e4>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	0211      	lsls	r1, r2, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6952      	ldr	r2, [r2, #20]
 80038c0:	0852      	lsrs	r2, r2, #1
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0652      	lsls	r2, r2, #25
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	430a      	orrs	r2, r1
 80038d2:	4916      	ldr	r1, [pc, #88]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fc fef0 	bl	80006c8 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ec:	f7fc feec 	bl	80006c8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
          break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4904      	ldr	r1, [pc, #16]	; (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	07ff800f 	.word	0x07ff800f
 8003934:	ff9f800f 	.word	0xff9f800f
 8003938:	f9ff800f 	.word	0xf9ff800f

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4d0d      	ldr	r5, [pc, #52]	; (8003974 <__libc_init_array+0x38>)
 8003940:	4c0d      	ldr	r4, [pc, #52]	; (8003978 <__libc_init_array+0x3c>)
 8003942:	1b64      	subs	r4, r4, r5
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	2600      	movs	r6, #0
 8003948:	42a6      	cmp	r6, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	4d0b      	ldr	r5, [pc, #44]	; (800397c <__libc_init_array+0x40>)
 800394e:	4c0c      	ldr	r4, [pc, #48]	; (8003980 <__libc_init_array+0x44>)
 8003950:	f000 f820 	bl	8003994 <_init>
 8003954:	1b64      	subs	r4, r4, r5
 8003956:	10a4      	asrs	r4, r4, #2
 8003958:	2600      	movs	r6, #0
 800395a:	42a6      	cmp	r6, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	f855 3b04 	ldr.w	r3, [r5], #4
 8003964:	4798      	blx	r3
 8003966:	3601      	adds	r6, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	f855 3b04 	ldr.w	r3, [r5], #4
 800396e:	4798      	blx	r3
 8003970:	3601      	adds	r6, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	080039ec 	.word	0x080039ec
 8003978:	080039ec 	.word	0x080039ec
 800397c:	080039ec 	.word	0x080039ec
 8003980:	080039f0 	.word	0x080039f0

08003984 <memset>:
 8003984:	4402      	add	r2, r0
 8003986:	4603      	mov	r3, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	d100      	bne.n	800398e <memset+0xa>
 800398c:	4770      	bx	lr
 800398e:	f803 1b01 	strb.w	r1, [r3], #1
 8003992:	e7f9      	b.n	8003988 <memset+0x4>

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
