
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d320  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d62c  0800d62c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d62c  0800d62c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d62c  0800d62c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d630  0800d630  0001d630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d48  20000074  0800d6a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001dbc  0800d6a8  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1e4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058d7  00000000  00000000  0004d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002590  00000000  00000000  00052b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002328  00000000  00000000  000550f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000387a0  00000000  00000000  00057418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c42a  00000000  00000000  0008fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014fd0d  00000000  00000000  000bbfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020bcef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2e4  00000000  00000000  0020bd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d4c8 	.word	0x0800d4c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800d4c8 	.word	0x0800d4c8

08000200 <ADC_Init>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//initialize ADC thread
void ADC_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <ADC_Init+0x28>)
 8000206:	2101      	movs	r1, #1
 8000208:	2001      	movs	r0, #1
 800020a:	f009 fd59 	bl	8009cc0 <osSemaphoreNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ADC_Init+0x2c>)
 8000212:	6013      	str	r3, [r2, #0]
	thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <ADC_Init+0x30>)
 8000216:	4907      	ldr	r1, [pc, #28]	; (8000234 <ADC_Init+0x34>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ADC_Init+0x38>)
 800021a:	f009 fca4 	bl	8009b66 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <ADC_Init+0x3c>)
 8000222:	6013      	str	r3, [r2, #0]

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800d518 	.word	0x0800d518
 800022c:	200000ac 	.word	0x200000ac
 8000230:	0800d528 	.word	0x0800d528
 8000234:	20000104 	.word	0x20000104
 8000238:	080002b5 	.word	0x080002b5
 800023c:	20000100 	.word	0x20000100

08000240 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e01d      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000256:	4619      	mov	r1, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3303      	adds	r3, #3
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	440b      	add	r3, r1
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	3206      	adds	r2, #6
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800026a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026e:	4413      	add	r3, r2
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b299      	uxth	r1, r3
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b02      	cmp	r3, #2
 800028e:	ddde      	ble.n	800024e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f009 fdef 	bl	8009e78 <osSemaphoreRelease>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000090 	.word	0x20000090
 80002a8:	55555556 	.word	0x55555556
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <ADC_collect>:

//collect raw adc data through the DMA
void ADC_collect(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	memset(ADC_buffer_raw, 0, sizeof(ADC_buffer_raw));
 80002c0:	2212      	movs	r2, #18
 80002c2:	2100      	movs	r1, #0
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <ADC_collect+0x38>)
 80002c6:	f00d f835 	bl	800d334 <memset>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 80002ca:	2209      	movs	r2, #9
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <ADC_collect+0x38>)
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f001 fcb2 	bl	8001c38 <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <ADC_collect+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002dc:	4618      	mov	r0, r3
 80002de:	f009 fd79 	bl	8009dd4 <osSemaphoreAcquire>
	  // process adc buffer good

    osDelay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f009 fcd1 	bl	8009c8a <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002e8:	e7f4      	b.n	80002d4 <ADC_collect+0x20>
 80002ea:	bf00      	nop
 80002ec:	20000090 	.word	0x20000090
 80002f0:	200000ac 	.word	0x200000ac

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f001 f907 	bl	800150a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f828 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 fa62 	bl	80007c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000304:	f000 f9d0 	bl	80006a8 <MX_DMA_Init>
  MX_FMC_Init();
 8000308:	f000 f9f8 	bl	80006fc <MX_FMC_Init>
  MX_I2C1_Init();
 800030c:	f000 f92c 	bl	8000568 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000310:	f000 f96a 	bl	80005e8 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000314:	f000 f98a 	bl	800062c <MX_SPI2_Init>
  MX_CAN1_Init();
 8000318:	f000 f8f0 	bl	80004fc <MX_CAN1_Init>
  MX_ADC1_Init();
 800031c:	f000 f866 	bl	80003ec <MX_ADC1_Init>
  MX_FATFS_Init();
 8000320:	f009 f8a2 	bl	8009468 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000324:	f009 fb9e 	bl	8009a64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000328:	4a06      	ldr	r2, [pc, #24]	; (8000344 <main+0x50>)
 800032a:	2100      	movs	r1, #0
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0x54>)
 800032e:	f009 fc1a 	bl	8009b66 <osThreadNew>
 8000332:	4603      	mov	r3, r0
 8000334:	4a05      	ldr	r2, [pc, #20]	; (800034c <main+0x58>)
 8000336:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init();
 8000338:	f7ff ff62 	bl	8000200 <ADC_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800033c:	f009 fbd8 	bl	8009af0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000340:	e7fe      	b.n	8000340 <main+0x4c>
 8000342:	bf00      	nop
 8000344:	0800d54c 	.word	0x0800d54c
 8000348:	08000c65 	.word	0x08000c65
 800034c:	2000037c 	.word	0x2000037c

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	; 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2244      	movs	r2, #68	; 0x44
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f00c ffe8 	bl	800d334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000372:	2000      	movs	r0, #0
 8000374:	f003 fb56 	bl	8003a24 <HAL_PWREx_ControlVoltageScaling>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800037e:	f000 fc8b 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000382:	2301      	movs	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000390:	2303      	movs	r3, #3
 8000392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000394:	2302      	movs	r3, #2
 8000396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000398:	231e      	movs	r3, #30
 800039a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800039c:	2302      	movs	r3, #2
 800039e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fbed 	bl	8003b8c <HAL_RCC_OscConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003b8:	f000 fc6e 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003bc:	230f      	movs	r3, #15
 80003be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c0:	2303      	movs	r3, #3
 80003c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003d0:	463b      	mov	r3, r7
 80003d2:	2105      	movs	r1, #5
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 fff3 	bl	80043c0 <HAL_RCC_ClockConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003e0:	f000 fc5a 	bl	8000c98 <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3758      	adds	r7, #88	; 0x58
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	463b      	mov	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
 8000400:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000402:	4b39      	ldr	r3, [pc, #228]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000404:	4a39      	ldr	r2, [pc, #228]	; (80004ec <MX_ADC1_Init+0x100>)
 8000406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000408:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800040a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800040e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000410:	4b35      	ldr	r3, [pc, #212]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000416:	4b34      	ldr	r3, [pc, #208]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800041c:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800041e:	2201      	movs	r2, #1
 8000420:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000424:	2204      	movs	r2, #4
 8000426:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000428:	4b2f      	ldr	r3, [pc, #188]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800042a:	2200      	movs	r2, #0
 800042c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800042e:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000430:	2201      	movs	r2, #1
 8000432:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000434:	4b2c      	ldr	r3, [pc, #176]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000436:	2203      	movs	r2, #3
 8000438:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000444:	2200      	movs	r2, #0
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000448:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800044a:	2200      	movs	r2, #0
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000450:	2201      	movs	r2, #1
 8000452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000458:	2200      	movs	r2, #0
 800045a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800045e:	2200      	movs	r2, #0
 8000460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000466:	2204      	movs	r2, #4
 8000468:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046a:	481f      	ldr	r0, [pc, #124]	; (80004e8 <MX_ADC1_Init+0xfc>)
 800046c:	f001 fa98 	bl	80019a0 <HAL_ADC_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000476:	f000 fc0f 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <MX_ADC1_Init+0x104>)
 800047c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800047e:	2306      	movs	r3, #6
 8000480:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000482:	2305      	movs	r3, #5
 8000484:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000486:	237f      	movs	r3, #127	; 0x7f
 8000488:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048a:	2304      	movs	r3, #4
 800048c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000492:	463b      	mov	r3, r7
 8000494:	4619      	mov	r1, r3
 8000496:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_ADC1_Init+0xfc>)
 8000498:	f001 fe24 	bl	80020e4 <HAL_ADC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004a2:	f000 fbf9 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_ADC1_Init+0x108>)
 80004a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004aa:	230c      	movs	r3, #12
 80004ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	463b      	mov	r3, r7
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <MX_ADC1_Init+0xfc>)
 80004b4:	f001 fe16 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80004be:	f000 fbeb 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <MX_ADC1_Init+0x10c>)
 80004c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004c6:	2312      	movs	r3, #18
 80004c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ca:	463b      	mov	r3, r7
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	; (80004e8 <MX_ADC1_Init+0xfc>)
 80004d0:	f001 fe08 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80004da:	f000 fbdd 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000104 	.word	0x20000104
 80004ec:	50040000 	.word	0x50040000
 80004f0:	14f00020 	.word	0x14f00020
 80004f4:	19200040 	.word	0x19200040
 80004f8:	1d500080 	.word	0x1d500080

080004fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_CAN1_Init+0x64>)
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <MX_CAN1_Init+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_CAN1_Init+0x64>)
 8000508:	2214      	movs	r2, #20
 800050a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_CAN1_Init+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_CAN1_Init+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_CAN1_Init+0x64>)
 800051a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800051e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_CAN1_Init+0x64>)
 8000522:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000526:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_CAN1_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_CAN1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_CAN1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_CAN1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_CAN1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_CAN1_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_CAN1_Init+0x64>)
 800054e:	f002 fb11 	bl	8002b74 <HAL_CAN_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000558:	f000 fb9e 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200001cc 	.word	0x200001cc
 8000564:	40006400 	.word	0x40006400

08000568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_I2C1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <MX_I2C1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_I2C1_Init+0x74>)
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <MX_I2C1_Init+0x7c>)
 8000576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_I2C1_Init+0x74>)
 8000580:	2201      	movs	r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_I2C1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <MX_I2C1_Init+0x74>)
 80005a4:	f003 f8f8 	bl	8003798 <HAL_I2C_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ae:	f000 fb73 	bl	8000c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <MX_I2C1_Init+0x74>)
 80005b6:	f003 f97e 	bl	80038b6 <HAL_I2CEx_ConfigAnalogFilter>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 fb6a 	bl	8000c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c4:	2100      	movs	r1, #0
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_I2C1_Init+0x74>)
 80005c8:	f003 f9c0 	bl	800394c <HAL_I2CEx_ConfigDigitalFilter>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005d2:	f000 fb61 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200001f4 	.word	0x200001f4
 80005e0:	40005400 	.word	0x40005400
 80005e4:	307075b1 	.word	0x307075b1

080005e8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <MX_SDMMC1_SD_Init+0x40>)
 80005f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 8000600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000604:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000248 	.word	0x20000248
 8000628:	50062400 	.word	0x50062400

0800062c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_SPI2_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800063c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800064a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_SPI2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_SPI2_Init+0x74>)
 800065a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000662:	2208      	movs	r2, #8
 8000664:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_SPI2_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_SPI2_Init+0x74>)
 800067a:	2207      	movs	r2, #7
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_SPI2_Init+0x74>)
 8000686:	2208      	movs	r2, #8
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_SPI2_Init+0x74>)
 800068c:	f007 fc23 	bl	8007ed6 <HAL_SPI_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 faff 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200002c8 	.word	0x200002c8
 80006a4:	40003800 	.word	0x40003800

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_DMA_Init+0x50>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <MX_DMA_Init+0x50>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_DMA_Init+0x50>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_DMA_Init+0x50>)
 80006c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <MX_DMA_Init+0x50>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6493      	str	r3, [r2, #72]	; 0x48
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_DMA_Init+0x50>)
 80006d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2105      	movs	r1, #5
 80006e2:	200b      	movs	r0, #11
 80006e4:	f002 fbfa 	bl	8002edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e8:	200b      	movs	r0, #11
 80006ea:	f002 fc13 	bl	8002f14 <HAL_NVIC_EnableIRQ>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00c fe13 	bl	800d334 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000710:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000714:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000718:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <MX_FMC_Init+0xc8>)
 800071a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_FMC_Init+0xc4>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_FMC_Init+0xc4>)
 800072a:	2204      	movs	r2, #4
 800072c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000730:	2210      	movs	r2, #16
 8000732:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_FMC_Init+0xc4>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_FMC_Init+0xc4>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_FMC_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000764:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_FMC_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_FMC_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_FMC_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000786:	230f      	movs	r3, #15
 8000788:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800078a:	23ff      	movs	r3, #255	; 0xff
 800078c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000792:	230f      	movs	r3, #15
 8000794:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000796:	2310      	movs	r3, #16
 8000798:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_FMC_Init+0xc4>)
 80007aa:	f007 fc37 	bl	800801c <HAL_SRAM_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80007b4:	f000 fa70 	bl	8000c98 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000032c 	.word	0x2000032c
 80007c4:	a0000104 	.word	0xa0000104

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007de:	4bb2      	ldr	r3, [pc, #712]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4ab1      	ldr	r2, [pc, #708]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80007e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4baf      	ldr	r3, [pc, #700]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4bac      	ldr	r3, [pc, #688]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4aab      	ldr	r2, [pc, #684]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4ba9      	ldr	r3, [pc, #676]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	4ba6      	ldr	r3, [pc, #664]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4aa5      	ldr	r2, [pc, #660]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4ba3      	ldr	r3, [pc, #652]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4ba0      	ldr	r3, [pc, #640]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a9f      	ldr	r2, [pc, #636]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b9d      	ldr	r3, [pc, #628]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b9a      	ldr	r3, [pc, #616]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a99      	ldr	r2, [pc, #612]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	4b94      	ldr	r3, [pc, #592]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a93      	ldr	r2, [pc, #588]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b91      	ldr	r3, [pc, #580]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800086e:	f003 f97d 	bl	8003b6c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b8d      	ldr	r3, [pc, #564]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a8c      	ldr	r2, [pc, #560]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b8a      	ldr	r3, [pc, #552]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b87      	ldr	r3, [pc, #540]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a86      	ldr	r2, [pc, #536]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b84      	ldr	r3, [pc, #528]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b81      	ldr	r3, [pc, #516]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a80      	ldr	r2, [pc, #512]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b7e      	ldr	r3, [pc, #504]	; (8000aa8 <MX_GPIO_Init+0x2e0>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f244 0114 	movw	r1, #16404	; 0x4014
 80008c0:	487a      	ldr	r0, [pc, #488]	; (8000aac <MX_GPIO_Init+0x2e4>)
 80008c2:	f002 ff51 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4878      	ldr	r0, [pc, #480]	; (8000ab0 <MX_GPIO_Init+0x2e8>)
 80008ce:	f002 ff4b 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f002 ff45 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2104      	movs	r1, #4
 80008e2:	4874      	ldr	r0, [pc, #464]	; (8000ab4 <MX_GPIO_Init+0x2ec>)
 80008e4:	f002 ff40 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80008e8:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80008fa:	2305      	movs	r3, #5
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	486c      	ldr	r0, [pc, #432]	; (8000ab8 <MX_GPIO_Init+0x2f0>)
 8000906:	f002 fd85 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800090a:	f244 0314 	movw	r3, #16404	; 0x4014
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4862      	ldr	r0, [pc, #392]	; (8000aac <MX_GPIO_Init+0x2e4>)
 8000924:	f002 fd76 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000928:	2310      	movs	r3, #16
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000938:	2302      	movs	r3, #2
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	485c      	ldr	r0, [pc, #368]	; (8000ab4 <MX_GPIO_Init+0x2ec>)
 8000944:	f002 fd66 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095a:	2307      	movs	r3, #7
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f002 fd54 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800096c:	23b0      	movs	r3, #176	; 0xb0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800097c:	230a      	movs	r3, #10
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	484c      	ldr	r0, [pc, #304]	; (8000ab8 <MX_GPIO_Init+0x2f0>)
 8000988:	f002 fd44 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800098c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800099e:	230d      	movs	r3, #13
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4842      	ldr	r0, [pc, #264]	; (8000ab4 <MX_GPIO_Init+0x2ec>)
 80009aa:	f002 fd33 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80009ae:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80009c0:	2305      	movs	r3, #5
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	483c      	ldr	r0, [pc, #240]	; (8000abc <MX_GPIO_Init+0x2f4>)
 80009cc:	f002 fd22 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4834      	ldr	r0, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x2f0>)
 80009e6:	f002 fd15 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80009ea:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009fc:	230a      	movs	r3, #10
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4829      	ldr	r0, [pc, #164]	; (8000aac <MX_GPIO_Init+0x2e4>)
 8000a08:	f002 fd04 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4820      	ldr	r0, [pc, #128]	; (8000aac <MX_GPIO_Init+0x2e4>)
 8000a2a:	f002 fcf3 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a2e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a40:	2305      	movs	r3, #5
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_GPIO_Init+0x2e4>)
 8000a4c:	f002 fce2 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a60:	230d      	movs	r3, #13
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <MX_GPIO_Init+0x2f8>)
 8000a6c:	f002 fcd2 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a82:	230a      	movs	r3, #10
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f002 fcc0 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8000aa6:	e00d      	b.n	8000ac4 <MX_GPIO_Init+0x2fc>
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48001c00 	.word	0x48001c00
 8000ab0:	48000800 	.word	0x48000800
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48002000 	.word	0x48002000
 8000abc:	48001800 	.word	0x48001800
 8000ac0:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4862      	ldr	r0, [pc, #392]	; (8000c54 <MX_GPIO_Init+0x48c>)
 8000acc:	f002 fca2 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000ad0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	485a      	ldr	r0, [pc, #360]	; (8000c58 <MX_GPIO_Init+0x490>)
 8000aee:	f002 fc91 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4853      	ldr	r0, [pc, #332]	; (8000c54 <MX_GPIO_Init+0x48c>)
 8000b08:	f002 fc84 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000b0c:	2384      	movs	r3, #132	; 0x84
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	484b      	ldr	r0, [pc, #300]	; (8000c54 <MX_GPIO_Init+0x48c>)
 8000b28:	f002 fc74 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4844      	ldr	r0, [pc, #272]	; (8000c5c <MX_GPIO_Init+0x494>)
 8000b4a:	f002 fc63 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	483a      	ldr	r0, [pc, #232]	; (8000c54 <MX_GPIO_Init+0x48c>)
 8000b6a:	f002 fc53 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f002 fc46 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b88:	2340      	movs	r3, #64	; 0x40
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f002 fc37 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f002 fc26 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	481e      	ldr	r0, [pc, #120]	; (8000c60 <MX_GPIO_Init+0x498>)
 8000be6:	f002 fc15 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000bea:	2310      	movs	r3, #16
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f002 fc04 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <MX_GPIO_Init+0x494>)
 8000c24:	f002 fbf6 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_GPIO_Init+0x494>)
 8000c46:	f002 fbe5 	bl	8003414 <HAL_GPIO_Init>

}
 8000c4a:	bf00      	nop
 8000c4c:	3738      	adds	r7, #56	; 0x38
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48001800 	.word	0x48001800
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48001400 	.word	0x48001400

08000c64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f009 f80c 	bl	8009c8a <osDelay>
 8000c72:	e7fb      	b.n	8000c6c <StartDefaultTask+0x8>

08000c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c86:	f000 fc59 	bl	800153c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40001000 	.word	0x40001000

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	210f      	movs	r1, #15
 8000cde:	f06f 0001 	mvn.w	r0, #1
 8000ce2:	f002 f8fb 	bl	8002edc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0b2      	sub	sp, #200	; 0xc8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	229c      	movs	r2, #156	; 0x9c
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f00c fb0d 	bl	800d334 <memset>
  if(hadc->Instance==ADC1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a5c      	ldr	r2, [pc, #368]	; (8000e90 <HAL_ADC_MspInit+0x19c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	f040 80b1 	bne.w	8000e88 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d34:	2303      	movs	r3, #3
 8000d36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 fe1e 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000d62:	f7ff ff99 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d66:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a4a      	ldr	r2, [pc, #296]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a3e      	ldr	r2, [pc, #248]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <HAL_ADC_MspInit+0x1a0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000dc6:	2318      	movs	r3, #24
 8000dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dcc:	230b      	movs	r3, #11
 8000dce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <HAL_ADC_MspInit+0x1a4>)
 8000de0:	f002 fb18 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000de4:	2387      	movs	r3, #135	; 0x87
 8000de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dea:	230b      	movs	r3, #11
 8000dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f002 fb08 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	481f      	ldr	r0, [pc, #124]	; (8000e9c <HAL_ADC_MspInit+0x1a8>)
 8000e1e:	f002 faf9 	bl	8003414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_ADC_MspInit+0x1b0>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e52:	2220      	movs	r2, #32
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e5e:	f002 f867 	bl	8002f30 <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000e68:	f7ff ff16 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e70:	651a      	str	r2, [r3, #80]	; 0x50
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_ADC_MspInit+0x1ac>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	2012      	movs	r0, #18
 8000e7e:	f002 f82d 	bl	8002edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e82:	2012      	movs	r0, #18
 8000e84:	f002 f846 	bl	8002f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	37c8      	adds	r7, #200	; 0xc8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	50040000 	.word	0x50040000
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	2000016c 	.word	0x2000016c
 8000ea4:	40020008 	.word	0x40020008

08000ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_CAN_MspInit+0x80>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d129      	bne.n	8000f1e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_CAN_MspInit+0x84>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_CAN_MspInit+0x84>)
 8000ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_CAN_MspInit+0x84>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_CAN_MspInit+0x84>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <HAL_CAN_MspInit+0x84>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_CAN_MspInit+0x84>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000efa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f002 fa7b 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40006400 	.word	0x40006400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0b2      	sub	sp, #200	; 0xc8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	229c      	movs	r2, #156	; 0x9c
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c f9ef 	bl	800d334 <memset>
  if(hi2c->Instance==I2C1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a33      	ldr	r2, [pc, #204]	; (8001028 <HAL_I2C_MspInit+0xf8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d15e      	bne.n	800101e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f60:	2340      	movs	r3, #64	; 0x40
 8000f62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fd13 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f78:	f7ff fe8e 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a24      	ldr	r2, [pc, #144]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8000f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fac:	f002 fdde 	bl	8003b6c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fb0:	2340      	movs	r3, #64	; 0x40
 8000fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <HAL_I2C_MspInit+0x100>)
 8000fd6:	f002 fa1d 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <HAL_I2C_MspInit+0x104>)
 8001002:	f002 fa07 	bl	8003414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_I2C_MspInit+0xfc>)
 800100c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001010:	6593      	str	r3, [r2, #88]	; 0x58
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_I2C_MspInit+0xfc>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	37c8      	adds	r7, #200	; 0xc8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400
 800102c:	40021000 	.word	0x40021000
 8001030:	48000400 	.word	0x48000400
 8001034:	48001800 	.word	0x48001800

08001038 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0b2      	sub	sp, #200	; 0xc8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	229c      	movs	r2, #156	; 0x9c
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00c f96b 	bl	800d334 <memset>
  if(hsd->Instance==SDMMC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a37      	ldr	r2, [pc, #220]	; (8001140 <HAL_SD_MspInit+0x108>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d167      	bne.n	8001138 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001068:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800106c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800106e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fc8c 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001086:	f7ff fe07 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_SD_MspInit+0x10c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <HAL_SD_MspInit+0x10c>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_SD_MspInit+0x10c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_SD_MspInit+0x10c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_SD_MspInit+0x10c>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_SD_MspInit+0x10c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_SD_MspInit+0x10c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HAL_SD_MspInit+0x10c>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_SD_MspInit+0x10c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010d2:	2304      	movs	r3, #4
 80010d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ea:	230c      	movs	r3, #12
 80010ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <HAL_SD_MspInit+0x110>)
 80010f8:	f002 f98c 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80010fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001116:	230c      	movs	r3, #12
 8001118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001120:	4619      	mov	r1, r3
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <HAL_SD_MspInit+0x114>)
 8001124:	f002 f976 	bl	8003414 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2105      	movs	r1, #5
 800112c:	2031      	movs	r0, #49	; 0x31
 800112e:	f001 fed5 	bl	8002edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001132:	2031      	movs	r0, #49	; 0x31
 8001134:	f001 feee 	bl	8002f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	37c8      	adds	r7, #200	; 0xc8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	50062400 	.word	0x50062400
 8001144:	40021000 	.word	0x40021000
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48000800 	.word	0x48000800

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <HAL_SPI_MspInit+0xb4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d144      	bne.n	80011fc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_SPI_MspInit+0xb8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ca:	2305      	movs	r3, #5
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <HAL_SPI_MspInit+0xbc>)
 80011d6:	f002 f91d 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80011da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ec:	2305      	movs	r3, #5
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <HAL_SPI_MspInit+0xc0>)
 80011f8:	f002 f90c 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40003800 	.word	0x40003800
 8001208:	40021000 	.word	0x40021000
 800120c:	48002000 	.word	0x48002000
 8001210:	48000400 	.word	0x48000400

08001214 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_FMC_MspInit+0xe0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d15d      	bne.n	80012ec <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_FMC_MspInit+0xe0>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_FMC_MspInit+0xe4>)
 8001238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123a:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <HAL_FMC_MspInit+0xe4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6513      	str	r3, [r2, #80]	; 0x50
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_FMC_MspInit+0xe4>)
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800124e:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001252:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001260:	230c      	movs	r3, #12
 8001262:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4824      	ldr	r0, [pc, #144]	; (80012fc <HAL_FMC_MspInit+0xe8>)
 800126a:	f002 f8d3 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800126e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001272:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	481d      	ldr	r0, [pc, #116]	; (8001300 <HAL_FMC_MspInit+0xec>)
 800128a:	f002 f8c3 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129e:	230c      	movs	r3, #12
 80012a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <HAL_FMC_MspInit+0xf0>)
 80012a8:	f002 f8b4 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80012ac:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80012b0:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012be:	230c      	movs	r3, #12
 80012c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <HAL_FMC_MspInit+0xf4>)
 80012c8:	f002 f8a4 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80012cc:	233f      	movs	r3, #63	; 0x3f
 80012ce:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012dc:	230c      	movs	r3, #12
 80012de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <HAL_FMC_MspInit+0xf8>)
 80012e6:	f002 f895 	bl	8003414 <HAL_GPIO_Init>
 80012ea:	e000      	b.n	80012ee <HAL_FMC_MspInit+0xda>
    return;
 80012ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000380 	.word	0x20000380
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48001000 	.word	0x48001000
 8001300:	48000c00 	.word	0x48000c00
 8001304:	48000400 	.word	0x48000400
 8001308:	48001400 	.word	0x48001400
 800130c:	48001800 	.word	0x48001800

08001310 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001318:	f7ff ff7c 	bl	8001214 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_InitTick+0xe0>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_InitTick+0xe0>)
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <HAL_InitTick+0xe0>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800134a:	f107 0210 	add.w	r2, r7, #16
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fa2f 	bl	80047b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001364:	f003 f9fc 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8001368:	6378      	str	r0, [r7, #52]	; 0x34
 800136a:	e004      	b.n	8001376 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800136c:	f003 f9f8 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8001370:	4603      	mov	r3, r0
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <HAL_InitTick+0xe4>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3b01      	subs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_InitTick+0xe8>)
 8001386:	4a22      	ldr	r2, [pc, #136]	; (8001410 <HAL_InitTick+0xec>)
 8001388:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_InitTick+0xe8>)
 800138c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001390:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_InitTick+0xe8>)
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_InitTick+0xe8>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_InitTick+0xe8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_InitTick+0xe8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <HAL_InitTick+0xe8>)
 80013ac:	f006 fe7e 	bl	80080ac <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d11b      	bne.n	80013f6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <HAL_InitTick+0xe8>)
 80013c0:	f006 fed6 	bl	8008170 <HAL_TIM_Base_Start_IT>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d111      	bne.n	80013f6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013d2:	2036      	movs	r0, #54	; 0x36
 80013d4:	f001 fd9e 	bl	8002f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d808      	bhi.n	80013f0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013de:	2200      	movs	r2, #0
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	2036      	movs	r0, #54	; 0x36
 80013e4:	f001 fd7a 	bl	8002edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_InitTick+0xf0>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e002      	b.n	80013f6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	431bde83 	.word	0x431bde83
 800140c:	20000384 	.word	0x20000384
 8001410:	40001000 	.word	0x40001000
 8001414:	20000004 	.word	0x20000004

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA1_Channel1_IRQHandler+0x10>)
 800144a:	f001 fe94 	bl	8003176 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000016c 	.word	0x2000016c

08001458 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <ADC1_IRQHandler+0x10>)
 800145e:	f000 fc6f 	bl	8001d40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000104 	.word	0x20000104

0800146c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <SDMMC1_IRQHandler+0x10>)
 8001472:	f005 fab3 	bl	80069dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000248 	.word	0x20000248

08001480 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM6_DAC_IRQHandler+0x10>)
 8001486:	f006 fee3 	bl	8008250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000384 	.word	0x20000384

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffea 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f00b fef1 	bl	800d2cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7fe ff03 	bl	80002f4 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014fc:	0800d634 	.word	0x0800d634
  ldr r2, =_sbss
 8001500:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001504:	20001dbc 	.word	0x20001dbc

08001508 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <CAN1_RX0_IRQHandler>

0800150a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f001 fcd6 	bl	8002ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	200f      	movs	r0, #15
 800151c:	f7ff ff02 	bl	8001324 <HAL_InitTick>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	e001      	b.n	8001530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152c:	f7ff fbba 	bl	8000ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001530:	79fb      	ldrb	r3, [r7, #7]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	200003d0 	.word	0x200003d0

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200003d0 	.word	0x200003d0

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3360      	adds	r3, #96	; 0x60
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <LL_ADC_SetOffset+0x44>)
 800164e:	4013      	ands	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	4313      	orrs	r3, r2
 800165c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	03fff000 	.word	0x03fff000

08001674 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3360      	adds	r3, #96	; 0x60
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3360      	adds	r3, #96	; 0x60
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	615a      	str	r2, [r3, #20]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001722:	b480      	push	{r7}
 8001724:	b087      	sub	sp, #28
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3330      	adds	r3, #48	; 0x30
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	4413      	add	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	211f      	movs	r1, #31
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	401a      	ands	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0e9b      	lsrs	r3, r3, #26
 800175a:	f003 011f 	and.w	r1, r3, #31
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3314      	adds	r3, #20
 80017b0:	461a      	mov	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	0e5b      	lsrs	r3, r3, #25
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	0d1b      	lsrs	r3, r3, #20
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2107      	movs	r1, #7
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	401a      	ands	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	0d1b      	lsrs	r3, r3, #20
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017ea:	bf00      	nop
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0318 	and.w	r3, r3, #24
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <LL_ADC_SetChannelSingleDiff+0x44>)
 800181c:	40d9      	lsrs	r1, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	400b      	ands	r3, r1
 8001822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	0007ffff 	.word	0x0007ffff

08001840 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6093      	str	r3, [r2, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001878:	d101      	bne.n	800187e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800189c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018c8:	d101      	bne.n	80018ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <LL_ADC_IsEnabled+0x18>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <LL_ADC_IsEnabled+0x1a>
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800193a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800193e:	f043 0204 	orr.w	r2, r3, #4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d101      	bne.n	800196a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b08      	cmp	r3, #8
 800198a:	d101      	bne.n	8001990 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e12f      	b.n	8001c1a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d109      	bne.n	80019dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff f993 	bl	8000cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff3f 	bl	8001864 <LL_ADC_IsDeepPowerDownEnabled>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff25 	bl	8001840 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff5a 	bl	80018b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d115      	bne.n	8001a32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff3e 	bl	800188c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_ADC_Init+0x284>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	4a84      	ldr	r2, [pc, #528]	; (8001c28 <HAL_ADC_Init+0x288>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	3301      	adds	r3, #1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff3c 	bl	80018b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff75 	bl	8001952 <LL_ADC_REG_IsConversionOngoing>
 8001a68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 80c8 	bne.w	8001c08 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 80c4 	bne.w	8001c08 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a88:	f043 0202 	orr.w	r2, r3, #2
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff35 	bl	8001904 <LL_ADC_IsEnabled>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001aa0:	4862      	ldr	r0, [pc, #392]	; (8001c2c <HAL_ADC_Init+0x28c>)
 8001aa2:	f7ff ff2f 	bl	8001904 <LL_ADC_IsEnabled>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	485f      	ldr	r0, [pc, #380]	; (8001c30 <HAL_ADC_Init+0x290>)
 8001ab4:	f7ff fd86 	bl	80015c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7e5b      	ldrb	r3, [r3, #25]
 8001abc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ac8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ace:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d106      	bne.n	8001af4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	3b01      	subs	r3, #1
 8001aec:	045b      	lsls	r3, r3, #17
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d009      	beq.n	8001b10 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_ADC_Init+0x294>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff12 	bl	8001952 <LL_ADC_REG_IsConversionOngoing>
 8001b2e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff1f 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 8001b3a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d140      	bne.n	8001bc4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d13d      	bne.n	8001bc4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e1b      	ldrb	r3, [r3, #24]
 8001b50:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b52:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b6a:	f023 0306 	bic.w	r3, r3, #6
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d118      	bne.n	8001bb4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	e007      	b.n	8001bc4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10c      	bne.n	8001be6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f023 010f 	bic.w	r1, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 020f 	bic.w	r2, r2, #15
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58
 8001c06:	e007      	b.n	8001c18 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	053e2d63 	.word	0x053e2d63
 8001c2c:	50040000 	.word	0x50040000
 8001c30:	50040300 	.word	0x50040300
 8001c34:	fff0c007 	.word	0xfff0c007

08001c38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fe82 	bl	8001952 <LL_ADC_REG_IsConversionOngoing>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d167      	bne.n	8001d24 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Start_DMA+0x2a>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e063      	b.n	8001d2a <HAL_ADC_Start_DMA+0xf2>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fe36 	bl	80028dc <ADC_Enable>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d14f      	bne.n	8001d1a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	f023 0206 	bic.w	r2, r3, #6
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ca6:	e002      	b.n	8001cae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_ADC_Start_DMA+0xfc>)
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_ADC_Start_DMA+0x100>)
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_ADC_Start_DMA+0x104>)
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	221c      	movs	r2, #28
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0210 	orr.w	r2, r2, #16
 8001ce4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3340      	adds	r3, #64	; 0x40
 8001d00:	4619      	mov	r1, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f001 f9bb 	bl	8003080 <HAL_DMA_Start_IT>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe09 	bl	800192a <LL_ADC_REG_StartConversion>
 8001d18:	e006      	b.n	8001d28 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001d22:	e001      	b.n	8001d28 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
 8001d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	080029e9 	.word	0x080029e9
 8001d38:	08002ac1 	.word	0x08002ac1
 8001d3c:	08002add 	.word	0x08002add

08001d40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d017      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x56>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d012      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fee9 	bl	8002b60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_IRQHandler+0x6a>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d05e      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d059      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fc8e 	bl	80016fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d03e      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d135      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d12e      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fda1 	bl	8001952 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11a      	bne.n	8001e4c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020c 	bic.w	r2, r2, #12
 8001e24:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d112      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f043 0201 	orr.w	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58
 8001e4a:	e00b      	b.n	8001e64 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f043 0210 	orr.w	r2, r3, #16
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe f9eb 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x146>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d072      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d06d      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc5f 	bl	800177a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ebc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fc1a 	bl	80016fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ec8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d047      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_ADC_IRQHandler+0x1b2>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03f      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d13a      	bne.n	8001f68 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d133      	bne.n	8001f68 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12e      	bne.n	8001f68 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fd32 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11a      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d112      	bne.n	8001f68 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4e:	e00b      	b.n	8001f68 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fdd1 	bl	8002b10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2260      	movs	r2, #96	; 0x60
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d011      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0x264>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f890 	bl	80020bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d012      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x294>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fdb7 	bl	8002b38 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <HAL_ADC_IRQHandler+0x2c4>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fda9 	bl	8002b4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02a      	beq.n	8002064 <HAL_ADC_IRQHandler+0x324>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d025      	beq.n	8002064 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e008      	b.n	8002038 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002034:	2301      	movs	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10e      	bne.n	800205c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f83a 	bl	80020d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2210      	movs	r2, #16
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d018      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x360>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	f043 0208 	orr.w	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fd42 	bl	8002b24 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0b6      	sub	sp, #216	; 0xd8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x22>
 8002102:	2302      	movs	r3, #2
 8002104:	e3d5      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x7ce>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc1d 	bl	8001952 <LL_ADC_REG_IsConversionOngoing>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 83ba 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d824      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	3b02      	subs	r3, #2
 800212e:	2b03      	cmp	r3, #3
 8002130:	d81b      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x86>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_ADC_ConfigChannel+0x54>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	08002151 	.word	0x08002151
 8002140:	08002159 	.word	0x08002159
 8002144:	08002161 	.word	0x08002161
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	220c      	movs	r2, #12
 800214c:	605a      	str	r2, [r3, #4]
          break;
 800214e:	e011      	b.n	8002174 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2212      	movs	r2, #18
 8002154:	605a      	str	r2, [r3, #4]
          break;
 8002156:	e00d      	b.n	8002174 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2218      	movs	r2, #24
 800215c:	605a      	str	r2, [r3, #4]
          break;
 800215e:	e009      	b.n	8002174 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002166:	605a      	str	r2, [r3, #4]
          break;
 8002168:	e004      	b.n	8002174 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2206      	movs	r2, #6
 800216e:	605a      	str	r2, [r3, #4]
          break;
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002172:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f7ff face 	bl	8001722 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fbe1 	bl	8001952 <LL_ADC_REG_IsConversionOngoing>
 8002190:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fbed 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 800219e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 81c1 	bne.w	800252e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 81bc 	bne.w	800252e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021be:	d10f      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7ff fae8 	bl	80017a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fa7c 	bl	80016d6 <LL_ADC_SetSamplingTimeCommonConfig>
 80021de:	e00e      	b.n	80021fe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f7ff fad7 	bl	80017a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fa6c 	bl	80016d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d00a      	beq.n	8002236 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6919      	ldr	r1, [r3, #16]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002230:	f7ff f9fc 	bl	800162c <LL_ADC_SetOffset>
 8002234:	e17b      	b.n	800252e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa19 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x17e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fa0e 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	0e9b      	lsrs	r3, r3, #26
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	e01e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x1bc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fa03 	bl	8001674 <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e004      	b.n	800229e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1d4>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	e018      	b.n	80022ea <HAL_ADC_ConfigChannel+0x206>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e004      	b.n	80022ea <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80022e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d106      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f9d2 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f9b6 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x244>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f9ab 	bl	8001674 <LL_ADC_GetOffsetChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	f003 021f 	and.w	r2, r3, #31
 8002326:	e01e      	b.n	8002366 <HAL_ADC_ConfigChannel+0x282>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f9a0 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800234a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800234e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e004      	b.n	8002364 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800235a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_ADC_ConfigChannel+0x29a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	e018      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x2cc>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800239a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80023a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f96f 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2102      	movs	r1, #2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f953 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x30a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2102      	movs	r1, #2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f948 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	0e9b      	lsrs	r3, r3, #26
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	e01e      	b.n	800242c <HAL_ADC_ConfigChannel+0x348>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2102      	movs	r1, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f93d 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800240c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e004      	b.n	800242a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x360>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	e016      	b.n	8002472 <HAL_ADC_ConfigChannel+0x38e>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800245c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002464:	2320      	movs	r3, #32
 8002466:	e004      	b.n	8002472 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002472:	429a      	cmp	r2, r3
 8002474:	d106      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	2102      	movs	r1, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f90e 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2103      	movs	r1, #3
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f8f2 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x3cc>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2103      	movs	r1, #3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff f8e7 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 021f 	and.w	r2, r3, #31
 80024ae:	e017      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x3fc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2103      	movs	r1, #3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f8dc 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80024d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x414>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	e011      	b.n	800251c <HAL_ADC_ConfigChannel+0x438>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002508:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	2103      	movs	r1, #3
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f8b9 	bl	80016a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f9e6 	bl	8001904 <LL_ADC_IsEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8140 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	461a      	mov	r2, r3
 800254e:	f7ff f953 	bl	80017f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a8f      	ldr	r2, [pc, #572]	; (8002794 <HAL_ADC_ConfigChannel+0x6b0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	f040 8131 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x4a2>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2b09      	cmp	r3, #9
 800257c:	bf94      	ite	ls
 800257e:	2301      	movls	r3, #1
 8002580:	2300      	movhi	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e019      	b.n	80025ba <HAL_ADC_ConfigChannel+0x4d6>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002596:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80025a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	bf94      	ite	ls
 80025b4:	2301      	movls	r3, #1
 80025b6:	2300      	movhi	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d079      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_ADC_ConfigChannel+0x4f6>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	3301      	adds	r3, #1
 80025d2:	069b      	lsls	r3, r3, #26
 80025d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d8:	e015      	b.n	8002606 <HAL_ADC_ConfigChannel+0x522>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x542>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	3301      	adds	r3, #1
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	e017      	b.n	8002656 <HAL_ADC_ConfigChannel+0x572>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	ea42 0103 	orr.w	r1, r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_ADC_ConfigChannel+0x598>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	3301      	adds	r3, #1
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	e018      	b.n	80026ae <HAL_ADC_ConfigChannel+0x5ca>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e003      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 021f 	and.w	r2, r3, #31
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ae:	430b      	orrs	r3, r1
 80026b0:	e081      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x5ea>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	069b      	lsls	r3, r3, #26
 80026c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026cc:	e015      	b.n	80026fa <HAL_ADC_ConfigChannel+0x616>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_ADC_ConfigChannel+0x636>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	e017      	b.n	800274a <HAL_ADC_ConfigChannel+0x666>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	61fb      	str	r3, [r7, #28]
  return result;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e003      	b.n	800273e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	ea42 0103 	orr.w	r1, r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x692>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	3301      	adds	r3, #1
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	3b1e      	subs	r3, #30
 800276e:	051b      	lsls	r3, r3, #20
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002774:	e01e      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x6d0>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	613b      	str	r3, [r7, #16]
  return result;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e006      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x6bc>
 8002792:	bf00      	nop
 8002794:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe fff0 	bl	80017a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_ADC_ConfigChannel+0x7d8>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06c      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027cc:	483c      	ldr	r0, [pc, #240]	; (80028c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ce:	f7fe ff1f 	bl	8001610 <LL_ADC_GetCommonPathInternalCh>
 80027d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d127      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d121      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a35      	ldr	r2, [pc, #212]	; (80028c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d157      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027fe:	4619      	mov	r1, r3
 8002800:	482f      	ldr	r0, [pc, #188]	; (80028c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002802:	f7fe fef2 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_ADC_ConfigChannel+0x7e8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <HAL_ADC_ConfigChannel+0x7ec>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002820:	e002      	b.n	8002828 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282e:	e03a      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x77e>
 800283a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800283e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d12a      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002858:	4619      	mov	r1, r3
 800285a:	4819      	ldr	r0, [pc, #100]	; (80028c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800285c:	f7fe fec5 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002860:	e021      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d11c      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800286c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d111      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002886:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800288a:	4619      	mov	r1, r3
 800288c:	480c      	ldr	r0, [pc, #48]	; (80028c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800288e:	f7fe feac 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
 8002892:	e008      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80028ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	37d8      	adds	r7, #216	; 0xd8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	80080000 	.word	0x80080000
 80028c0:	50040300 	.word	0x50040300
 80028c4:	c7520000 	.word	0xc7520000
 80028c8:	50040000 	.word	0x50040000
 80028cc:	20000000 	.word	0x20000000
 80028d0:	053e2d63 	.word	0x053e2d63
 80028d4:	cb840000 	.word	0xcb840000
 80028d8:	80000001 	.word	0x80000001

080028dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f809 	bl	8001904 <LL_ADC_IsEnabled>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d169      	bne.n	80029cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <ADC_Enable+0xfc>)
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f043 0210 	orr.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e055      	b.n	80029ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ffd8 	bl	80018dc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800292c:	482b      	ldr	r0, [pc, #172]	; (80029dc <ADC_Enable+0x100>)
 800292e:	f7fe fe6f 	bl	8001610 <LL_ADC_GetCommonPathInternalCh>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <ADC_Enable+0x104>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	4a28      	ldr	r2, [pc, #160]	; (80029e4 <ADC_Enable+0x108>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002956:	e002      	b.n	800295e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f9      	bne.n	8002958 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002964:	f7fe fdfe 	bl	8001564 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800296a:	e028      	b.n	80029be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe ffc7 	bl	8001904 <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe ffab 	bl	80018dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002986:	f7fe fded 	bl	8001564 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d914      	bls.n	80029be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d00d      	beq.n	80029be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e007      	b.n	80029ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d1cf      	bne.n	800296c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	8000003f 	.word	0x8000003f
 80029dc:	50040300 	.word	0x50040300
 80029e0:	20000000 	.word	0x20000000
 80029e4:	053e2d63 	.word	0x053e2d63

080029e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d14b      	bne.n	8002a9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fe6b 	bl	80016fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d032      	beq.n	8002a92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d12b      	bne.n	8002a92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11f      	bne.n	8002a92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a5e:	e018      	b.n	8002a92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d111      	bne.n	8002a92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d105      	bne.n	8002a92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7fd fbd4 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a98:	e00e      	b.n	8002ab8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff fb12 	bl	80020d0 <HAL_ADC_ErrorCallback>
}
 8002aac:	e004      	b.n	8002ab8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7ff faea 	bl	80020a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff fae4 	bl	80020d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0ed      	b.n	8002d62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f988 	bl	8000ea8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba8:	f7fe fcdc 	bl	8001564 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bae:	e012      	b.n	8002bd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bb0:	f7fe fcd8 	bl	8001564 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b0a      	cmp	r3, #10
 8002bbc:	d90b      	bls.n	8002bd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2205      	movs	r2, #5
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0c5      	b.n	8002d62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0e5      	beq.n	8002bb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0202 	bic.w	r2, r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf4:	f7fe fcb6 	bl	8001564 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bfa:	e012      	b.n	8002c22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bfc:	f7fe fcb2 	bl	8001564 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b0a      	cmp	r3, #10
 8002c08:	d90b      	bls.n	8002c22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e09f      	b.n	8002d62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7e1b      	ldrb	r3, [r3, #24]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d108      	bne.n	8002c4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e007      	b.n	8002c5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7e5b      	ldrb	r3, [r3, #25]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e9b      	ldrb	r3, [r3, #26]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0220 	orr.w	r2, r2, #32
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0220 	bic.w	r2, r2, #32
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7edb      	ldrb	r3, [r3, #27]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0210 	bic.w	r2, r2, #16
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0210 	orr.w	r2, r2, #16
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7f1b      	ldrb	r3, [r3, #28]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d108      	bne.n	8002cf2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e007      	b.n	8002d02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0208 	bic.w	r2, r2, #8
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7f5b      	ldrb	r3, [r3, #29]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0204 	orr.w	r2, r2, #4
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e007      	b.n	8002d2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	ea42 0103 	orr.w	r1, r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	1e5a      	subs	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	; (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ff4c 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eee:	f7ff ff61 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002ef2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	6978      	ldr	r0, [r7, #20]
 8002efa:	f7ff ffb1 	bl	8002e60 <NVIC_EncodePriority>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff80 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff54 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e08d      	b.n	800305e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_DMA_Init+0x138>)
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d80f      	bhi.n	8002f6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b45      	ldr	r3, [pc, #276]	; (800306c <HAL_DMA_Init+0x13c>)
 8002f56:	4413      	add	r3, r2
 8002f58:	4a45      	ldr	r2, [pc, #276]	; (8003070 <HAL_DMA_Init+0x140>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a42      	ldr	r2, [pc, #264]	; (8003074 <HAL_DMA_Init+0x144>)
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f6c:	e00e      	b.n	8002f8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_DMA_Init+0x148>)
 8002f76:	4413      	add	r3, r2
 8002f78:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <HAL_DMA_Init+0x140>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a3c      	ldr	r2, [pc, #240]	; (800307c <HAL_DMA_Init+0x14c>)
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9b6 	bl	8003350 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fec:	d102      	bne.n	8002ff4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003008:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d010      	beq.n	8003034 <HAL_DMA_Init+0x104>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b04      	cmp	r3, #4
 8003018:	d80c      	bhi.n	8003034 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f9d6 	bl	80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e008      	b.n	8003046 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40020407 	.word	0x40020407
 800306c:	bffdfff8 	.word	0xbffdfff8
 8003070:	cccccccd 	.word	0xcccccccd
 8003074:	40020000 	.word	0x40020000
 8003078:	bffdfbf8 	.word	0xbffdfbf8
 800307c:	40020400 	.word	0x40020400

08003080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Start_IT+0x20>
 800309c:	2302      	movs	r3, #2
 800309e:	e066      	b.n	800316e <HAL_DMA_Start_IT+0xee>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d155      	bne.n	8003160 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f8fb 	bl	80032d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 020e 	orr.w	r2, r2, #14
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00f      	b.n	8003118 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 020a 	orr.w	r2, r2, #10
 8003116:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003134:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e005      	b.n	800316c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800316c:	7dfb      	ldrb	r3, [r7, #23]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f003 031c 	and.w	r3, r3, #28
 8003196:	2204      	movs	r2, #4
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d026      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x7a>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d021      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0204 	bic.w	r2, r2, #4
 80031c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f003 021c 	and.w	r2, r3, #28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2104      	movs	r1, #4
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d071      	beq.n	80032ca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031ee:	e06c      	b.n	80032ca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f003 031c 	and.w	r3, r3, #28
 80031f8:	2202      	movs	r2, #2
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d02e      	beq.n	8003262 <HAL_DMA_IRQHandler+0xec>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d029      	beq.n	8003262 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020a 	bic.w	r2, r2, #10
 800322a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f003 021c 	and.w	r2, r3, #28
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2102      	movs	r1, #2
 8003242:	fa01 f202 	lsl.w	r2, r1, r2
 8003246:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d038      	beq.n	80032ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003260:	e033      	b.n	80032ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f003 031c 	and.w	r3, r3, #28
 800326a:	2208      	movs	r2, #8
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02a      	beq.n	80032cc <HAL_DMA_IRQHandler+0x156>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d025      	beq.n	80032cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020e 	bic.w	r2, r2, #14
 800328e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f003 021c 	and.w	r2, r3, #28
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
}
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032ea:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032fc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 021c 	and.w	r2, r3, #28
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b10      	cmp	r3, #16
 8003320:	d108      	bne.n	8003334 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003332:	e007      	b.n	8003344 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d80a      	bhi.n	800337a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003370:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6493      	str	r3, [r2, #72]	; 0x48
 8003378:	e007      	b.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	009a      	lsls	r2, r3, #2
 8003382:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003384:	4413      	add	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3b08      	subs	r3, #8
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40020407 	.word	0x40020407
 80033c0:	4002081c 	.word	0x4002081c
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	40020880 	.word	0x40020880

080033cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	461a      	mov	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a08      	ldr	r2, [pc, #32]	; (8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	1000823f 	.word	0x1000823f
 8003410:	40020940 	.word	0x40020940

08003414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003422:	e166      	b.n	80036f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8158 	beq.w	80036ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d005      	beq.n	8003454 <HAL_GPIO_Init+0x40>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d130      	bne.n	80034b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348a:	2201      	movs	r2, #1
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0201 	and.w	r2, r3, #1
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d017      	beq.n	80034f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	2203      	movs	r2, #3
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d123      	bne.n	8003546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	08da      	lsrs	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3208      	adds	r2, #8
 8003506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	6939      	ldr	r1, [r7, #16]
 8003542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0203 	and.w	r2, r3, #3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80b2 	beq.w	80036ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003588:	4b61      	ldr	r3, [pc, #388]	; (8003710 <HAL_GPIO_Init+0x2fc>)
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	4a60      	ldr	r2, [pc, #384]	; (8003710 <HAL_GPIO_Init+0x2fc>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6613      	str	r3, [r2, #96]	; 0x60
 8003594:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <HAL_GPIO_Init+0x2fc>)
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035a0:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <HAL_GPIO_Init+0x300>)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ca:	d02b      	beq.n	8003624 <HAL_GPIO_Init+0x210>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_GPIO_Init+0x304>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d025      	beq.n	8003620 <HAL_GPIO_Init+0x20c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a51      	ldr	r2, [pc, #324]	; (800371c <HAL_GPIO_Init+0x308>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01f      	beq.n	800361c <HAL_GPIO_Init+0x208>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a50      	ldr	r2, [pc, #320]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d019      	beq.n	8003618 <HAL_GPIO_Init+0x204>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <HAL_GPIO_Init+0x310>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <HAL_GPIO_Init+0x200>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a4e      	ldr	r2, [pc, #312]	; (8003728 <HAL_GPIO_Init+0x314>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00d      	beq.n	8003610 <HAL_GPIO_Init+0x1fc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a4d      	ldr	r2, [pc, #308]	; (800372c <HAL_GPIO_Init+0x318>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <HAL_GPIO_Init+0x1f8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <HAL_GPIO_Init+0x31c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_GPIO_Init+0x1f4>
 8003604:	2307      	movs	r3, #7
 8003606:	e00e      	b.n	8003626 <HAL_GPIO_Init+0x212>
 8003608:	2308      	movs	r3, #8
 800360a:	e00c      	b.n	8003626 <HAL_GPIO_Init+0x212>
 800360c:	2306      	movs	r3, #6
 800360e:	e00a      	b.n	8003626 <HAL_GPIO_Init+0x212>
 8003610:	2305      	movs	r3, #5
 8003612:	e008      	b.n	8003626 <HAL_GPIO_Init+0x212>
 8003614:	2304      	movs	r3, #4
 8003616:	e006      	b.n	8003626 <HAL_GPIO_Init+0x212>
 8003618:	2303      	movs	r3, #3
 800361a:	e004      	b.n	8003626 <HAL_GPIO_Init+0x212>
 800361c:	2302      	movs	r3, #2
 800361e:	e002      	b.n	8003626 <HAL_GPIO_Init+0x212>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_GPIO_Init+0x212>
 8003624:	2300      	movs	r3, #0
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	f002 0203 	and.w	r2, r2, #3
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	4093      	lsls	r3, r2
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003636:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_GPIO_Init+0x300>)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_GPIO_Init+0x320>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003668:	4a32      	ldr	r2, [pc, #200]	; (8003734 <HAL_GPIO_Init+0x320>)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_GPIO_Init+0x320>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003692:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_GPIO_Init+0x320>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003698:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_GPIO_Init+0x320>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036bc:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_GPIO_Init+0x320>)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_GPIO_Init+0x320>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4013      	ands	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <HAL_GPIO_Init+0x320>)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3301      	adds	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f ae91 	bne.w	8003424 <HAL_GPIO_Init+0x10>
  }
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40021000 	.word	0x40021000
 8003714:	40010000 	.word	0x40010000
 8003718:	48000400 	.word	0x48000400
 800371c:	48000800 	.word	0x48000800
 8003720:	48000c00 	.word	0x48000c00
 8003724:	48001000 	.word	0x48001000
 8003728:	48001400 	.word	0x48001400
 800372c:	48001800 	.word	0x48001800
 8003730:	48001c00 	.word	0x48001c00
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e001      	b.n	800375a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003784:	e002      	b.n	800378c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e081      	b.n	80038ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fbb6 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	e006      	b.n	8003820 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800381e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d104      	bne.n	8003832 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003830:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003844:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003854:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69d9      	ldr	r1, [r3, #28]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d138      	bne.n	800393e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e032      	b.n	8003940 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2224      	movs	r2, #36	; 0x24
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003908:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	d139      	bne.n	80039d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800396c:	2302      	movs	r3, #2
 800396e:	e033      	b.n	80039d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800399e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d102      	bne.n	80039fc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80039f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039fa:	e00b      	b.n	8003a14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0a:	d102      	bne.n	8003a12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a10:	e000      	b.n	8003a14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40007000 	.word	0x40007000

08003a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d141      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a32:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3e:	d131      	bne.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a40:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a46:	4a46      	ldr	r2, [pc, #280]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a50:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a58:	4a41      	ldr	r2, [pc, #260]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2232      	movs	r2, #50	; 0x32
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a3f      	ldr	r2, [pc, #252]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a76:	e002      	b.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7e:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d102      	bne.n	8003a92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f2      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a92:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9e:	d158      	bne.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e057      	b.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aaa:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ab4:	e04d      	b.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d141      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003abe:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d131      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad2:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2232      	movs	r2, #50	; 0x32
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	0c9b      	lsrs	r3, r3, #18
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b02:	e002      	b.n	8003b0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d102      	bne.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f2      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d112      	bne.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e011      	b.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b40:	e007      	b.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b4a:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40007000 	.word	0x40007000
 8003b64:	20000000 	.word	0x20000000
 8003b68:	431bde83 	.word	0x431bde83

08003b6c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b7a:	6053      	str	r3, [r2, #4]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40007000 	.word	0x40007000

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f000 bc08 	b.w	80043b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba0:	4b96      	ldr	r3, [pc, #600]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003baa:	4b94      	ldr	r3, [pc, #592]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80e4 	beq.w	8003d8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4c>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	f040 808b 	bne.w	8003ce6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	f040 8087 	bne.w	8003ce6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bd8:	4b88      	ldr	r3, [pc, #544]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x64>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e3df      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4b81      	ldr	r3, [pc, #516]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_RCC_OscConfig+0x7e>
 8003c00:	4b7e      	ldr	r3, [pc, #504]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c08:	e005      	b.n	8003c16 <HAL_RCC_OscConfig+0x8a>
 8003c0a:	4b7c      	ldr	r3, [pc, #496]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d223      	bcs.n	8003c62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fdfc 	bl	800481c <RCC_SetFlashLatencyFromMSIRange>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e3c0      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2e:	4b73      	ldr	r3, [pc, #460]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a72      	ldr	r2, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b70      	ldr	r3, [pc, #448]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	496d      	ldr	r1, [pc, #436]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c4c:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	4968      	ldr	r1, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
 8003c60:	e025      	b.n	8003cae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c62:	4b66      	ldr	r3, [pc, #408]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a65      	ldr	r2, [pc, #404]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b63      	ldr	r3, [pc, #396]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4960      	ldr	r1, [pc, #384]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c80:	4b5e      	ldr	r3, [pc, #376]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	495b      	ldr	r1, [pc, #364]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fdbc 	bl	800481c <RCC_SetFlashLatencyFromMSIRange>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e380      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cae:	f000 fcc1 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b51      	ldr	r3, [pc, #324]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	4950      	ldr	r1, [pc, #320]	; (8003e00 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <HAL_RCC_OscConfig+0x278>)
 8003ccc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cce:	4b4e      	ldr	r3, [pc, #312]	; (8003e08 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fb26 	bl	8001324 <HAL_InitTick>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d052      	beq.n	8003d88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	e364      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d032      	beq.n	8003d54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a42      	ldr	r2, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cfa:	f7fd fc33 	bl	8001564 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d02:	f7fd fc2f 	bl	8001564 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e34d      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d14:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a35      	ldr	r2, [pc, #212]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d26:	f043 0308 	orr.w	r3, r3, #8
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4930      	ldr	r1, [pc, #192]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	492b      	ldr	r1, [pc, #172]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
 8003d52:	e01a      	b.n	8003d8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d54:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a28      	ldr	r2, [pc, #160]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d60:	f7fd fc00 	bl	8001564 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d68:	f7fd fbfc 	bl	8001564 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e31a      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x1dc>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d073      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_OscConfig+0x21c>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d10e      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d063      	beq.n	8003e7c <HAL_RCC_OscConfig+0x2f0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d15f      	bne.n	8003e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e2f7      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e025      	b.n	8003e24 <HAL_RCC_OscConfig+0x298>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d114      	bne.n	8003e0c <HAL_RCC_OscConfig+0x280>
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a02      	ldr	r2, [pc, #8]	; (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e013      	b.n	8003e24 <HAL_RCC_OscConfig+0x298>
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	0800d570 	.word	0x0800d570
 8003e04:	20000000 	.word	0x20000000
 8003e08:	20000004 	.word	0x20000004
 8003e0c:	4ba0      	ldr	r3, [pc, #640]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a9f      	ldr	r2, [pc, #636]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b9d      	ldr	r3, [pc, #628]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a9c      	ldr	r2, [pc, #624]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fb9a 	bl	8001564 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fd fb96 	bl	8001564 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e2b4      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e46:	4b92      	ldr	r3, [pc, #584]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x2a8>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd fb86 	bl	8001564 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd fb82 	bl	8001564 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e2a0      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2d0>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d060      	beq.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x310>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d119      	bne.n	8003eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d116      	bne.n	8003eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e9c:	4b7c      	ldr	r3, [pc, #496]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x328>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e27d      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	4973      	ldr	r1, [pc, #460]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec8:	e040      	b.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d023      	beq.n	8003f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed2:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd fb41 	bl	8001564 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd fb3d 	bl	8001564 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e25b      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef8:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	495f      	ldr	r1, [pc, #380]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
 8003f18:	e018      	b.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd fb1d 	bl	8001564 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd fb19 	bl	8001564 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e237      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f66:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fd faf8 	bl	8001564 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f78:	f7fd faf4 	bl	8001564 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e212      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ef      	beq.n	8003f78 <HAL_RCC_OscConfig+0x3ec>
 8003f98:	e01b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa0:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd fadb 	bl	8001564 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fad7 	bl	8001564 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1f5      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ef      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80a6 	beq.w	800412c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	4a26      	ldr	r2, [pc, #152]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <HAL_RCC_OscConfig+0x508>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d118      	bne.n	800404a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCC_OscConfig+0x508>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_RCC_OscConfig+0x508>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004024:	f7fd fa9e 	bl	8001564 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7fd fa9a 	bl	8001564 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1b8      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <HAL_RCC_OscConfig+0x508>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d108      	bne.n	8004064 <HAL_RCC_OscConfig+0x4d8>
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004062:	e029      	b.n	80040b8 <HAL_RCC_OscConfig+0x52c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d115      	bne.n	8004098 <HAL_RCC_OscConfig+0x50c>
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	4a03      	ldr	r2, [pc, #12]	; (8004090 <HAL_RCC_OscConfig+0x504>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408c:	e014      	b.n	80040b8 <HAL_RCC_OscConfig+0x52c>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	40007000 	.word	0x40007000
 8004098:	4b9d      	ldr	r3, [pc, #628]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	4a9c      	ldr	r2, [pc, #624]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a8:	4b99      	ldr	r3, [pc, #612]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	4a98      	ldr	r2, [pc, #608]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d016      	beq.n	80040ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd fa50 	bl	8001564 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fd fa4c 	bl	8001564 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e168      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ed      	beq.n	80040c8 <HAL_RCC_OscConfig+0x53c>
 80040ec:	e015      	b.n	800411a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fd fa39 	bl	8001564 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fd fa35 	bl	8001564 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e151      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800410c:	4b80      	ldr	r3, [pc, #512]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ed      	bne.n	80040f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411a:	7ffb      	ldrb	r3, [r7, #31]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d105      	bne.n	800412c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004120:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03c      	beq.n	80041b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01c      	beq.n	800417a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004140:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004146:	4a72      	ldr	r2, [pc, #456]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fd fa08 	bl	8001564 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004158:	f7fd fa04 	bl	8001564 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e122      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800416a:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800416c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ef      	beq.n	8004158 <HAL_RCC_OscConfig+0x5cc>
 8004178:	e01b      	b.n	80041b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800417c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004180:	4a63      	ldr	r2, [pc, #396]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fd f9eb 	bl	8001564 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004192:	f7fd f9e7 	bl	8001564 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e105      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041a4:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80041a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ef      	bne.n	8004192 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80f9 	beq.w	80043ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	f040 80cf 	bne.w	8004364 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041c6:	4b52      	ldr	r3, [pc, #328]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0203 	and.w	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d12c      	bne.n	8004234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	3b01      	subs	r3, #1
 80041e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d123      	bne.n	8004234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d11b      	bne.n	8004234 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d113      	bne.n	8004234 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	3b01      	subs	r3, #1
 800421a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d109      	bne.n	8004234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	3b01      	subs	r3, #1
 800422e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d071      	beq.n	8004318 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d068      	beq.n	800430c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800423a:	4b35      	ldr	r3, [pc, #212]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d105      	bne.n	8004252 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004246:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0ac      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004256:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2d      	ldr	r2, [pc, #180]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800425c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004262:	f7fd f97f 	bl	8001564 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fd f97b 	bl	8001564 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e099      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427c:	4b24      	ldr	r3, [pc, #144]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_RCC_OscConfig+0x788>)
 800428e:	4013      	ands	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004298:	3a01      	subs	r2, #1
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	4311      	orrs	r1, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a2:	0212      	lsls	r2, r2, #8
 80042a4:	4311      	orrs	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042aa:	0852      	lsrs	r2, r2, #1
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0552      	lsls	r2, r2, #21
 80042b0:	4311      	orrs	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b6:	0852      	lsrs	r2, r2, #1
 80042b8:	3a01      	subs	r2, #1
 80042ba:	0652      	lsls	r2, r2, #25
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c2:	06d2      	lsls	r2, r2, #27
 80042c4:	430a      	orrs	r2, r1
 80042c6:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80042d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 80042de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e4:	f7fd f93e 	bl	8001564 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd f93a 	bl	8001564 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e058      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fe:	4b04      	ldr	r3, [pc, #16]	; (8004310 <HAL_RCC_OscConfig+0x784>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430a:	e050      	b.n	80043ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e04f      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
 8004310:	40021000 	.word	0x40021000
 8004314:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004318:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d144      	bne.n	80043ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a23      	ldr	r2, [pc, #140]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800433a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800433c:	f7fd f912 	bl	8001564 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd f90e 	bl	8001564 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e02c      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x7b8>
 8004362:	e024      	b.n	80043ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d01f      	beq.n	80043aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 8004370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd f8f5 	bl	8001564 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd f8f1 	bl	8001564 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e00f      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4905      	ldr	r1, [pc, #20]	; (80043b8 <HAL_RCC_OscConfig+0x82c>)
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x830>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
 80043a8:	e001      	b.n	80043ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	feeefffc 	.word	0xfeeefffc

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e11d      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b90      	ldr	r3, [pc, #576]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d910      	bls.n	8004408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b8d      	ldr	r3, [pc, #564]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 020f 	bic.w	r2, r3, #15
 80043ee:	498b      	ldr	r1, [pc, #556]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b89      	ldr	r3, [pc, #548]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e105      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004420:	429a      	cmp	r2, r3
 8004422:	d908      	bls.n	8004436 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b7e      	ldr	r3, [pc, #504]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	497b      	ldr	r1, [pc, #492]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d079      	beq.n	8004536 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d11e      	bne.n	8004488 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	4b75      	ldr	r3, [pc, #468]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0dc      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800445a:	f000 fa39 	bl	80048d0 <RCC_GetSysClockFreqFromPLLSource>
 800445e:	4603      	mov	r3, r0
 8004460:	4a70      	ldr	r2, [pc, #448]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d946      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d140      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004472:	4b6b      	ldr	r3, [pc, #428]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	4a69      	ldr	r2, [pc, #420]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800447c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004480:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e035      	b.n	80044f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004490:	4b63      	ldr	r3, [pc, #396]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d115      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0b9      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a8:	4b5d      	ldr	r3, [pc, #372]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0ad      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b8:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0a5      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044c8:	f000 f8b4 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4a55      	ldr	r2, [pc, #340]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d90f      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044d4:	4b52      	ldr	r3, [pc, #328]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e8:	4a4d      	ldr	r2, [pc, #308]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f4:	4b4a      	ldr	r3, [pc, #296]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 0203 	bic.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4947      	ldr	r1, [pc, #284]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004506:	f7fd f82d 	bl	8001564 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450c:	e00a      	b.n	8004524 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450e:	f7fd f829 	bl	8001564 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e077      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004524:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 020c 	and.w	r2, r3, #12
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	429a      	cmp	r2, r3
 8004534:	d1eb      	bne.n	800450e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d105      	bne.n	8004548 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800453c:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a37      	ldr	r2, [pc, #220]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004546:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d010      	beq.n	8004576 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004560:	429a      	cmp	r2, r3
 8004562:	d208      	bcs.n	8004576 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004564:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	492b      	ldr	r1, [pc, #172]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004576:	4b29      	ldr	r3, [pc, #164]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d210      	bcs.n	80045a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 020f 	bic.w	r2, r3, #15
 800458c:	4923      	ldr	r1, [pc, #140]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e036      	b.n	8004614 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	4918      	ldr	r1, [pc, #96]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4910      	ldr	r1, [pc, #64]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e4:	f000 f826 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	490c      	ldr	r1, [pc, #48]	; (8004628 <HAL_RCC_ClockConfig+0x268>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <HAL_RCC_ClockConfig+0x26c>)
 8004602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x270>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fc fe8b 	bl	8001324 <HAL_InitTick>
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]

  return status;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40022000 	.word	0x40022000
 8004620:	40021000 	.word	0x40021000
 8004624:	04c4b400 	.word	0x04c4b400
 8004628:	0800d570 	.word	0x0800d570
 800462c:	20000000 	.word	0x20000000
 8004630:	20000004 	.word	0x20000004

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004642:	4b3e      	ldr	r3, [pc, #248]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x34>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0c      	cmp	r3, #12
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11e      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004684:	4b2d      	ldr	r3, [pc, #180]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e004      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d134      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d003      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0xa6>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d003      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0xac>
 80046d8:	e005      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046dc:	617b      	str	r3, [r7, #20]
      break;
 80046de:	e005      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046e2:	617b      	str	r3, [r7, #20]
      break;
 80046e4:	e002      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	617b      	str	r3, [r7, #20]
      break;
 80046ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	3301      	adds	r3, #1
 80046f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	fb03 f202 	mul.w	r2, r3, r2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0e5b      	lsrs	r3, r3, #25
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	3301      	adds	r3, #1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800472c:	69bb      	ldr	r3, [r7, #24]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	; 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	0800d588 	.word	0x0800d588
 8004744:	00f42400 	.word	0x00f42400

08004748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800474c:	4b03      	ldr	r3, [pc, #12]	; (800475c <HAL_RCC_GetHCLKFreq+0x14>)
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000000 	.word	0x20000000

08004760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004764:	f7ff fff0 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4904      	ldr	r1, [pc, #16]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	0800d580 	.word	0x0800d580

0800478c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004790:	f7ff ffda 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	0adb      	lsrs	r3, r3, #11
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4904      	ldr	r1, [pc, #16]	; (80047b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	0800d580 	.word	0x0800d580

080047b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	220f      	movs	r2, #15
 80047c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0203 	and.w	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <HAL_RCC_GetClockConfig+0x60>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	601a      	str	r2, [r3, #0]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	40022000 	.word	0x40022000

0800481c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004834:	f7ff f8d6 	bl	80039e4 <HAL_PWREx_GetVoltageRange>
 8004838:	6178      	str	r0, [r7, #20]
 800483a:	e014      	b.n	8004866 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	6593      	str	r3, [r2, #88]	; 0x58
 8004848:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004854:	f7ff f8c6 	bl	80039e4 <HAL_PWREx_GetVoltageRange>
 8004858:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800485a:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004864:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d10b      	bne.n	8004886 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b80      	cmp	r3, #128	; 0x80
 8004872:	d913      	bls.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2ba0      	cmp	r3, #160	; 0xa0
 8004878:	d902      	bls.n	8004880 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800487a:	2302      	movs	r3, #2
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	e00d      	b.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004880:	2301      	movs	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	e00a      	b.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b7f      	cmp	r3, #127	; 0x7f
 800488a:	d902      	bls.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800488c:	2302      	movs	r3, #2
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e004      	b.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b70      	cmp	r3, #112	; 0x70
 8004896:	d101      	bne.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004898:	2301      	movs	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 020f 	bic.w	r2, r3, #15
 80048a4:	4909      	ldr	r1, [pc, #36]	; (80048cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d001      	beq.n	80048be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40022000 	.word	0x40022000

080048d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048d6:	4b2d      	ldr	r3, [pc, #180]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d00b      	beq.n	80048fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d825      	bhi.n	8004938 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d008      	beq.n	8004904 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d11f      	bne.n	8004938 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048fa:	613b      	str	r3, [r7, #16]
    break;
 80048fc:	e01f      	b.n	800493e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004900:	613b      	str	r3, [r7, #16]
    break;
 8004902:	e01c      	b.n	800493e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e005      	b.n	800492c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004934:	613b      	str	r3, [r7, #16]
    break;
 8004936:	e002      	b.n	800493e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	613b      	str	r3, [r7, #16]
    break;
 800493c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	3301      	adds	r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	fb03 f202 	mul.w	r2, r3, r2
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	0e5b      	lsrs	r3, r3, #25
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	3301      	adds	r3, #1
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800497e:	683b      	ldr	r3, [r7, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40021000 	.word	0x40021000
 8004990:	00f42400 	.word	0x00f42400
 8004994:	0800d588 	.word	0x0800d588

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a0:	2300      	movs	r3, #0
 80049a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a4:	2300      	movs	r3, #0
 80049a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d040      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d02a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049bc:	2b80      	cmp	r3, #128	; 0x80
 80049be:	d825      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c0:	2b60      	cmp	r3, #96	; 0x60
 80049c2:	d026      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049c4:	2b60      	cmp	r3, #96	; 0x60
 80049c6:	d821      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d006      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d81d      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d010      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049d8:	e018      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049da:	4b89      	ldr	r3, [pc, #548]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4a88      	ldr	r2, [pc, #544]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e6:	e015      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 fa82 	bl	8005ef8 <RCCEx_PLLSAI1_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f8:	e00c      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3320      	adds	r3, #32
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fb6d 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a0a:	e003      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	74fb      	strb	r3, [r7, #19]
      break;
 8004a10:	e000      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a1a:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a20:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a28:	4975      	ldr	r1, [pc, #468]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a30:	e001      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d047      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4a:	d030      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d82a      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a56:	d02a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a5c:	d824      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a62:	d008      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a68:	d81e      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d010      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a74:	e018      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a76:	4b62      	ldr	r3, [pc, #392]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4a61      	ldr	r2, [pc, #388]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a82:	e015      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 fa34 	bl	8005ef8 <RCCEx_PLLSAI1_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a94:	e00c      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3320      	adds	r3, #32
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 fb1f 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa6:	e003      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	74fb      	strb	r3, [r7, #19]
      break;
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab6:	4b52      	ldr	r3, [pc, #328]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	494e      	ldr	r1, [pc, #312]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004acc:	e001      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 809f 	beq.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ae4:	4b46      	ldr	r3, [pc, #280]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
 8004b06:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a3a      	ldr	r2, [pc, #232]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b22:	f7fc fd1f 	bl	8001564 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b28:	e009      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fc fd1b 	bl	8001564 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d902      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b3c:	e005      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b4a:	7cfb      	ldrb	r3, [r7, #19]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d15b      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b50:	4b2b      	ldr	r3, [pc, #172]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d019      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b7a:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b9a:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d016      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fc fcda 	bl	8001564 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fc fcd6 	bl	8001564 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d902      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	74fb      	strb	r3, [r7, #19]
            break;
 8004bca:	e006      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ec      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf0:	4903      	ldr	r1, [pc, #12]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	74bb      	strb	r3, [r7, #18]
 8004bfe:	e005      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c0c:	7c7b      	ldrb	r3, [r7, #17]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d105      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c12:	4ba0      	ldr	r3, [pc, #640]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	4a9f      	ldr	r2, [pc, #636]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c2a:	4b9a      	ldr	r3, [pc, #616]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f023 0203 	bic.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	4996      	ldr	r1, [pc, #600]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c4c:	4b91      	ldr	r3, [pc, #580]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 020c 	bic.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	498e      	ldr	r1, [pc, #568]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c6e:	4b89      	ldr	r3, [pc, #548]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	4985      	ldr	r1, [pc, #532]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c90:	4b80      	ldr	r3, [pc, #512]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	497d      	ldr	r1, [pc, #500]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cb2:	4b78      	ldr	r3, [pc, #480]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	4974      	ldr	r1, [pc, #464]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	496c      	ldr	r1, [pc, #432]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d04:	4963      	ldr	r1, [pc, #396]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d18:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d26:	495b      	ldr	r1, [pc, #364]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3a:	4b56      	ldr	r3, [pc, #344]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	4952      	ldr	r1, [pc, #328]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d5c:	4b4d      	ldr	r3, [pc, #308]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	494a      	ldr	r1, [pc, #296]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d7e:	4b45      	ldr	r3, [pc, #276]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8c:	4941      	ldr	r1, [pc, #260]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da0:	4b3c      	ldr	r3, [pc, #240]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da6:	f023 0203 	bic.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	4939      	ldr	r1, [pc, #228]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d028      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dc2:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	4930      	ldr	r1, [pc, #192]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de0:	d106      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de2:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dec:	60d3      	str	r3, [r2, #12]
 8004dee:	e011      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 f879 	bl	8005ef8 <RCCEx_PLLSAI1_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e0a:	7cfb      	ldrb	r3, [r7, #19]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d04d      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e28:	d108      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e2a:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e30:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e3a:	e012      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e3c:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e42:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	490e      	ldr	r1, [pc, #56]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e76:	60d3      	str	r3, [r2, #12]
 8004e78:	e020      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e82:	d109      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a02      	ldr	r2, [pc, #8]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	60d3      	str	r3, [r2, #12]
 8004e90:	e014      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 f825 	bl	8005ef8 <RCCEx_PLLSAI1_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eb2:	7cfb      	ldrb	r3, [r7, #19]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d028      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ec8:	4b7a      	ldr	r3, [pc, #488]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed6:	4977      	ldr	r1, [pc, #476]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b72      	ldr	r3, [pc, #456]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a71      	ldr	r2, [pc, #452]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
 8004ef4:	e011      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004efe:	d10c      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	2101      	movs	r1, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fff6 	bl	8005ef8 <RCCEx_PLLSAI1_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f26:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f36:	495f      	ldr	r1, [pc, #380]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 ffd1 	bl	8005ef8 <RCCEx_PLLSAI1_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f70:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f76:	f023 0204 	bic.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f80:	494c      	ldr	r1, [pc, #304]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f94:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9a:	f023 0218 	bic.w	r2, r3, #24
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	4943      	ldr	r1, [pc, #268]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d035      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc4:	f7fc face 	bl	8001564 <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fca:	e009      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fcc:	f7fc faca 	bl	8001564 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d902      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	74fb      	strb	r3, [r7, #19]
        break;
 8004fde:	e005      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ef      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004fec:	7cfb      	ldrb	r3, [r7, #19]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005002:	492c      	ldr	r1, [pc, #176]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3320      	adds	r3, #32
 800500e:	2102      	movs	r1, #2
 8005010:	4618      	mov	r0, r3
 8005012:	f001 f865 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	491c      	ldr	r1, [pc, #112]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d10c      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3320      	adds	r3, #32
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f001 f840 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d017      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800507c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005080:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508a:	490a      	ldr	r1, [pc, #40]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800509c:	d105      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000

080050b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ca:	d13e      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80050cc:	4bb6      	ldr	r3, [pc, #728]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050de:	d028      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e6:	f200 86f2 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f0:	d005      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f8:	d00e      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80050fa:	f000 bee8 	b.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050fe:	4baa      	ldr	r3, [pc, #680]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b02      	cmp	r3, #2
 800510a:	f040 86e2 	bne.w	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61fb      	str	r3, [r7, #28]
      break;
 8005114:	f000 bedd 	b.w	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005118:	4ba3      	ldr	r3, [pc, #652]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800511a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	f040 86d7 	bne.w	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005128:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800512c:	61fb      	str	r3, [r7, #28]
      break;
 800512e:	f000 bed2 	b.w	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005132:	4b9d      	ldr	r3, [pc, #628]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513e:	f040 86cc 	bne.w	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8005142:	4b9a      	ldr	r3, [pc, #616]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005144:	61fb      	str	r3, [r7, #28]
      break;
 8005146:	f000 bec8 	b.w	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800514a:	4b97      	ldr	r3, [pc, #604]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d036      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d840      	bhi.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d003      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d020      	beq.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800516c:	e039      	b.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800516e:	4b8e      	ldr	r3, [pc, #568]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d116      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800517a:	4b8b      	ldr	r3, [pc, #556]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005186:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	e005      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005192:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	4a84      	ldr	r2, [pc, #528]	; (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051a6:	e01f      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]
      break;
 80051ac:	e01c      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ae:	4b7e      	ldr	r3, [pc, #504]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d102      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80051bc:	4b7d      	ldr	r3, [pc, #500]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051be:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051c0:	e012      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
      break;
 80051c6:	e00f      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051c8:	4b77      	ldr	r3, [pc, #476]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051d4:	d102      	bne.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80051d6:	4b77      	ldr	r3, [pc, #476]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051da:	e005      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
      break;
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
      break;
 80051e6:	bf00      	nop
    }

    switch(PeriphClk)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ee:	f000 8604 	beq.w	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051f8:	f200 8671 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005202:	f000 8467 	beq.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520c:	f200 8667 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005216:	f000 852f 	beq.w	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005220:	f200 865d 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800522a:	f000 8185 	beq.w	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005234:	f200 8653 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800523e:	f000 80cb 	beq.w	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005248:	f200 8649 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	f000 842e 	beq.w	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525c:	f200 863f 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005266:	f000 83e2 	beq.w	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005270:	f200 8635 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527a:	f000 80ad 	beq.w	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005284:	f200 862b 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	f000 809b 	beq.w	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005298:	f200 8621 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	f000 8089 	beq.w	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ac:	f200 8617 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b6:	f000 8552 	beq.w	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c0:	f200 860d 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ca:	f000 84fe 	beq.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d4:	f200 8603 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052de:	f000 849f 	beq.w	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e8:	f200 85f9 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	f000 846a 	beq.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	f200 85f1 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d84c      	bhi.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 85ea 	beq.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3b01      	subs	r3, #1
 800530e:	2b1f      	cmp	r3, #31
 8005310:	f200 85e5 	bhi.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	0800572d 	.word	0x0800572d
 8005320:	0800579b 	.word	0x0800579b
 8005324:	08005edf 	.word	0x08005edf
 8005328:	0800582f 	.word	0x0800582f
 800532c:	08005edf 	.word	0x08005edf
 8005330:	08005edf 	.word	0x08005edf
 8005334:	08005edf 	.word	0x08005edf
 8005338:	080058a7 	.word	0x080058a7
 800533c:	08005edf 	.word	0x08005edf
 8005340:	08005edf 	.word	0x08005edf
 8005344:	08005edf 	.word	0x08005edf
 8005348:	08005edf 	.word	0x08005edf
 800534c:	08005edf 	.word	0x08005edf
 8005350:	08005edf 	.word	0x08005edf
 8005354:	08005edf 	.word	0x08005edf
 8005358:	0800592b 	.word	0x0800592b
 800535c:	08005edf 	.word	0x08005edf
 8005360:	08005edf 	.word	0x08005edf
 8005364:	08005edf 	.word	0x08005edf
 8005368:	08005edf 	.word	0x08005edf
 800536c:	08005edf 	.word	0x08005edf
 8005370:	08005edf 	.word	0x08005edf
 8005374:	08005edf 	.word	0x08005edf
 8005378:	08005edf 	.word	0x08005edf
 800537c:	08005edf 	.word	0x08005edf
 8005380:	08005edf 	.word	0x08005edf
 8005384:	08005edf 	.word	0x08005edf
 8005388:	08005edf 	.word	0x08005edf
 800538c:	08005edf 	.word	0x08005edf
 8005390:	08005edf 	.word	0x08005edf
 8005394:	08005edf 	.word	0x08005edf
 8005398:	080059ad 	.word	0x080059ad
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	f000 83e6 	beq.w	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80053a4:	f000 bd9b 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	0007a120 	.word	0x0007a120
 80053b0:	0800d588 	.word	0x0800d588
 80053b4:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053be:	f000 ff83 	bl	80062c8 <RCCEx_GetSAIxPeriphCLKFreq>
 80053c2:	61f8      	str	r0, [r7, #28]
      break;
 80053c4:	f000 bd8e 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80053c8:	69b9      	ldr	r1, [r7, #24]
 80053ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053ce:	f000 ff7b 	bl	80062c8 <RCCEx_GetSAIxPeriphCLKFreq>
 80053d2:	61f8      	str	r0, [r7, #28]
      break;
 80053d4:	f000 bd86 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80053d8:	4b9a      	ldr	r3, [pc, #616]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053ea:	d015      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053f2:	f200 8092 	bhi.w	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fc:	d029      	beq.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005404:	f200 8089 	bhi.w	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d07b      	beq.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005414:	d04a      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8005416:	e080      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005418:	4b8a      	ldr	r3, [pc, #552]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d17d      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005424:	4b87      	ldr	r3, [pc, #540]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005430:	4b84      	ldr	r3, [pc, #528]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	e005      	b.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800543c:	4b81      	ldr	r3, [pc, #516]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800543e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	4a7f      	ldr	r2, [pc, #508]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544e:	61fb      	str	r3, [r7, #28]
          break;
 8005450:	e066      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005452:	4b7c      	ldr	r3, [pc, #496]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800545e:	d162      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005460:	4b78      	ldr	r3, [pc, #480]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546c:	d15b      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800546e:	4b75      	ldr	r3, [pc, #468]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005478:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	fb03 f202 	mul.w	r2, r3, r2
 8005482:	4b70      	ldr	r3, [pc, #448]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	3301      	adds	r3, #1
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005494:	4b6b      	ldr	r3, [pc, #428]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	0d5b      	lsrs	r3, r3, #21
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	3301      	adds	r3, #1
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	61fb      	str	r3, [r7, #28]
          break;
 80054aa:	e03c      	b.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80054ac:	4b65      	ldr	r3, [pc, #404]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b8:	d138      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80054ba:	4b62      	ldr	r3, [pc, #392]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c6:	d131      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80054c8:	4b5e      	ldr	r3, [pc, #376]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	fb03 f202 	mul.w	r2, r3, r2
 80054dc:	4b59      	ldr	r3, [pc, #356]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	3301      	adds	r3, #1
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80054ee:	4b55      	ldr	r3, [pc, #340]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	0d5b      	lsrs	r3, r3, #21
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	3301      	adds	r3, #1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	61fb      	str	r3, [r7, #28]
          break;
 8005504:	e012      	b.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005506:	4b4f      	ldr	r3, [pc, #316]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b02      	cmp	r3, #2
 8005512:	d10e      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005514:	4b4d      	ldr	r3, [pc, #308]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005516:	61fb      	str	r3, [r7, #28]
          break;
 8005518:	e00b      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 800551a:	bf00      	nop
 800551c:	f000 bce2 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005520:	bf00      	nop
 8005522:	f000 bcdf 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005526:	bf00      	nop
 8005528:	f000 bcdc 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800552c:	bf00      	nop
 800552e:	f000 bcd9 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005532:	bf00      	nop
        break;
 8005534:	f000 bcd6 	b.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005538:	4b42      	ldr	r3, [pc, #264]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800553a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800553e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005546:	d13d      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005548:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005554:	f040 84c5 	bne.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005558:	4b3a      	ldr	r3, [pc, #232]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005564:	f040 84bd 	bne.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005568:	4b36      	ldr	r3, [pc, #216]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005572:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	fb03 f202 	mul.w	r2, r3, r2
 800557c:	4b31      	ldr	r3, [pc, #196]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	3301      	adds	r3, #1
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800558e:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	0edb      	lsrs	r3, r3, #27
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80055ac:	2311      	movs	r3, #17
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e001      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80055b2:	2307      	movs	r3, #7
 80055b4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	61fb      	str	r3, [r7, #28]
      break;
 80055c0:	f000 bc8f 	b.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80055c4:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055d6:	d016      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055de:	f200 809b 	bhi.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e8:	d032      	beq.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f0:	f200 8092 	bhi.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8084 	beq.w	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005602:	d052      	beq.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8005604:	e088      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	f040 8084 	bne.w	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005620:	4b08      	ldr	r3, [pc, #32]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	e005      	b.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	4a03      	ldr	r2, [pc, #12]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	61fb      	str	r3, [r7, #28]
          break;
 8005640:	e06c      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	0800d588 	.word	0x0800d588
 800564c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005650:	4ba5      	ldr	r3, [pc, #660]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800565c:	d160      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800565e:	4ba2      	ldr	r3, [pc, #648]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566a:	d159      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800566c:	4b9e      	ldr	r3, [pc, #632]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005676:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	fb03 f202 	mul.w	r2, r3, r2
 8005680:	4b99      	ldr	r3, [pc, #612]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	3301      	adds	r3, #1
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005692:	4b95      	ldr	r3, [pc, #596]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	0d5b      	lsrs	r3, r3, #21
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	3301      	adds	r3, #1
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	61fb      	str	r3, [r7, #28]
          break;
 80056a8:	e03a      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80056aa:	4b8f      	ldr	r3, [pc, #572]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b6:	d135      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80056b8:	4b8b      	ldr	r3, [pc, #556]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c4:	d12e      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056c6:	4b88      	ldr	r3, [pc, #544]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	0a1b      	lsrs	r3, r3, #8
 80056cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	fb03 f202 	mul.w	r2, r3, r2
 80056da:	4b83      	ldr	r3, [pc, #524]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	3301      	adds	r3, #1
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80056ec:	4b7e      	ldr	r3, [pc, #504]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	0d5b      	lsrs	r3, r3, #21
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	3301      	adds	r3, #1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	61fb      	str	r3, [r7, #28]
          break;
 8005702:	e00f      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005704:	4b78      	ldr	r3, [pc, #480]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	d10a      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8005712:	4b76      	ldr	r3, [pc, #472]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005714:	61fb      	str	r3, [r7, #28]
          break;
 8005716:	e007      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005718:	bf00      	nop
 800571a:	e3e2      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800571c:	bf00      	nop
 800571e:	e3e0      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005720:	bf00      	nop
 8005722:	e3de      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005724:	bf00      	nop
 8005726:	e3dc      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005728:	bf00      	nop
      break;
 800572a:	e3da      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800572c:	4b6e      	ldr	r3, [pc, #440]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d827      	bhi.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005755 	.word	0x08005755
 8005748:	0800575d 	.word	0x0800575d
 800574c:	08005765 	.word	0x08005765
 8005750:	08005779 	.word	0x08005779
          frequency = HAL_RCC_GetPCLK2Freq();
 8005754:	f7ff f81a 	bl	800478c <HAL_RCC_GetPCLK2Freq>
 8005758:	61f8      	str	r0, [r7, #28]
          break;
 800575a:	e01d      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800575c:	f7fe ff6a 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005760:	61f8      	str	r0, [r7, #28]
          break;
 8005762:	e019      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005764:	4b60      	ldr	r3, [pc, #384]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d10f      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8005772:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005774:	61fb      	str	r3, [r7, #28]
          break;
 8005776:	e00c      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005778:	4b5b      	ldr	r3, [pc, #364]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578a:	61fb      	str	r3, [r7, #28]
          break;
 800578c:	e003      	b.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800578e:	bf00      	nop
 8005790:	e3a8      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005792:	bf00      	nop
 8005794:	e3a6      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005796:	bf00      	nop
        break;
 8005798:	e3a4      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800579a:	4b53      	ldr	r3, [pc, #332]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f003 030c 	and.w	r3, r3, #12
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d83a      	bhi.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	08005823 	.word	0x08005823
 80057bc:	08005823 	.word	0x08005823
 80057c0:	08005823 	.word	0x08005823
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	08005823 	.word	0x08005823
 80057cc:	08005823 	.word	0x08005823
 80057d0:	08005823 	.word	0x08005823
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005823 	.word	0x08005823
 80057dc:	08005823 	.word	0x08005823
 80057e0:	08005823 	.word	0x08005823
 80057e4:	0800580d 	.word	0x0800580d
          frequency = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe ffba 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80057ec:	61f8      	str	r0, [r7, #28]
          break;
 80057ee:	e01d      	b.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80057f0:	f7fe ff20 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80057f4:	61f8      	str	r0, [r7, #28]
          break;
 80057f6:	e019      	b.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057f8:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d10f      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8005806:	4b3a      	ldr	r3, [pc, #232]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005808:	61fb      	str	r3, [r7, #28]
          break;
 800580a:	e00c      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800580c:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b02      	cmp	r3, #2
 8005818:	d107      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800581a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581e:	61fb      	str	r3, [r7, #28]
          break;
 8005820:	e003      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8005822:	bf00      	nop
 8005824:	e35e      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005826:	bf00      	nop
 8005828:	e35c      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800582a:	bf00      	nop
        break;
 800582c:	e35a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800582e:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b30      	cmp	r3, #48	; 0x30
 800583e:	d021      	beq.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b30      	cmp	r3, #48	; 0x30
 8005844:	d829      	bhi.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b20      	cmp	r3, #32
 800584a:	d011      	beq.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b20      	cmp	r3, #32
 8005850:	d823      	bhi.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b10      	cmp	r3, #16
 800585c:	d004      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800585e:	e01c      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005860:	f7fe ff7e 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005864:	61f8      	str	r0, [r7, #28]
          break;
 8005866:	e01d      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005868:	f7fe fee4 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 800586c:	61f8      	str	r0, [r7, #28]
          break;
 800586e:	e019      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005870:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	d10f      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005880:	61fb      	str	r3, [r7, #28]
          break;
 8005882:	e00c      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005884:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d107      	bne.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	61fb      	str	r3, [r7, #28]
          break;
 8005898:	e003      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800589a:	bf00      	nop
 800589c:	e322      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800589e:	bf00      	nop
 80058a0:	e320      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058a2:	bf00      	nop
        break;
 80058a4:	e31e      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2bc0      	cmp	r3, #192	; 0xc0
 80058b6:	d027      	beq.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2bc0      	cmp	r3, #192	; 0xc0
 80058bc:	d82f      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d017      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d829      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d004      	beq.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80058d6:	e022      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe ff42 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80058dc:	61f8      	str	r0, [r7, #28]
          break;
 80058de:	e023      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80058e0:	f7fe fea8 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80058e4:	61f8      	str	r0, [r7, #28]
          break;
 80058e6:	e01f      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80058e8:	40021000 	.word	0x40021000
 80058ec:	02dc6c00 	.word	0x02dc6c00
 80058f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058f4:	4b9b      	ldr	r3, [pc, #620]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005900:	d10f      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8005902:	4b99      	ldr	r3, [pc, #612]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005904:	61fb      	str	r3, [r7, #28]
          break;
 8005906:	e00c      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005908:	4b96      	ldr	r3, [pc, #600]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d107      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591a:	61fb      	str	r3, [r7, #28]
          break;
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800591e:	bf00      	nop
 8005920:	e2e0      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005922:	bf00      	nop
 8005924:	e2de      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005926:	bf00      	nop
        break;
 8005928:	e2dc      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800592a:	4b8e      	ldr	r3, [pc, #568]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593c:	d025      	beq.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005944:	d82c      	bhi.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d013      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005954:	d824      	bhi.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d004      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005964:	e01c      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005966:	f7fe fefb 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 800596a:	61f8      	str	r0, [r7, #28]
          break;
 800596c:	e01d      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800596e:	f7fe fe61 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005972:	61f8      	str	r0, [r7, #28]
          break;
 8005974:	e019      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005976:	4b7b      	ldr	r3, [pc, #492]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005982:	d10f      	bne.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8005984:	4b78      	ldr	r3, [pc, #480]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005986:	61fb      	str	r3, [r7, #28]
          break;
 8005988:	e00c      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800598a:	4b76      	ldr	r3, [pc, #472]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d107      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599c:	61fb      	str	r3, [r7, #28]
          break;
 800599e:	e003      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80059a0:	bf00      	nop
 80059a2:	e29f      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059a4:	bf00      	nop
 80059a6:	e29d      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059a8:	bf00      	nop
        break;
 80059aa:	e29b      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059ac:	4b6d      	ldr	r3, [pc, #436]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059be:	d025      	beq.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059c6:	d82c      	bhi.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ce:	d013      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d6:	d824      	bhi.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d004      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80059e6:	e01c      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe feba 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
          break;
 80059ee:	e01d      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80059f0:	f7fe fe20 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80059f4:	61f8      	str	r0, [r7, #28]
          break;
 80059f6:	e019      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059f8:	4b5a      	ldr	r3, [pc, #360]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d10f      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8005a06:	4b58      	ldr	r3, [pc, #352]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a08:	61fb      	str	r3, [r7, #28]
          break;
 8005a0a:	e00c      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a0c:	4b55      	ldr	r3, [pc, #340]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d107      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1e:	61fb      	str	r3, [r7, #28]
          break;
 8005a20:	e003      	b.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005a22:	bf00      	nop
 8005a24:	e25e      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a26:	bf00      	nop
 8005a28:	e25c      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a2a:	bf00      	nop
        break;
 8005a2c:	e25a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a2e:	4b4d      	ldr	r3, [pc, #308]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a40:	d007      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a48:	d12f      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fe fdf3 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005a4e:	61f8      	str	r0, [r7, #28]
          break;
 8005a50:	e02e      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005a52:	4b44      	ldr	r3, [pc, #272]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5e:	d126      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005a60:	4b40      	ldr	r3, [pc, #256]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d020      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a6c:	4b3d      	ldr	r3, [pc, #244]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	fb03 f202 	mul.w	r2, r3, r2
 8005a80:	4b38      	ldr	r3, [pc, #224]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a92:	4b34      	ldr	r3, [pc, #208]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	0e5b      	lsrs	r3, r3, #25
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa6:	61fb      	str	r3, [r7, #28]
          break;
 8005aa8:	e001      	b.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005aaa:	bf00      	nop
 8005aac:	e21a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005aae:	bf00      	nop
        break;
 8005ab0:	e218      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ac4:	f7fe fe62 	bl	800478c <HAL_RCC_GetPCLK2Freq>
 8005ac8:	61f8      	str	r0, [r7, #28]
        break;
 8005aca:	e20b      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005acc:	f7fe fdb2 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005ad0:	61f8      	str	r0, [r7, #28]
        break;
 8005ad2:	e207      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ada:	f003 0318 	and.w	r3, r3, #24
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d010      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d834      	bhi.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d024      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005af8:	e02d      	b.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b00:	f000 fbe2 	bl	80062c8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005b04:	61f8      	str	r0, [r7, #28]
          break;
 8005b06:	e02b      	b.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b08:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d122      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b14:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005b20:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	e005      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	61fb      	str	r3, [r7, #28]
          break;
 8005b40:	e00b      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b52:	61fb      	str	r3, [r7, #28]
          break;
 8005b54:	e003      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005b56:	bf00      	nop
 8005b58:	e1c4      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b5a:	bf00      	nop
 8005b5c:	e1c2      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b5e:	bf00      	nop
        break;
 8005b60:	e1c0      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	0800d588 	.word	0x0800d588
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	d013      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8a:	d819      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b98:	d004      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005b9a:	e011      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fe fde0 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	61f8      	str	r0, [r7, #28]
          break;
 8005ba2:	e010      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7fe fd46 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005ba8:	61f8      	str	r0, [r7, #28]
          break;
 8005baa:	e00c      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bac:	4b87      	ldr	r3, [pc, #540]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d104      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005bba:	4b85      	ldr	r3, [pc, #532]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bbc:	61fb      	str	r3, [r7, #28]
          break;
 8005bbe:	e001      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005bc0:	bf00      	nop
 8005bc2:	e18f      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bc4:	bf00      	nop
        break;
 8005bc6:	e18d      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005bc8:	4b80      	ldr	r3, [pc, #512]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bda:	d013      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be2:	d819      	bhi.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf0:	d004      	beq.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005bf2:	e011      	b.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe fdb4 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	61f8      	str	r0, [r7, #28]
          break;
 8005bfa:	e010      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bfc:	f7fe fd1a 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005c00:	61f8      	str	r0, [r7, #28]
          break;
 8005c02:	e00c      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c04:	4b71      	ldr	r3, [pc, #452]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c10:	d104      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005c12:	4b6f      	ldr	r3, [pc, #444]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c14:	61fb      	str	r3, [r7, #28]
          break;
 8005c16:	e001      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005c18:	bf00      	nop
 8005c1a:	e163      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c1c:	bf00      	nop
        break;
 8005c1e:	e161      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005c20:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c32:	d013      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3a:	d819      	bhi.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c48:	d004      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005c4a:	e011      	b.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fe fd88 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005c50:	61f8      	str	r0, [r7, #28]
          break;
 8005c52:	e010      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c54:	f7fe fcee 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005c58:	61f8      	str	r0, [r7, #28]
          break;
 8005c5a:	e00c      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c5c:	4b5b      	ldr	r3, [pc, #364]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c68:	d104      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005c6a:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c6c:	61fb      	str	r3, [r7, #28]
          break;
 8005c6e:	e001      	b.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005c70:	bf00      	nop
 8005c72:	e137      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c74:	bf00      	nop
        break;
 8005c76:	e135      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c78:	4b54      	ldr	r3, [pc, #336]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d011      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d818      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d004      	beq.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005c9c:	e011      	b.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c9e:	f7fe fd5f 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005ca2:	61f8      	str	r0, [r7, #28]
          break;
 8005ca4:	e010      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7fe fcc5 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005caa:	61f8      	str	r0, [r7, #28]
          break;
 8005cac:	e00c      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cae:	4b47      	ldr	r3, [pc, #284]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cba:	d104      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005cbc:	4b44      	ldr	r3, [pc, #272]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cbe:	61fb      	str	r3, [r7, #28]
          break;
 8005cc0:	e001      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005cc2:	bf00      	nop
 8005cc4:	e10e      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005cc6:	bf00      	nop
        break;
 8005cc8:	e10c      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005cca:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cdc:	d02c      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ce4:	d833      	bhi.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cec:	d01a      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cf4:	d82b      	bhi.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005d04:	e023      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d06:	f7fe fd2b 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005d0a:	61f8      	str	r0, [r7, #28]
          break;
 8005d0c:	e026      	b.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d11a      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005d1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d20:	61fb      	str	r3, [r7, #28]
          break;
 8005d22:	e016      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d24:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d111      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d34:	61fb      	str	r3, [r7, #28]
          break;
 8005d36:	e00e      	b.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d109      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	61fb      	str	r3, [r7, #28]
          break;
 8005d4c:	e005      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005d4e:	bf00      	nop
 8005d50:	e0c8      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d52:	bf00      	nop
 8005d54:	e0c6      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d56:	bf00      	nop
 8005d58:	e0c4      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d5a:	bf00      	nop
        break;
 8005d5c:	e0c2      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d70:	d030      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d78:	d837      	bhi.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d80:	d01a      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d88:	d82f      	bhi.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d96:	d004      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005d98:	e027      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d9a:	f7fe fce1 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8005d9e:	61f8      	str	r0, [r7, #28]
          break;
 8005da0:	e02a      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11e      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005db0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005db4:	61fb      	str	r3, [r7, #28]
          break;
 8005db6:	e01a      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc4:	d115      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005dc6:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005dc8:	61fb      	str	r3, [r7, #28]
          break;
 8005dca:	e012      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005dd4:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d109      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de6:	61fb      	str	r3, [r7, #28]
          break;
 8005de8:	e005      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005dea:	bf00      	nop
 8005dec:	e07a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dee:	bf00      	nop
 8005df0:	e078      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005df2:	bf00      	nop
 8005df4:	e076      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005df6:	bf00      	nop
        break;
 8005df8:	e074      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005dfa:	4b3d      	ldr	r3, [pc, #244]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e0c:	d02c      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e14:	d855      	bhi.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e22:	d004      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005e24:	e04d      	b.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe fc05 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
          break;
 8005e2c:	e04e      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e2e:	4b30      	ldr	r3, [pc, #192]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d145      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	e005      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005e52:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e64:	61fb      	str	r3, [r7, #28]
          break;
 8005e66:	e02e      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e74:	d129      	bne.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e76:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e82:	d122      	bne.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e84:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e8e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	fb03 f202 	mul.w	r2, r3, r2
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	0d5b      	lsrs	r3, r3, #21
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	61fb      	str	r3, [r7, #28]
          break;
 8005ec0:	e003      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005ec2:	bf00      	nop
 8005ec4:	e00e      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ec6:	bf00      	nop
 8005ec8:	e00c      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005eca:	bf00      	nop
        break;
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ed2:	bf00      	nop
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ed6:	bf00      	nop
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ee2:	bf00      	nop
    }
  }

  return(frequency);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	0800d588 	.word	0x0800d588

08005ef8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f06:	4b72      	ldr	r3, [pc, #456]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f12:	4b6f      	ldr	r3, [pc, #444]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0203 	and.w	r2, r3, #3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d103      	bne.n	8005f2a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
       ||
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d142      	bne.n	8005fb0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e03f      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d018      	beq.n	8005f6a <RCCEx_PLLSAI1_Config+0x72>
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d825      	bhi.n	8005f88 <RCCEx_PLLSAI1_Config+0x90>
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d002      	beq.n	8005f46 <RCCEx_PLLSAI1_Config+0x4e>
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d009      	beq.n	8005f58 <RCCEx_PLLSAI1_Config+0x60>
 8005f44:	e020      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f46:	4b62      	ldr	r3, [pc, #392]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11d      	bne.n	8005f8e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f56:	e01a      	b.n	8005f8e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f58:	4b5d      	ldr	r3, [pc, #372]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d116      	bne.n	8005f92 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f68:	e013      	b.n	8005f92 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f6a:	4b59      	ldr	r3, [pc, #356]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f76:	4b56      	ldr	r3, [pc, #344]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f86:	e006      	b.n	8005f96 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e004      	b.n	8005f98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f96:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f9e:	4b4c      	ldr	r3, [pc, #304]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f023 0203 	bic.w	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4949      	ldr	r1, [pc, #292]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 8086 	bne.w	80060c4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fb8:	4b45      	ldr	r3, [pc, #276]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a44      	ldr	r2, [pc, #272]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc4:	f7fb face 	bl	8001564 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fca:	e009      	b.n	8005fe0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fcc:	f7fb faca 	bl	8001564 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d902      	bls.n	8005fe0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8005fde:	e005      	b.n	8005fec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fe0:	4b3b      	ldr	r3, [pc, #236]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1ef      	bne.n	8005fcc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d168      	bne.n	80060c4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d113      	bne.n	8006020 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ff8:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6892      	ldr	r2, [r2, #8]
 8006004:	0211      	lsls	r1, r2, #8
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68d2      	ldr	r2, [r2, #12]
 800600a:	06d2      	lsls	r2, r2, #27
 800600c:	4311      	orrs	r1, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6852      	ldr	r2, [r2, #4]
 8006012:	3a01      	subs	r2, #1
 8006014:	0112      	lsls	r2, r2, #4
 8006016:	430a      	orrs	r2, r1
 8006018:	492d      	ldr	r1, [pc, #180]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800601a:	4313      	orrs	r3, r2
 800601c:	610b      	str	r3, [r1, #16]
 800601e:	e02d      	b.n	800607c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d115      	bne.n	8006052 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006026:	4b2a      	ldr	r3, [pc, #168]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800602c:	4013      	ands	r3, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6892      	ldr	r2, [r2, #8]
 8006032:	0211      	lsls	r1, r2, #8
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6912      	ldr	r2, [r2, #16]
 8006038:	0852      	lsrs	r2, r2, #1
 800603a:	3a01      	subs	r2, #1
 800603c:	0552      	lsls	r2, r2, #21
 800603e:	4311      	orrs	r1, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6852      	ldr	r2, [r2, #4]
 8006044:	3a01      	subs	r2, #1
 8006046:	0112      	lsls	r2, r2, #4
 8006048:	430a      	orrs	r2, r1
 800604a:	4921      	ldr	r1, [pc, #132]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800604c:	4313      	orrs	r3, r2
 800604e:	610b      	str	r3, [r1, #16]
 8006050:	e014      	b.n	800607c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006052:	4b1f      	ldr	r3, [pc, #124]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6892      	ldr	r2, [r2, #8]
 800605e:	0211      	lsls	r1, r2, #8
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6952      	ldr	r2, [r2, #20]
 8006064:	0852      	lsrs	r2, r2, #1
 8006066:	3a01      	subs	r2, #1
 8006068:	0652      	lsls	r2, r2, #25
 800606a:	4311      	orrs	r1, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6852      	ldr	r2, [r2, #4]
 8006070:	3a01      	subs	r2, #1
 8006072:	0112      	lsls	r2, r2, #4
 8006074:	430a      	orrs	r2, r1
 8006076:	4916      	ldr	r1, [pc, #88]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006078:	4313      	orrs	r3, r2
 800607a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800607c:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006082:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006086:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fb fa6c 	bl	8001564 <HAL_GetTick>
 800608c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800608e:	e009      	b.n	80060a4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006090:	f7fb fa68 	bl	8001564 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d902      	bls.n	80060a4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	73fb      	strb	r3, [r7, #15]
          break;
 80060a2:	e005      	b.n	80060b0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ef      	beq.n	8006090 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	4904      	ldr	r1, [pc, #16]	; (80060d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40021000 	.word	0x40021000
 80060d4:	07ff800f 	.word	0x07ff800f
 80060d8:	ff9f800f 	.word	0xff9f800f
 80060dc:	f9ff800f 	.word	0xf9ff800f

080060e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060ee:	4b72      	ldr	r3, [pc, #456]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060fa:	4b6f      	ldr	r3, [pc, #444]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0203 	and.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d103      	bne.n	8006112 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
       ||
 800610e:	2b00      	cmp	r3, #0
 8006110:	d142      	bne.n	8006198 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e03f      	b.n	8006198 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d018      	beq.n	8006152 <RCCEx_PLLSAI2_Config+0x72>
 8006120:	2b03      	cmp	r3, #3
 8006122:	d825      	bhi.n	8006170 <RCCEx_PLLSAI2_Config+0x90>
 8006124:	2b01      	cmp	r3, #1
 8006126:	d002      	beq.n	800612e <RCCEx_PLLSAI2_Config+0x4e>
 8006128:	2b02      	cmp	r3, #2
 800612a:	d009      	beq.n	8006140 <RCCEx_PLLSAI2_Config+0x60>
 800612c:	e020      	b.n	8006170 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800612e:	4b62      	ldr	r3, [pc, #392]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d11d      	bne.n	8006176 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800613e:	e01a      	b.n	8006176 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006140:	4b5d      	ldr	r3, [pc, #372]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006148:	2b00      	cmp	r3, #0
 800614a:	d116      	bne.n	800617a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006150:	e013      	b.n	800617a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006152:	4b59      	ldr	r3, [pc, #356]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800615e:	4b56      	ldr	r3, [pc, #344]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800616e:	e006      	b.n	800617e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]
      break;
 8006174:	e004      	b.n	8006180 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006176:	bf00      	nop
 8006178:	e002      	b.n	8006180 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800617a:	bf00      	nop
 800617c:	e000      	b.n	8006180 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800617e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d108      	bne.n	8006198 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006186:	4b4c      	ldr	r3, [pc, #304]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f023 0203 	bic.w	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4949      	ldr	r1, [pc, #292]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006194:	4313      	orrs	r3, r2
 8006196:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 8086 	bne.w	80062ac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061a0:	4b45      	ldr	r3, [pc, #276]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a44      	ldr	r2, [pc, #272]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ac:	f7fb f9da 	bl	8001564 <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061b2:	e009      	b.n	80061c8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061b4:	f7fb f9d6 	bl	8001564 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d902      	bls.n	80061c8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
        break;
 80061c6:	e005      	b.n	80061d4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061c8:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ef      	bne.n	80061b4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d168      	bne.n	80062ac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d113      	bne.n	8006208 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061e0:	4b35      	ldr	r3, [pc, #212]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	4b35      	ldr	r3, [pc, #212]	; (80062bc <RCCEx_PLLSAI2_Config+0x1dc>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6892      	ldr	r2, [r2, #8]
 80061ec:	0211      	lsls	r1, r2, #8
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68d2      	ldr	r2, [r2, #12]
 80061f2:	06d2      	lsls	r2, r2, #27
 80061f4:	4311      	orrs	r1, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6852      	ldr	r2, [r2, #4]
 80061fa:	3a01      	subs	r2, #1
 80061fc:	0112      	lsls	r2, r2, #4
 80061fe:	430a      	orrs	r2, r1
 8006200:	492d      	ldr	r1, [pc, #180]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006202:	4313      	orrs	r3, r2
 8006204:	614b      	str	r3, [r1, #20]
 8006206:	e02d      	b.n	8006264 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d115      	bne.n	800623a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800620e:	4b2a      	ldr	r3, [pc, #168]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	4b2b      	ldr	r3, [pc, #172]	; (80062c0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	0211      	lsls	r1, r2, #8
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6912      	ldr	r2, [r2, #16]
 8006220:	0852      	lsrs	r2, r2, #1
 8006222:	3a01      	subs	r2, #1
 8006224:	0552      	lsls	r2, r2, #21
 8006226:	4311      	orrs	r1, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6852      	ldr	r2, [r2, #4]
 800622c:	3a01      	subs	r2, #1
 800622e:	0112      	lsls	r2, r2, #4
 8006230:	430a      	orrs	r2, r1
 8006232:	4921      	ldr	r1, [pc, #132]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006234:	4313      	orrs	r3, r2
 8006236:	614b      	str	r3, [r1, #20]
 8006238:	e014      	b.n	8006264 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800623a:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6892      	ldr	r2, [r2, #8]
 8006246:	0211      	lsls	r1, r2, #8
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6952      	ldr	r2, [r2, #20]
 800624c:	0852      	lsrs	r2, r2, #1
 800624e:	3a01      	subs	r2, #1
 8006250:	0652      	lsls	r2, r2, #25
 8006252:	4311      	orrs	r1, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6852      	ldr	r2, [r2, #4]
 8006258:	3a01      	subs	r2, #1
 800625a:	0112      	lsls	r2, r2, #4
 800625c:	430a      	orrs	r2, r1
 800625e:	4916      	ldr	r1, [pc, #88]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006260:	4313      	orrs	r3, r2
 8006262:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006264:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a13      	ldr	r2, [pc, #76]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800626a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fb f978 	bl	8001564 <HAL_GetTick>
 8006274:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006276:	e009      	b.n	800628c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006278:	f7fb f974 	bl	8001564 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d902      	bls.n	800628c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	73fb      	strb	r3, [r7, #15]
          break;
 800628a:	e005      	b.n	8006298 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ef      	beq.n	8006278 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	4904      	ldr	r1, [pc, #16]	; (80062b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000
 80062bc:	07ff800f 	.word	0x07ff800f
 80062c0:	ff9f800f 	.word	0xff9f800f
 80062c4:	f9ff800f 	.word	0xf9ff800f

080062c8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b089      	sub	sp, #36	; 0x24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e4:	d10b      	bne.n	80062fe <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80062e6:	4b7e      	ldr	r3, [pc, #504]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ec:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062f0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b60      	cmp	r3, #96	; 0x60
 80062f6:	d112      	bne.n	800631e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062f8:	4b7a      	ldr	r3, [pc, #488]	; (80064e4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e00f      	b.n	800631e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006304:	d10b      	bne.n	800631e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006306:	4b76      	ldr	r3, [pc, #472]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006310:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006318:	d101      	bne.n	800631e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800631a:	4b72      	ldr	r3, [pc, #456]	; (80064e4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800631c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 80d6 	bne.w	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d003      	beq.n	8006338 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006336:	d13b      	bne.n	80063b0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006338:	4b69      	ldr	r3, [pc, #420]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006344:	f040 80c4 	bne.w	80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006348:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80bd 	beq.w	80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006356:	4b62      	ldr	r3, [pc, #392]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	3301      	adds	r3, #1
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800636a:	4b5d      	ldr	r3, [pc, #372]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006374:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006376:	4b5a      	ldr	r3, [pc, #360]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	0edb      	lsrs	r3, r3, #27
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006388:	4b55      	ldr	r3, [pc, #340]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006394:	2311      	movs	r3, #17
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e001      	b.n	800639e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800639a:	2307      	movs	r3, #7
 800639c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	fb03 f202 	mul.w	r2, r3, r2
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80063ae:	e08f      	b.n	80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d13a      	bne.n	800642c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80063b6:	4b4a      	ldr	r3, [pc, #296]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c2:	f040 8086 	bne.w	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80063c6:	4b46      	ldr	r3, [pc, #280]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d07f      	beq.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063d2:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	091b      	lsrs	r3, r3, #4
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	3301      	adds	r3, #1
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063e6:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80063f2:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	0edb      	lsrs	r3, r3, #27
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006404:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006410:	2311      	movs	r3, #17
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e001      	b.n	800641a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006416:	2307      	movs	r3, #7
 8006418:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	fb03 f202 	mul.w	r2, r3, r2
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e052      	b.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d003      	beq.n	800643a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d109      	bne.n	800644e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800643a:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006446:	d144      	bne.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006448:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800644a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800644c:	e041      	b.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b20      	cmp	r3, #32
 8006452:	d003      	beq.n	800645c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645a:	d13a      	bne.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800645c:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006468:	d133      	bne.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800646a:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d02d      	beq.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	3301      	adds	r3, #1
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006496:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	0edb      	lsrs	r3, r3, #27
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80064b4:	2311      	movs	r3, #17
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e001      	b.n	80064be <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80064ba:	2307      	movs	r3, #7
 80064bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	fb03 f202 	mul.w	r2, r3, r2
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	e000      	b.n	80064d2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80064d0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80064d2:	69fb      	ldr	r3, [r7, #28]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3724      	adds	r7, #36	; 0x24
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40021000 	.word	0x40021000
 80064e4:	001fff68 	.word	0x001fff68
 80064e8:	00f42400 	.word	0x00f42400

080064ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08a      	sub	sp, #40	; 0x28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e078      	b.n	80065f0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7fa fd91 	bl	8001038 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2203      	movs	r2, #3
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f86a 	bl	80065f8 <HAL_SD_InitCard>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e060      	b.n	80065f0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fdb5 	bl	80070a4 <HAL_SD_GetCardStatus>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e055      	b.n	80065f0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006544:	7e3b      	ldrb	r3, [r7, #24]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800654a:	7e7b      	ldrb	r3, [r7, #25]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10a      	bne.n	800656e <HAL_SD_Init+0x82>
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_SD_Init+0x78>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800656a:	65da      	str	r2, [r3, #92]	; 0x5c
 800656c:	e00b      	b.n	8006586 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d104      	bne.n	8006580 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c
 800657e:	e002      	b.n	8006586 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fe6b 	bl	8007268 <HAL_SD_ConfigWideBusOperation>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e029      	b.n	80065f0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800659c:	f7fa ffe2 	bl	8001564 <HAL_GetTick>
 80065a0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80065a2:	e014      	b.n	80065ce <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80065a4:	f7fa ffde 	bl	8001564 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b2:	d10c      	bne.n	80065ce <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e010      	b.n	80065f0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 ff5e 	bl	8007490 <HAL_SD_GetCardState>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d1e4      	bne.n	80065a4 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065f8:	b5b0      	push	{r4, r5, r7, lr}
 80065fa:	b08e      	sub	sp, #56	; 0x38
 80065fc:	af04      	add	r7, sp, #16
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006600:	2300      	movs	r3, #0
 8006602:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006610:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006614:	f7fe fd50 	bl	80050b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006618:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e079      	b.n	8006728 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	4a3d      	ldr	r2, [pc, #244]	; (8006730 <HAL_SD_InitCard+0x138>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	091b      	lsrs	r3, r3, #4
 8006640:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d107      	bne.n	8006660 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0210 	orr.w	r2, r2, #16
 800665e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681d      	ldr	r5, [r3, #0]
 8006664:	466c      	mov	r4, sp
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800666e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006672:	f107 0308 	add.w	r3, r7, #8
 8006676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006678:	4628      	mov	r0, r5
 800667a:	f002 f90f 	bl	800889c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f002 f952 	bl	800892c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006694:	4a27      	ldr	r2, [pc, #156]	; (8006734 <HAL_SD_InitCard+0x13c>)
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	3301      	adds	r3, #1
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fa ff6c 	bl	800157c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 ffd3 	bl	8007650 <SD_PowerON>
 80066aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e02e      	b.n	8006728 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 ff00 	bl	80074d0 <SD_InitCard>
 80066d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e01b      	b.n	8006728 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 f9ad 	bl	8008a58 <SDMMC_CmdBlockLength>
 80066fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00f      	beq.n	8006726 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a0b      	ldr	r2, [pc, #44]	; (8006738 <HAL_SD_InitCard+0x140>)
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	; 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bdb0      	pop	{r4, r5, r7, pc}
 8006730:	014f8b59 	.word	0x014f8b59
 8006734:	00012110 	.word	0x00012110
 8006738:	1fe00fff 	.word	0x1fe00fff

0800673c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08c      	sub	sp, #48	; 0x30
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e08d      	b.n	8006880 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 8086 	bne.w	800687e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006782:	429a      	cmp	r2, r3
 8006784:	d907      	bls.n	8006796 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e074      	b.n	8006880 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2203      	movs	r2, #3
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	025a      	lsls	r2, r3, #9
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d002      	beq.n	80067c2 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	025b      	lsls	r3, r3, #9
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	025b      	lsls	r3, r3, #9
 80067cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067ce:	2390      	movs	r3, #144	; 0x90
 80067d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067d2:	2302      	movs	r3, #2
 80067d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80067da:	2300      	movs	r3, #0
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f107 0210 	add.w	r2, r7, #16
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 f909 	bl	8008a00 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fc:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d90a      	bls.n	800682a <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2282      	movs	r2, #130	; 0x82
 8006818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006820:	4618      	mov	r0, r3
 8006822:	f002 f95f 	bl	8008ae4 <SDMMC_CmdReadMultiBlock>
 8006826:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006828:	e009      	b.n	800683e <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2281      	movs	r2, #129	; 0x81
 800682e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006836:	4618      	mov	r0, r3
 8006838:	f002 f931 	bl	8008a9e <SDMMC_CmdReadSingleBlock>
 800683c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d012      	beq.n	800686a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a0f      	ldr	r2, [pc, #60]	; (8006888 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800684a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	431a      	orrs	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e00a      	b.n	8006880 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006878:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3730      	adds	r7, #48	; 0x30
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	1fe00fff 	.word	0x1fe00fff

0800688c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08c      	sub	sp, #48	; 0x30
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d107      	bne.n	80068b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e08d      	b.n	80069d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 8086 	bne.w	80069ce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	441a      	add	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d907      	bls.n	80068e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e074      	b.n	80069d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2203      	movs	r2, #3
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	025a      	lsls	r2, r3, #9
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d002      	beq.n	8006912 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	025b      	lsls	r3, r3, #9
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006916:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	025b      	lsls	r3, r3, #9
 800691c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800691e:	2390      	movs	r3, #144	; 0x90
 8006920:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006926:	2300      	movs	r3, #0
 8006928:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800692a:	2300      	movs	r3, #0
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f107 0210 	add.w	r2, r7, #16
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f002 f861 	bl	8008a00 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800694c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2201      	movs	r2, #1
 800695c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d90a      	bls.n	800697a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	22a0      	movs	r2, #160	; 0xa0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006970:	4618      	mov	r0, r3
 8006972:	f002 f8fd 	bl	8008b70 <SDMMC_CmdWriteMultiBlock>
 8006976:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006978:	e009      	b.n	800698e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2290      	movs	r2, #144	; 0x90
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006986:	4618      	mov	r0, r3
 8006988:	f002 f8cf 	bl	8008b2a <SDMMC_CmdWriteSingleBlock>
 800698c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a0f      	ldr	r2, [pc, #60]	; (80069d8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e00a      	b.n	80069d0 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80069c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e000      	b.n	80069d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80069ce:	2302      	movs	r3, #2
  }
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3730      	adds	r7, #48	; 0x30
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	1fe00fff 	.word	0x1fe00fff

080069dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_SD_IRQHandler+0x2e>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 f98e 	bl	8007d24 <SD_Read_IT>
 8006a08:	e199      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80ae 	beq.w	8006b76 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006a32:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006a36:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a46:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a56:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d038      	beq.n	8006ad4 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <HAL_SD_IRQHandler+0x9a>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d011      	beq.n	8006a9a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 f89c 	bl	8008bb8 <SDMMC_CmdStopTransfer>
 8006a80:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f957 	bl	8006d48 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a90      	ldr	r2, [pc, #576]	; (8006ce0 <HAL_SD_IRQHandler+0x304>)
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_SD_IRQHandler+0xe8>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f002 fd63 	bl	8009590 <HAL_SD_RxCpltCallback>
 8006aca:	e138      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f002 fd55 	bl	800957c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006ad2:	e134      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 812f 	beq.w	8006d3e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2200      	movs	r2, #0
 8006aee:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <HAL_SD_IRQHandler+0x130>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d011      	beq.n	8006b30 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 f851 	bl	8008bb8 <SDMMC_CmdStopTransfer>
 8006b16:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f90c 	bl	8006d48 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_SD_IRQHandler+0x176>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f002 fd12 	bl	800957c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <HAL_SD_IRQHandler+0x192>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80e8 	beq.w	8006d3e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f002 fd0e 	bl	8009590 <HAL_SD_RxCpltCallback>
}
 8006b74:	e0e3      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_SD_IRQHandler+0x1ba>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 f919 	bl	8007dc6 <SD_Write_IT>
 8006b94:	e0d3      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 809f 	beq.w	8006ce4 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	f043 0202 	orr.w	r2, r3, #2
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	f043 0208 	orr.w	r2, r3, #8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	f043 0220 	orr.w	r2, r3, #32
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	f043 0210 	orr.w	r2, r3, #16
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a33      	ldr	r2, [pc, #204]	; (8006ce0 <HAL_SD_IRQHandler+0x304>)
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c24:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c34:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c54:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 ffac 	bl	8008bb8 <SDMMC_CmdStopTransfer>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f852 	bl	8006d48 <HAL_SD_ErrorCallback>
}
 8006ca4:	e04b      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d046      	beq.n	8006d3e <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d042      	beq.n	8006d3e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cc6:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f835 	bl	8006d48 <HAL_SD_ErrorCallback>
}
 8006cde:	e02e      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
 8006ce0:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d025      	beq.n	8006d3e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10c      	bne.n	8006d24 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f8d4 	bl	8007ec2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006d1a:	e010      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 f8bc 	bl	8007e9a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006d22:	e00c      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f8bd 	bl	8007eae <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006d34:	e003      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 f8a5 	bl	8007e86 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006d3c:	e7ff      	b.n	8006d3e <HAL_SD_IRQHandler+0x362>
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop

08006d48 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6a:	0f9b      	lsrs	r3, r3, #30
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d76:	0e9b      	lsrs	r3, r3, #26
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9a:	0c1b      	lsrs	r3, r3, #16
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbc:	0d1b      	lsrs	r3, r3, #20
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc8:	0c1b      	lsrs	r3, r3, #16
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dda:	0bdb      	lsrs	r3, r3, #15
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dec:	0b9b      	lsrs	r3, r3, #14
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfe:	0b5b      	lsrs	r3, r3, #13
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	0b1b      	lsrs	r3, r3, #12
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d163      	bne.n	8006ef4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	009a      	lsls	r2, r3, #2
 8006e32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e36:	4013      	ands	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e3c:	0f92      	lsrs	r2, r2, #30
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e48:	0edb      	lsrs	r3, r3, #27
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e5a:	0e1b      	lsrs	r3, r3, #24
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e6c:	0d5b      	lsrs	r3, r3, #21
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e7e:	0c9b      	lsrs	r3, r3, #18
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e90:	0bdb      	lsrs	r3, r3, #15
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	7e1b      	ldrb	r3, [r3, #24]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ebe:	fb03 f202 	mul.w	r2, r3, r2
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	7a1b      	ldrb	r3, [r3, #8]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	409a      	lsls	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ee0:	0a52      	lsrs	r2, r2, #9
 8006ee2:	fb03 f202 	mul.w	r2, r3, r2
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ef2:	e031      	b.n	8006f58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d11d      	bne.n	8006f38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	3301      	adds	r3, #1
 8006f18:	029a      	lsls	r2, r3, #10
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f2c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	659a      	str	r2, [r3, #88]	; 0x58
 8006f36:	e00f      	b.n	8006f58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a58      	ldr	r2, [pc, #352]	; (80070a0 <HAL_SD_GetCardCSD+0x344>)
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e09d      	b.n	8007094 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f5c:	0b9b      	lsrs	r3, r3, #14
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f6e:	09db      	lsrs	r3, r3, #7
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f90:	0fdb      	lsrs	r3, r3, #31
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9c:	0f5b      	lsrs	r3, r3, #29
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fae:	0e9b      	lsrs	r3, r3, #26
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc0:	0d9b      	lsrs	r3, r3, #22
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd2:	0d5b      	lsrs	r3, r3, #21
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007002:	0bdb      	lsrs	r3, r3, #15
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	b2da      	uxtb	r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	0b9b      	lsrs	r3, r3, #14
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	b2da      	uxtb	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702a:	0b5b      	lsrs	r3, r3, #13
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	b2da      	uxtb	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	0b1b      	lsrs	r3, r3, #12
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007052:	0a9b      	lsrs	r3, r3, #10
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	b2da      	uxtb	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	b2da      	uxtb	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007082:	b2da      	uxtb	r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	1fe00fff 	.word	0x1fe00fff

080070a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b094      	sub	sp, #80	; 0x50
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80070b4:	f107 0308 	add.w	r3, r7, #8
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fbd4 	bl	8007868 <SD_SendSDStatus>
 80070c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a4f      	ldr	r2, [pc, #316]	; (800720c <HAL_SD_GetCardStatus+0x168>)
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80070ea:	e070      	b.n	80071ce <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	099b      	lsrs	r3, r3, #6
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	b2da      	uxtb	r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	b29b      	uxth	r3, r3
 8007112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007116:	b29a      	uxth	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	0e1b      	lsrs	r3, r3, #24
 800711c:	b29b      	uxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	061a      	lsls	r2, r3, #24
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007132:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800713c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	0e1b      	lsrs	r3, r3, #24
 8007142:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b2da      	uxtb	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	0d1b      	lsrs	r3, r3, #20
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	b2da      	uxtb	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	0c1b      	lsrs	r3, r3, #16
 800716e:	b29b      	uxth	r3, r3
 8007170:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007174:	b29a      	uxth	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	b29b      	uxth	r3, r3
 800717a:	b2db      	uxtb	r3, r3
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29a      	uxth	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	0a9b      	lsrs	r3, r3, #10
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007190:	b2da      	uxtb	r2, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	091b      	lsrs	r3, r3, #4
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 fc3e 	bl	8008a58 <SDMMC_CmdBlockLength>
 80071dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80071de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <HAL_SD_GetCardStatus+0x168>)
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007200:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007204:	4618      	mov	r0, r3
 8007206:	3750      	adds	r7, #80	; 0x50
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	1fe00fff 	.word	0x1fe00fff

08007210 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007268:	b5b0      	push	{r4, r5, r7, lr}
 800726a:	b090      	sub	sp, #64	; 0x40
 800726c:	af04      	add	r7, sp, #16
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2203      	movs	r2, #3
 800727c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007284:	2b03      	cmp	r3, #3
 8007286:	d02e      	beq.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728e:	d106      	bne.n	800729e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
 800729c:	e029      	b.n	80072f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a4:	d10a      	bne.n	80072bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fbd6 	bl	8007a58 <SD_WideBus_Enable>
 80072ac:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38
 80072ba:	e01a      	b.n	80072f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc13 	bl	8007aee <SD_WideBus_Disable>
 80072c8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
 80072d6:	e00c      	b.n	80072f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38
 80072e4:	e005      	b.n	80072f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a60      	ldr	r2, [pc, #384]	; (8007480 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007308:	e097      	b.n	800743a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800730a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800730e:	f7fd fed3 	bl	80050b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007312:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8086 	beq.w	8007428 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	4952      	ldr	r1, [pc, #328]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800733a:	fba1 1303 	umull	r1, r3, r1, r3
 800733e:	0e1b      	lsrs	r3, r3, #24
 8007340:	429a      	cmp	r2, r3
 8007342:	d303      	bcc.n	800734c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	e05a      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007354:	d103      	bne.n	800735e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	e051      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007366:	d126      	bne.n	80073b6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10e      	bne.n	800738e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	4a45      	ldr	r2, [pc, #276]	; (8007488 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d906      	bls.n	8007386 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	4a42      	ldr	r2, [pc, #264]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	0e5b      	lsrs	r3, r3, #25
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e03d      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e039      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <HAL_SD_ConfigWideBusOperation+0x220>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d906      	bls.n	80073ae <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	4a38      	ldr	r2, [pc, #224]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	0e5b      	lsrs	r3, r3, #25
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e029      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e025      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10e      	bne.n	80073dc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	4a32      	ldr	r2, [pc, #200]	; (800748c <HAL_SD_ConfigWideBusOperation+0x224>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d906      	bls.n	80073d4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	4a2e      	ldr	r2, [pc, #184]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	0e1b      	lsrs	r3, r3, #24
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	e016      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	e012      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	4a28      	ldr	r2, [pc, #160]	; (800748c <HAL_SD_ConfigWideBusOperation+0x224>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d906      	bls.n	80073fc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	4a24      	ldr	r2, [pc, #144]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	0e1b      	lsrs	r3, r3, #24
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e002      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681d      	ldr	r5, [r3, #0]
 800740c:	466c      	mov	r4, sp
 800740e:	f107 0318 	add.w	r3, r7, #24
 8007412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800741a:	f107 030c 	add.w	r3, r7, #12
 800741e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007420:	4628      	mov	r0, r5
 8007422:	f001 fa3b 	bl	800889c <SDMMC_Init>
 8007426:	e008      	b.n	800743a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007442:	4618      	mov	r0, r3
 8007444:	f001 fb08 	bl	8008a58 <SDMMC_CmdBlockLength>
 8007448:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bdb0      	pop	{r4, r5, r7, pc}
 800747e:	bf00      	nop
 8007480:	1fe00fff 	.word	0x1fe00fff
 8007484:	55e63b89 	.word	0x55e63b89
 8007488:	02faf080 	.word	0x02faf080
 800748c:	017d7840 	.word	0x017d7840

08007490 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fab0 	bl	8007a08 <SD_SendStatus>
 80074a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	0a5b      	lsrs	r3, r3, #9
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80074c6:	693b      	ldr	r3, [r7, #16]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074d0:	b5b0      	push	{r4, r5, r7, lr}
 80074d2:	b090      	sub	sp, #64	; 0x40
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80074d8:	2301      	movs	r3, #1
 80074da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fa35 	bl	8008950 <SDMMC_GetPowerState>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d102      	bne.n	80074f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074f0:	e0a9      	b.n	8007646 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d02e      	beq.n	8007558 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 fc7a 	bl	8008df8 <SDMMC_CmdSendCID>
 8007504:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <SD_InitCard+0x40>
    {
      return errorstate;
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	e09a      	b.n	8007646 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fa5f 	bl	80089da <SDMMC_GetResponse>
 800751c:	4602      	mov	r2, r0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2104      	movs	r1, #4
 8007528:	4618      	mov	r0, r3
 800752a:	f001 fa56 	bl	80089da <SDMMC_GetResponse>
 800752e:	4602      	mov	r2, r0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2108      	movs	r1, #8
 800753a:	4618      	mov	r0, r3
 800753c:	f001 fa4d 	bl	80089da <SDMMC_GetResponse>
 8007540:	4602      	mov	r2, r0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	210c      	movs	r1, #12
 800754c:	4618      	mov	r0, r3
 800754e:	f001 fa44 	bl	80089da <SDMMC_GetResponse>
 8007552:	4602      	mov	r2, r0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755c:	2b03      	cmp	r3, #3
 800755e:	d00d      	beq.n	800757c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f107 020e 	add.w	r2, r7, #14
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fc83 	bl	8008e76 <SDMMC_CmdSetRelAdd>
 8007570:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <SD_InitCard+0xac>
    {
      return errorstate;
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	e064      	b.n	8007646 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007580:	2b03      	cmp	r3, #3
 8007582:	d036      	beq.n	80075f2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007584:	89fb      	ldrh	r3, [r7, #14]
 8007586:	461a      	mov	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007594:	041b      	lsls	r3, r3, #16
 8007596:	4619      	mov	r1, r3
 8007598:	4610      	mov	r0, r2
 800759a:	f001 fc4c 	bl	8008e36 <SDMMC_CmdSendCSD>
 800759e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <SD_InitCard+0xda>
    {
      return errorstate;
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	e04d      	b.n	8007646 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 fa12 	bl	80089da <SDMMC_GetResponse>
 80075b6:	4602      	mov	r2, r0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2104      	movs	r1, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 fa09 	bl	80089da <SDMMC_GetResponse>
 80075c8:	4602      	mov	r2, r0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2108      	movs	r1, #8
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 fa00 	bl	80089da <SDMMC_GetResponse>
 80075da:	4602      	mov	r2, r0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	210c      	movs	r1, #12
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f9f7 	bl	80089da <SDMMC_GetResponse>
 80075ec:	4602      	mov	r2, r0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2104      	movs	r1, #4
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 f9ee 	bl	80089da <SDMMC_GetResponse>
 80075fe:	4603      	mov	r3, r0
 8007600:	0d1a      	lsrs	r2, r3, #20
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007606:	f107 0310 	add.w	r3, r7, #16
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fba5 	bl	8006d5c <HAL_SD_GetCardCSD>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800761c:	e013      	b.n	8007646 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007626:	041b      	lsls	r3, r3, #16
 8007628:	2200      	movs	r2, #0
 800762a:	461c      	mov	r4, r3
 800762c:	4615      	mov	r5, r2
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	4608      	mov	r0, r1
 8007634:	f001 faf6 	bl	8008c24 <SDMMC_CmdSelDesel>
 8007638:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800763a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <SD_InitCard+0x174>
  {
    return errorstate;
 8007640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007642:	e000      	b.n	8007646 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3740      	adds	r7, #64	; 0x40
 800764a:	46bd      	mov	sp, r7
 800764c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007650 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007664:	f7f9 ff7e 	bl	8001564 <HAL_GetTick>
 8007668:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f001 fafc 	bl	8008c6c <SDMMC_CmdGoIdleState>
 8007674:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <SD_PowerON+0x30>
  {
    return errorstate;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	e0ed      	b.n	800785c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fb0f 	bl	8008ca8 <SDMMC_CmdOperCond>
 800768a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f001 fae5 	bl	8008c6c <SDMMC_CmdGoIdleState>
 80076a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <SD_PowerON+0x64>
    {
      return errorstate;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	e0d6      	b.n	800785c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d137      	bne.n	800772c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 fb10 	bl	8008ce8 <SDMMC_CmdAppCommand>
 80076c8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02d      	beq.n	800772c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076d4:	e0c2      	b.n	800785c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 fb03 	bl	8008ce8 <SDMMC_CmdAppCommand>
 80076e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <SD_PowerON+0x9e>
    {
      return errorstate;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	e0b6      	b.n	800785c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	495c      	ldr	r1, [pc, #368]	; (8007864 <SD_PowerON+0x214>)
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fb1a 	bl	8008d2e <SDMMC_CmdAppOperCommand>
 80076fa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007702:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007706:	e0a9      	b.n	800785c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f001 f963 	bl	80089da <SDMMC_GetResponse>
 8007714:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	0fdb      	lsrs	r3, r3, #31
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <SD_PowerON+0xd2>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <SD_PowerON+0xd4>
 8007722:	2300      	movs	r3, #0
 8007724:	61bb      	str	r3, [r7, #24]

    count++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007732:	4293      	cmp	r3, r2
 8007734:	d802      	bhi.n	800773c <SD_PowerON+0xec>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0cc      	beq.n	80076d6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007742:	4293      	cmp	r3, r2
 8007744:	d902      	bls.n	800774c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800774a:	e087      	b.n	800785c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d07e      	beq.n	8007854 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d17a      	bne.n	800785a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d075      	beq.n	800785a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007774:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0208 	orr.w	r2, r2, #8
 8007784:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fbda 	bl	8008f44 <SDMMC_CmdVoltageSwitch>
 8007790:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <SD_PowerON+0x162>
        {
          return errorstate;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	e05f      	b.n	800785c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800779c:	f7f9 fee2 	bl	8001564 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077aa:	d102      	bne.n	80077b2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80077ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077b0:	e054      	b.n	800785c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077c0:	d1ec      	bne.n	800779c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077da:	d002      	beq.n	80077e2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80077dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077e0:	e03c      	b.n	800785c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80077e2:	2001      	movs	r0, #1
 80077e4:	f000 fb44 	bl	8007e70 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0204 	orr.w	r2, r2, #4
 80077f6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80077f8:	e00a      	b.n	8007810 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077fa:	f7f9 feb3 	bl	8001564 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007808:	d102      	bne.n	8007810 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800780a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800780e:	e025      	b.n	800785c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800781e:	d1ec      	bne.n	80077fa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007828:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007838:	d102      	bne.n	8007840 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800783a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800783e:	e00d      	b.n	800785c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2213      	movs	r2, #19
 8007846:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
 8007852:	e002      	b.n	800785a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3720      	adds	r7, #32
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	c1100000 	.word	0xc1100000

08007868 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08c      	sub	sp, #48	; 0x30
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007872:	f7f9 fe77 	bl	8001564 <HAL_GetTick>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2100      	movs	r1, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f001 f8a9 	bl	80089da <SDMMC_GetResponse>
 8007888:	4603      	mov	r3, r0
 800788a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007892:	d102      	bne.n	800789a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007898:	e0b0      	b.n	80079fc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2140      	movs	r1, #64	; 0x40
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 f8d9 	bl	8008a58 <SDMMC_CmdBlockLength>
 80078a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	e0a0      	b.n	80079fc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f001 fa0e 	bl	8008ce8 <SDMMC_CmdAppCommand>
 80078cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	e08d      	b.n	80079fc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078e4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80078e6:	2340      	movs	r3, #64	; 0x40
 80078e8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80078ea:	2360      	movs	r3, #96	; 0x60
 80078ec:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078ee:	2302      	movs	r3, #2
 80078f0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80078f6:	2301      	movs	r3, #1
 80078f8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f107 0208 	add.w	r2, r7, #8
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f001 f87b 	bl	8008a00 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f001 faf6 	bl	8008f00 <SDMMC_CmdStatusRegister>
 8007914:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d02b      	beq.n	8007974 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	e069      	b.n	80079fc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d013      	beq.n	800795e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007936:	2300      	movs	r3, #0
 8007938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800793a:	e00d      	b.n	8007958 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 ffd5 	bl	80088f0 <SDMMC_ReadFIFO>
 8007946:	4602      	mov	r2, r0
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	601a      	str	r2, [r3, #0]
        pData++;
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	3304      	adds	r3, #4
 8007950:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	3301      	adds	r3, #1
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	2b07      	cmp	r3, #7
 800795c:	d9ee      	bls.n	800793c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800795e:	f7f9 fe01 	bl	8001564 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800796c:	d102      	bne.n	8007974 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800796e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007972:	e043      	b.n	80079fc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0d2      	beq.n	8007928 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007990:	2308      	movs	r3, #8
 8007992:	e033      	b.n	80079fc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	e02a      	b.n	80079fc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80079b4:	2320      	movs	r3, #32
 80079b6:	e021      	b.n	80079fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 ff97 	bl	80088f0 <SDMMC_ReadFIFO>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	601a      	str	r2, [r3, #0]
    pData++;
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	3304      	adds	r3, #4
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079ce:	f7f9 fdc9 	bl	8001564 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079dc:	d102      	bne.n	80079e4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079e2:	e00b      	b.n	80079fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e2      	bne.n	80079b8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a03      	ldr	r2, [pc, #12]	; (8007a04 <SD_SendSDStatus+0x19c>)
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3730      	adds	r7, #48	; 0x30
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	18000f3a 	.word	0x18000f3a

08007a08 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a1c:	e018      	b.n	8007a50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a26:	041b      	lsls	r3, r3, #16
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f001 fa45 	bl	8008eba <SDMMC_CmdSendStatus>
 8007a30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	e009      	b.n	8007a50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 ffc9 	bl	80089da <SDMMC_GetResponse>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 ffb3 	bl	80089da <SDMMC_GetResponse>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a7e:	d102      	bne.n	8007a86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a84:	e02f      	b.n	8007ae6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f879 	bl	8007b84 <SD_FindSCR>
 8007a92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	e023      	b.n	8007ae6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01c      	beq.n	8007ae2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f001 f917 	bl	8008ce8 <SDMMC_CmdAppCommand>
 8007aba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	e00f      	b.n	8007ae6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2102      	movs	r1, #2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 f94e 	bl	8008d6e <SDMMC_CmdBusWidth>
 8007ad2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	e003      	b.n	8007ae6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e001      	b.n	8007ae6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ae2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b086      	sub	sp, #24
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 ff68 	bl	80089da <SDMMC_GetResponse>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b14:	d102      	bne.n	8007b1c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b1a:	e02f      	b.n	8007b7c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f82e 	bl	8007b84 <SD_FindSCR>
 8007b28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	e023      	b.n	8007b7c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01c      	beq.n	8007b78 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b46:	041b      	lsls	r3, r3, #16
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f001 f8cc 	bl	8008ce8 <SDMMC_CmdAppCommand>
 8007b50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	e00f      	b.n	8007b7c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f903 	bl	8008d6e <SDMMC_CmdBusWidth>
 8007b68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	e003      	b.n	8007b7c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e001      	b.n	8007b7c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08e      	sub	sp, #56	; 0x38
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b8e:	f7f9 fce9 	bl	8001564 <HAL_GetTick>
 8007b92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2108      	movs	r1, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 ff54 	bl	8008a58 <SDMMC_CmdBlockLength>
 8007bb0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <SD_FindSCR+0x38>
  {
    return errorstate;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	e0ad      	b.n	8007d18 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc4:	041b      	lsls	r3, r3, #16
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f001 f88d 	bl	8008ce8 <SDMMC_CmdAppCommand>
 8007bce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	e09e      	b.n	8007d18 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bde:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007be0:	2308      	movs	r3, #8
 8007be2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007be4:	2330      	movs	r3, #48	; 0x30
 8007be6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007be8:	2302      	movs	r3, #2
 8007bea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f107 0210 	add.w	r2, r7, #16
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fefe 	bl	8008a00 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f8d3 	bl	8008db4 <SDMMC_CmdSendSCR>
 8007c0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d027      	beq.n	8007c66 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	e07e      	b.n	8007d18 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d113      	bne.n	8007c50 <SD_FindSCR+0xcc>
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d110      	bne.n	8007c50 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fe5c 	bl	80088f0 <SDMMC_ReadFIFO>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fe55 	bl	80088f0 <SDMMC_ReadFIFO>
 8007c46:	4603      	mov	r3, r0
 8007c48:	60fb      	str	r3, [r7, #12]
      index++;
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c50:	f7f9 fc88 	bl	8001564 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c5e:	d102      	bne.n	8007c66 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c64:	e058      	b.n	8007d18 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c6c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0d1      	beq.n	8007c1a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	e043      	b.n	8007d18 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e036      	b.n	8007d18 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	e029      	b.n	8007d18 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a15      	ldr	r2, [pc, #84]	; (8007d20 <SD_FindSCR+0x19c>)
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	061a      	lsls	r2, r3, #24
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cd8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ce2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	0e1b      	lsrs	r3, r3, #24
 8007ce8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	601a      	str	r2, [r3, #0]
    scr++;
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	061a      	lsls	r2, r3, #24
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	0e1b      	lsrs	r3, r3, #24
 8007d10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3738      	adds	r7, #56	; 0x38
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	18000f3a 	.word	0x18000f3a

08007d24 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d03f      	beq.n	8007dbe <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e033      	b.n	8007dac <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fdd1 	bl	80088f0 <SDMMC_ReadFIFO>
 8007d4e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	0e1b      	lsrs	r3, r3, #24
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	3301      	adds	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b07      	cmp	r3, #7
 8007db0:	d9c8      	bls.n	8007d44 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d043      	beq.n	8007e68 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e037      	b.n	8007e56 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	021a      	lsls	r2, r3, #8
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	041a      	lsls	r2, r3, #16
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	061a      	lsls	r2, r3, #24
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3301      	adds	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f107 0208 	add.w	r2, r7, #8
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fd5d 	bl	800890a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3301      	adds	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	d9c4      	bls.n	8007de6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e68:	bf00      	nop
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e095      	b.n	8008014 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d108      	bne.n	8007f02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ef8:	d009      	beq.n	8007f0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	61da      	str	r2, [r3, #28]
 8007f00:	e005      	b.n	8007f0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7f9 f911 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2202      	movs	r2, #2
 8007f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f4e:	d902      	bls.n	8007f56 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e002      	b.n	8007f5c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f64:	d007      	beq.n	8007f76 <HAL_SPI_Init+0xa0>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f6e:	d002      	beq.n	8007f76 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb8:	ea42 0103 	orr.w	r1, r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	0c1b      	lsrs	r3, r3, #16
 8007fd2:	f003 0204 	and.w	r2, r3, #4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	f003 0310 	and.w	r3, r3, #16
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ff2:	ea42 0103 	orr.w	r1, r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e038      	b.n	80080a4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7f9 f962 	bl	8001310 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3308      	adds	r3, #8
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f000 fafa 	bl	8008650 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	461a      	mov	r2, r3
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	f000 fb8c 	bl	8008784 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6858      	ldr	r0, [r3, #4]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	f000 fbd5 	bl	8008828 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	6892      	ldr	r2, [r2, #8]
 8008086:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	6892      	ldr	r2, [r2, #8]
 8008092:	f041 0101 	orr.w	r1, r1, #1
 8008096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e049      	b.n	8008152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f841 	bl	800815a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f000 f9f8 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	d001      	beq.n	8008188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e04f      	b.n	8008228 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a23      	ldr	r2, [pc, #140]	; (8008234 <HAL_TIM_Base_Start_IT+0xc4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d01d      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x76>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b2:	d018      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x76>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <HAL_TIM_Base_Start_IT+0xc8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d013      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x76>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1e      	ldr	r2, [pc, #120]	; (800823c <HAL_TIM_Base_Start_IT+0xcc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00e      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x76>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1c      	ldr	r2, [pc, #112]	; (8008240 <HAL_TIM_Base_Start_IT+0xd0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d009      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x76>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <HAL_TIM_Base_Start_IT+0xd4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d004      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x76>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a19      	ldr	r2, [pc, #100]	; (8008248 <HAL_TIM_Base_Start_IT+0xd8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d115      	bne.n	8008212 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	4b17      	ldr	r3, [pc, #92]	; (800824c <HAL_TIM_Base_Start_IT+0xdc>)
 80081ee:	4013      	ands	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d015      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0xb4>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fe:	d011      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008210:	e008      	b.n	8008224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0201 	orr.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e000      	b.n	8008226 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40000400 	.word	0x40000400
 800823c:	40000800 	.word	0x40000800
 8008240:	40000c00 	.word	0x40000c00
 8008244:	40013400 	.word	0x40013400
 8008248:	40014000 	.word	0x40014000
 800824c:	00010007 	.word	0x00010007

08008250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b02      	cmp	r3, #2
 8008264:	d122      	bne.n	80082ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b02      	cmp	r3, #2
 8008272:	d11b      	bne.n	80082ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0202 	mvn.w	r2, #2
 800827c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f905 	bl	80084a2 <HAL_TIM_IC_CaptureCallback>
 8008298:	e005      	b.n	80082a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f8f7 	bl	800848e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f908 	bl	80084b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d122      	bne.n	8008300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d11b      	bne.n	8008300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0204 	mvn.w	r2, #4
 80082d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f8db 	bl	80084a2 <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8cd 	bl	800848e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8de 	bl	80084b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b08      	cmp	r3, #8
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b08      	cmp	r3, #8
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0208 	mvn.w	r2, #8
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2204      	movs	r2, #4
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f8b1 	bl	80084a2 <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8a3 	bl	800848e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f8b4 	bl	80084b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	2b10      	cmp	r3, #16
 8008360:	d122      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b10      	cmp	r3, #16
 800836e:	d11b      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0210 	mvn.w	r2, #16
 8008378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2208      	movs	r2, #8
 800837e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f887 	bl	80084a2 <HAL_TIM_IC_CaptureCallback>
 8008394:	e005      	b.n	80083a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f879 	bl	800848e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f88a 	bl	80084b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d10e      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d107      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0201 	mvn.w	r2, #1
 80083cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f8 fc50 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d10e      	bne.n	8008400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ec:	2b80      	cmp	r3, #128	; 0x80
 80083ee:	d107      	bne.n	8008400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f914 	bl	8008628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840e:	d10e      	bne.n	800842e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841a:	2b80      	cmp	r3, #128	; 0x80
 800841c:	d107      	bne.n	800842e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f907 	bl	800863c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d10e      	bne.n	800845a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d107      	bne.n	800845a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f838 	bl	80084ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b20      	cmp	r3, #32
 8008466:	d10e      	bne.n	8008486 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b20      	cmp	r3, #32
 8008474:	d107      	bne.n	8008486 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f06f 0220 	mvn.w	r2, #32
 800847e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f8c7 	bl	8008614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084be:	bf00      	nop
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a40      	ldr	r2, [pc, #256]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3d      	ldr	r2, [pc, #244]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3c      	ldr	r2, [pc, #240]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3b      	ldr	r2, [pc, #236]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d108      	bne.n	8008532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2f      	ldr	r2, [pc, #188]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d01f      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d01b      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2c      	ldr	r2, [pc, #176]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d017      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2b      	ldr	r2, [pc, #172]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d013      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2a      	ldr	r2, [pc, #168]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00f      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a29      	ldr	r2, [pc, #164]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00b      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a28      	ldr	r2, [pc, #160]	; (8008608 <TIM_Base_SetConfig+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d007      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a27      	ldr	r2, [pc, #156]	; (800860c <TIM_Base_SetConfig+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d003      	beq.n	800857a <TIM_Base_SetConfig+0x9a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a26      	ldr	r2, [pc, #152]	; (8008610 <TIM_Base_SetConfig+0x130>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d108      	bne.n	800858c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4313      	orrs	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a10      	ldr	r2, [pc, #64]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00f      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a12      	ldr	r2, [pc, #72]	; (8008604 <TIM_Base_SetConfig+0x124>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00b      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a11      	ldr	r2, [pc, #68]	; (8008608 <TIM_Base_SetConfig+0x128>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d007      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a10      	ldr	r2, [pc, #64]	; (800860c <TIM_Base_SetConfig+0x12c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a0f      	ldr	r2, [pc, #60]	; (8008610 <TIM_Base_SetConfig+0x130>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40012c00 	.word	0x40012c00
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40013400 	.word	0x40013400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800

08008614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	f023 0101 	bic.w	r1, r3, #1
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b08      	cmp	r3, #8
 8008678:	d102      	bne.n	8008680 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e001      	b.n	8008684 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008690:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008696:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800869c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80086a2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80086a8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80086ae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80086b4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80086ba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80086c0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80086f2:	4b23      	ldr	r3, [pc, #140]	; (8008780 <FMC_NORSRAM_Init+0x130>)
 80086f4:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086fc:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008704:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800870c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008714:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	43db      	mvns	r3, r3
 8008724:	ea02 0103 	and.w	r1, r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4319      	orrs	r1, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873e:	d10c      	bne.n	800875a <FMC_NORSRAM_Init+0x10a>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	431a      	orrs	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	0008fb7f 	.word	0x0008fb7f

08008784 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	431a      	orrs	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	431a      	orrs	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	079b      	lsls	r3, r3, #30
 80087b4:	431a      	orrs	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	041b      	lsls	r3, r3, #16
 80087bc:	431a      	orrs	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	051b      	lsls	r3, r3, #20
 80087c6:	431a      	orrs	r2, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	3b02      	subs	r3, #2
 80087ce:	061b      	lsls	r3, r3, #24
 80087d0:	ea42 0103 	orr.w	r1, r2, r3
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	3201      	adds	r2, #1
 80087dc:	4319      	orrs	r1, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f0:	d113      	bne.n	800881a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087fa:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	3b01      	subs	r3, #1
 8008802:	051b      	lsls	r3, r3, #20
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	431a      	orrs	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800883c:	d121      	bne.n	8008882 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008846:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6819      	ldr	r1, [r3, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	4319      	orrs	r1, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	4319      	orrs	r1, r3
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	079b      	lsls	r3, r3, #30
 8008864:	4319      	orrs	r1, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	4319      	orrs	r1, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	041b      	lsls	r3, r3, #16
 8008872:	430b      	orrs	r3, r1
 8008874:	ea42 0103 	orr.w	r1, r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008880:	e005      	b.n	800888e <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800888a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800889c:	b084      	sub	sp, #16
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	f107 001c 	add.w	r0, r7, #28
 80088aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80088b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80088b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80088b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80088ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80088be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80088c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <SDMMC_Init+0x50>)
 80088d0:	4013      	ands	r3, r2
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	b004      	add	sp, #16
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	ffc02c00 	.word	0xffc02c00

080088f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f043 0203 	orr.w	r2, r3, #3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008940:	2002      	movs	r0, #2
 8008942:	f7f8 fe1b 	bl	800157c <HAL_Delay>

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0303 	and.w	r3, r3, #3
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800898a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008990:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008996:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	4b06      	ldr	r3, [pc, #24]	; (80089bc <SDMMC_SendCommand+0x50>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	fffee0c0 	.word	0xfffee0c0

080089c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	b2db      	uxtb	r3, r3
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3314      	adds	r3, #20
 80089e8:	461a      	mov	r2, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	4413      	add	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a26:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0

}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a66:	2310      	movs	r3, #16
 8008a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff ff73 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	2110      	movs	r1, #16
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa7b 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a94:	69fb      	ldr	r3, [r7, #28]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b088      	sub	sp, #32
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008aac:	2311      	movs	r3, #17
 8008aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008abe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ac0:	f107 0308 	add.w	r3, r7, #8
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff ff50 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad0:	2111      	movs	r1, #17
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa58 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008ad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ada:	69fb      	ldr	r3, [r7, #28]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3720      	adds	r7, #32
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008af2:	2312      	movs	r3, #18
 8008af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff2d 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b16:	2112      	movs	r1, #18
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa35 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008b1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b20:	69fb      	ldr	r3, [r7, #28]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b38:	2318      	movs	r3, #24
 8008b3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b4c:	f107 0308 	add.w	r3, r7, #8
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff ff0a 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b5c:	2118      	movs	r1, #24
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fa12 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b66:	69fb      	ldr	r3, [r7, #28]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3720      	adds	r7, #32
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b7e:	2319      	movs	r3, #25
 8008b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fee7 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba2:	2119      	movs	r1, #25
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f9ef 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008bc4:	230c      	movs	r3, #12
 8008bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bf0:	f107 0308 	add.w	r3, r7, #8
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff feb8 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008bfc:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <SDMMC_CmdStopTransfer+0x68>)
 8008bfe:	210c      	movs	r1, #12
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f9c1 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008c06:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008c14:	69fb      	ldr	r3, [r7, #28]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	05f5e100 	.word	0x05f5e100

08008c24 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c34:	2307      	movs	r3, #7
 8008c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c3c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c46:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c48:	f107 0310 	add.w	r3, r7, #16
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff fe8c 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c58:	2107      	movs	r1, #7
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f994 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008c60:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3728      	adds	r7, #40	; 0x28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fe6b 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fbb8 	bl	800940c <SDMMC_GetCmdError>
 8008c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008cb0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cb6:	2308      	movs	r3, #8
 8008cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fe4b 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fb4a 	bl	8009370 <SDMMC_GetCmdResp7>
 8008cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cde:	69fb      	ldr	r3, [r7, #28]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008cf6:	2337      	movs	r3, #55	; 0x37
 8008cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fe2b 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d1a:	2137      	movs	r1, #55	; 0x37
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f933 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008d22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d24:	69fb      	ldr	r3, [r7, #28]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b088      	sub	sp, #32
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d3c:	2329      	movs	r3, #41	; 0x29
 8008d3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d50:	f107 0308 	add.w	r3, r7, #8
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff fe08 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa4f 	bl	8009200 <SDMMC_GetCmdResp3>
 8008d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d64:	69fb      	ldr	r3, [r7, #28]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3720      	adds	r7, #32
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b088      	sub	sp, #32
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d7c:	2306      	movs	r3, #6
 8008d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d90:	f107 0308 	add.w	r3, r7, #8
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fde8 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da0:	2106      	movs	r1, #6
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f8f0 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008daa:	69fb      	ldr	r3, [r7, #28]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008dc0:	2333      	movs	r3, #51	; 0x33
 8008dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dd4:	f107 0308 	add.w	r3, r7, #8
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7ff fdc6 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de4:	2133      	movs	r1, #51	; 0x33
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8ce 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008dec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dee:	69fb      	ldr	r3, [r7, #28]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3720      	adds	r7, #32
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e04:	2302      	movs	r3, #2
 8008e06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e18:	f107 0308 	add.w	r3, r7, #8
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fda4 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9a1 	bl	800916c <SDMMC_GetCmdResp2>
 8008e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b088      	sub	sp, #32
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e44:	2309      	movs	r3, #9
 8008e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff fd84 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f981 	bl	800916c <SDMMC_GetCmdResp2>
 8008e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b088      	sub	sp, #32
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e84:	2303      	movs	r3, #3
 8008e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e98:	f107 0308 	add.w	r3, r7, #8
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff fd64 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	2103      	movs	r1, #3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f9e9 	bl	8009280 <SDMMC_GetCmdResp6>
 8008eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3720      	adds	r7, #32
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b088      	sub	sp, #32
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008ec8:	230d      	movs	r3, #13
 8008eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fd42 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eec:	210d      	movs	r1, #13
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f84a 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3720      	adds	r7, #32
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008f0c:	230d      	movs	r3, #13
 8008f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f20:	f107 0308 	add.w	r3, r7, #8
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff fd20 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f30:	210d      	movs	r1, #13
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f828 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3720      	adds	r7, #32
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008f50:	230b      	movs	r3, #11
 8008f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f64:	f107 0308 	add.w	r3, r7, #8
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fcfe 	bl	800896c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f74:	210b      	movs	r1, #11
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f806 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3720      	adds	r7, #32
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	460b      	mov	r3, r1
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008f96:	4b70      	ldr	r3, [pc, #448]	; (8009158 <SDMMC_GetCmdResp1+0x1d0>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a70      	ldr	r2, [pc, #448]	; (800915c <SDMMC_GetCmdResp1+0x1d4>)
 8008f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa0:	0a5a      	lsrs	r2, r3, #9
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	fb02 f303 	mul.w	r3, r2, r3
 8008fa8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	61fa      	str	r2, [r7, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fb8:	e0c9      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	4b67      	ldr	r3, [pc, #412]	; (8009160 <SDMMC_GetCmdResp1+0x1d8>)
 8008fc4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0ef      	beq.n	8008faa <SDMMC_GetCmdResp1+0x22>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1ea      	bne.n	8008faa <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fe6:	2304      	movs	r3, #4
 8008fe8:	e0b1      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d004      	beq.n	8009000 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e0a6      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a58      	ldr	r2, [pc, #352]	; (8009164 <SDMMC_GetCmdResp1+0x1dc>)
 8009004:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7ff fcda 	bl	80089c0 <SDMMC_GetCommandResponse>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	4293      	cmp	r3, r2
 8009014:	d001      	beq.n	800901a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009016:	2301      	movs	r3, #1
 8009018:	e099      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800901a:	2100      	movs	r1, #0
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f7ff fcdc 	bl	80089da <SDMMC_GetResponse>
 8009022:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4b50      	ldr	r3, [pc, #320]	; (8009168 <SDMMC_GetCmdResp1+0x1e0>)
 8009028:	4013      	ands	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800902e:	2300      	movs	r3, #0
 8009030:	e08d      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da02      	bge.n	800903e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800903c:	e087      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009048:	2340      	movs	r3, #64	; 0x40
 800904a:	e080      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	e079      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009068:	e071      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009078:	e069      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009088:	e061      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009098:	e059      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a8:	e051      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090b8:	e049      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090c8:	e041      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80090d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090d8:	e039      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090e8:	e031      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090f8:	e029      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009104:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009108:	e021      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009114:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009118:	e019      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009124:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009128:	e011      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009134:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009138:	e009      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009144:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009148:	e001      	b.n	800914e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800914a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000000 	.word	0x20000000
 800915c:	10624dd3 	.word	0x10624dd3
 8009160:	00200045 	.word	0x00200045
 8009164:	002000c5 	.word	0x002000c5
 8009168:	fdffe008 	.word	0xfdffe008

0800916c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009174:	4b1f      	ldr	r3, [pc, #124]	; (80091f4 <SDMMC_GetCmdResp2+0x88>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1f      	ldr	r2, [pc, #124]	; (80091f8 <SDMMC_GetCmdResp2+0x8c>)
 800917a:	fba2 2303 	umull	r2, r3, r2, r3
 800917e:	0a5b      	lsrs	r3, r3, #9
 8009180:	f241 3288 	movw	r2, #5000	; 0x1388
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	60fa      	str	r2, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009198:	e026      	b.n	80091e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0ef      	beq.n	800918a <SDMMC_GetCmdResp2+0x1e>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1ea      	bne.n	800918a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2204      	movs	r2, #4
 80091c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091c6:	2304      	movs	r3, #4
 80091c8:	e00e      	b.n	80091e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091dc:	2301      	movs	r3, #1
 80091de:	e003      	b.n	80091e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a06      	ldr	r2, [pc, #24]	; (80091fc <SDMMC_GetCmdResp2+0x90>)
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000000 	.word	0x20000000
 80091f8:	10624dd3 	.word	0x10624dd3
 80091fc:	002000c5 	.word	0x002000c5

08009200 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009208:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <SDMMC_GetCmdResp3+0x74>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1a      	ldr	r2, [pc, #104]	; (8009278 <SDMMC_GetCmdResp3+0x78>)
 800920e:	fba2 2303 	umull	r2, r3, r2, r3
 8009212:	0a5b      	lsrs	r3, r3, #9
 8009214:	f241 3288 	movw	r2, #5000	; 0x1388
 8009218:	fb02 f303 	mul.w	r3, r2, r3
 800921c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	60fa      	str	r2, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800922c:	e01b      	b.n	8009266 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0ef      	beq.n	800921e <SDMMC_GetCmdResp3+0x1e>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1ea      	bne.n	800921e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2204      	movs	r2, #4
 8009258:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800925a:	2304      	movs	r3, #4
 800925c:	e003      	b.n	8009266 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a06      	ldr	r2, [pc, #24]	; (800927c <SDMMC_GetCmdResp3+0x7c>)
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20000000 	.word	0x20000000
 8009278:	10624dd3 	.word	0x10624dd3
 800927c:	002000c5 	.word	0x002000c5

08009280 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	460b      	mov	r3, r1
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800928e:	4b35      	ldr	r3, [pc, #212]	; (8009364 <SDMMC_GetCmdResp6+0xe4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a35      	ldr	r2, [pc, #212]	; (8009368 <SDMMC_GetCmdResp6+0xe8>)
 8009294:	fba2 2303 	umull	r2, r3, r2, r3
 8009298:	0a5b      	lsrs	r3, r3, #9
 800929a:	f241 3288 	movw	r2, #5000	; 0x1388
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	1e5a      	subs	r2, r3, #1
 80092a8:	61fa      	str	r2, [r7, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d102      	bne.n	80092b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092b2:	e052      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ef      	beq.n	80092a4 <SDMMC_GetCmdResp6+0x24>
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1ea      	bne.n	80092a4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	f003 0304 	and.w	r3, r3, #4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2204      	movs	r2, #4
 80092de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092e0:	2304      	movs	r3, #4
 80092e2:	e03a      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e02f      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fb60 	bl	80089c0 <SDMMC_GetCommandResponse>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	4293      	cmp	r3, r2
 8009308:	d001      	beq.n	800930e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800930a:	2301      	movs	r3, #1
 800930c:	e025      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4a16      	ldr	r2, [pc, #88]	; (800936c <SDMMC_GetCmdResp6+0xec>)
 8009312:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009314:	2100      	movs	r1, #0
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff fb5f 	bl	80089da <SDMMC_GetResponse>
 800931c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d106      	bne.n	8009336 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	0c1b      	lsrs	r3, r3, #16
 800932c:	b29a      	uxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009332:	2300      	movs	r3, #0
 8009334:	e011      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009344:	e009      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009354:	e001      	b.n	800935a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000000 	.word	0x20000000
 8009368:	10624dd3 	.word	0x10624dd3
 800936c:	002000c5 	.word	0x002000c5

08009370 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009378:	4b22      	ldr	r3, [pc, #136]	; (8009404 <SDMMC_GetCmdResp7+0x94>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a22      	ldr	r2, [pc, #136]	; (8009408 <SDMMC_GetCmdResp7+0x98>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	0a5b      	lsrs	r3, r3, #9
 8009384:	f241 3288 	movw	r2, #5000	; 0x1388
 8009388:	fb02 f303 	mul.w	r3, r2, r3
 800938c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	1e5a      	subs	r2, r3, #1
 8009392:	60fa      	str	r2, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800939c:	e02c      	b.n	80093f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0ef      	beq.n	800938e <SDMMC_GetCmdResp7+0x1e>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1ea      	bne.n	800938e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2204      	movs	r2, #4
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093ca:	2304      	movs	r3, #4
 80093cc:	e014      	b.n	80093f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e009      	b.n	80093f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2240      	movs	r2, #64	; 0x40
 80093f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0

}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	20000000 	.word	0x20000000
 8009408:	10624dd3 	.word	0x10624dd3

0800940c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <SDMMC_GetCmdError+0x50>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a11      	ldr	r2, [pc, #68]	; (8009460 <SDMMC_GetCmdError+0x54>)
 800941a:	fba2 2303 	umull	r2, r3, r2, r3
 800941e:	0a5b      	lsrs	r3, r3, #9
 8009420:	f241 3288 	movw	r2, #5000	; 0x1388
 8009424:	fb02 f303 	mul.w	r3, r2, r3
 8009428:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	60fa      	str	r2, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009438:	e009      	b.n	800944e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0f1      	beq.n	800942a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a06      	ldr	r2, [pc, #24]	; (8009464 <SDMMC_GetCmdError+0x58>)
 800944a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000000 	.word	0x20000000
 8009460:	10624dd3 	.word	0x10624dd3
 8009464:	002000c5 	.word	0x002000c5

08009468 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800946c:	4904      	ldr	r1, [pc, #16]	; (8009480 <MX_FATFS_Init+0x18>)
 800946e:	4805      	ldr	r0, [pc, #20]	; (8009484 <MX_FATFS_Init+0x1c>)
 8009470:	f000 faa4 	bl	80099bc <FATFS_LinkDriver>
 8009474:	4603      	mov	r3, r0
 8009476:	461a      	mov	r2, r3
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <MX_FATFS_Init+0x20>)
 800947a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800947c:	bf00      	nop
 800947e:	bd80      	pop	{r7, pc}
 8009480:	200003d8 	.word	0x200003d8
 8009484:	0800d5b8 	.word	0x0800d5b8
 8009488:	200003d4 	.word	0x200003d4

0800948c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009496:	f000 f885 	bl	80095a4 <BSP_SD_IsDetected>
 800949a:	4603      	mov	r3, r0
 800949c:	2b01      	cmp	r3, #1
 800949e:	d001      	beq.n	80094a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80094a0:	2302      	movs	r3, #2
 80094a2:	e012      	b.n	80094ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80094a4:	480b      	ldr	r0, [pc, #44]	; (80094d4 <BSP_SD_Init+0x48>)
 80094a6:	f7fd f821 	bl	80064ec <HAL_SD_Init>
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80094b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80094b8:	4806      	ldr	r0, [pc, #24]	; (80094d4 <BSP_SD_Init+0x48>)
 80094ba:	f7fd fed5 	bl	8007268 <HAL_SD_ConfigWideBusOperation>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80094c8:	79fb      	ldrb	r3, [r7, #7]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20000248 	.word	0x20000248

080094d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	68f9      	ldr	r1, [r7, #12]
 80094ee:	4806      	ldr	r0, [pc, #24]	; (8009508 <BSP_SD_ReadBlocks_DMA+0x30>)
 80094f0:	f7fd f924 	bl	800673c <HAL_SD_ReadBlocks_DMA>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20000248 	.word	0x20000248

0800950c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	68f9      	ldr	r1, [r7, #12]
 8009522:	4806      	ldr	r0, [pc, #24]	; (800953c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009524:	f7fd f9b2 	bl	800688c <HAL_SD_WriteBlocks_DMA>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000248 	.word	0x20000248

08009540 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009544:	4805      	ldr	r0, [pc, #20]	; (800955c <BSP_SD_GetCardState+0x1c>)
 8009546:	f7fd ffa3 	bl	8007490 <HAL_SD_GetCardState>
 800954a:	4603      	mov	r3, r0
 800954c:	2b04      	cmp	r3, #4
 800954e:	bf14      	ite	ne
 8009550:	2301      	movne	r3, #1
 8009552:	2300      	moveq	r3, #0
 8009554:	b2db      	uxtb	r3, r3
}
 8009556:	4618      	mov	r0, r3
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000248 	.word	0x20000248

08009560 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4803      	ldr	r0, [pc, #12]	; (8009578 <BSP_SD_GetCardInfo+0x18>)
 800956c:	f7fd fe50 	bl	8007210 <HAL_SD_GetCardInfo>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20000248 	.word	0x20000248

0800957c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009584:	f000 f9aa 	bl	80098dc <BSP_SD_WriteCpltCallback>
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009598:	f000 f9b2 	bl	8009900 <BSP_SD_ReadCpltCallback>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80095aa:	2301      	movs	r3, #1
 80095ac:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80095ae:	f000 f80b 	bl	80095c8 <BSP_PlatformIsDetected>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80095b8:	2300      	movs	r3, #0
 80095ba:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	b2db      	uxtb	r3, r3
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80095ce:	2301      	movs	r3, #1
 80095d0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80095d2:	2120      	movs	r1, #32
 80095d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095d8:	f7fa f8ae 	bl	8003738 <HAL_GPIO_ReadPin>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80095e2:	2300      	movs	r3, #0
 80095e4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80095e6:	79fb      	ldrb	r3, [r7, #7]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80095f8:	f000 faa0 	bl	8009b3c <osKernelGetTickCount>
 80095fc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80095fe:	e006      	b.n	800960e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009600:	f7ff ff9e 	bl	8009540 <BSP_SD_GetCardState>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800960a:	2300      	movs	r3, #0
 800960c:	e009      	b.n	8009622 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800960e:	f000 fa95 	bl	8009b3c <osKernelGetTickCount>
 8009612:	4602      	mov	r2, r0
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	429a      	cmp	r2, r3
 800961c:	d8f0      	bhi.n	8009600 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <SD_CheckStatus+0x38>)
 8009638:	2201      	movs	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800963c:	f7ff ff80 	bl	8009540 <BSP_SD_GetCardState>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d107      	bne.n	8009656 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009646:	4b07      	ldr	r3, [pc, #28]	; (8009664 <SD_CheckStatus+0x38>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	b2da      	uxtb	r2, r3
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <SD_CheckStatus+0x38>)
 8009654:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009656:	4b03      	ldr	r3, [pc, #12]	; (8009664 <SD_CheckStatus+0x38>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	b2db      	uxtb	r3, r3
}
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000009 	.word	0x20000009

08009668 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <SD_initialize+0x7c>)
 8009674:	2201      	movs	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009678:	f000 fa18 	bl	8009aac <osKernelGetState>
 800967c:	4603      	mov	r3, r0
 800967e:	2b02      	cmp	r3, #2
 8009680:	d129      	bne.n	80096d6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009682:	f7ff ff03 	bl	800948c <BSP_SD_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d107      	bne.n	800969c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff ffcc 	bl	800962c <SD_CheckStatus>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <SD_initialize+0x7c>)
 800969a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800969c:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <SD_initialize+0x7c>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d017      	beq.n	80096d6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <SD_initialize+0x80>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d107      	bne.n	80096be <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80096ae:	2200      	movs	r2, #0
 80096b0:	2102      	movs	r1, #2
 80096b2:	200a      	movs	r0, #10
 80096b4:	f000 fc24 	bl	8009f00 <osMessageQueueNew>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4a0b      	ldr	r2, [pc, #44]	; (80096e8 <SD_initialize+0x80>)
 80096bc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80096be:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <SD_initialize+0x80>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d107      	bne.n	80096d6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80096c6:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <SD_initialize+0x7c>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f043 0301 	orr.w	r3, r3, #1
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	4b04      	ldr	r3, [pc, #16]	; (80096e4 <SD_initialize+0x7c>)
 80096d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80096d6:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <SD_initialize+0x7c>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b2db      	uxtb	r3, r3
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000009 	.word	0x20000009
 80096e8:	200003dc 	.word	0x200003dc

080096ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff ff97 	bl	800962c <SD_CheckStatus>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800971c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009720:	f7ff ff66 	bl	80095f0 <SD_CheckStatusWithTimeout>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	da01      	bge.n	800972e <SD_read+0x26>
  {
    return res;
 800972a:	7ffb      	ldrb	r3, [r7, #31]
 800972c:	e02f      	b.n	800978e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	68b8      	ldr	r0, [r7, #8]
 8009734:	f7ff fed0 	bl	80094d8 <BSP_SD_ReadBlocks_DMA>
 8009738:	4603      	mov	r3, r0
 800973a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800973c:	7fbb      	ldrb	r3, [r7, #30]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d124      	bne.n	800978c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <SD_read+0x90>)
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	f107 0112 	add.w	r1, r7, #18
 800974a:	f247 5330 	movw	r3, #30000	; 0x7530
 800974e:	2200      	movs	r2, #0
 8009750:	f000 fcaa 	bl	800a0a8 <osMessageQueueGet>
 8009754:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d117      	bne.n	800978c <SD_read+0x84>
 800975c:	8a7b      	ldrh	r3, [r7, #18]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d114      	bne.n	800978c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009762:	f000 f9eb 	bl	8009b3c <osKernelGetTickCount>
 8009766:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009768:	e007      	b.n	800977a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800976a:	f7ff fee9 	bl	8009540 <BSP_SD_GetCardState>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <SD_read+0x72>
              {
                res = RES_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009778:	e008      	b.n	800978c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800977a:	f000 f9df 	bl	8009b3c <osKernelGetTickCount>
 800977e:	4602      	mov	r2, r0
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	f247 522f 	movw	r2, #29999	; 0x752f
 8009788:	4293      	cmp	r3, r2
 800978a:	d9ee      	bls.n	800976a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800978c:	7ffb      	ldrb	r3, [r7, #31]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200003dc 	.word	0x200003dc

0800979c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80097b0:	f247 5030 	movw	r0, #30000	; 0x7530
 80097b4:	f7ff ff1c 	bl	80095f0 <SD_CheckStatusWithTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da01      	bge.n	80097c2 <SD_write+0x26>
  {
    return res;
 80097be:	7ffb      	ldrb	r3, [r7, #31]
 80097c0:	e02d      	b.n	800981e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	68b8      	ldr	r0, [r7, #8]
 80097c8:	f7ff fea0 	bl	800950c <BSP_SD_WriteBlocks_DMA>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d124      	bne.n	800981c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <SD_write+0x8c>)
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f107 0112 	add.w	r1, r7, #18
 80097da:	f247 5330 	movw	r3, #30000	; 0x7530
 80097de:	2200      	movs	r2, #0
 80097e0:	f000 fc62 	bl	800a0a8 <osMessageQueueGet>
 80097e4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d117      	bne.n	800981c <SD_write+0x80>
 80097ec:	8a7b      	ldrh	r3, [r7, #18]
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d114      	bne.n	800981c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80097f2:	f000 f9a3 	bl	8009b3c <osKernelGetTickCount>
 80097f6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80097f8:	e007      	b.n	800980a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097fa:	f7ff fea1 	bl	8009540 <BSP_SD_GetCardState>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <SD_write+0x6e>
          {
            res = RES_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	77fb      	strb	r3, [r7, #31]
            break;
 8009808:	e008      	b.n	800981c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800980a:	f000 f997 	bl	8009b3c <osKernelGetTickCount>
 800980e:	4602      	mov	r2, r0
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	f247 522f 	movw	r2, #29999	; 0x752f
 8009818:	4293      	cmp	r3, r2
 800981a:	d9ee      	bls.n	80097fa <SD_write+0x5e>
    }

  }
#endif

  return res;
 800981c:	7ffb      	ldrb	r3, [r7, #31]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3720      	adds	r7, #32
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200003dc 	.word	0x200003dc

0800982c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08c      	sub	sp, #48	; 0x30
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	603a      	str	r2, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
 8009838:	460b      	mov	r3, r1
 800983a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009842:	4b25      	ldr	r3, [pc, #148]	; (80098d8 <SD_ioctl+0xac>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <SD_ioctl+0x28>
 8009850:	2303      	movs	r3, #3
 8009852:	e03c      	b.n	80098ce <SD_ioctl+0xa2>

  switch (cmd)
 8009854:	79bb      	ldrb	r3, [r7, #6]
 8009856:	2b03      	cmp	r3, #3
 8009858:	d834      	bhi.n	80098c4 <SD_ioctl+0x98>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <SD_ioctl+0x34>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	08009871 	.word	0x08009871
 8009864:	08009879 	.word	0x08009879
 8009868:	08009891 	.word	0x08009891
 800986c:	080098ab 	.word	0x080098ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009876:	e028      	b.n	80098ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009878:	f107 0308 	add.w	r3, r7, #8
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fe6f 	bl	8009560 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009882:	6a3a      	ldr	r2, [r7, #32]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800988e:	e01c      	b.n	80098ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009890:	f107 0308 	add.w	r3, r7, #8
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff fe63 	bl	8009560 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	b29a      	uxth	r2, r3
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098a8:	e00f      	b.n	80098ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098aa:	f107 0308 	add.w	r3, r7, #8
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fe56 	bl	8009560 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	0a5a      	lsrs	r2, r3, #9
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098c2:	e002      	b.n	80098ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098c4:	2304      	movs	r3, #4
 80098c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80098ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3730      	adds	r7, #48	; 0x30
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000009 	.word	0x20000009

080098dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80098e2:	2302      	movs	r3, #2
 80098e4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <BSP_SD_WriteCpltCallback+0x20>)
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	1db9      	adds	r1, r7, #6
 80098ec:	2300      	movs	r3, #0
 80098ee:	2200      	movs	r2, #0
 80098f0:	f000 fb7a 	bl	8009fe8 <osMessageQueuePut>
#endif
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200003dc 	.word	0x200003dc

08009900 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009906:	2301      	movs	r3, #1
 8009908:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <BSP_SD_ReadCpltCallback+0x20>)
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	1db9      	adds	r1, r7, #6
 8009910:	2300      	movs	r3, #0
 8009912:	2200      	movs	r2, #0
 8009914:	f000 fb68 	bl	8009fe8 <osMessageQueuePut>
#endif
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	200003dc 	.word	0x200003dc

08009924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4613      	mov	r3, r2
 8009930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009932:	2301      	movs	r3, #1
 8009934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800993a:	4b1f      	ldr	r3, [pc, #124]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 800993c:	7a5b      	ldrb	r3, [r3, #9]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d131      	bne.n	80099a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009944:	4b1c      	ldr	r3, [pc, #112]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 8009946:	7a5b      	ldrb	r3, [r3, #9]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	461a      	mov	r2, r3
 800994c:	4b1a      	ldr	r3, [pc, #104]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 800994e:	2100      	movs	r1, #0
 8009950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009952:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 8009954:	7a5b      	ldrb	r3, [r3, #9]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	4a17      	ldr	r2, [pc, #92]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009962:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 8009964:	7a5b      	ldrb	r3, [r3, #9]
 8009966:	b2db      	uxtb	r3, r3
 8009968:	461a      	mov	r2, r3
 800996a:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 800996c:	4413      	add	r3, r2
 800996e:	79fa      	ldrb	r2, [r7, #7]
 8009970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009972:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 8009974:	7a5b      	ldrb	r3, [r3, #9]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	b2d1      	uxtb	r1, r2
 800997c:	4a0e      	ldr	r2, [pc, #56]	; (80099b8 <FATFS_LinkDriverEx+0x94>)
 800997e:	7251      	strb	r1, [r2, #9]
 8009980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009982:	7dbb      	ldrb	r3, [r7, #22]
 8009984:	3330      	adds	r3, #48	; 0x30
 8009986:	b2da      	uxtb	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3301      	adds	r3, #1
 8009990:	223a      	movs	r2, #58	; 0x3a
 8009992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	3302      	adds	r3, #2
 8009998:	222f      	movs	r2, #47	; 0x2f
 800999a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3303      	adds	r3, #3
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	200003e0 	.word	0x200003e0

080099bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80099c6:	2200      	movs	r2, #0
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff ffaa 	bl	8009924 <FATFS_LinkDriverEx>
 80099d0:	4603      	mov	r3, r0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <__NVIC_SetPriority>:
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	6039      	str	r1, [r7, #0]
 80099e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	db0a      	blt.n	8009a06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	490c      	ldr	r1, [pc, #48]	; (8009a28 <__NVIC_SetPriority+0x4c>)
 80099f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099fa:	0112      	lsls	r2, r2, #4
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	440b      	add	r3, r1
 8009a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a04:	e00a      	b.n	8009a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	4908      	ldr	r1, [pc, #32]	; (8009a2c <__NVIC_SetPriority+0x50>)
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	3b04      	subs	r3, #4
 8009a14:	0112      	lsls	r2, r2, #4
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	440b      	add	r3, r1
 8009a1a:	761a      	strb	r2, [r3, #24]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	e000e100 	.word	0xe000e100
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a34:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <SysTick_Handler+0x1c>)
 8009a36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a38:	f002 fae4 	bl	800c004 <xTaskGetSchedulerState>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d001      	beq.n	8009a46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a42:	f003 f9c9 	bl	800cdd8 <xPortSysTickHandler>
  }
}
 8009a46:	bf00      	nop
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	e000e010 	.word	0xe000e010

08009a50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a54:	2100      	movs	r1, #0
 8009a56:	f06f 0004 	mvn.w	r0, #4
 8009a5a:	f7ff ffbf 	bl	80099dc <__NVIC_SetPriority>
#endif
}
 8009a5e:	bf00      	nop
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a6a:	f3ef 8305 	mrs	r3, IPSR
 8009a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a76:	f06f 0305 	mvn.w	r3, #5
 8009a7a:	607b      	str	r3, [r7, #4]
 8009a7c:	e00c      	b.n	8009a98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <osKernelInitialize+0x44>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d105      	bne.n	8009a92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a86:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <osKernelInitialize+0x44>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	607b      	str	r3, [r7, #4]
 8009a90:	e002      	b.n	8009a98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a98:	687b      	ldr	r3, [r7, #4]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	200003ec 	.word	0x200003ec

08009aac <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009ab2:	f002 faa7 	bl	800c004 <xTaskGetSchedulerState>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <osKernelGetState+0x1a>
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d105      	bne.n	8009acc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	607b      	str	r3, [r7, #4]
      break;
 8009ac4:	e00c      	b.n	8009ae0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	607b      	str	r3, [r7, #4]
      break;
 8009aca:	e009      	b.n	8009ae0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <osKernelGetState+0x40>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d102      	bne.n	8009ada <osKernelGetState+0x2e>
        state = osKernelReady;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009ad8:	e001      	b.n	8009ade <osKernelGetState+0x32>
        state = osKernelInactive;
 8009ada:	2300      	movs	r3, #0
 8009adc:	607b      	str	r3, [r7, #4]
      break;
 8009ade:	bf00      	nop
  }

  return (state);
 8009ae0:	687b      	ldr	r3, [r7, #4]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	200003ec 	.word	0x200003ec

08009af0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af6:	f3ef 8305 	mrs	r3, IPSR
 8009afa:	603b      	str	r3, [r7, #0]
  return(result);
 8009afc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b02:	f06f 0305 	mvn.w	r3, #5
 8009b06:	607b      	str	r3, [r7, #4]
 8009b08:	e010      	b.n	8009b2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b0a:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <osKernelStart+0x48>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d109      	bne.n	8009b26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b12:	f7ff ff9d 	bl	8009a50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <osKernelStart+0x48>)
 8009b18:	2202      	movs	r2, #2
 8009b1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b1c:	f001 fe04 	bl	800b728 <vTaskStartScheduler>
      stat = osOK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	e002      	b.n	8009b2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b2c:	687b      	ldr	r3, [r7, #4]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200003ec 	.word	0x200003ec

08009b3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b42:	f3ef 8305 	mrs	r3, IPSR
 8009b46:	603b      	str	r3, [r7, #0]
  return(result);
 8009b48:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009b4e:	f001 ff17 	bl	800b980 <xTaskGetTickCountFromISR>
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	e002      	b.n	8009b5c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009b56:	f001 ff03 	bl	800b960 <xTaskGetTickCount>
 8009b5a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009b5c:	687b      	ldr	r3, [r7, #4]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b08e      	sub	sp, #56	; 0x38
 8009b6a:	af04      	add	r7, sp, #16
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b76:	f3ef 8305 	mrs	r3, IPSR
 8009b7a:	617b      	str	r3, [r7, #20]
  return(result);
 8009b7c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d17e      	bne.n	8009c80 <osThreadNew+0x11a>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d07b      	beq.n	8009c80 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b88:	2380      	movs	r3, #128	; 0x80
 8009b8a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b8c:	2318      	movs	r3, #24
 8009b8e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d045      	beq.n	8009c2c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <osThreadNew+0x48>
        name = attr->name;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d008      	beq.n	8009bd4 <osThreadNew+0x6e>
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b38      	cmp	r3, #56	; 0x38
 8009bc6:	d805      	bhi.n	8009bd4 <osThreadNew+0x6e>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <osThreadNew+0x72>
        return (NULL);
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e054      	b.n	8009c82 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	089b      	lsrs	r3, r3, #2
 8009be6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00e      	beq.n	8009c0e <osThreadNew+0xa8>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	2bbb      	cmp	r3, #187	; 0xbb
 8009bf6:	d90a      	bls.n	8009c0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <osThreadNew+0xa8>
        mem = 1;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	61bb      	str	r3, [r7, #24]
 8009c0c:	e010      	b.n	8009c30 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10c      	bne.n	8009c30 <osThreadNew+0xca>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d108      	bne.n	8009c30 <osThreadNew+0xca>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d104      	bne.n	8009c30 <osThreadNew+0xca>
          mem = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e001      	b.n	8009c30 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d110      	bne.n	8009c58 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c3e:	9202      	str	r2, [sp, #8]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6a3a      	ldr	r2, [r7, #32]
 8009c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f001 fb7f 	bl	800b350 <xTaskCreateStatic>
 8009c52:	4603      	mov	r3, r0
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	e013      	b.n	8009c80 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d110      	bne.n	8009c80 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	f107 0310 	add.w	r3, r7, #16
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f001 fbca 	bl	800b40a <xTaskCreate>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d001      	beq.n	8009c80 <osThreadNew+0x11a>
            hTask = NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c80:	693b      	ldr	r3, [r7, #16]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3728      	adds	r7, #40	; 0x28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c92:	f3ef 8305 	mrs	r3, IPSR
 8009c96:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <osDelay+0x1c>
    stat = osErrorISR;
 8009c9e:	f06f 0305 	mvn.w	r3, #5
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	e007      	b.n	8009cb6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 fd05 	bl	800b6c0 <vTaskDelay>
    }
  }

  return (stat);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	; 0x28
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd0:	f3ef 8305 	mrs	r3, IPSR
 8009cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8009cd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d175      	bne.n	8009dc8 <osSemaphoreNew+0x108>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d072      	beq.n	8009dc8 <osSemaphoreNew+0x108>
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d86e      	bhi.n	8009dc8 <osSemaphoreNew+0x108>
    mem = -1;
 8009cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d006      	beq.n	8009d0c <osSemaphoreNew+0x4c>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2b4f      	cmp	r3, #79	; 0x4f
 8009d04:	d902      	bls.n	8009d0c <osSemaphoreNew+0x4c>
        mem = 1;
 8009d06:	2301      	movs	r3, #1
 8009d08:	61bb      	str	r3, [r7, #24]
 8009d0a:	e00c      	b.n	8009d26 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <osSemaphoreNew+0x66>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <osSemaphoreNew+0x66>
          mem = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	e001      	b.n	8009d26 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d2c:	d04c      	beq.n	8009dc8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d128      	bne.n	8009d86 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d10a      	bne.n	8009d50 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2203      	movs	r2, #3
 8009d40:	9200      	str	r2, [sp, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	2100      	movs	r1, #0
 8009d46:	2001      	movs	r0, #1
 8009d48:	f000 fb5c 	bl	800a404 <xQueueGenericCreateStatic>
 8009d4c:	61f8      	str	r0, [r7, #28]
 8009d4e:	e005      	b.n	8009d5c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009d50:	2203      	movs	r2, #3
 8009d52:	2100      	movs	r1, #0
 8009d54:	2001      	movs	r0, #1
 8009d56:	f000 fbcd 	bl	800a4f4 <xQueueGenericCreate>
 8009d5a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d022      	beq.n	8009da8 <osSemaphoreNew+0xe8>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01f      	beq.n	8009da8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	69f8      	ldr	r0, [r7, #28]
 8009d70:	f000 fc88 	bl	800a684 <xQueueGenericSend>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d016      	beq.n	8009da8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d7a:	69f8      	ldr	r0, [r7, #28]
 8009d7c:	f001 f914 	bl	800afa8 <vQueueDelete>
            hSemaphore = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	e010      	b.n	8009da8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d108      	bne.n	8009d9e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	461a      	mov	r2, r3
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 fc0a 	bl	800a5ae <xQueueCreateCountingSemaphoreStatic>
 8009d9a:	61f8      	str	r0, [r7, #28]
 8009d9c:	e004      	b.n	8009da8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fc3b 	bl	800a61c <xQueueCreateCountingSemaphore>
 8009da6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <osSemaphoreNew+0xfc>
          name = attr->name;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	617b      	str	r3, [r7, #20]
 8009dba:	e001      	b.n	8009dc0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009dc0:	6979      	ldr	r1, [r7, #20]
 8009dc2:	69f8      	ldr	r0, [r7, #28]
 8009dc4:	f001 fa3c 	bl	800b240 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009dc8:	69fb      	ldr	r3, [r7, #28]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3720      	adds	r7, #32
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d103      	bne.n	8009df4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009dec:	f06f 0303 	mvn.w	r3, #3
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	e039      	b.n	8009e68 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009df4:	f3ef 8305 	mrs	r3, IPSR
 8009df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d022      	beq.n	8009e46 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009e06:	f06f 0303 	mvn.w	r3, #3
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e02c      	b.n	8009e68 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	461a      	mov	r2, r3
 8009e18:	2100      	movs	r1, #0
 8009e1a:	6938      	ldr	r0, [r7, #16]
 8009e1c:	f001 f844 	bl	800aea8 <xQueueReceiveFromISR>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d003      	beq.n	8009e2e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009e26:	f06f 0302 	mvn.w	r3, #2
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e01c      	b.n	8009e68 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d019      	beq.n	8009e68 <osSemaphoreAcquire+0x94>
 8009e34:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <osSemaphoreAcquire+0xa0>)
 8009e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	e010      	b.n	8009e68 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6938      	ldr	r0, [r7, #16]
 8009e4a:	f000 ff21 	bl	800ac90 <xQueueSemaphoreTake>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d009      	beq.n	8009e68 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009e5a:	f06f 0301 	mvn.w	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	e002      	b.n	8009e68 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009e62:	f06f 0302 	mvn.w	r3, #2
 8009e66:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009e68:	697b      	ldr	r3, [r7, #20]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	e000ed04 	.word	0xe000ed04

08009e78 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d103      	bne.n	8009e96 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009e8e:	f06f 0303 	mvn.w	r3, #3
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	e02c      	b.n	8009ef0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e96:	f3ef 8305 	mrs	r3, IPSR
 8009e9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01a      	beq.n	8009ed8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6938      	ldr	r0, [r7, #16]
 8009eae:	f000 fd82 	bl	800a9b6 <xQueueGiveFromISR>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d003      	beq.n	8009ec0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009eb8:	f06f 0302 	mvn.w	r3, #2
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e017      	b.n	8009ef0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d014      	beq.n	8009ef0 <osSemaphoreRelease+0x78>
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <osSemaphoreRelease+0x84>)
 8009ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	e00b      	b.n	8009ef0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2200      	movs	r2, #0
 8009edc:	2100      	movs	r1, #0
 8009ede:	6938      	ldr	r0, [r7, #16]
 8009ee0:	f000 fbd0 	bl	800a684 <xQueueGenericSend>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d002      	beq.n	8009ef0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009eea:	f06f 0302 	mvn.w	r3, #2
 8009eee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009ef0:	697b      	ldr	r3, [r7, #20]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	e000ed04 	.word	0xe000ed04

08009f00 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f10:	f3ef 8305 	mrs	r3, IPSR
 8009f14:	613b      	str	r3, [r7, #16]
  return(result);
 8009f16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d15f      	bne.n	8009fdc <osMessageQueueNew+0xdc>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d05c      	beq.n	8009fdc <osMessageQueueNew+0xdc>
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d059      	beq.n	8009fdc <osMessageQueueNew+0xdc>
    mem = -1;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d029      	beq.n	8009f88 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d012      	beq.n	8009f62 <osMessageQueueNew+0x62>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b4f      	cmp	r3, #79	; 0x4f
 8009f42:	d90e      	bls.n	8009f62 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	695a      	ldr	r2, [r3, #20]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	fb01 f303 	mul.w	r3, r1, r3
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <osMessageQueueNew+0x62>
        mem = 1;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	61bb      	str	r3, [r7, #24]
 8009f60:	e014      	b.n	8009f8c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d110      	bne.n	8009f8c <osMessageQueueNew+0x8c>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10c      	bne.n	8009f8c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d108      	bne.n	8009f8c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <osMessageQueueNew+0x8c>
          mem = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	e001      	b.n	8009f8c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d10b      	bne.n	8009faa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	9100      	str	r1, [sp, #0]
 8009f9e:	68b9      	ldr	r1, [r7, #8]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fa2f 	bl	800a404 <xQueueGenericCreateStatic>
 8009fa6:	61f8      	str	r0, [r7, #28]
 8009fa8:	e008      	b.n	8009fbc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fa9d 	bl	800a4f4 <xQueueGenericCreate>
 8009fba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00c      	beq.n	8009fdc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	617b      	str	r3, [r7, #20]
 8009fce:	e001      	b.n	8009fd4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009fd4:	6979      	ldr	r1, [r7, #20]
 8009fd6:	69f8      	ldr	r0, [r7, #28]
 8009fd8:	f001 f932 	bl	800b240 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009fdc:	69fb      	ldr	r3, [r7, #28]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a000:	f3ef 8305 	mrs	r3, IPSR
 800a004:	617b      	str	r3, [r7, #20]
  return(result);
 800a006:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d028      	beq.n	800a05e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <osMessageQueuePut+0x36>
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <osMessageQueuePut+0x36>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a01e:	f06f 0303 	mvn.w	r3, #3
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	e038      	b.n	800a098 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a02a:	f107 0210 	add.w	r2, r7, #16
 800a02e:	2300      	movs	r3, #0
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	69b8      	ldr	r0, [r7, #24]
 800a034:	f000 fc24 	bl	800a880 <xQueueGenericSendFromISR>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d003      	beq.n	800a046 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a03e:	f06f 0302 	mvn.w	r3, #2
 800a042:	61fb      	str	r3, [r7, #28]
 800a044:	e028      	b.n	800a098 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d025      	beq.n	800a098 <osMessageQueuePut+0xb0>
 800a04c:	4b15      	ldr	r3, [pc, #84]	; (800a0a4 <osMessageQueuePut+0xbc>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	e01c      	b.n	800a098 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <osMessageQueuePut+0x82>
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d103      	bne.n	800a072 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a06a:	f06f 0303 	mvn.w	r3, #3
 800a06e:	61fb      	str	r3, [r7, #28]
 800a070:	e012      	b.n	800a098 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a072:	2300      	movs	r3, #0
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	69b8      	ldr	r0, [r7, #24]
 800a07a:	f000 fb03 	bl	800a684 <xQueueGenericSend>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b01      	cmp	r3, #1
 800a082:	d009      	beq.n	800a098 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a08a:	f06f 0301 	mvn.w	r3, #1
 800a08e:	61fb      	str	r3, [r7, #28]
 800a090:	e002      	b.n	800a098 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a092:	f06f 0302 	mvn.w	r3, #2
 800a096:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a098:	69fb      	ldr	r3, [r7, #28]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	e000ed04 	.word	0xe000ed04

0800a0a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0be:	f3ef 8305 	mrs	r3, IPSR
 800a0c2:	617b      	str	r3, [r7, #20]
  return(result);
 800a0c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d028      	beq.n	800a11c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <osMessageQueueGet+0x34>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <osMessageQueueGet+0x34>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a0dc:	f06f 0303 	mvn.w	r3, #3
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e037      	b.n	800a154 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	69b8      	ldr	r0, [r7, #24]
 800a0f2:	f000 fed9 	bl	800aea8 <xQueueReceiveFromISR>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d003      	beq.n	800a104 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a0fc:	f06f 0302 	mvn.w	r3, #2
 800a100:	61fb      	str	r3, [r7, #28]
 800a102:	e027      	b.n	800a154 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d024      	beq.n	800a154 <osMessageQueueGet+0xac>
 800a10a:	4b15      	ldr	r3, [pc, #84]	; (800a160 <osMessageQueueGet+0xb8>)
 800a10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	e01b      	b.n	800a154 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <osMessageQueueGet+0x80>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d103      	bne.n	800a130 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a128:	f06f 0303 	mvn.w	r3, #3
 800a12c:	61fb      	str	r3, [r7, #28]
 800a12e:	e011      	b.n	800a154 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	69b8      	ldr	r0, [r7, #24]
 800a136:	f000 fccb 	bl	800aad0 <xQueueReceive>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d009      	beq.n	800a154 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a146:	f06f 0301 	mvn.w	r3, #1
 800a14a:	61fb      	str	r3, [r7, #28]
 800a14c:	e002      	b.n	800a154 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a14e:	f06f 0302 	mvn.w	r3, #2
 800a152:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a154:	69fb      	ldr	r3, [r7, #28]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4a07      	ldr	r2, [pc, #28]	; (800a190 <vApplicationGetIdleTaskMemory+0x2c>)
 800a174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a06      	ldr	r2, [pc, #24]	; (800a194 <vApplicationGetIdleTaskMemory+0x30>)
 800a17a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	200003f0 	.word	0x200003f0
 800a194:	200004ac 	.word	0x200004ac

0800a198 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4a07      	ldr	r2, [pc, #28]	; (800a1c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a1a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4a06      	ldr	r2, [pc, #24]	; (800a1c8 <vApplicationGetTimerTaskMemory+0x30>)
 800a1ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1b6:	601a      	str	r2, [r3, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	200006ac 	.word	0x200006ac
 800a1c8:	20000768 	.word	0x20000768

0800a1cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f103 0208 	add.w	r2, r3, #8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f103 0208 	add.w	r2, r3, #8
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f103 0208 	add.w	r2, r3, #8
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	601a      	str	r2, [r3, #0]
}
 800a262:	bf00      	nop
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a26e:	b480      	push	{r7}
 800a270:	b085      	sub	sp, #20
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a284:	d103      	bne.n	800a28e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	e00c      	b.n	800a2a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3308      	adds	r3, #8
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e002      	b.n	800a29c <vListInsert+0x2e>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d2f6      	bcs.n	800a296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	601a      	str	r2, [r3, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	6892      	ldr	r2, [r2, #8]
 800a2f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6852      	ldr	r2, [r2, #4]
 800a300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d103      	bne.n	800a314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	1e5a      	subs	r2, r3, #1
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a35e:	f002 fca9 	bl	800ccb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a36e:	fb01 f303 	mul.w	r3, r1, r3
 800a372:	441a      	add	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	3b01      	subs	r3, #1
 800a390:	68f9      	ldr	r1, [r7, #12]
 800a392:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a394:	fb01 f303 	mul.w	r3, r1, r3
 800a398:	441a      	add	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	22ff      	movs	r2, #255	; 0xff
 800a3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	22ff      	movs	r2, #255	; 0xff
 800a3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d114      	bne.n	800a3de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01a      	beq.n	800a3f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3310      	adds	r3, #16
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 fc5d 	bl	800bc80 <xTaskRemoveFromEventList>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d012      	beq.n	800a3f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <xQueueGenericReset+0xcc>)
 800a3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	e009      	b.n	800a3f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fef2 	bl	800a1cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3324      	adds	r3, #36	; 0x24
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff feed 	bl	800a1cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3f2:	f002 fc8f 	bl	800cd14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3f6:	2301      	movs	r3, #1
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	; 0x38
 800a408:	af02      	add	r7, sp, #8
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <xQueueGenericCreateStatic+0x52>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <xQueueGenericCreateStatic+0x56>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericCreateStatic+0x58>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	623b      	str	r3, [r7, #32]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <xQueueGenericCreateStatic+0x7e>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <xQueueGenericCreateStatic+0x82>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <xQueueGenericCreateStatic+0x84>
 800a486:	2300      	movs	r3, #0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	61fb      	str	r3, [r7, #28]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4a2:	2350      	movs	r3, #80	; 0x50
 800a4a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b50      	cmp	r3, #80	; 0x50
 800a4aa:	d00a      	beq.n	800a4c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	61bb      	str	r3, [r7, #24]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00d      	beq.n	800a4ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f83f 	bl	800a568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3730      	adds	r7, #48	; 0x30
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	4613      	mov	r3, r2
 800a500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	613b      	str	r3, [r7, #16]
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	fb02 f303 	mul.w	r3, r2, r3
 800a526:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	3350      	adds	r3, #80	; 0x50
 800a52c:	4618      	mov	r0, r3
 800a52e:	f002 fce3 	bl	800cef8 <pvPortMalloc>
 800a532:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d011      	beq.n	800a55e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	3350      	adds	r3, #80	; 0x50
 800a542:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a54c:	79fa      	ldrb	r2, [r7, #7]
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	4613      	mov	r3, r2
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 f805 	bl	800a568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a55e:	69bb      	ldr	r3, [r7, #24]
	}
 800a560:	4618      	mov	r0, r3
 800a562:	3720      	adds	r7, #32
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d103      	bne.n	800a584 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	69ba      	ldr	r2, [r7, #24]
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	e002      	b.n	800a58a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a596:	2101      	movs	r1, #1
 800a598:	69b8      	ldr	r0, [r7, #24]
 800a59a:	f7ff fecb 	bl	800a334 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b08a      	sub	sp, #40	; 0x28
 800a5b2:	af02      	add	r7, sp, #8
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	61bb      	str	r3, [r7, #24]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d90a      	bls.n	800a5f4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	617b      	str	r3, [r7, #20]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff ff00 	bl	800a404 <xQueueGenericCreateStatic>
 800a604:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a612:	69fb      	ldr	r3, [r7, #28]
	}
 800a614:	4618      	mov	r0, r3
 800a616:	3720      	adds	r7, #32
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	613b      	str	r3, [r7, #16]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d90a      	bls.n	800a660 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	60fb      	str	r3, [r7, #12]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a660:	2202      	movs	r2, #2
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ff45 	bl	800a4f4 <xQueueGenericCreate>
 800a66a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a678:	697b      	ldr	r3, [r7, #20]
	}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08e      	sub	sp, #56	; 0x38
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a692:	2300      	movs	r3, #0
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <xQueueGenericSend+0x32>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <xQueueGenericSend+0x40>
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <xQueueGenericSend+0x44>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <xQueueGenericSend+0x46>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <xQueueGenericSend+0x60>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d103      	bne.n	800a6f2 <xQueueGenericSend+0x6e>
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d101      	bne.n	800a6f6 <xQueueGenericSend+0x72>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e000      	b.n	800a6f8 <xQueueGenericSend+0x74>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	623b      	str	r3, [r7, #32]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a712:	f001 fc77 	bl	800c004 <xTaskGetSchedulerState>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d102      	bne.n	800a722 <xQueueGenericSend+0x9e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <xQueueGenericSend+0xa2>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <xQueueGenericSend+0xa4>
 800a726:	2300      	movs	r3, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <xQueueGenericSend+0xbe>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	61fb      	str	r3, [r7, #28]
}
 800a73e:	bf00      	nop
 800a740:	e7fe      	b.n	800a740 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a742:	f002 fab7 	bl	800ccb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	429a      	cmp	r2, r3
 800a750:	d302      	bcc.n	800a758 <xQueueGenericSend+0xd4>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d129      	bne.n	800a7ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a75e:	f000 fc5e 	bl	800b01e <prvCopyDataToQueue>
 800a762:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d010      	beq.n	800a78e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	3324      	adds	r3, #36	; 0x24
 800a770:	4618      	mov	r0, r3
 800a772:	f001 fa85 	bl	800bc80 <xTaskRemoveFromEventList>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d013      	beq.n	800a7a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a77c:	4b3f      	ldr	r3, [pc, #252]	; (800a87c <xQueueGenericSend+0x1f8>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	e00a      	b.n	800a7a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d007      	beq.n	800a7a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a794:	4b39      	ldr	r3, [pc, #228]	; (800a87c <xQueueGenericSend+0x1f8>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7a4:	f002 fab6 	bl	800cd14 <vPortExitCritical>
				return pdPASS;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e063      	b.n	800a874 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d103      	bne.n	800a7ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b2:	f002 faaf 	bl	800cd14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e05c      	b.n	800a874 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d106      	bne.n	800a7ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7c0:	f107 0314 	add.w	r3, r7, #20
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f001 fabf 	bl	800bd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7ce:	f002 faa1 	bl	800cd14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d2:	f001 f819 	bl	800b808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7d6:	f002 fa6d 	bl	800ccb4 <vPortEnterCritical>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7e0:	b25b      	sxtb	r3, r3
 800a7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7e6:	d103      	bne.n	800a7f0 <xQueueGenericSend+0x16c>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f6:	b25b      	sxtb	r3, r3
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7fc:	d103      	bne.n	800a806 <xQueueGenericSend+0x182>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a806:	f002 fa85 	bl	800cd14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a80a:	1d3a      	adds	r2, r7, #4
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f001 faae 	bl	800bd74 <xTaskCheckForTimeOut>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d124      	bne.n	800a868 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a820:	f000 fcf5 	bl	800b20e <prvIsQueueFull>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d018      	beq.n	800a85c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	3310      	adds	r3, #16
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f001 f9d4 	bl	800bbe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83a:	f000 fc80 	bl	800b13e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a83e:	f000 fff1 	bl	800b824 <xTaskResumeAll>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	f47f af7c 	bne.w	800a742 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a84a:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <xQueueGenericSend+0x1f8>)
 800a84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	e772      	b.n	800a742 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85e:	f000 fc6e 	bl	800b13e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a862:	f000 ffdf 	bl	800b824 <xTaskResumeAll>
 800a866:	e76c      	b.n	800a742 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86a:	f000 fc68 	bl	800b13e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a86e:	f000 ffd9 	bl	800b824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a872:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a874:	4618      	mov	r0, r3
 800a876:	3738      	adds	r7, #56	; 0x38
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b090      	sub	sp, #64	; 0x40
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d103      	bne.n	800a8bc <xQueueGenericSendFromISR+0x3c>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <xQueueGenericSendFromISR+0x40>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <xQueueGenericSendFromISR+0x42>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d103      	bne.n	800a8ea <xQueueGenericSendFromISR+0x6a>
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <xQueueGenericSendFromISR+0x6e>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e000      	b.n	800a8f0 <xQueueGenericSendFromISR+0x70>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	623b      	str	r3, [r7, #32]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a90a:	f002 fab5 	bl	800ce78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a90e:	f3ef 8211 	mrs	r2, BASEPRI
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	61fa      	str	r2, [r7, #28]
 800a924:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a926:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a928:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	429a      	cmp	r2, r3
 800a934:	d302      	bcc.n	800a93c <xQueueGenericSendFromISR+0xbc>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d12f      	bne.n	800a99c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a952:	f000 fb64 	bl	800b01e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a956:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95e:	d112      	bne.n	800a986 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d016      	beq.n	800a996 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	3324      	adds	r3, #36	; 0x24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 f987 	bl	800bc80 <xTaskRemoveFromEventList>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00e      	beq.n	800a996 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	e007      	b.n	800a996 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a98a:	3301      	adds	r3, #1
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	b25a      	sxtb	r2, r3
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a996:	2301      	movs	r3, #1
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a99a:	e001      	b.n	800a9a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3740      	adds	r7, #64	; 0x40
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b08e      	sub	sp, #56	; 0x38
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10a      	bne.n	800a9e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	623b      	str	r3, [r7, #32]
}
 800a9dc:	bf00      	nop
 800a9de:	e7fe      	b.n	800a9de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00a      	beq.n	800a9fe <xQueueGiveFromISR+0x48>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	61fb      	str	r3, [r7, #28]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <xQueueGiveFromISR+0x58>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <xQueueGiveFromISR+0x5c>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <xQueueGiveFromISR+0x5e>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <xQueueGiveFromISR+0x78>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	61bb      	str	r3, [r7, #24]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa2e:	f002 fa23 	bl	800ce78 <vPortValidateInterruptPriority>
	__asm volatile
 800aa32:	f3ef 8211 	mrs	r2, BASEPRI
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	617a      	str	r2, [r7, #20]
 800aa48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d22b      	bcs.n	800aab6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa78:	d112      	bne.n	800aaa0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d016      	beq.n	800aab0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	3324      	adds	r3, #36	; 0x24
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 f8fa 	bl	800bc80 <xTaskRemoveFromEventList>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00e      	beq.n	800aab0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00b      	beq.n	800aab0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e007      	b.n	800aab0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	b25a      	sxtb	r2, r3
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aab0:	2301      	movs	r3, #1
 800aab2:	637b      	str	r3, [r7, #52]	; 0x34
 800aab4:	e001      	b.n	800aaba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f383 8811 	msr	BASEPRI, r3
}
 800aac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3738      	adds	r7, #56	; 0x38
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08c      	sub	sp, #48	; 0x30
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aadc:	2300      	movs	r3, #0
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <xQueueReceive+0x30>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	623b      	str	r3, [r7, #32]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <xQueueReceive+0x3e>
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <xQueueReceive+0x42>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e000      	b.n	800ab14 <xQueueReceive+0x44>
 800ab12:	2300      	movs	r3, #0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10a      	bne.n	800ab2e <xQueueReceive+0x5e>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	61fb      	str	r3, [r7, #28]
}
 800ab2a:	bf00      	nop
 800ab2c:	e7fe      	b.n	800ab2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab2e:	f001 fa69 	bl	800c004 <xTaskGetSchedulerState>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d102      	bne.n	800ab3e <xQueueReceive+0x6e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <xQueueReceive+0x72>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <xQueueReceive+0x74>
 800ab42:	2300      	movs	r3, #0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xQueueReceive+0x8e>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	61bb      	str	r3, [r7, #24]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab5e:	f002 f8a9 	bl	800ccb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d01f      	beq.n	800abae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab72:	f000 fabe 	bl	800b0f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00f      	beq.n	800aba6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	3310      	adds	r3, #16
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 f878 	bl	800bc80 <xTaskRemoveFromEventList>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab96:	4b3d      	ldr	r3, [pc, #244]	; (800ac8c <xQueueReceive+0x1bc>)
 800ab98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aba6:	f002 f8b5 	bl	800cd14 <vPortExitCritical>
				return pdPASS;
 800abaa:	2301      	movs	r3, #1
 800abac:	e069      	b.n	800ac82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d103      	bne.n	800abbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abb4:	f002 f8ae 	bl	800cd14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800abb8:	2300      	movs	r3, #0
 800abba:	e062      	b.n	800ac82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abc2:	f107 0310 	add.w	r3, r7, #16
 800abc6:	4618      	mov	r0, r3
 800abc8:	f001 f8be 	bl	800bd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abd0:	f002 f8a0 	bl	800cd14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abd4:	f000 fe18 	bl	800b808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abd8:	f002 f86c 	bl	800ccb4 <vPortEnterCritical>
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe2:	b25b      	sxtb	r3, r3
 800abe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abe8:	d103      	bne.n	800abf2 <xQueueReceive+0x122>
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf8:	b25b      	sxtb	r3, r3
 800abfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abfe:	d103      	bne.n	800ac08 <xQueueReceive+0x138>
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac08:	f002 f884 	bl	800cd14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac0c:	1d3a      	adds	r2, r7, #4
 800ac0e:	f107 0310 	add.w	r3, r7, #16
 800ac12:	4611      	mov	r1, r2
 800ac14:	4618      	mov	r0, r3
 800ac16:	f001 f8ad 	bl	800bd74 <xTaskCheckForTimeOut>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d123      	bne.n	800ac68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac22:	f000 fade 	bl	800b1e2 <prvIsQueueEmpty>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d017      	beq.n	800ac5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	3324      	adds	r3, #36	; 0x24
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 ffd3 	bl	800bbe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3c:	f000 fa7f 	bl	800b13e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac40:	f000 fdf0 	bl	800b824 <xTaskResumeAll>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d189      	bne.n	800ab5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac4a:	4b10      	ldr	r3, [pc, #64]	; (800ac8c <xQueueReceive+0x1bc>)
 800ac4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	e780      	b.n	800ab5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5e:	f000 fa6e 	bl	800b13e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac62:	f000 fddf 	bl	800b824 <xTaskResumeAll>
 800ac66:	e77a      	b.n	800ab5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac6a:	f000 fa68 	bl	800b13e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac6e:	f000 fdd9 	bl	800b824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac74:	f000 fab5 	bl	800b1e2 <prvIsQueueEmpty>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f43f af6f 	beq.w	800ab5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3730      	adds	r7, #48	; 0x30
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	e000ed04 	.word	0xe000ed04

0800ac90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08e      	sub	sp, #56	; 0x38
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	623b      	str	r3, [r7, #32]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	61fb      	str	r3, [r7, #28]
}
 800acdc:	bf00      	nop
 800acde:	e7fe      	b.n	800acde <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ace0:	f001 f990 	bl	800c004 <xTaskGetSchedulerState>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d102      	bne.n	800acf0 <xQueueSemaphoreTake+0x60>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <xQueueSemaphoreTake+0x64>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e000      	b.n	800acf6 <xQueueSemaphoreTake+0x66>
 800acf4:	2300      	movs	r3, #0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	61bb      	str	r3, [r7, #24]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad10:	f001 ffd0 	bl	800ccb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d024      	beq.n	800ad6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	1e5a      	subs	r2, r3, #1
 800ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d104      	bne.n	800ad3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad30:	f001 fade 	bl	800c2f0 <pvTaskIncrementMutexHeldCount>
 800ad34:	4602      	mov	r2, r0
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00f      	beq.n	800ad62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	3310      	adds	r3, #16
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 ff9a 	bl	800bc80 <xTaskRemoveFromEventList>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d007      	beq.n	800ad62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad52:	4b54      	ldr	r3, [pc, #336]	; (800aea4 <xQueueSemaphoreTake+0x214>)
 800ad54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad62:	f001 ffd7 	bl	800cd14 <vPortExitCritical>
				return pdPASS;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e097      	b.n	800ae9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d111      	bne.n	800ad94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	617b      	str	r3, [r7, #20]
}
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad8c:	f001 ffc2 	bl	800cd14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e082      	b.n	800ae9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad9a:	f107 030c 	add.w	r3, r7, #12
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 ffd2 	bl	800bd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ada8:	f001 ffb4 	bl	800cd14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adac:	f000 fd2c 	bl	800b808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adb0:	f001 ff80 	bl	800ccb4 <vPortEnterCritical>
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc0:	d103      	bne.n	800adca <xQueueSemaphoreTake+0x13a>
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800add0:	b25b      	sxtb	r3, r3
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800add6:	d103      	bne.n	800ade0 <xQueueSemaphoreTake+0x150>
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ade0:	f001 ff98 	bl	800cd14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ade4:	463a      	mov	r2, r7
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f000 ffc1 	bl	800bd74 <xTaskCheckForTimeOut>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d132      	bne.n	800ae5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adfa:	f000 f9f2 	bl	800b1e2 <prvIsQueueEmpty>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d026      	beq.n	800ae52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d109      	bne.n	800ae20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ae0c:	f001 ff52 	bl	800ccb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 f913 	bl	800c040 <xTaskPriorityInherit>
 800ae1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae1c:	f001 ff7a 	bl	800cd14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	3324      	adds	r3, #36	; 0x24
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fed9 	bl	800bbe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae30:	f000 f985 	bl	800b13e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae34:	f000 fcf6 	bl	800b824 <xTaskResumeAll>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f47f af68 	bne.w	800ad10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae40:	4b18      	ldr	r3, [pc, #96]	; (800aea4 <xQueueSemaphoreTake+0x214>)
 800ae42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	e75e      	b.n	800ad10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae54:	f000 f973 	bl	800b13e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae58:	f000 fce4 	bl	800b824 <xTaskResumeAll>
 800ae5c:	e758      	b.n	800ad10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae60:	f000 f96d 	bl	800b13e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae64:	f000 fcde 	bl	800b824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae6a:	f000 f9ba 	bl	800b1e2 <prvIsQueueEmpty>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f43f af4d 	beq.w	800ad10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00d      	beq.n	800ae98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae7c:	f001 ff1a 	bl	800ccb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae82:	f000 f8b4 	bl	800afee <prvGetDisinheritPriorityAfterTimeout>
 800ae86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 f9ac 	bl	800c1ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae94:	f001 ff3e 	bl	800cd14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3738      	adds	r7, #56	; 0x38
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	e000ed04 	.word	0xe000ed04

0800aea8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08e      	sub	sp, #56	; 0x38
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	623b      	str	r3, [r7, #32]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d103      	bne.n	800aee2 <xQueueReceiveFromISR+0x3a>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <xQueueReceiveFromISR+0x3e>
 800aee2:	2301      	movs	r3, #1
 800aee4:	e000      	b.n	800aee8 <xQueueReceiveFromISR+0x40>
 800aee6:	2300      	movs	r3, #0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	61fb      	str	r3, [r7, #28]
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af02:	f001 ffb9 	bl	800ce78 <vPortValidateInterruptPriority>
	__asm volatile
 800af06:	f3ef 8211 	mrs	r2, BASEPRI
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	61ba      	str	r2, [r7, #24]
 800af1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d02f      	beq.n	800af8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3c:	f000 f8d9 	bl	800b0f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	1e5a      	subs	r2, r3, #1
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af50:	d112      	bne.n	800af78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d016      	beq.n	800af88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	3310      	adds	r3, #16
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 fe8e 	bl	800bc80 <xTaskRemoveFromEventList>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00e      	beq.n	800af88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	e007      	b.n	800af88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af7c:	3301      	adds	r3, #1
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	b25a      	sxtb	r2, r3
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af88:	2301      	movs	r3, #1
 800af8a:	637b      	str	r3, [r7, #52]	; 0x34
 800af8c:	e001      	b.n	800af92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af8e:	2300      	movs	r3, #0
 800af90:	637b      	str	r3, [r7, #52]	; 0x34
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f383 8811 	msr	BASEPRI, r3
}
 800af9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3738      	adds	r7, #56	; 0x38
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10a      	bne.n	800afd0 <vQueueDelete+0x28>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	60bb      	str	r3, [r7, #8]
}
 800afcc:	bf00      	nop
 800afce:	e7fe      	b.n	800afce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f95f 	bl	800b294 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f002 f855 	bl	800d090 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afe6:	bf00      	nop
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	2b00      	cmp	r3, #0
 800affc:	d006      	beq.n	800b00c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	e001      	b.n	800b010 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b010:	68fb      	ldr	r3, [r7, #12]
	}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b086      	sub	sp, #24
 800b022:	af00      	add	r7, sp, #0
 800b024:	60f8      	str	r0, [r7, #12]
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10d      	bne.n	800b058 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d14d      	bne.n	800b0e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 f861 	bl	800c110 <xTaskPriorityDisinherit>
 800b04e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	609a      	str	r2, [r3, #8]
 800b056:	e043      	b.n	800b0e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d119      	bne.n	800b092 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6858      	ldr	r0, [r3, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	461a      	mov	r2, r3
 800b068:	68b9      	ldr	r1, [r7, #8]
 800b06a:	f002 f955 	bl	800d318 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	441a      	add	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	429a      	cmp	r2, r3
 800b086:	d32b      	bcc.n	800b0e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	605a      	str	r2, [r3, #4]
 800b090:	e026      	b.n	800b0e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68d8      	ldr	r0, [r3, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	461a      	mov	r2, r3
 800b09c:	68b9      	ldr	r1, [r7, #8]
 800b09e:	f002 f93b 	bl	800d318 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68da      	ldr	r2, [r3, #12]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0aa:	425b      	negs	r3, r3
 800b0ac:	441a      	add	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d207      	bcs.n	800b0ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	425b      	negs	r3, r3
 800b0c8:	441a      	add	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d105      	bne.n	800b0e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0e8:	697b      	ldr	r3, [r7, #20]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d018      	beq.n	800b136 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10c:	441a      	add	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d303      	bcc.n	800b126 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68d9      	ldr	r1, [r3, #12]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	461a      	mov	r2, r3
 800b130:	6838      	ldr	r0, [r7, #0]
 800b132:	f002 f8f1 	bl	800d318 <memcpy>
	}
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b084      	sub	sp, #16
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b146:	f001 fdb5 	bl	800ccb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b150:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b152:	e011      	b.n	800b178 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d012      	beq.n	800b182 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3324      	adds	r3, #36	; 0x24
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fd8d 	bl	800bc80 <xTaskRemoveFromEventList>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b16c:	f000 fe64 	bl	800be38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	3b01      	subs	r3, #1
 800b174:	b2db      	uxtb	r3, r3
 800b176:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dce9      	bgt.n	800b154 <prvUnlockQueue+0x16>
 800b180:	e000      	b.n	800b184 <prvUnlockQueue+0x46>
					break;
 800b182:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	22ff      	movs	r2, #255	; 0xff
 800b188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b18c:	f001 fdc2 	bl	800cd14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b190:	f001 fd90 	bl	800ccb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b19a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b19c:	e011      	b.n	800b1c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d012      	beq.n	800b1cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3310      	adds	r3, #16
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fd68 	bl	800bc80 <xTaskRemoveFromEventList>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1b6:	f000 fe3f 	bl	800be38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dce9      	bgt.n	800b19e <prvUnlockQueue+0x60>
 800b1ca:	e000      	b.n	800b1ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	22ff      	movs	r2, #255	; 0xff
 800b1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1d6:	f001 fd9d 	bl	800cd14 <vPortExitCritical>
}
 800b1da:	bf00      	nop
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ea:	f001 fd63 	bl	800ccb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d102      	bne.n	800b1fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	e001      	b.n	800b200 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b200:	f001 fd88 	bl	800cd14 <vPortExitCritical>

	return xReturn;
 800b204:	68fb      	ldr	r3, [r7, #12]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b216:	f001 fd4d 	bl	800ccb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b222:	429a      	cmp	r2, r3
 800b224:	d102      	bne.n	800b22c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b226:	2301      	movs	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e001      	b.n	800b230 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b230:	f001 fd70 	bl	800cd14 <vPortExitCritical>

	return xReturn;
 800b234:	68fb      	ldr	r3, [r7, #12]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
 800b24e:	e014      	b.n	800b27a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b250:	4a0f      	ldr	r2, [pc, #60]	; (800b290 <vQueueAddToRegistry+0x50>)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10b      	bne.n	800b274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b25c:	490c      	ldr	r1, [pc, #48]	; (800b290 <vQueueAddToRegistry+0x50>)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b266:	4a0a      	ldr	r2, [pc, #40]	; (800b290 <vQueueAddToRegistry+0x50>)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	4413      	add	r3, r2
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b272:	e006      	b.n	800b282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3301      	adds	r3, #1
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b07      	cmp	r3, #7
 800b27e:	d9e7      	bls.n	800b250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	20000b68 	.word	0x20000b68

0800b294 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e016      	b.n	800b2d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b2a2:	4a10      	ldr	r2, [pc, #64]	; (800b2e4 <vQueueUnregisterQueue+0x50>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d10b      	bne.n	800b2ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b2b2:	4a0c      	ldr	r2, [pc, #48]	; (800b2e4 <vQueueUnregisterQueue+0x50>)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b2bc:	4a09      	ldr	r2, [pc, #36]	; (800b2e4 <vQueueUnregisterQueue+0x50>)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	605a      	str	r2, [r3, #4]
				break;
 800b2c8:	e006      	b.n	800b2d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b07      	cmp	r3, #7
 800b2d4:	d9e5      	bls.n	800b2a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	20000b68 	.word	0x20000b68

0800b2e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2f8:	f001 fcdc 	bl	800ccb4 <vPortEnterCritical>
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b302:	b25b      	sxtb	r3, r3
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b308:	d103      	bne.n	800b312 <vQueueWaitForMessageRestricted+0x2a>
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b318:	b25b      	sxtb	r3, r3
 800b31a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b31e:	d103      	bne.n	800b328 <vQueueWaitForMessageRestricted+0x40>
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b328:	f001 fcf4 	bl	800cd14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b330:	2b00      	cmp	r3, #0
 800b332:	d106      	bne.n	800b342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	3324      	adds	r3, #36	; 0x24
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	68b9      	ldr	r1, [r7, #8]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 fc73 	bl	800bc28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b342:	6978      	ldr	r0, [r7, #20]
 800b344:	f7ff fefb 	bl	800b13e <prvUnlockQueue>
	}
 800b348:	bf00      	nop
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08e      	sub	sp, #56	; 0x38
 800b354:	af04      	add	r7, sp, #16
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	623b      	str	r3, [r7, #32]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xTaskCreateStatic+0x46>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	61fb      	str	r3, [r7, #28]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b396:	23bc      	movs	r3, #188	; 0xbc
 800b398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2bbc      	cmp	r3, #188	; 0xbc
 800b39e:	d00a      	beq.n	800b3b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	61bb      	str	r3, [r7, #24]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d01e      	beq.n	800b3fc <xTaskCreateStatic+0xac>
 800b3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01b      	beq.n	800b3fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9303      	str	r3, [sp, #12]
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	9302      	str	r3, [sp, #8]
 800b3de:	f107 0314 	add.w	r3, r7, #20
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 f850 	bl	800b494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f6:	f000 f8f3 	bl	800b5e0 <prvAddNewTaskToReadyList>
 800b3fa:	e001      	b.n	800b400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b400:	697b      	ldr	r3, [r7, #20]
	}
 800b402:	4618      	mov	r0, r3
 800b404:	3728      	adds	r7, #40	; 0x28
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b08c      	sub	sp, #48	; 0x30
 800b40e:	af04      	add	r7, sp, #16
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	603b      	str	r3, [r7, #0]
 800b416:	4613      	mov	r3, r2
 800b418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b41a:	88fb      	ldrh	r3, [r7, #6]
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4618      	mov	r0, r3
 800b420:	f001 fd6a 	bl	800cef8 <pvPortMalloc>
 800b424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00e      	beq.n	800b44a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b42c:	20bc      	movs	r0, #188	; 0xbc
 800b42e:	f001 fd63 	bl	800cef8 <pvPortMalloc>
 800b432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	631a      	str	r2, [r3, #48]	; 0x30
 800b440:	e005      	b.n	800b44e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b442:	6978      	ldr	r0, [r7, #20]
 800b444:	f001 fe24 	bl	800d090 <vPortFree>
 800b448:	e001      	b.n	800b44e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d017      	beq.n	800b484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b45c:	88fa      	ldrh	r2, [r7, #6]
 800b45e:	2300      	movs	r3, #0
 800b460:	9303      	str	r3, [sp, #12]
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	9302      	str	r3, [sp, #8]
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 f80e 	bl	800b494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b478:	69f8      	ldr	r0, [r7, #28]
 800b47a:	f000 f8b1 	bl	800b5e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b47e:	2301      	movs	r3, #1
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	e002      	b.n	800b48a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b48a:	69bb      	ldr	r3, [r7, #24]
	}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3720      	adds	r7, #32
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	21a5      	movs	r1, #165	; 0xa5
 800b4ae:	f001 ff41 	bl	800d334 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	f023 0307 	bic.w	r3, r3, #7
 800b4ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00a      	beq.n	800b4ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	617b      	str	r3, [r7, #20]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d01f      	beq.n	800b532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	61fb      	str	r3, [r7, #28]
 800b4f6:	e012      	b.n	800b51e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	7819      	ldrb	r1, [r3, #0]
 800b500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	4413      	add	r3, r2
 800b506:	3334      	adds	r3, #52	; 0x34
 800b508:	460a      	mov	r2, r1
 800b50a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	4413      	add	r3, r2
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d006      	beq.n	800b526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	3301      	adds	r3, #1
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	2b0f      	cmp	r3, #15
 800b522:	d9e9      	bls.n	800b4f8 <prvInitialiseNewTask+0x64>
 800b524:	e000      	b.n	800b528 <prvInitialiseNewTask+0x94>
			{
				break;
 800b526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b530:	e003      	b.n	800b53a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	2b37      	cmp	r3, #55	; 0x37
 800b53e:	d901      	bls.n	800b544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b540:	2337      	movs	r3, #55	; 0x37
 800b542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b54e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	2200      	movs	r2, #0
 800b554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	3304      	adds	r3, #4
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fe56 	bl	800a20c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b562:	3318      	adds	r3, #24
 800b564:	4618      	mov	r0, r3
 800b566:	f7fe fe51 	bl	800a20c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b56e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	2200      	movs	r2, #0
 800b584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	3354      	adds	r3, #84	; 0x54
 800b594:	2260      	movs	r2, #96	; 0x60
 800b596:	2100      	movs	r1, #0
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fecb 	bl	800d334 <memset>
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	4a0c      	ldr	r2, [pc, #48]	; (800b5d4 <prvInitialiseNewTask+0x140>)
 800b5a2:	659a      	str	r2, [r3, #88]	; 0x58
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <prvInitialiseNewTask+0x144>)
 800b5a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	4a0b      	ldr	r2, [pc, #44]	; (800b5dc <prvInitialiseNewTask+0x148>)
 800b5ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	68f9      	ldr	r1, [r7, #12]
 800b5b4:	69b8      	ldr	r0, [r7, #24]
 800b5b6:	f001 fa51 	bl	800ca5c <pxPortInitialiseStack>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5cc:	bf00      	nop
 800b5ce:	3720      	adds	r7, #32
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	0800d5ec 	.word	0x0800d5ec
 800b5d8:	0800d60c 	.word	0x0800d60c
 800b5dc:	0800d5cc 	.word	0x0800d5cc

0800b5e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5e8:	f001 fb64 	bl	800ccb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5ec:	4b2d      	ldr	r3, [pc, #180]	; (800b6a4 <prvAddNewTaskToReadyList+0xc4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	4a2c      	ldr	r2, [pc, #176]	; (800b6a4 <prvAddNewTaskToReadyList+0xc4>)
 800b5f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5f6:	4b2c      	ldr	r3, [pc, #176]	; (800b6a8 <prvAddNewTaskToReadyList+0xc8>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5fe:	4a2a      	ldr	r2, [pc, #168]	; (800b6a8 <prvAddNewTaskToReadyList+0xc8>)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b604:	4b27      	ldr	r3, [pc, #156]	; (800b6a4 <prvAddNewTaskToReadyList+0xc4>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d110      	bne.n	800b62e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b60c:	f000 fc38 	bl	800be80 <prvInitialiseTaskLists>
 800b610:	e00d      	b.n	800b62e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b612:	4b26      	ldr	r3, [pc, #152]	; (800b6ac <prvAddNewTaskToReadyList+0xcc>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d109      	bne.n	800b62e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b61a:	4b23      	ldr	r3, [pc, #140]	; (800b6a8 <prvAddNewTaskToReadyList+0xc8>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	429a      	cmp	r2, r3
 800b626:	d802      	bhi.n	800b62e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b628:	4a1f      	ldr	r2, [pc, #124]	; (800b6a8 <prvAddNewTaskToReadyList+0xc8>)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b62e:	4b20      	ldr	r3, [pc, #128]	; (800b6b0 <prvAddNewTaskToReadyList+0xd0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	4a1e      	ldr	r2, [pc, #120]	; (800b6b0 <prvAddNewTaskToReadyList+0xd0>)
 800b636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b638:	4b1d      	ldr	r3, [pc, #116]	; (800b6b0 <prvAddNewTaskToReadyList+0xd0>)
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b644:	4b1b      	ldr	r3, [pc, #108]	; (800b6b4 <prvAddNewTaskToReadyList+0xd4>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d903      	bls.n	800b654 <prvAddNewTaskToReadyList+0x74>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	4a18      	ldr	r2, [pc, #96]	; (800b6b4 <prvAddNewTaskToReadyList+0xd4>)
 800b652:	6013      	str	r3, [r2, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <prvAddNewTaskToReadyList+0xd8>)
 800b662:	441a      	add	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3304      	adds	r3, #4
 800b668:	4619      	mov	r1, r3
 800b66a:	4610      	mov	r0, r2
 800b66c:	f7fe fddb 	bl	800a226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b670:	f001 fb50 	bl	800cd14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b674:	4b0d      	ldr	r3, [pc, #52]	; (800b6ac <prvAddNewTaskToReadyList+0xcc>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00e      	beq.n	800b69a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b67c:	4b0a      	ldr	r3, [pc, #40]	; (800b6a8 <prvAddNewTaskToReadyList+0xc8>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b686:	429a      	cmp	r2, r3
 800b688:	d207      	bcs.n	800b69a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b68a:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <prvAddNewTaskToReadyList+0xdc>)
 800b68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	2000107c 	.word	0x2000107c
 800b6a8:	20000ba8 	.word	0x20000ba8
 800b6ac:	20001088 	.word	0x20001088
 800b6b0:	20001098 	.word	0x20001098
 800b6b4:	20001084 	.word	0x20001084
 800b6b8:	20000bac 	.word	0x20000bac
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d017      	beq.n	800b702 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6d2:	4b13      	ldr	r3, [pc, #76]	; (800b720 <vTaskDelay+0x60>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00a      	beq.n	800b6f0 <vTaskDelay+0x30>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	60bb      	str	r3, [r7, #8]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6f0:	f000 f88a 	bl	800b808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fe0e 	bl	800c318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6fc:	f000 f892 	bl	800b824 <xTaskResumeAll>
 800b700:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d107      	bne.n	800b718 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b708:	4b06      	ldr	r3, [pc, #24]	; (800b724 <vTaskDelay+0x64>)
 800b70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	200010a4 	.word	0x200010a4
 800b724:	e000ed04 	.word	0xe000ed04

0800b728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08a      	sub	sp, #40	; 0x28
 800b72c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b736:	463a      	mov	r2, r7
 800b738:	1d39      	adds	r1, r7, #4
 800b73a:	f107 0308 	add.w	r3, r7, #8
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fd10 	bl	800a164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	9202      	str	r2, [sp, #8]
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	2300      	movs	r3, #0
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	2300      	movs	r3, #0
 800b754:	460a      	mov	r2, r1
 800b756:	4924      	ldr	r1, [pc, #144]	; (800b7e8 <vTaskStartScheduler+0xc0>)
 800b758:	4824      	ldr	r0, [pc, #144]	; (800b7ec <vTaskStartScheduler+0xc4>)
 800b75a:	f7ff fdf9 	bl	800b350 <xTaskCreateStatic>
 800b75e:	4603      	mov	r3, r0
 800b760:	4a23      	ldr	r2, [pc, #140]	; (800b7f0 <vTaskStartScheduler+0xc8>)
 800b762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b764:	4b22      	ldr	r3, [pc, #136]	; (800b7f0 <vTaskStartScheduler+0xc8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b76c:	2301      	movs	r3, #1
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	e001      	b.n	800b776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d102      	bne.n	800b782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b77c:	f000 fe20 	bl	800c3c0 <xTimerCreateTimerTask>
 800b780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d11b      	bne.n	800b7c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	613b      	str	r3, [r7, #16]
}
 800b79a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b79c:	4b15      	ldr	r3, [pc, #84]	; (800b7f4 <vTaskStartScheduler+0xcc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3354      	adds	r3, #84	; 0x54
 800b7a2:	4a15      	ldr	r2, [pc, #84]	; (800b7f8 <vTaskStartScheduler+0xd0>)
 800b7a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7a6:	4b15      	ldr	r3, [pc, #84]	; (800b7fc <vTaskStartScheduler+0xd4>)
 800b7a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7ae:	4b14      	ldr	r3, [pc, #80]	; (800b800 <vTaskStartScheduler+0xd8>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7b4:	4b13      	ldr	r3, [pc, #76]	; (800b804 <vTaskStartScheduler+0xdc>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7ba:	f001 f9d9 	bl	800cb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7be:	e00e      	b.n	800b7de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7c6:	d10a      	bne.n	800b7de <vTaskStartScheduler+0xb6>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	60fb      	str	r3, [r7, #12]
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <vTaskStartScheduler+0xb4>
}
 800b7de:	bf00      	nop
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0800d500 	.word	0x0800d500
 800b7ec:	0800be51 	.word	0x0800be51
 800b7f0:	200010a0 	.word	0x200010a0
 800b7f4:	20000ba8 	.word	0x20000ba8
 800b7f8:	20000010 	.word	0x20000010
 800b7fc:	2000109c 	.word	0x2000109c
 800b800:	20001088 	.word	0x20001088
 800b804:	20001080 	.word	0x20001080

0800b808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b808:	b480      	push	{r7}
 800b80a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b80c:	4b04      	ldr	r3, [pc, #16]	; (800b820 <vTaskSuspendAll+0x18>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3301      	adds	r3, #1
 800b812:	4a03      	ldr	r2, [pc, #12]	; (800b820 <vTaskSuspendAll+0x18>)
 800b814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b816:	bf00      	nop
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	200010a4 	.word	0x200010a4

0800b824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b82e:	2300      	movs	r3, #0
 800b830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b832:	4b42      	ldr	r3, [pc, #264]	; (800b93c <xTaskResumeAll+0x118>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10a      	bne.n	800b850 <xTaskResumeAll+0x2c>
	__asm volatile
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	f383 8811 	msr	BASEPRI, r3
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	603b      	str	r3, [r7, #0]
}
 800b84c:	bf00      	nop
 800b84e:	e7fe      	b.n	800b84e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b850:	f001 fa30 	bl	800ccb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b854:	4b39      	ldr	r3, [pc, #228]	; (800b93c <xTaskResumeAll+0x118>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3b01      	subs	r3, #1
 800b85a:	4a38      	ldr	r2, [pc, #224]	; (800b93c <xTaskResumeAll+0x118>)
 800b85c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b85e:	4b37      	ldr	r3, [pc, #220]	; (800b93c <xTaskResumeAll+0x118>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d162      	bne.n	800b92c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b866:	4b36      	ldr	r3, [pc, #216]	; (800b940 <xTaskResumeAll+0x11c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d05e      	beq.n	800b92c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b86e:	e02f      	b.n	800b8d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b870:	4b34      	ldr	r3, [pc, #208]	; (800b944 <xTaskResumeAll+0x120>)
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	3318      	adds	r3, #24
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe fd2f 	bl	800a2e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3304      	adds	r3, #4
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fd2a 	bl	800a2e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b890:	4b2d      	ldr	r3, [pc, #180]	; (800b948 <xTaskResumeAll+0x124>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d903      	bls.n	800b8a0 <xTaskResumeAll+0x7c>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	4a2a      	ldr	r2, [pc, #168]	; (800b948 <xTaskResumeAll+0x124>)
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4a27      	ldr	r2, [pc, #156]	; (800b94c <xTaskResumeAll+0x128>)
 800b8ae:	441a      	add	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fe fcb5 	bl	800a226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	4b23      	ldr	r3, [pc, #140]	; (800b950 <xTaskResumeAll+0x12c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d302      	bcc.n	800b8d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b8ca:	4b22      	ldr	r3, [pc, #136]	; (800b954 <xTaskResumeAll+0x130>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8d0:	4b1c      	ldr	r3, [pc, #112]	; (800b944 <xTaskResumeAll+0x120>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1cb      	bne.n	800b870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8de:	f000 fb71 	bl	800bfc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8e2:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <xTaskResumeAll+0x134>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d010      	beq.n	800b910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8ee:	f000 f859 	bl	800b9a4 <xTaskIncrementTick>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b8f8:	4b16      	ldr	r3, [pc, #88]	; (800b954 <xTaskResumeAll+0x130>)
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3b01      	subs	r3, #1
 800b902:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f1      	bne.n	800b8ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b90a:	4b13      	ldr	r3, [pc, #76]	; (800b958 <xTaskResumeAll+0x134>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b910:	4b10      	ldr	r3, [pc, #64]	; (800b954 <xTaskResumeAll+0x130>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d009      	beq.n	800b92c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b918:	2301      	movs	r3, #1
 800b91a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b91c:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <xTaskResumeAll+0x138>)
 800b91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b92c:	f001 f9f2 	bl	800cd14 <vPortExitCritical>

	return xAlreadyYielded;
 800b930:	68bb      	ldr	r3, [r7, #8]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	200010a4 	.word	0x200010a4
 800b940:	2000107c 	.word	0x2000107c
 800b944:	2000103c 	.word	0x2000103c
 800b948:	20001084 	.word	0x20001084
 800b94c:	20000bac 	.word	0x20000bac
 800b950:	20000ba8 	.word	0x20000ba8
 800b954:	20001090 	.word	0x20001090
 800b958:	2000108c 	.word	0x2000108c
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <xTaskGetTickCount+0x1c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b96c:	687b      	ldr	r3, [r7, #4]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	20001080 	.word	0x20001080

0800b980 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b986:	f001 fa77 	bl	800ce78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b98e:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <xTaskGetTickCountFromISR+0x20>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b994:	683b      	ldr	r3, [r7, #0]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20001080 	.word	0x20001080

0800b9a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ae:	4b4f      	ldr	r3, [pc, #316]	; (800baec <xTaskIncrementTick+0x148>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f040 808f 	bne.w	800bad6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9b8:	4b4d      	ldr	r3, [pc, #308]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9c0:	4a4b      	ldr	r2, [pc, #300]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d120      	bne.n	800ba0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9cc:	4b49      	ldr	r3, [pc, #292]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <xTaskIncrementTick+0x48>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	603b      	str	r3, [r7, #0]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <xTaskIncrementTick+0x46>
 800b9ec:	4b41      	ldr	r3, [pc, #260]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	4b41      	ldr	r3, [pc, #260]	; (800baf8 <xTaskIncrementTick+0x154>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a3f      	ldr	r2, [pc, #252]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	4a3f      	ldr	r2, [pc, #252]	; (800baf8 <xTaskIncrementTick+0x154>)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	4b3e      	ldr	r3, [pc, #248]	; (800bafc <xTaskIncrementTick+0x158>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3301      	adds	r3, #1
 800ba06:	4a3d      	ldr	r2, [pc, #244]	; (800bafc <xTaskIncrementTick+0x158>)
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	f000 fadb 	bl	800bfc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba0e:	4b3c      	ldr	r3, [pc, #240]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d349      	bcc.n	800baac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba18:	4b36      	ldr	r3, [pc, #216]	; (800baf4 <xTaskIncrementTick+0x150>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d104      	bne.n	800ba2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba22:	4b37      	ldr	r3, [pc, #220]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba28:	601a      	str	r2, [r3, #0]
					break;
 800ba2a:	e03f      	b.n	800baac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2c:	4b31      	ldr	r3, [pc, #196]	; (800baf4 <xTaskIncrementTick+0x150>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d203      	bcs.n	800ba4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba44:	4a2e      	ldr	r2, [pc, #184]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba4a:	e02f      	b.n	800baac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe fc45 	bl	800a2e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	3318      	adds	r3, #24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fc3c 	bl	800a2e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4b25      	ldr	r3, [pc, #148]	; (800bb04 <xTaskIncrementTick+0x160>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d903      	bls.n	800ba7c <xTaskIncrementTick+0xd8>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a22      	ldr	r2, [pc, #136]	; (800bb04 <xTaskIncrementTick+0x160>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a1f      	ldr	r2, [pc, #124]	; (800bb08 <xTaskIncrementTick+0x164>)
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fbc7 	bl	800a226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4b1b      	ldr	r3, [pc, #108]	; (800bb0c <xTaskIncrementTick+0x168>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d3b8      	bcc.n	800ba18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800baa6:	2301      	movs	r3, #1
 800baa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baaa:	e7b5      	b.n	800ba18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800baac:	4b17      	ldr	r3, [pc, #92]	; (800bb0c <xTaskIncrementTick+0x168>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab2:	4915      	ldr	r1, [pc, #84]	; (800bb08 <xTaskIncrementTick+0x164>)
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	440b      	add	r3, r1
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d901      	bls.n	800bac8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bac4:	2301      	movs	r3, #1
 800bac6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bac8:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <xTaskIncrementTick+0x16c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d007      	beq.n	800bae0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	e004      	b.n	800bae0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bad6:	4b0f      	ldr	r3, [pc, #60]	; (800bb14 <xTaskIncrementTick+0x170>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	4a0d      	ldr	r2, [pc, #52]	; (800bb14 <xTaskIncrementTick+0x170>)
 800bade:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bae0:	697b      	ldr	r3, [r7, #20]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200010a4 	.word	0x200010a4
 800baf0:	20001080 	.word	0x20001080
 800baf4:	20001034 	.word	0x20001034
 800baf8:	20001038 	.word	0x20001038
 800bafc:	20001094 	.word	0x20001094
 800bb00:	2000109c 	.word	0x2000109c
 800bb04:	20001084 	.word	0x20001084
 800bb08:	20000bac 	.word	0x20000bac
 800bb0c:	20000ba8 	.word	0x20000ba8
 800bb10:	20001090 	.word	0x20001090
 800bb14:	2000108c 	.word	0x2000108c

0800bb18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb1e:	4b2a      	ldr	r3, [pc, #168]	; (800bbc8 <vTaskSwitchContext+0xb0>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb26:	4b29      	ldr	r3, [pc, #164]	; (800bbcc <vTaskSwitchContext+0xb4>)
 800bb28:	2201      	movs	r2, #1
 800bb2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb2c:	e046      	b.n	800bbbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bb2e:	4b27      	ldr	r3, [pc, #156]	; (800bbcc <vTaskSwitchContext+0xb4>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb34:	4b26      	ldr	r3, [pc, #152]	; (800bbd0 <vTaskSwitchContext+0xb8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	e010      	b.n	800bb5e <vTaskSwitchContext+0x46>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <vTaskSwitchContext+0x40>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	607b      	str	r3, [r7, #4]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <vTaskSwitchContext+0x3e>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	491d      	ldr	r1, [pc, #116]	; (800bbd4 <vTaskSwitchContext+0xbc>)
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	440b      	add	r3, r1
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0e4      	beq.n	800bb3c <vTaskSwitchContext+0x24>
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4a15      	ldr	r2, [pc, #84]	; (800bbd4 <vTaskSwitchContext+0xbc>)
 800bb7e:	4413      	add	r3, r2
 800bb80:	60bb      	str	r3, [r7, #8]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	605a      	str	r2, [r3, #4]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	3308      	adds	r3, #8
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d104      	bne.n	800bba2 <vTaskSwitchContext+0x8a>
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	605a      	str	r2, [r3, #4]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	4a0b      	ldr	r2, [pc, #44]	; (800bbd8 <vTaskSwitchContext+0xc0>)
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	4a08      	ldr	r2, [pc, #32]	; (800bbd0 <vTaskSwitchContext+0xb8>)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbb2:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <vTaskSwitchContext+0xc0>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3354      	adds	r3, #84	; 0x54
 800bbb8:	4a08      	ldr	r2, [pc, #32]	; (800bbdc <vTaskSwitchContext+0xc4>)
 800bbba:	6013      	str	r3, [r2, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	200010a4 	.word	0x200010a4
 800bbcc:	20001090 	.word	0x20001090
 800bbd0:	20001084 	.word	0x20001084
 800bbd4:	20000bac 	.word	0x20000bac
 800bbd8:	20000ba8 	.word	0x20000ba8
 800bbdc:	20000010 	.word	0x20000010

0800bbe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	60fb      	str	r3, [r7, #12]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc06:	4b07      	ldr	r3, [pc, #28]	; (800bc24 <vTaskPlaceOnEventList+0x44>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3318      	adds	r3, #24
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fe fb2d 	bl	800a26e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc14:	2101      	movs	r1, #1
 800bc16:	6838      	ldr	r0, [r7, #0]
 800bc18:	f000 fb7e 	bl	800c318 <prvAddCurrentTaskToDelayedList>
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000ba8 	.word	0x20000ba8

0800bc28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10a      	bne.n	800bc50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	617b      	str	r3, [r7, #20]
}
 800bc4c:	bf00      	nop
 800bc4e:	e7fe      	b.n	800bc4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc50:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <vTaskPlaceOnEventListRestricted+0x54>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3318      	adds	r3, #24
 800bc56:	4619      	mov	r1, r3
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f7fe fae4 	bl	800a226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bc64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	68b8      	ldr	r0, [r7, #8]
 800bc6e:	f000 fb53 	bl	800c318 <prvAddCurrentTaskToDelayedList>
	}
 800bc72:	bf00      	nop
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20000ba8 	.word	0x20000ba8

0800bc80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10a      	bne.n	800bcac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	60fb      	str	r3, [r7, #12]
}
 800bca8:	bf00      	nop
 800bcaa:	e7fe      	b.n	800bcaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	3318      	adds	r3, #24
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe fb15 	bl	800a2e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcb6:	4b1e      	ldr	r3, [pc, #120]	; (800bd30 <xTaskRemoveFromEventList+0xb0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d11d      	bne.n	800bcfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fb0c 	bl	800a2e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4b19      	ldr	r3, [pc, #100]	; (800bd34 <xTaskRemoveFromEventList+0xb4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d903      	bls.n	800bcdc <xTaskRemoveFromEventList+0x5c>
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd8:	4a16      	ldr	r2, [pc, #88]	; (800bd34 <xTaskRemoveFromEventList+0xb4>)
 800bcda:	6013      	str	r3, [r2, #0]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce0:	4613      	mov	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4a13      	ldr	r2, [pc, #76]	; (800bd38 <xTaskRemoveFromEventList+0xb8>)
 800bcea:	441a      	add	r2, r3
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	f7fe fa97 	bl	800a226 <vListInsertEnd>
 800bcf8:	e005      	b.n	800bd06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3318      	adds	r3, #24
 800bcfe:	4619      	mov	r1, r3
 800bd00:	480e      	ldr	r0, [pc, #56]	; (800bd3c <xTaskRemoveFromEventList+0xbc>)
 800bd02:	f7fe fa90 	bl	800a226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <xTaskRemoveFromEventList+0xc0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d905      	bls.n	800bd20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd14:	2301      	movs	r3, #1
 800bd16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd18:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <xTaskRemoveFromEventList+0xc4>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	e001      	b.n	800bd24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd20:	2300      	movs	r3, #0
 800bd22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd24:	697b      	ldr	r3, [r7, #20]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	200010a4 	.word	0x200010a4
 800bd34:	20001084 	.word	0x20001084
 800bd38:	20000bac 	.word	0x20000bac
 800bd3c:	2000103c 	.word	0x2000103c
 800bd40:	20000ba8 	.word	0x20000ba8
 800bd44:	20001090 	.word	0x20001090

0800bd48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd50:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <vTaskInternalSetTimeOutState+0x24>)
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd58:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <vTaskInternalSetTimeOutState+0x28>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	605a      	str	r2, [r3, #4]
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	20001094 	.word	0x20001094
 800bd70:	20001080 	.word	0x20001080

0800bd74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10a      	bne.n	800bd9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	613b      	str	r3, [r7, #16]
}
 800bd96:	bf00      	nop
 800bd98:	e7fe      	b.n	800bd98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	60fb      	str	r3, [r7, #12]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdb6:	f000 ff7d 	bl	800ccb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdba:	4b1d      	ldr	r3, [pc, #116]	; (800be30 <xTaskCheckForTimeOut+0xbc>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdd2:	d102      	bne.n	800bdda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
 800bdd8:	e023      	b.n	800be22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	4b15      	ldr	r3, [pc, #84]	; (800be34 <xTaskCheckForTimeOut+0xc0>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d007      	beq.n	800bdf6 <xTaskCheckForTimeOut+0x82>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d302      	bcc.n	800bdf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	61fb      	str	r3, [r7, #28]
 800bdf4:	e015      	b.n	800be22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d20b      	bcs.n	800be18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	1ad2      	subs	r2, r2, r3
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7ff ff9b 	bl	800bd48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	e004      	b.n	800be22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be1e:	2301      	movs	r3, #1
 800be20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be22:	f000 ff77 	bl	800cd14 <vPortExitCritical>

	return xReturn;
 800be26:	69fb      	ldr	r3, [r7, #28]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3720      	adds	r7, #32
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20001080 	.word	0x20001080
 800be34:	20001094 	.word	0x20001094

0800be38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be38:	b480      	push	{r7}
 800be3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be3c:	4b03      	ldr	r3, [pc, #12]	; (800be4c <vTaskMissedYield+0x14>)
 800be3e:	2201      	movs	r2, #1
 800be40:	601a      	str	r2, [r3, #0]
}
 800be42:	bf00      	nop
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	20001090 	.word	0x20001090

0800be50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be58:	f000 f852 	bl	800bf00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <prvIdleTask+0x28>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d9f9      	bls.n	800be58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <prvIdleTask+0x2c>)
 800be66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be74:	e7f0      	b.n	800be58 <prvIdleTask+0x8>
 800be76:	bf00      	nop
 800be78:	20000bac 	.word	0x20000bac
 800be7c:	e000ed04 	.word	0xe000ed04

0800be80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be86:	2300      	movs	r3, #0
 800be88:	607b      	str	r3, [r7, #4]
 800be8a:	e00c      	b.n	800bea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4a12      	ldr	r2, [pc, #72]	; (800bee0 <prvInitialiseTaskLists+0x60>)
 800be98:	4413      	add	r3, r2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe f996 	bl	800a1cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3301      	adds	r3, #1
 800bea4:	607b      	str	r3, [r7, #4]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b37      	cmp	r3, #55	; 0x37
 800beaa:	d9ef      	bls.n	800be8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800beac:	480d      	ldr	r0, [pc, #52]	; (800bee4 <prvInitialiseTaskLists+0x64>)
 800beae:	f7fe f98d 	bl	800a1cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800beb2:	480d      	ldr	r0, [pc, #52]	; (800bee8 <prvInitialiseTaskLists+0x68>)
 800beb4:	f7fe f98a 	bl	800a1cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800beb8:	480c      	ldr	r0, [pc, #48]	; (800beec <prvInitialiseTaskLists+0x6c>)
 800beba:	f7fe f987 	bl	800a1cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bebe:	480c      	ldr	r0, [pc, #48]	; (800bef0 <prvInitialiseTaskLists+0x70>)
 800bec0:	f7fe f984 	bl	800a1cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bec4:	480b      	ldr	r0, [pc, #44]	; (800bef4 <prvInitialiseTaskLists+0x74>)
 800bec6:	f7fe f981 	bl	800a1cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800beca:	4b0b      	ldr	r3, [pc, #44]	; (800bef8 <prvInitialiseTaskLists+0x78>)
 800becc:	4a05      	ldr	r2, [pc, #20]	; (800bee4 <prvInitialiseTaskLists+0x64>)
 800bece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bed0:	4b0a      	ldr	r3, [pc, #40]	; (800befc <prvInitialiseTaskLists+0x7c>)
 800bed2:	4a05      	ldr	r2, [pc, #20]	; (800bee8 <prvInitialiseTaskLists+0x68>)
 800bed4:	601a      	str	r2, [r3, #0]
}
 800bed6:	bf00      	nop
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20000bac 	.word	0x20000bac
 800bee4:	2000100c 	.word	0x2000100c
 800bee8:	20001020 	.word	0x20001020
 800beec:	2000103c 	.word	0x2000103c
 800bef0:	20001050 	.word	0x20001050
 800bef4:	20001068 	.word	0x20001068
 800bef8:	20001034 	.word	0x20001034
 800befc:	20001038 	.word	0x20001038

0800bf00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf06:	e019      	b.n	800bf3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf08:	f000 fed4 	bl	800ccb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <prvCheckTasksWaitingTermination+0x50>)
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe f9e1 	bl	800a2e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <prvCheckTasksWaitingTermination+0x54>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	4a0b      	ldr	r2, [pc, #44]	; (800bf54 <prvCheckTasksWaitingTermination+0x54>)
 800bf26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf28:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <prvCheckTasksWaitingTermination+0x58>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	4a0a      	ldr	r2, [pc, #40]	; (800bf58 <prvCheckTasksWaitingTermination+0x58>)
 800bf30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf32:	f000 feef 	bl	800cd14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f810 	bl	800bf5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf3c:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <prvCheckTasksWaitingTermination+0x58>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e1      	bne.n	800bf08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20001050 	.word	0x20001050
 800bf54:	2000107c 	.word	0x2000107c
 800bf58:	20001064 	.word	0x20001064

0800bf5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3354      	adds	r3, #84	; 0x54
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 f9f9 	bl	800d360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d108      	bne.n	800bf8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 f887 	bl	800d090 <vPortFree>
				vPortFree( pxTCB );
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f001 f884 	bl	800d090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf88:	e018      	b.n	800bfbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d103      	bne.n	800bf9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f001 f87b 	bl	800d090 <vPortFree>
	}
 800bf9a:	e00f      	b.n	800bfbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d00a      	beq.n	800bfbc <prvDeleteTCB+0x60>
	__asm volatile
 800bfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	60fb      	str	r3, [r7, #12]
}
 800bfb8:	bf00      	nop
 800bfba:	e7fe      	b.n	800bfba <prvDeleteTCB+0x5e>
	}
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfca:	4b0c      	ldr	r3, [pc, #48]	; (800bffc <prvResetNextTaskUnblockTime+0x38>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d104      	bne.n	800bfde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <prvResetNextTaskUnblockTime+0x3c>)
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfdc:	e008      	b.n	800bff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfde:	4b07      	ldr	r3, [pc, #28]	; (800bffc <prvResetNextTaskUnblockTime+0x38>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	4a04      	ldr	r2, [pc, #16]	; (800c000 <prvResetNextTaskUnblockTime+0x3c>)
 800bfee:	6013      	str	r3, [r2, #0]
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	20001034 	.word	0x20001034
 800c000:	2000109c 	.word	0x2000109c

0800c004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c00a:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <xTaskGetSchedulerState+0x34>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d102      	bne.n	800c018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c012:	2301      	movs	r3, #1
 800c014:	607b      	str	r3, [r7, #4]
 800c016:	e008      	b.n	800c02a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c018:	4b08      	ldr	r3, [pc, #32]	; (800c03c <xTaskGetSchedulerState+0x38>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d102      	bne.n	800c026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c020:	2302      	movs	r3, #2
 800c022:	607b      	str	r3, [r7, #4]
 800c024:	e001      	b.n	800c02a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c026:	2300      	movs	r3, #0
 800c028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c02a:	687b      	ldr	r3, [r7, #4]
	}
 800c02c:	4618      	mov	r0, r3
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	20001088 	.word	0x20001088
 800c03c:	200010a4 	.word	0x200010a4

0800c040 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c04c:	2300      	movs	r3, #0
 800c04e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d051      	beq.n	800c0fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05a:	4b2a      	ldr	r3, [pc, #168]	; (800c104 <xTaskPriorityInherit+0xc4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	429a      	cmp	r2, r3
 800c062:	d241      	bcs.n	800c0e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	699b      	ldr	r3, [r3, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	db06      	blt.n	800c07a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c06c:	4b25      	ldr	r3, [pc, #148]	; (800c104 <xTaskPriorityInherit+0xc4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	6959      	ldr	r1, [r3, #20]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4a1f      	ldr	r2, [pc, #124]	; (800c108 <xTaskPriorityInherit+0xc8>)
 800c08c:	4413      	add	r3, r2
 800c08e:	4299      	cmp	r1, r3
 800c090:	d122      	bne.n	800c0d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	3304      	adds	r3, #4
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe f922 	bl	800a2e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c09c:	4b19      	ldr	r3, [pc, #100]	; (800c104 <xTaskPriorityInherit+0xc4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0aa:	4b18      	ldr	r3, [pc, #96]	; (800c10c <xTaskPriorityInherit+0xcc>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d903      	bls.n	800c0ba <xTaskPriorityInherit+0x7a>
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	4a15      	ldr	r2, [pc, #84]	; (800c10c <xTaskPriorityInherit+0xcc>)
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4a10      	ldr	r2, [pc, #64]	; (800c108 <xTaskPriorityInherit+0xc8>)
 800c0c8:	441a      	add	r2, r3
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7fe f8a8 	bl	800a226 <vListInsertEnd>
 800c0d6:	e004      	b.n	800c0e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0d8:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <xTaskPriorityInherit+0xc4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	60fb      	str	r3, [r7, #12]
 800c0e6:	e008      	b.n	800c0fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <xTaskPriorityInherit+0xc4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d201      	bcs.n	800c0fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20000ba8 	.word	0x20000ba8
 800c108:	20000bac 	.word	0x20000bac
 800c10c:	20001084 	.word	0x20001084

0800c110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c11c:	2300      	movs	r3, #0
 800c11e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d056      	beq.n	800c1d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c126:	4b2e      	ldr	r3, [pc, #184]	; (800c1e0 <xTaskPriorityDisinherit+0xd0>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d00a      	beq.n	800c146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	60bb      	str	r3, [r7, #8]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c168:	1e5a      	subs	r2, r3, #1
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c176:	429a      	cmp	r2, r3
 800c178:	d02c      	beq.n	800c1d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d128      	bne.n	800c1d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	3304      	adds	r3, #4
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe f8aa 	bl	800a2e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a4:	4b0f      	ldr	r3, [pc, #60]	; (800c1e4 <xTaskPriorityDisinherit+0xd4>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d903      	bls.n	800c1b4 <xTaskPriorityDisinherit+0xa4>
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <xTaskPriorityDisinherit+0xd4>)
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4a09      	ldr	r2, [pc, #36]	; (800c1e8 <xTaskPriorityDisinherit+0xd8>)
 800c1c2:	441a      	add	r2, r3
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f7fe f82b 	bl	800a226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1d4:	697b      	ldr	r3, [r7, #20]
	}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000ba8 	.word	0x20000ba8
 800c1e4:	20001084 	.word	0x20001084
 800c1e8:	20000bac 	.word	0x20000bac

0800c1ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d06a      	beq.n	800c2da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	60fb      	str	r3, [r7, #12]
}
 800c21e:	bf00      	nop
 800c220:	e7fe      	b.n	800c220 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d902      	bls.n	800c232 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	e002      	b.n	800c238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c236:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23c:	69fa      	ldr	r2, [r7, #28]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d04b      	beq.n	800c2da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d146      	bne.n	800c2da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c24c:	4b25      	ldr	r3, [pc, #148]	; (800c2e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	429a      	cmp	r2, r3
 800c254:	d10a      	bne.n	800c26c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	60bb      	str	r3, [r7, #8]
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	69fa      	ldr	r2, [r7, #28]
 800c276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	db04      	blt.n	800c28a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	6959      	ldr	r1, [r3, #20]
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4a13      	ldr	r2, [pc, #76]	; (800c2e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c29a:	4413      	add	r3, r2
 800c29c:	4299      	cmp	r1, r3
 800c29e:	d11c      	bne.n	800c2da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fe f81b 	bl	800a2e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ae:	4b0f      	ldr	r3, [pc, #60]	; (800c2ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d903      	bls.n	800c2be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ba:	4a0c      	ldr	r2, [pc, #48]	; (800c2ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2bc:	6013      	str	r3, [r2, #0]
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4a07      	ldr	r2, [pc, #28]	; (800c2e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2cc:	441a      	add	r2, r3
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	f7fd ffa6 	bl	800a226 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2da:	bf00      	nop
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20000ba8 	.word	0x20000ba8
 800c2e8:	20000bac 	.word	0x20000bac
 800c2ec:	20001084 	.word	0x20001084

0800c2f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c2f4:	4b07      	ldr	r3, [pc, #28]	; (800c314 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d004      	beq.n	800c306 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c2fc:	4b05      	ldr	r3, [pc, #20]	; (800c314 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c302:	3201      	adds	r2, #1
 800c304:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c306:	4b03      	ldr	r3, [pc, #12]	; (800c314 <pvTaskIncrementMutexHeldCount+0x24>)
 800c308:	681b      	ldr	r3, [r3, #0]
	}
 800c30a:	4618      	mov	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	20000ba8 	.word	0x20000ba8

0800c318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c322:	4b21      	ldr	r3, [pc, #132]	; (800c3a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c328:	4b20      	ldr	r3, [pc, #128]	; (800c3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3304      	adds	r3, #4
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd ffd6 	bl	800a2e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c33a:	d10a      	bne.n	800c352 <prvAddCurrentTaskToDelayedList+0x3a>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c342:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3304      	adds	r3, #4
 800c348:	4619      	mov	r1, r3
 800c34a:	4819      	ldr	r0, [pc, #100]	; (800c3b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c34c:	f7fd ff6b 	bl	800a226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c350:	e026      	b.n	800c3a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4413      	add	r3, r2
 800c358:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c35a:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	429a      	cmp	r2, r3
 800c368:	d209      	bcs.n	800c37e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c36a:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3304      	adds	r3, #4
 800c374:	4619      	mov	r1, r3
 800c376:	4610      	mov	r0, r2
 800c378:	f7fd ff79 	bl	800a26e <vListInsert>
}
 800c37c:	e010      	b.n	800c3a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c37e:	4b0e      	ldr	r3, [pc, #56]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3304      	adds	r3, #4
 800c388:	4619      	mov	r1, r3
 800c38a:	4610      	mov	r0, r2
 800c38c:	f7fd ff6f 	bl	800a26e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c390:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	429a      	cmp	r2, r3
 800c398:	d202      	bcs.n	800c3a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c39a:	4a08      	ldr	r2, [pc, #32]	; (800c3bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	6013      	str	r3, [r2, #0]
}
 800c3a0:	bf00      	nop
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	20001080 	.word	0x20001080
 800c3ac:	20000ba8 	.word	0x20000ba8
 800c3b0:	20001068 	.word	0x20001068
 800c3b4:	20001038 	.word	0x20001038
 800c3b8:	20001034 	.word	0x20001034
 800c3bc:	2000109c 	.word	0x2000109c

0800c3c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b08a      	sub	sp, #40	; 0x28
 800c3c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c3ca:	f000 fb07 	bl	800c9dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c3ce:	4b1c      	ldr	r3, [pc, #112]	; (800c440 <xTimerCreateTimerTask+0x80>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d021      	beq.n	800c41a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3de:	1d3a      	adds	r2, r7, #4
 800c3e0:	f107 0108 	add.w	r1, r7, #8
 800c3e4:	f107 030c 	add.w	r3, r7, #12
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fd fed5 	bl	800a198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	9202      	str	r2, [sp, #8]
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	460a      	mov	r2, r1
 800c400:	4910      	ldr	r1, [pc, #64]	; (800c444 <xTimerCreateTimerTask+0x84>)
 800c402:	4811      	ldr	r0, [pc, #68]	; (800c448 <xTimerCreateTimerTask+0x88>)
 800c404:	f7fe ffa4 	bl	800b350 <xTaskCreateStatic>
 800c408:	4603      	mov	r3, r0
 800c40a:	4a10      	ldr	r2, [pc, #64]	; (800c44c <xTimerCreateTimerTask+0x8c>)
 800c40c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c40e:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <xTimerCreateTimerTask+0x8c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c416:	2301      	movs	r3, #1
 800c418:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c436:	697b      	ldr	r3, [r7, #20]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	200010d8 	.word	0x200010d8
 800c444:	0800d508 	.word	0x0800d508
 800c448:	0800c585 	.word	0x0800c585
 800c44c:	200010dc 	.word	0x200010dc

0800c450 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c45e:	2300      	movs	r3, #0
 800c460:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10a      	bne.n	800c47e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	623b      	str	r3, [r7, #32]
}
 800c47a:	bf00      	nop
 800c47c:	e7fe      	b.n	800c47c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c47e:	4b1a      	ldr	r3, [pc, #104]	; (800c4e8 <xTimerGenericCommand+0x98>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d02a      	beq.n	800c4dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2b05      	cmp	r3, #5
 800c496:	dc18      	bgt.n	800c4ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c498:	f7ff fdb4 	bl	800c004 <xTaskGetSchedulerState>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d109      	bne.n	800c4b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4a2:	4b11      	ldr	r3, [pc, #68]	; (800c4e8 <xTimerGenericCommand+0x98>)
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	f107 0110 	add.w	r1, r7, #16
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ae:	f7fe f8e9 	bl	800a684 <xQueueGenericSend>
 800c4b2:	6278      	str	r0, [r7, #36]	; 0x24
 800c4b4:	e012      	b.n	800c4dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	; (800c4e8 <xTimerGenericCommand+0x98>)
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	f107 0110 	add.w	r1, r7, #16
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f7fe f8df 	bl	800a684 <xQueueGenericSend>
 800c4c6:	6278      	str	r0, [r7, #36]	; 0x24
 800c4c8:	e008      	b.n	800c4dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4ca:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <xTimerGenericCommand+0x98>)
 800c4cc:	6818      	ldr	r0, [r3, #0]
 800c4ce:	f107 0110 	add.w	r1, r7, #16
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	f7fe f9d3 	bl	800a880 <xQueueGenericSendFromISR>
 800c4da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3728      	adds	r7, #40	; 0x28
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	200010d8 	.word	0x200010d8

0800c4ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af02      	add	r7, sp, #8
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f6:	4b22      	ldr	r3, [pc, #136]	; (800c580 <prvProcessExpiredTimer+0x94>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	3304      	adds	r3, #4
 800c504:	4618      	mov	r0, r3
 800c506:	f7fd feeb 	bl	800a2e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c510:	f003 0304 	and.w	r3, r3, #4
 800c514:	2b00      	cmp	r3, #0
 800c516:	d022      	beq.n	800c55e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	699a      	ldr	r2, [r3, #24]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	18d1      	adds	r1, r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	6978      	ldr	r0, [r7, #20]
 800c526:	f000 f8d1 	bl	800c6cc <prvInsertTimerInActiveList>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d01f      	beq.n	800c570 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c530:	2300      	movs	r3, #0
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	2300      	movs	r3, #0
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	2100      	movs	r1, #0
 800c53a:	6978      	ldr	r0, [r7, #20]
 800c53c:	f7ff ff88 	bl	800c450 <xTimerGenericCommand>
 800c540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d113      	bne.n	800c570 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	60fb      	str	r3, [r7, #12]
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c564:	f023 0301 	bic.w	r3, r3, #1
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	6a1b      	ldr	r3, [r3, #32]
 800c574:	6978      	ldr	r0, [r7, #20]
 800c576:	4798      	blx	r3
}
 800c578:	bf00      	nop
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	200010d0 	.word	0x200010d0

0800c584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c58c:	f107 0308 	add.w	r3, r7, #8
 800c590:	4618      	mov	r0, r3
 800c592:	f000 f857 	bl	800c644 <prvGetNextExpireTime>
 800c596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	4619      	mov	r1, r3
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 f803 	bl	800c5a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5a2:	f000 f8d5 	bl	800c750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5a6:	e7f1      	b.n	800c58c <prvTimerTask+0x8>

0800c5a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5b2:	f7ff f929 	bl	800b808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5b6:	f107 0308 	add.w	r3, r7, #8
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f866 	bl	800c68c <prvSampleTimeNow>
 800c5c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d130      	bne.n	800c62a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <prvProcessTimerOrBlockTask+0x3c>
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d806      	bhi.n	800c5e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5d6:	f7ff f925 	bl	800b824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5da:	68f9      	ldr	r1, [r7, #12]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff ff85 	bl	800c4ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5e2:	e024      	b.n	800c62e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d008      	beq.n	800c5fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5ea:	4b13      	ldr	r3, [pc, #76]	; (800c638 <prvProcessTimerOrBlockTask+0x90>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <prvProcessTimerOrBlockTask+0x50>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <prvProcessTimerOrBlockTask+0x52>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <prvProcessTimerOrBlockTask+0x94>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4619      	mov	r1, r3
 800c60a:	f7fe fe6d 	bl	800b2e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c60e:	f7ff f909 	bl	800b824 <xTaskResumeAll>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c618:	4b09      	ldr	r3, [pc, #36]	; (800c640 <prvProcessTimerOrBlockTask+0x98>)
 800c61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	f3bf 8f6f 	isb	sy
}
 800c628:	e001      	b.n	800c62e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c62a:	f7ff f8fb 	bl	800b824 <xTaskResumeAll>
}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	200010d4 	.word	0x200010d4
 800c63c:	200010d8 	.word	0x200010d8
 800c640:	e000ed04 	.word	0xe000ed04

0800c644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c64c:	4b0e      	ldr	r3, [pc, #56]	; (800c688 <prvGetNextExpireTime+0x44>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <prvGetNextExpireTime+0x16>
 800c656:	2201      	movs	r2, #1
 800c658:	e000      	b.n	800c65c <prvGetNextExpireTime+0x18>
 800c65a:	2200      	movs	r2, #0
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d105      	bne.n	800c674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c668:	4b07      	ldr	r3, [pc, #28]	; (800c688 <prvGetNextExpireTime+0x44>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	60fb      	str	r3, [r7, #12]
 800c672:	e001      	b.n	800c678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c678:	68fb      	ldr	r3, [r7, #12]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3714      	adds	r7, #20
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	200010d0 	.word	0x200010d0

0800c68c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c694:	f7ff f964 	bl	800b960 <xTaskGetTickCount>
 800c698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c69a:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <prvSampleTimeNow+0x3c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d205      	bcs.n	800c6b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6a4:	f000 f936 	bl	800c914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	e002      	b.n	800c6b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6b6:	4a04      	ldr	r2, [pc, #16]	; (800c6c8 <prvSampleTimeNow+0x3c>)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	200010e0 	.word	0x200010e0

0800c6cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d812      	bhi.n	800c718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d302      	bcc.n	800c706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c700:	2301      	movs	r3, #1
 800c702:	617b      	str	r3, [r7, #20]
 800c704:	e01b      	b.n	800c73e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c706:	4b10      	ldr	r3, [pc, #64]	; (800c748 <prvInsertTimerInActiveList+0x7c>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3304      	adds	r3, #4
 800c70e:	4619      	mov	r1, r3
 800c710:	4610      	mov	r0, r2
 800c712:	f7fd fdac 	bl	800a26e <vListInsert>
 800c716:	e012      	b.n	800c73e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d206      	bcs.n	800c72e <prvInsertTimerInActiveList+0x62>
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d302      	bcc.n	800c72e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c728:	2301      	movs	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	e007      	b.n	800c73e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c72e:	4b07      	ldr	r3, [pc, #28]	; (800c74c <prvInsertTimerInActiveList+0x80>)
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3304      	adds	r3, #4
 800c736:	4619      	mov	r1, r3
 800c738:	4610      	mov	r0, r2
 800c73a:	f7fd fd98 	bl	800a26e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c73e:	697b      	ldr	r3, [r7, #20]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	200010d4 	.word	0x200010d4
 800c74c:	200010d0 	.word	0x200010d0

0800c750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08e      	sub	sp, #56	; 0x38
 800c754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c756:	e0ca      	b.n	800c8ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	da18      	bge.n	800c790 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c75e:	1d3b      	adds	r3, r7, #4
 800c760:	3304      	adds	r3, #4
 800c762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	61fb      	str	r3, [r7, #28]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c786:	6850      	ldr	r0, [r2, #4]
 800c788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c78a:	6892      	ldr	r2, [r2, #8]
 800c78c:	4611      	mov	r1, r2
 800c78e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f2c0 80aa 	blt.w	800c8ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d004      	beq.n	800c7ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fd fd99 	bl	800a2e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff ff6b 	bl	800c68c <prvSampleTimeNow>
 800c7b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b09      	cmp	r3, #9
 800c7bc:	f200 8097 	bhi.w	800c8ee <prvProcessReceivedCommands+0x19e>
 800c7c0:	a201      	add	r2, pc, #4	; (adr r2, 800c7c8 <prvProcessReceivedCommands+0x78>)
 800c7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c6:	bf00      	nop
 800c7c8:	0800c7f1 	.word	0x0800c7f1
 800c7cc:	0800c7f1 	.word	0x0800c7f1
 800c7d0:	0800c7f1 	.word	0x0800c7f1
 800c7d4:	0800c865 	.word	0x0800c865
 800c7d8:	0800c879 	.word	0x0800c879
 800c7dc:	0800c8c3 	.word	0x0800c8c3
 800c7e0:	0800c7f1 	.word	0x0800c7f1
 800c7e4:	0800c7f1 	.word	0x0800c7f1
 800c7e8:	0800c865 	.word	0x0800c865
 800c7ec:	0800c879 	.word	0x0800c879
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f6:	f043 0301 	orr.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	18d1      	adds	r1, r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c810:	f7ff ff5c 	bl	800c6cc <prvInsertTimerInActiveList>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d069      	beq.n	800c8ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c828:	f003 0304 	and.w	r3, r3, #4
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d05e      	beq.n	800c8ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	441a      	add	r2, r3
 800c838:	2300      	movs	r3, #0
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	2300      	movs	r3, #0
 800c83e:	2100      	movs	r1, #0
 800c840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c842:	f7ff fe05 	bl	800c450 <xTimerGenericCommand>
 800c846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c848:	6a3b      	ldr	r3, [r7, #32]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d14f      	bne.n	800c8ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	61bb      	str	r3, [r7, #24]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c876:	e03a      	b.n	800c8ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c87e:	f043 0301 	orr.w	r3, r3, #1
 800c882:	b2da      	uxtb	r2, r3
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	617b      	str	r3, [r7, #20]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	699a      	ldr	r2, [r3, #24]
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	18d1      	adds	r1, r2, r3
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8bc:	f7ff ff06 	bl	800c6cc <prvInsertTimerInActiveList>
					break;
 800c8c0:	e015      	b.n	800c8ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d103      	bne.n	800c8d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d2:	f000 fbdd 	bl	800d090 <vPortFree>
 800c8d6:	e00a      	b.n	800c8ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8de:	f023 0301 	bic.w	r3, r3, #1
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8ea:	e000      	b.n	800c8ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8ee:	4b08      	ldr	r3, [pc, #32]	; (800c910 <prvProcessReceivedCommands+0x1c0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	1d39      	adds	r1, r7, #4
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fe f8ea 	bl	800aad0 <xQueueReceive>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f47f af2a 	bne.w	800c758 <prvProcessReceivedCommands+0x8>
	}
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	3730      	adds	r7, #48	; 0x30
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	200010d8 	.word	0x200010d8

0800c914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b088      	sub	sp, #32
 800c918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c91a:	e048      	b.n	800c9ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c91c:	4b2d      	ldr	r3, [pc, #180]	; (800c9d4 <prvSwitchTimerLists+0xc0>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c926:	4b2b      	ldr	r3, [pc, #172]	; (800c9d4 <prvSwitchTimerLists+0xc0>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3304      	adds	r3, #4
 800c934:	4618      	mov	r0, r3
 800c936:	f7fd fcd3 	bl	800a2e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c948:	f003 0304 	and.w	r3, r3, #4
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d02e      	beq.n	800c9ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	4413      	add	r3, r2
 800c958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d90e      	bls.n	800c980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <prvSwitchTimerLists+0xc0>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3304      	adds	r3, #4
 800c976:	4619      	mov	r1, r3
 800c978:	4610      	mov	r0, r2
 800c97a:	f7fd fc78 	bl	800a26e <vListInsert>
 800c97e:	e016      	b.n	800c9ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c980:	2300      	movs	r3, #0
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	2300      	movs	r3, #0
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	2100      	movs	r1, #0
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7ff fd60 	bl	800c450 <xTimerGenericCommand>
 800c990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	603b      	str	r3, [r7, #0]
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ae:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <prvSwitchTimerLists+0xc0>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1b1      	bne.n	800c91c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9b8:	4b06      	ldr	r3, [pc, #24]	; (800c9d4 <prvSwitchTimerLists+0xc0>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <prvSwitchTimerLists+0xc4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a04      	ldr	r2, [pc, #16]	; (800c9d4 <prvSwitchTimerLists+0xc0>)
 800c9c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c9c6:	4a04      	ldr	r2, [pc, #16]	; (800c9d8 <prvSwitchTimerLists+0xc4>)
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	6013      	str	r3, [r2, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	200010d0 	.word	0x200010d0
 800c9d8:	200010d4 	.word	0x200010d4

0800c9dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9e2:	f000 f967 	bl	800ccb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9e6:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <prvCheckForValidListAndQueue+0x60>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d120      	bne.n	800ca30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9ee:	4814      	ldr	r0, [pc, #80]	; (800ca40 <prvCheckForValidListAndQueue+0x64>)
 800c9f0:	f7fd fbec 	bl	800a1cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9f4:	4813      	ldr	r0, [pc, #76]	; (800ca44 <prvCheckForValidListAndQueue+0x68>)
 800c9f6:	f7fd fbe9 	bl	800a1cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9fa:	4b13      	ldr	r3, [pc, #76]	; (800ca48 <prvCheckForValidListAndQueue+0x6c>)
 800c9fc:	4a10      	ldr	r2, [pc, #64]	; (800ca40 <prvCheckForValidListAndQueue+0x64>)
 800c9fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca00:	4b12      	ldr	r3, [pc, #72]	; (800ca4c <prvCheckForValidListAndQueue+0x70>)
 800ca02:	4a10      	ldr	r2, [pc, #64]	; (800ca44 <prvCheckForValidListAndQueue+0x68>)
 800ca04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca06:	2300      	movs	r3, #0
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	4b11      	ldr	r3, [pc, #68]	; (800ca50 <prvCheckForValidListAndQueue+0x74>)
 800ca0c:	4a11      	ldr	r2, [pc, #68]	; (800ca54 <prvCheckForValidListAndQueue+0x78>)
 800ca0e:	2110      	movs	r1, #16
 800ca10:	200a      	movs	r0, #10
 800ca12:	f7fd fcf7 	bl	800a404 <xQueueGenericCreateStatic>
 800ca16:	4603      	mov	r3, r0
 800ca18:	4a08      	ldr	r2, [pc, #32]	; (800ca3c <prvCheckForValidListAndQueue+0x60>)
 800ca1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca1c:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <prvCheckForValidListAndQueue+0x60>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <prvCheckForValidListAndQueue+0x60>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	490b      	ldr	r1, [pc, #44]	; (800ca58 <prvCheckForValidListAndQueue+0x7c>)
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe fc08 	bl	800b240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca30:	f000 f970 	bl	800cd14 <vPortExitCritical>
}
 800ca34:	bf00      	nop
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	200010d8 	.word	0x200010d8
 800ca40:	200010a8 	.word	0x200010a8
 800ca44:	200010bc 	.word	0x200010bc
 800ca48:	200010d0 	.word	0x200010d0
 800ca4c:	200010d4 	.word	0x200010d4
 800ca50:	20001184 	.word	0x20001184
 800ca54:	200010e4 	.word	0x200010e4
 800ca58:	0800d510 	.word	0x0800d510

0800ca5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b085      	sub	sp, #20
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3b04      	subs	r3, #4
 800ca6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3b04      	subs	r3, #4
 800ca7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f023 0201 	bic.w	r2, r3, #1
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3b04      	subs	r3, #4
 800ca8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca8c:	4a0c      	ldr	r2, [pc, #48]	; (800cac0 <pxPortInitialiseStack+0x64>)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3b14      	subs	r3, #20
 800ca96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3b04      	subs	r3, #4
 800caa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f06f 0202 	mvn.w	r2, #2
 800caaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	3b20      	subs	r3, #32
 800cab0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cab2:	68fb      	ldr	r3, [r7, #12]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	0800cac5 	.word	0x0800cac5

0800cac4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <prvTaskExitError+0x54>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cad6:	d00a      	beq.n	800caee <prvTaskExitError+0x2a>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	60fb      	str	r3, [r7, #12]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <prvTaskExitError+0x28>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	60bb      	str	r3, [r7, #8]
}
 800cb00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb02:	bf00      	nop
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0fc      	beq.n	800cb04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	bf00      	nop
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	2000000c 	.word	0x2000000c
 800cb1c:	00000000 	.word	0x00000000

0800cb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb20:	4b07      	ldr	r3, [pc, #28]	; (800cb40 <pxCurrentTCBConst2>)
 800cb22:	6819      	ldr	r1, [r3, #0]
 800cb24:	6808      	ldr	r0, [r1, #0]
 800cb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2a:	f380 8809 	msr	PSP, r0
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f04f 0000 	mov.w	r0, #0
 800cb36:	f380 8811 	msr	BASEPRI, r0
 800cb3a:	4770      	bx	lr
 800cb3c:	f3af 8000 	nop.w

0800cb40 <pxCurrentTCBConst2>:
 800cb40:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop

0800cb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb48:	4808      	ldr	r0, [pc, #32]	; (800cb6c <prvPortStartFirstTask+0x24>)
 800cb4a:	6800      	ldr	r0, [r0, #0]
 800cb4c:	6800      	ldr	r0, [r0, #0]
 800cb4e:	f380 8808 	msr	MSP, r0
 800cb52:	f04f 0000 	mov.w	r0, #0
 800cb56:	f380 8814 	msr	CONTROL, r0
 800cb5a:	b662      	cpsie	i
 800cb5c:	b661      	cpsie	f
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	df00      	svc	0
 800cb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb6a:	bf00      	nop
 800cb6c:	e000ed08 	.word	0xe000ed08

0800cb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb76:	4b46      	ldr	r3, [pc, #280]	; (800cc90 <xPortStartScheduler+0x120>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a46      	ldr	r2, [pc, #280]	; (800cc94 <xPortStartScheduler+0x124>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d10a      	bne.n	800cb96 <xPortStartScheduler+0x26>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	613b      	str	r3, [r7, #16]
}
 800cb92:	bf00      	nop
 800cb94:	e7fe      	b.n	800cb94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb96:	4b3e      	ldr	r3, [pc, #248]	; (800cc90 <xPortStartScheduler+0x120>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a3f      	ldr	r2, [pc, #252]	; (800cc98 <xPortStartScheduler+0x128>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d10a      	bne.n	800cbb6 <xPortStartScheduler+0x46>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	60fb      	str	r3, [r7, #12]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbb6:	4b39      	ldr	r3, [pc, #228]	; (800cc9c <xPortStartScheduler+0x12c>)
 800cbb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	22ff      	movs	r2, #255	; 0xff
 800cbc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	4b31      	ldr	r3, [pc, #196]	; (800cca0 <xPortStartScheduler+0x130>)
 800cbdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbde:	4b31      	ldr	r3, [pc, #196]	; (800cca4 <xPortStartScheduler+0x134>)
 800cbe0:	2207      	movs	r2, #7
 800cbe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbe4:	e009      	b.n	800cbfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbe6:	4b2f      	ldr	r3, [pc, #188]	; (800cca4 <xPortStartScheduler+0x134>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	4a2d      	ldr	r2, [pc, #180]	; (800cca4 <xPortStartScheduler+0x134>)
 800cbee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbfa:	78fb      	ldrb	r3, [r7, #3]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc02:	2b80      	cmp	r3, #128	; 0x80
 800cc04:	d0ef      	beq.n	800cbe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc06:	4b27      	ldr	r3, [pc, #156]	; (800cca4 <xPortStartScheduler+0x134>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f1c3 0307 	rsb	r3, r3, #7
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d00a      	beq.n	800cc28 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	60bb      	str	r3, [r7, #8]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc28:	4b1e      	ldr	r3, [pc, #120]	; (800cca4 <xPortStartScheduler+0x134>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	021b      	lsls	r3, r3, #8
 800cc2e:	4a1d      	ldr	r2, [pc, #116]	; (800cca4 <xPortStartScheduler+0x134>)
 800cc30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc32:	4b1c      	ldr	r3, [pc, #112]	; (800cca4 <xPortStartScheduler+0x134>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc3a:	4a1a      	ldr	r2, [pc, #104]	; (800cca4 <xPortStartScheduler+0x134>)
 800cc3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc46:	4b18      	ldr	r3, [pc, #96]	; (800cca8 <xPortStartScheduler+0x138>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a17      	ldr	r2, [pc, #92]	; (800cca8 <xPortStartScheduler+0x138>)
 800cc4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc52:	4b15      	ldr	r3, [pc, #84]	; (800cca8 <xPortStartScheduler+0x138>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a14      	ldr	r2, [pc, #80]	; (800cca8 <xPortStartScheduler+0x138>)
 800cc58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc5e:	f000 f8dd 	bl	800ce1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc62:	4b12      	ldr	r3, [pc, #72]	; (800ccac <xPortStartScheduler+0x13c>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc68:	f000 f8fc 	bl	800ce64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc6c:	4b10      	ldr	r3, [pc, #64]	; (800ccb0 <xPortStartScheduler+0x140>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a0f      	ldr	r2, [pc, #60]	; (800ccb0 <xPortStartScheduler+0x140>)
 800cc72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc78:	f7ff ff66 	bl	800cb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc7c:	f7fe ff4c 	bl	800bb18 <vTaskSwitchContext>
	prvTaskExitError();
 800cc80:	f7ff ff20 	bl	800cac4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	e000ed00 	.word	0xe000ed00
 800cc94:	410fc271 	.word	0x410fc271
 800cc98:	410fc270 	.word	0x410fc270
 800cc9c:	e000e400 	.word	0xe000e400
 800cca0:	200011d4 	.word	0x200011d4
 800cca4:	200011d8 	.word	0x200011d8
 800cca8:	e000ed20 	.word	0xe000ed20
 800ccac:	2000000c 	.word	0x2000000c
 800ccb0:	e000ef34 	.word	0xe000ef34

0800ccb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	607b      	str	r3, [r7, #4]
}
 800cccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccce:	4b0f      	ldr	r3, [pc, #60]	; (800cd0c <vPortEnterCritical+0x58>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	4a0d      	ldr	r2, [pc, #52]	; (800cd0c <vPortEnterCritical+0x58>)
 800ccd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ccd8:	4b0c      	ldr	r3, [pc, #48]	; (800cd0c <vPortEnterCritical+0x58>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d10f      	bne.n	800cd00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cce0:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <vPortEnterCritical+0x5c>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00a      	beq.n	800cd00 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	f383 8811 	msr	BASEPRI, r3
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	603b      	str	r3, [r7, #0]
}
 800ccfc:	bf00      	nop
 800ccfe:	e7fe      	b.n	800ccfe <vPortEnterCritical+0x4a>
	}
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	2000000c 	.word	0x2000000c
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd1a:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <vPortExitCritical+0x50>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <vPortExitCritical+0x24>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	607b      	str	r3, [r7, #4]
}
 800cd34:	bf00      	nop
 800cd36:	e7fe      	b.n	800cd36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd38:	4b0a      	ldr	r3, [pc, #40]	; (800cd64 <vPortExitCritical+0x50>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	4a09      	ldr	r2, [pc, #36]	; (800cd64 <vPortExitCritical+0x50>)
 800cd40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd42:	4b08      	ldr	r3, [pc, #32]	; (800cd64 <vPortExitCritical+0x50>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d105      	bne.n	800cd56 <vPortExitCritical+0x42>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	f383 8811 	msr	BASEPRI, r3
}
 800cd54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	2000000c 	.word	0x2000000c
	...

0800cd70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd70:	f3ef 8009 	mrs	r0, PSP
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	4b15      	ldr	r3, [pc, #84]	; (800cdd0 <pxCurrentTCBConst>)
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	f01e 0f10 	tst.w	lr, #16
 800cd80:	bf08      	it	eq
 800cd82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8a:	6010      	str	r0, [r2, #0]
 800cd8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd94:	f380 8811 	msr	BASEPRI, r0
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f7fe feba 	bl	800bb18 <vTaskSwitchContext>
 800cda4:	f04f 0000 	mov.w	r0, #0
 800cda8:	f380 8811 	msr	BASEPRI, r0
 800cdac:	bc09      	pop	{r0, r3}
 800cdae:	6819      	ldr	r1, [r3, #0]
 800cdb0:	6808      	ldr	r0, [r1, #0]
 800cdb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb6:	f01e 0f10 	tst.w	lr, #16
 800cdba:	bf08      	it	eq
 800cdbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdc0:	f380 8809 	msr	PSP, r0
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	f3af 8000 	nop.w

0800cdd0 <pxCurrentTCBConst>:
 800cdd0:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cdd4:	bf00      	nop
 800cdd6:	bf00      	nop

0800cdd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	607b      	str	r3, [r7, #4]
}
 800cdf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cdf2:	f7fe fdd7 	bl	800b9a4 <xTaskIncrementTick>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d003      	beq.n	800ce04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdfc:	4b06      	ldr	r3, [pc, #24]	; (800ce18 <xPortSysTickHandler+0x40>)
 800cdfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	2300      	movs	r3, #0
 800ce06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	f383 8811 	msr	BASEPRI, r3
}
 800ce0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	e000ed04 	.word	0xe000ed04

0800ce1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce20:	4b0b      	ldr	r3, [pc, #44]	; (800ce50 <vPortSetupTimerInterrupt+0x34>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <vPortSetupTimerInterrupt+0x38>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <vPortSetupTimerInterrupt+0x3c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a0a      	ldr	r2, [pc, #40]	; (800ce5c <vPortSetupTimerInterrupt+0x40>)
 800ce32:	fba2 2303 	umull	r2, r3, r2, r3
 800ce36:	099b      	lsrs	r3, r3, #6
 800ce38:	4a09      	ldr	r2, [pc, #36]	; (800ce60 <vPortSetupTimerInterrupt+0x44>)
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce3e:	4b04      	ldr	r3, [pc, #16]	; (800ce50 <vPortSetupTimerInterrupt+0x34>)
 800ce40:	2207      	movs	r2, #7
 800ce42:	601a      	str	r2, [r3, #0]
}
 800ce44:	bf00      	nop
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	e000e010 	.word	0xe000e010
 800ce54:	e000e018 	.word	0xe000e018
 800ce58:	20000000 	.word	0x20000000
 800ce5c:	10624dd3 	.word	0x10624dd3
 800ce60:	e000e014 	.word	0xe000e014

0800ce64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce74 <vPortEnableVFP+0x10>
 800ce68:	6801      	ldr	r1, [r0, #0]
 800ce6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce6e:	6001      	str	r1, [r0, #0]
 800ce70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce72:	bf00      	nop
 800ce74:	e000ed88 	.word	0xe000ed88

0800ce78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce7e:	f3ef 8305 	mrs	r3, IPSR
 800ce82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b0f      	cmp	r3, #15
 800ce88:	d914      	bls.n	800ceb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce8a:	4a17      	ldr	r2, [pc, #92]	; (800cee8 <vPortValidateInterruptPriority+0x70>)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4413      	add	r3, r2
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce94:	4b15      	ldr	r3, [pc, #84]	; (800ceec <vPortValidateInterruptPriority+0x74>)
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	7afa      	ldrb	r2, [r7, #11]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d20a      	bcs.n	800ceb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	607b      	str	r3, [r7, #4]
}
 800ceb0:	bf00      	nop
 800ceb2:	e7fe      	b.n	800ceb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ceb4:	4b0e      	ldr	r3, [pc, #56]	; (800cef0 <vPortValidateInterruptPriority+0x78>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cebc:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <vPortValidateInterruptPriority+0x7c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d90a      	bls.n	800ceda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	603b      	str	r3, [r7, #0]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <vPortValidateInterruptPriority+0x60>
	}
 800ceda:	bf00      	nop
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	e000e3f0 	.word	0xe000e3f0
 800ceec:	200011d4 	.word	0x200011d4
 800cef0:	e000ed0c 	.word	0xe000ed0c
 800cef4:	200011d8 	.word	0x200011d8

0800cef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08a      	sub	sp, #40	; 0x28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf00:	2300      	movs	r3, #0
 800cf02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf04:	f7fe fc80 	bl	800b808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf08:	4b5b      	ldr	r3, [pc, #364]	; (800d078 <pvPortMalloc+0x180>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf10:	f000 f920 	bl	800d154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf14:	4b59      	ldr	r3, [pc, #356]	; (800d07c <pvPortMalloc+0x184>)
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f040 8093 	bne.w	800d048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01d      	beq.n	800cf64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf28:	2208      	movs	r2, #8
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f003 0307 	and.w	r3, r3, #7
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d014      	beq.n	800cf64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f023 0307 	bic.w	r3, r3, #7
 800cf40:	3308      	adds	r3, #8
 800cf42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f003 0307 	and.w	r3, r3, #7
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <pvPortMalloc+0x6c>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	617b      	str	r3, [r7, #20]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d06e      	beq.n	800d048 <pvPortMalloc+0x150>
 800cf6a:	4b45      	ldr	r3, [pc, #276]	; (800d080 <pvPortMalloc+0x188>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d869      	bhi.n	800d048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf74:	4b43      	ldr	r3, [pc, #268]	; (800d084 <pvPortMalloc+0x18c>)
 800cf76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf78:	4b42      	ldr	r3, [pc, #264]	; (800d084 <pvPortMalloc+0x18c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf7e:	e004      	b.n	800cf8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d903      	bls.n	800cf9c <pvPortMalloc+0xa4>
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1f1      	bne.n	800cf80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf9c:	4b36      	ldr	r3, [pc, #216]	; (800d078 <pvPortMalloc+0x180>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d050      	beq.n	800d048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2208      	movs	r2, #8
 800cfac:	4413      	add	r3, r2
 800cfae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	2308      	movs	r3, #8
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d91f      	bls.n	800d008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cfc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	f003 0307 	and.w	r3, r3, #7
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00a      	beq.n	800cff0 <pvPortMalloc+0xf8>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	613b      	str	r3, [r7, #16]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d002:	69b8      	ldr	r0, [r7, #24]
 800d004:	f000 f908 	bl	800d218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d008:	4b1d      	ldr	r3, [pc, #116]	; (800d080 <pvPortMalloc+0x188>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	4a1b      	ldr	r2, [pc, #108]	; (800d080 <pvPortMalloc+0x188>)
 800d014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d016:	4b1a      	ldr	r3, [pc, #104]	; (800d080 <pvPortMalloc+0x188>)
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	4b1b      	ldr	r3, [pc, #108]	; (800d088 <pvPortMalloc+0x190>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d203      	bcs.n	800d02a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d022:	4b17      	ldr	r3, [pc, #92]	; (800d080 <pvPortMalloc+0x188>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a18      	ldr	r2, [pc, #96]	; (800d088 <pvPortMalloc+0x190>)
 800d028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	4b13      	ldr	r3, [pc, #76]	; (800d07c <pvPortMalloc+0x184>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	431a      	orrs	r2, r3
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d03e:	4b13      	ldr	r3, [pc, #76]	; (800d08c <pvPortMalloc+0x194>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3301      	adds	r3, #1
 800d044:	4a11      	ldr	r2, [pc, #68]	; (800d08c <pvPortMalloc+0x194>)
 800d046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d048:	f7fe fbec 	bl	800b824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00a      	beq.n	800d06c <pvPortMalloc+0x174>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	60fb      	str	r3, [r7, #12]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <pvPortMalloc+0x172>
	return pvReturn;
 800d06c:	69fb      	ldr	r3, [r7, #28]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3728      	adds	r7, #40	; 0x28
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20001d9c 	.word	0x20001d9c
 800d07c:	20001db0 	.word	0x20001db0
 800d080:	20001da0 	.word	0x20001da0
 800d084:	20001d94 	.word	0x20001d94
 800d088:	20001da4 	.word	0x20001da4
 800d08c:	20001da8 	.word	0x20001da8

0800d090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d04d      	beq.n	800d13e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0a2:	2308      	movs	r3, #8
 800d0a4:	425b      	negs	r3, r3
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	4b24      	ldr	r3, [pc, #144]	; (800d148 <vPortFree+0xb8>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10a      	bne.n	800d0d4 <vPortFree+0x44>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	60fb      	str	r3, [r7, #12]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00a      	beq.n	800d0f2 <vPortFree+0x62>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	60bb      	str	r3, [r7, #8]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	4b14      	ldr	r3, [pc, #80]	; (800d148 <vPortFree+0xb8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d01e      	beq.n	800d13e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d11a      	bne.n	800d13e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	4b0e      	ldr	r3, [pc, #56]	; (800d148 <vPortFree+0xb8>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	43db      	mvns	r3, r3
 800d112:	401a      	ands	r2, r3
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d118:	f7fe fb76 	bl	800b808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	685a      	ldr	r2, [r3, #4]
 800d120:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <vPortFree+0xbc>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4413      	add	r3, r2
 800d126:	4a09      	ldr	r2, [pc, #36]	; (800d14c <vPortFree+0xbc>)
 800d128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d12a:	6938      	ldr	r0, [r7, #16]
 800d12c:	f000 f874 	bl	800d218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <vPortFree+0xc0>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a06      	ldr	r2, [pc, #24]	; (800d150 <vPortFree+0xc0>)
 800d138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d13a:	f7fe fb73 	bl	800b824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d13e:	bf00      	nop
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20001db0 	.word	0x20001db0
 800d14c:	20001da0 	.word	0x20001da0
 800d150:	20001dac 	.word	0x20001dac

0800d154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d15a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d160:	4b27      	ldr	r3, [pc, #156]	; (800d200 <prvHeapInit+0xac>)
 800d162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f003 0307 	and.w	r3, r3, #7
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00c      	beq.n	800d188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3307      	adds	r3, #7
 800d172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f023 0307 	bic.w	r3, r3, #7
 800d17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	4a1f      	ldr	r2, [pc, #124]	; (800d200 <prvHeapInit+0xac>)
 800d184:	4413      	add	r3, r2
 800d186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d18c:	4a1d      	ldr	r2, [pc, #116]	; (800d204 <prvHeapInit+0xb0>)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d192:	4b1c      	ldr	r3, [pc, #112]	; (800d204 <prvHeapInit+0xb0>)
 800d194:	2200      	movs	r2, #0
 800d196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	4413      	add	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1a0:	2208      	movs	r2, #8
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f023 0307 	bic.w	r3, r3, #7
 800d1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	4a15      	ldr	r2, [pc, #84]	; (800d208 <prvHeapInit+0xb4>)
 800d1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1b6:	4b14      	ldr	r3, [pc, #80]	; (800d208 <prvHeapInit+0xb4>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1be:	4b12      	ldr	r3, [pc, #72]	; (800d208 <prvHeapInit+0xb4>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	1ad2      	subs	r2, r2, r3
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1d4:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <prvHeapInit+0xb4>)
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	4a0a      	ldr	r2, [pc, #40]	; (800d20c <prvHeapInit+0xb8>)
 800d1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	4a09      	ldr	r2, [pc, #36]	; (800d210 <prvHeapInit+0xbc>)
 800d1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1ec:	4b09      	ldr	r3, [pc, #36]	; (800d214 <prvHeapInit+0xc0>)
 800d1ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d1f2:	601a      	str	r2, [r3, #0]
}
 800d1f4:	bf00      	nop
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	200011dc 	.word	0x200011dc
 800d204:	20001d94 	.word	0x20001d94
 800d208:	20001d9c 	.word	0x20001d9c
 800d20c:	20001da4 	.word	0x20001da4
 800d210:	20001da0 	.word	0x20001da0
 800d214:	20001db0 	.word	0x20001db0

0800d218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d220:	4b28      	ldr	r3, [pc, #160]	; (800d2c4 <prvInsertBlockIntoFreeList+0xac>)
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	e002      	b.n	800d22c <prvInsertBlockIntoFreeList+0x14>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	429a      	cmp	r2, r3
 800d234:	d8f7      	bhi.n	800d226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	4413      	add	r3, r2
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d108      	bne.n	800d25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	441a      	add	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	441a      	add	r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d118      	bne.n	800d2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	4b15      	ldr	r3, [pc, #84]	; (800d2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	429a      	cmp	r2, r3
 800d278:	d00d      	beq.n	800d296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	441a      	add	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	e008      	b.n	800d2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	e003      	b.n	800d2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d002      	beq.n	800d2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2b6:	bf00      	nop
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20001d94 	.word	0x20001d94
 800d2c8:	20001d9c 	.word	0x20001d9c

0800d2cc <__libc_init_array>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	4d0d      	ldr	r5, [pc, #52]	; (800d304 <__libc_init_array+0x38>)
 800d2d0:	4c0d      	ldr	r4, [pc, #52]	; (800d308 <__libc_init_array+0x3c>)
 800d2d2:	1b64      	subs	r4, r4, r5
 800d2d4:	10a4      	asrs	r4, r4, #2
 800d2d6:	2600      	movs	r6, #0
 800d2d8:	42a6      	cmp	r6, r4
 800d2da:	d109      	bne.n	800d2f0 <__libc_init_array+0x24>
 800d2dc:	4d0b      	ldr	r5, [pc, #44]	; (800d30c <__libc_init_array+0x40>)
 800d2de:	4c0c      	ldr	r4, [pc, #48]	; (800d310 <__libc_init_array+0x44>)
 800d2e0:	f000 f8f2 	bl	800d4c8 <_init>
 800d2e4:	1b64      	subs	r4, r4, r5
 800d2e6:	10a4      	asrs	r4, r4, #2
 800d2e8:	2600      	movs	r6, #0
 800d2ea:	42a6      	cmp	r6, r4
 800d2ec:	d105      	bne.n	800d2fa <__libc_init_array+0x2e>
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
 800d2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f4:	4798      	blx	r3
 800d2f6:	3601      	adds	r6, #1
 800d2f8:	e7ee      	b.n	800d2d8 <__libc_init_array+0xc>
 800d2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2fe:	4798      	blx	r3
 800d300:	3601      	adds	r6, #1
 800d302:	e7f2      	b.n	800d2ea <__libc_init_array+0x1e>
 800d304:	0800d62c 	.word	0x0800d62c
 800d308:	0800d62c 	.word	0x0800d62c
 800d30c:	0800d62c 	.word	0x0800d62c
 800d310:	0800d630 	.word	0x0800d630

0800d314 <__retarget_lock_acquire_recursive>:
 800d314:	4770      	bx	lr

0800d316 <__retarget_lock_release_recursive>:
 800d316:	4770      	bx	lr

0800d318 <memcpy>:
 800d318:	440a      	add	r2, r1
 800d31a:	4291      	cmp	r1, r2
 800d31c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d320:	d100      	bne.n	800d324 <memcpy+0xc>
 800d322:	4770      	bx	lr
 800d324:	b510      	push	{r4, lr}
 800d326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d32a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d32e:	4291      	cmp	r1, r2
 800d330:	d1f9      	bne.n	800d326 <memcpy+0xe>
 800d332:	bd10      	pop	{r4, pc}

0800d334 <memset>:
 800d334:	4402      	add	r2, r0
 800d336:	4603      	mov	r3, r0
 800d338:	4293      	cmp	r3, r2
 800d33a:	d100      	bne.n	800d33e <memset+0xa>
 800d33c:	4770      	bx	lr
 800d33e:	f803 1b01 	strb.w	r1, [r3], #1
 800d342:	e7f9      	b.n	800d338 <memset+0x4>

0800d344 <cleanup_glue>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	460c      	mov	r4, r1
 800d348:	6809      	ldr	r1, [r1, #0]
 800d34a:	4605      	mov	r5, r0
 800d34c:	b109      	cbz	r1, 800d352 <cleanup_glue+0xe>
 800d34e:	f7ff fff9 	bl	800d344 <cleanup_glue>
 800d352:	4621      	mov	r1, r4
 800d354:	4628      	mov	r0, r5
 800d356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d35a:	f000 b869 	b.w	800d430 <_free_r>
	...

0800d360 <_reclaim_reent>:
 800d360:	4b2c      	ldr	r3, [pc, #176]	; (800d414 <_reclaim_reent+0xb4>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4283      	cmp	r3, r0
 800d366:	b570      	push	{r4, r5, r6, lr}
 800d368:	4604      	mov	r4, r0
 800d36a:	d051      	beq.n	800d410 <_reclaim_reent+0xb0>
 800d36c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d36e:	b143      	cbz	r3, 800d382 <_reclaim_reent+0x22>
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d14a      	bne.n	800d40c <_reclaim_reent+0xac>
 800d376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d378:	6819      	ldr	r1, [r3, #0]
 800d37a:	b111      	cbz	r1, 800d382 <_reclaim_reent+0x22>
 800d37c:	4620      	mov	r0, r4
 800d37e:	f000 f857 	bl	800d430 <_free_r>
 800d382:	6961      	ldr	r1, [r4, #20]
 800d384:	b111      	cbz	r1, 800d38c <_reclaim_reent+0x2c>
 800d386:	4620      	mov	r0, r4
 800d388:	f000 f852 	bl	800d430 <_free_r>
 800d38c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d38e:	b111      	cbz	r1, 800d396 <_reclaim_reent+0x36>
 800d390:	4620      	mov	r0, r4
 800d392:	f000 f84d 	bl	800d430 <_free_r>
 800d396:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d398:	b111      	cbz	r1, 800d3a0 <_reclaim_reent+0x40>
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f848 	bl	800d430 <_free_r>
 800d3a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d3a2:	b111      	cbz	r1, 800d3aa <_reclaim_reent+0x4a>
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 f843 	bl	800d430 <_free_r>
 800d3aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d3ac:	b111      	cbz	r1, 800d3b4 <_reclaim_reent+0x54>
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f000 f83e 	bl	800d430 <_free_r>
 800d3b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d3b6:	b111      	cbz	r1, 800d3be <_reclaim_reent+0x5e>
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 f839 	bl	800d430 <_free_r>
 800d3be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d3c0:	b111      	cbz	r1, 800d3c8 <_reclaim_reent+0x68>
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 f834 	bl	800d430 <_free_r>
 800d3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ca:	b111      	cbz	r1, 800d3d2 <_reclaim_reent+0x72>
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f000 f82f 	bl	800d430 <_free_r>
 800d3d2:	69a3      	ldr	r3, [r4, #24]
 800d3d4:	b1e3      	cbz	r3, 800d410 <_reclaim_reent+0xb0>
 800d3d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4798      	blx	r3
 800d3dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3de:	b1b9      	cbz	r1, 800d410 <_reclaim_reent+0xb0>
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3e6:	f7ff bfad 	b.w	800d344 <cleanup_glue>
 800d3ea:	5949      	ldr	r1, [r1, r5]
 800d3ec:	b941      	cbnz	r1, 800d400 <_reclaim_reent+0xa0>
 800d3ee:	3504      	adds	r5, #4
 800d3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3f2:	2d80      	cmp	r5, #128	; 0x80
 800d3f4:	68d9      	ldr	r1, [r3, #12]
 800d3f6:	d1f8      	bne.n	800d3ea <_reclaim_reent+0x8a>
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f000 f819 	bl	800d430 <_free_r>
 800d3fe:	e7ba      	b.n	800d376 <_reclaim_reent+0x16>
 800d400:	680e      	ldr	r6, [r1, #0]
 800d402:	4620      	mov	r0, r4
 800d404:	f000 f814 	bl	800d430 <_free_r>
 800d408:	4631      	mov	r1, r6
 800d40a:	e7ef      	b.n	800d3ec <_reclaim_reent+0x8c>
 800d40c:	2500      	movs	r5, #0
 800d40e:	e7ef      	b.n	800d3f0 <_reclaim_reent+0x90>
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	bf00      	nop
 800d414:	20000010 	.word	0x20000010

0800d418 <__malloc_lock>:
 800d418:	4801      	ldr	r0, [pc, #4]	; (800d420 <__malloc_lock+0x8>)
 800d41a:	f7ff bf7b 	b.w	800d314 <__retarget_lock_acquire_recursive>
 800d41e:	bf00      	nop
 800d420:	20001db4 	.word	0x20001db4

0800d424 <__malloc_unlock>:
 800d424:	4801      	ldr	r0, [pc, #4]	; (800d42c <__malloc_unlock+0x8>)
 800d426:	f7ff bf76 	b.w	800d316 <__retarget_lock_release_recursive>
 800d42a:	bf00      	nop
 800d42c:	20001db4 	.word	0x20001db4

0800d430 <_free_r>:
 800d430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d432:	2900      	cmp	r1, #0
 800d434:	d044      	beq.n	800d4c0 <_free_r+0x90>
 800d436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d43a:	9001      	str	r0, [sp, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f1a1 0404 	sub.w	r4, r1, #4
 800d442:	bfb8      	it	lt
 800d444:	18e4      	addlt	r4, r4, r3
 800d446:	f7ff ffe7 	bl	800d418 <__malloc_lock>
 800d44a:	4a1e      	ldr	r2, [pc, #120]	; (800d4c4 <_free_r+0x94>)
 800d44c:	9801      	ldr	r0, [sp, #4]
 800d44e:	6813      	ldr	r3, [r2, #0]
 800d450:	b933      	cbnz	r3, 800d460 <_free_r+0x30>
 800d452:	6063      	str	r3, [r4, #4]
 800d454:	6014      	str	r4, [r2, #0]
 800d456:	b003      	add	sp, #12
 800d458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d45c:	f7ff bfe2 	b.w	800d424 <__malloc_unlock>
 800d460:	42a3      	cmp	r3, r4
 800d462:	d908      	bls.n	800d476 <_free_r+0x46>
 800d464:	6825      	ldr	r5, [r4, #0]
 800d466:	1961      	adds	r1, r4, r5
 800d468:	428b      	cmp	r3, r1
 800d46a:	bf01      	itttt	eq
 800d46c:	6819      	ldreq	r1, [r3, #0]
 800d46e:	685b      	ldreq	r3, [r3, #4]
 800d470:	1949      	addeq	r1, r1, r5
 800d472:	6021      	streq	r1, [r4, #0]
 800d474:	e7ed      	b.n	800d452 <_free_r+0x22>
 800d476:	461a      	mov	r2, r3
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	b10b      	cbz	r3, 800d480 <_free_r+0x50>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d9fa      	bls.n	800d476 <_free_r+0x46>
 800d480:	6811      	ldr	r1, [r2, #0]
 800d482:	1855      	adds	r5, r2, r1
 800d484:	42a5      	cmp	r5, r4
 800d486:	d10b      	bne.n	800d4a0 <_free_r+0x70>
 800d488:	6824      	ldr	r4, [r4, #0]
 800d48a:	4421      	add	r1, r4
 800d48c:	1854      	adds	r4, r2, r1
 800d48e:	42a3      	cmp	r3, r4
 800d490:	6011      	str	r1, [r2, #0]
 800d492:	d1e0      	bne.n	800d456 <_free_r+0x26>
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	6053      	str	r3, [r2, #4]
 800d49a:	4421      	add	r1, r4
 800d49c:	6011      	str	r1, [r2, #0]
 800d49e:	e7da      	b.n	800d456 <_free_r+0x26>
 800d4a0:	d902      	bls.n	800d4a8 <_free_r+0x78>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	e7d6      	b.n	800d456 <_free_r+0x26>
 800d4a8:	6825      	ldr	r5, [r4, #0]
 800d4aa:	1961      	adds	r1, r4, r5
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	bf04      	itt	eq
 800d4b0:	6819      	ldreq	r1, [r3, #0]
 800d4b2:	685b      	ldreq	r3, [r3, #4]
 800d4b4:	6063      	str	r3, [r4, #4]
 800d4b6:	bf04      	itt	eq
 800d4b8:	1949      	addeq	r1, r1, r5
 800d4ba:	6021      	streq	r1, [r4, #0]
 800d4bc:	6054      	str	r4, [r2, #4]
 800d4be:	e7ca      	b.n	800d456 <_free_r+0x26>
 800d4c0:	b003      	add	sp, #12
 800d4c2:	bd30      	pop	{r4, r5, pc}
 800d4c4:	20001db8 	.word	0x20001db8

0800d4c8 <_init>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	bf00      	nop
 800d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ce:	bc08      	pop	{r3}
 800d4d0:	469e      	mov	lr, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <_fini>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	bf00      	nop
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr
