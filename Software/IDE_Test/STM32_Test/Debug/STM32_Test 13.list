
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08015eb0  08015eb0  00025eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801657c  0801657c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801657c  0801657c  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801657c  0801657c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801657c  0801657c  0002657c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016580  08016580  00026580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08016584  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002520  200001e4  08016768  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20002704  08016768  00032704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b18e  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d36  00000000  00000000  0005b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002340  00000000  00000000  000610d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a8  00000000  00000000  00063418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f5b  00000000  00000000  000654c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb6a  00000000  00000000  0009f41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ca74  00000000  00000000  000caf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002179f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a994  00000000  00000000  00217a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015e94 	.word	0x08015e94

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	08015e94 	.word	0x08015e94

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <ADC_Init>:
/* USER CODE BEGIN PV */



//initialize ADC thread
void ADC_Init(void *argument) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <ADC_Init+0x30>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f00c ff99 	bl	800dc6c <osSemaphoreNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <ADC_Init+0x34>)
 8000d3e:	6013      	str	r3, [r2, #0]
	//start to collect ADC signals into ADC buffer through the DMA
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 8000d40:	2209      	movs	r2, #9
 8000d42:	4906      	ldr	r1, [pc, #24]	; (8000d5c <ADC_Init+0x38>)
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f001 fded 	bl	8002924 <HAL_ADC_Start_DMA>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08015f78 	.word	0x08015f78
 8000d58:	20000220 	.word	0x20000220
 8000d5c:	20000200 	.word	0x20000200

08000d60 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	// average the ADC values from 3 consecutive samples and convert them into the analog values with the formula (VREF-GND)/ADC_BIT_RESOLUTION
	//// analog values from adc bit sample = (VREF-GND)*ADC_bits/4095
	for(int i = 0 ; i < 3; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e03a      	b.n	8000de4 <HAL_ADC_ConvCpltCallback+0x84>
		ADC_buffer_processed[i] = resistor_divider_val * ((vref-gnd)/adc_reso)*(((float)ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3);
 8000d6e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000dfc <HAL_ADC_ConvCpltCallback+0x9c>
 8000d72:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000e00 <HAL_ADC_ConvCpltCallback+0xa0>
 8000d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d7a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000e04 <HAL_ADC_ConvCpltCallback+0xa4>
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000d86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3306      	adds	r3, #6
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dc6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8000dca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xac>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3; i++) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	ddc1      	ble.n	8000d6e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00d f818 	bl	800de24 <osSemaphoreRelease>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40533333 	.word	0x40533333
 8000e00:	00000000 	.word	0x00000000
 8000e04:	45800000 	.word	0x45800000
 8000e08:	20000200 	.word	0x20000200
 8000e0c:	20000214 	.word	0x20000214
 8000e10:	20000220 	.word	0x20000220

08000e14 <temperatureDecode>:


//int temp;
int motorTorqueHighFault = 0x00, motorTorqueLowFault = 0x00, decodedTemperature;

int temperatureDecode (int high, int low) {
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	 int temperatureCelsius = (high*256 + low)/10;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <temperatureDecode+0x30>)
 8000e28:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2c:	1092      	asrs	r2, r2, #2
 8000e2e:	17db      	asrs	r3, r3, #31
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	60fb      	str	r3, [r7, #12]
	return temperatureCelsius;
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667

08000e48 <can_Init>:
        reversed_num = (reversed_num << 4) + (hex_num & 0xF);
        hex_num >>= 4;
    }
    return reversed_num;
}
void can_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;
	//canmsg_rx = osMessageQueueNew(10, sizeof(canMsg), &msgAttr);
	txCAN.IDE = CAN_ID_EXT;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <can_Init+0x74>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	609a      	str	r2, [r3, #8]
	txCAN.RTR = CAN_RTR_DATA;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <can_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
	txCAN.TransmitGlobalTime = DISABLE;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <can_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterBank = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000e84:	230e      	movs	r3, #14
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <can_Init+0x78>)
 8000e8e:	f002 fde2 	bl	8003a56 <HAL_CAN_ConfigFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <can_Init+0x54>
	{
	    /* Filter configuration Error */
	  Error_Handler();
 8000e98:	f000 fdac 	bl	80019f4 <Error_Handler>
	}
	HAL_CAN_Start(&hcan1);
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <can_Init+0x78>)
 8000e9e:	f002 fea4 	bl	8003bea <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <can_Init+0x78>)
 8000ea6:	f002 fff6 	bl	8003e96 <HAL_CAN_ActivateNotification>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <can_Init+0x6c>
  {
	/* Notification Error */
	Error_Handler();
 8000eb0:	f000 fda0 	bl	80019f4 <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000274 	.word	0x20000274
 8000ec0:	20000380 	.word	0x20000380

08000ec4 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_AddTxMessage(&hcan1, &txCAN, txData, &txMail);
}

//decode the message from the interrupt with queueget
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//canMsg temp;
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f002 fecd 	bl	8003c72 <HAL_CAN_GetRxMessage>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
	/* Reception Error */
	Error_Handler();
 8000ede:	f000 fd89 	bl	80019f4 <Error_Handler>
  }
//  if (temp.RxHeader.ExtId == temperatureAddress) {
//	  decodedTemperature = temperatureDecode(temp.RxData[1], temp.RxData[0]);
////	  osMessageQueuePut(canmsg_rx, &decodedTemperature, 0, 0);
//  }
  if (RxHeader.ExtId == temperatureAddress) {
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2ba2      	cmp	r3, #162	; 0xa2
 8000ee8:	d10b      	bne.n	8000f02 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	  decodedTemperature = temperatureDecode(RxData[5], RxData[4]);
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000eec:	795b      	ldrb	r3, [r3, #5]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f7ff ff8c 	bl	8000e14 <temperatureDecode>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000f00:	6013      	str	r3, [r2, #0]

  //
//  if (RxHeader.ExtId == temperatureAddress) {
//	  decodedTemperature = temperatureDecode(RxData[5], RxData[4]);
//  }
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200002a8 	.word	0x200002a8
 8000f10:	2000028c 	.word	0x2000028c
 8000f14:	200002b0 	.word	0x200002b0

08000f18 <check_error>:
//define variables
const char yourmom[] = "URMOM.txt";

void controller_state_machine(void *args);

static inline bool check_error(float APPS_VPA, float APPS_VPA2, float BSE){
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f22:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f26:	ed87 1a01 	vstr	s2, [r7, #4]
	//| (APPS_VPA2 >4.5) | (BSE<0.5) | (APPS_VPA2 <0.5) |
	return ((APPS_VPA<=0.5) | (APPS_VPA>=4.5) | (BSE>4.5));
 8000f2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	bf94      	ite	ls
 8000f3c:	2301      	movls	r3, #1
 8000f3e:	2300      	movhi	r3, #0
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f46:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8000f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	bfac      	ite	ge
 8000f54:	2301      	movge	r3, #1
 8000f56:	2300      	movlt	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f64:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8000f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f70:	bfcc      	ite	gt
 8000f72:	2301      	movgt	r3, #1
 8000f74:	2300      	movle	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <state_machine_init>:

void state_machine_init(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	thr_1 = osThreadNew(controller_state_machine, &hadc1, &thr_1_attributes);
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <state_machine_init+0x18>)
 8000f96:	4905      	ldr	r1, [pc, #20]	; (8000fac <state_machine_init+0x1c>)
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <state_machine_init+0x20>)
 8000f9a:	f00c fc86 	bl	800d8aa <osThreadNew>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <state_machine_init+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08015f88 	.word	0x08015f88
 8000fac:	200002b8 	.word	0x200002b8
 8000fb0:	08000fed 	.word	0x08000fed
 8000fb4:	200002b4 	.word	0x200002b4

08000fb8 <update_values>:

void update_values(float *APPS_VPA, float *APPS_VPA2, float * BSE){
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	  *APPS_VPA=ADC_buffer_processed[0];
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <update_values+0x30>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	601a      	str	r2, [r3, #0]
	  *APPS_VPA2=ADC_buffer_processed[1];
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <update_values+0x30>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]
	  *BSE=ADC_buffer_processed[2];
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <update_values+0x30>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20000214 	.word	0x20000214

08000fec <controller_state_machine>:

void controller_state_machine(void *args){
 8000fec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff0:	b0a6      	sub	sp, #152	; 0x98
 8000ff2:	af06      	add	r7, sp, #24
 8000ff4:	6078      	str	r0, [r7, #4]
	SD_init();
 8000ff6:	f000 fd03 	bl	8001a00 <SD_init>
	float APPS_VPA = 0, APPS_VPA2 = 0, BSE = 0;
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	673b      	str	r3, [r7, #112]	; 0x70
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	66bb      	str	r3, [r7, #104]	; 0x68
//	uint8_t sd_status = BSP_SD_IsDetected();
	char buffer[90];
	//dummy var for storing motor temp
	float motor_overheat = 0;
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t startTimeStamp = osKernelGetSysTimerCount();
 8001012:	f00c fc11 	bl	800d838 <osKernelGetSysTimerCount>
 8001016:	67f8      	str	r0, [r7, #124]	; 0x7c
//	if (sd_status == SD_PRESENT) {
//		SD_init();
//	}
	  for(;;)
	  {
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <controller_state_machine+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f00c feae 	bl	800dd80 <osSemaphoreAcquire>
//		  if ((sd_status != BSP_SD_IsDetected()) && (BSP_SD_IsDetected() == SD_PRESENT)){
//			  SD_init();
//		  }
//		  sd_status = BSP_SD_IsDetected();
		  update_values(&APPS_VPA, &APPS_VPA2, &BSE);
 8001024:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001028:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800102c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffc1 	bl	8000fb8 <update_values>
		  int n = snprintf(buffer, sizeof(buffer), "Error log: APPS Value is %1.2f, APPS2 Value is %1.2f, BSE Value is %1.2f; \n", APPS_VPA, APPS_VPA2, BSE);
 8001036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa9d 	bl	8000578 <__aeabi_f2d>
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa97 	bl	8000578 <__aeabi_f2d>
 800104a:	4680      	mov	r8, r0
 800104c:	4689      	mov	r9, r1
 800104e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa91 	bl	8000578 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	f107 000c 	add.w	r0, r7, #12
 800105e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001062:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001066:	e9cd 4500 	strd	r4, r5, [sp]
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <controller_state_machine+0xd4>)
 800106c:	215a      	movs	r1, #90	; 0x5a
 800106e:	f011 fa95 	bl	801259c <sniprintf>
 8001072:	6778      	str	r0, [r7, #116]	; 0x74
		  //maybe can replace with another while 1 looperoni
		  if (check_error(APPS_VPA, APPS_VPA2, BSE)){
 8001074:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001078:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800107c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001080:	eeb0 1a66 	vmov.f32	s2, s13
 8001084:	eef0 0a47 	vmov.f32	s1, s14
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	f7ff ff44 	bl	8000f18 <check_error>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <controller_state_machine+0xc8>
			  if(osKernelGetSysTimerCount() - startTimeStamp >= 100) {
 8001096:	f00c fbcf 	bl	800d838 <osKernelGetSysTimerCount>
 800109a:	4602      	mov	r2, r0
 800109c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b63      	cmp	r3, #99	; 0x63
 80010a2:	d9b9      	bls.n	8001018 <controller_state_machine+0x2c>
				  //send error frame
//				  if (sd_status == SD_PRESENT) {
					  SD_process(yourmom, buffer, n);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <controller_state_machine+0xd8>)
 80010ae:	f000 fccd 	bl	8001a4c <SD_process>
 80010b2:	e7b1      	b.n	8001018 <controller_state_machine+0x2c>
				  }
//			  }
		  }
		  else {
			  startTimeStamp = osKernelGetSysTimerCount();
 80010b4:	f00c fbc0 	bl	800d838 <osKernelGetSysTimerCount>
 80010b8:	67f8      	str	r0, [r7, #124]	; 0x7c
	  {
 80010ba:	e7ad      	b.n	8001018 <controller_state_machine+0x2c>
 80010bc:	20000220 	.word	0x20000220
 80010c0:	08015ec4 	.word	0x08015ec4
 80010c4:	08015fac 	.word	0x08015fac

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f001 f893 	bl	80021f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f828 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 f97e 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d8:	f000 f952 	bl	8001380 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80010dc:	f000 f92e 	bl	800133c <MX_SDMMC1_SD_Init>
  MX_CAN1_Init();
 80010e0:	f000 f8f6 	bl	80012d0 <MX_CAN1_Init>
  MX_ADC1_Init();
 80010e4:	f000 f86c 	bl	80011c0 <MX_ADC1_Init>
  MX_FATFS_Init();
 80010e8:	f009 f970 	bl	800a3cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ec:	f00c faf6 	bl	800d6dc <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <main+0x4c>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <main+0x50>)
 80010f6:	f00c fbd8 	bl	800d8aa <osThreadNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <main+0x54>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init(&hadc1);
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <main+0x58>)
 8001102:	f7ff fe0f 	bl	8000d24 <ADC_Init>
  can_Init();
 8001106:	f7ff fe9f 	bl	8000e48 <can_Init>
  state_machine_init();
 800110a:	f7ff ff41 	bl	8000f90 <state_machine_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800110e:	f00c fb2b 	bl	800d768 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001112:	e7fe      	b.n	8001112 <main+0x4a>
 8001114:	08015fb8 	.word	0x08015fb8
 8001118:	080019c1 	.word	0x080019c1
 800111c:	20000428 	.word	0x20000428
 8001120:	200002b8 	.word	0x200002b8

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b096      	sub	sp, #88	; 0x58
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2244      	movs	r2, #68	; 0x44
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f010 fa9b 	bl	801166e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f003 fe30 	bl	8004dac <HAL_PWREx_ControlVoltageScaling>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001152:	f000 fc4f 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001156:	2301      	movs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800115a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800115e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001164:	2303      	movs	r3, #3
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800116c:	231e      	movs	r3, #30
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fec7 	bl	8004f14 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800118c:	f000 fc32 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2105      	movs	r1, #5
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 facd 	bl	8005748 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b4:	f000 fc1e 	bl	80019f4 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3758      	adds	r7, #88	; 0x58
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
 80011d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011d8:	4a39      	ldr	r2, [pc, #228]	; (80012c0 <MX_ADC1_Init+0x100>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011f8:	2208      	movs	r2, #8
 80011fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <MX_ADC1_Init+0xfc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001204:	2201      	movs	r2, #1
 8001206:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_ADC1_Init+0xfc>)
 800120a:	2203      	movs	r2, #3
 800120c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <MX_ADC1_Init+0xfc>)
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <MX_ADC1_Init+0xfc>)
 800122c:	2200      	movs	r2, #0
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_ADC1_Init+0xfc>)
 800123a:	2204      	movs	r2, #4
 800123c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123e:	481f      	ldr	r0, [pc, #124]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001240:	f001 fa24 	bl	800268c <HAL_ADC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800124a:	f000 fbd3 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_ADC1_Init+0x104>)
 8001250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001252:	2306      	movs	r3, #6
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001256:	2305      	movs	r3, #5
 8001258:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125a:	237f      	movs	r3, #127	; 0x7f
 800125c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125e:	2304      	movs	r3, #4
 8001260:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_ADC1_Init+0xfc>)
 800126c:	f001 fdb0 	bl	8002dd0 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001276:	f000 fbbd 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_ADC1_Init+0x108>)
 800127c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800127e:	230c      	movs	r3, #12
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_ADC1_Init+0xfc>)
 8001288:	f001 fda2 	bl	8002dd0 <HAL_ADC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001292:	f000 fbaf 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_ADC1_Init+0x10c>)
 8001298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800129a:	2312      	movs	r3, #18
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_ADC1_Init+0xfc>)
 80012a4:	f001 fd94 	bl	8002dd0 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80012ae:	f000 fba1 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002b8 	.word	0x200002b8
 80012c0:	50040000 	.word	0x50040000
 80012c4:	14f00020 	.word	0x14f00020
 80012c8:	19200040 	.word	0x19200040
 80012cc:	1d500080 	.word	0x1d500080

080012d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_CAN1_Init+0x64>)
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MX_CAN1_Init+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_CAN1_Init+0x64>)
 80012dc:	2218      	movs	r2, #24
 80012de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_CAN1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_CAN1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_CAN1_Init+0x64>)
 80012ee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_CAN1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_CAN1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_CAN1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_CAN1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_CAN1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_CAN1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_CAN1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_CAN1_Init+0x64>)
 8001320:	f002 fa9e 	bl	8003860 <HAL_CAN_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800132a:	f000 fb63 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000380 	.word	0x20000380
 8001338:	40006400 	.word	0x40006400

0800133c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <MX_SDMMC1_SD_Init+0x40>)
 8001344:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 8001354:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001358:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200003a8 	.word	0x200003a8
 800137c:	50062400 	.word	0x50062400

08001380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_DMA_Init+0x50>)
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_DMA_Init+0x50>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6493      	str	r3, [r2, #72]	; 0x48
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_DMA_Init+0x50>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_DMA_Init+0x50>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <MX_DMA_Init+0x50>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6493      	str	r3, [r2, #72]	; 0x48
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_DMA_Init+0x50>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	200e      	movs	r0, #14
 80013bc:	f003 f878 	bl	80044b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013c0:	200e      	movs	r0, #14
 80013c2:	f003 f891 	bl	80044e8 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ea:	4bb2      	ldr	r3, [pc, #712]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4ab1      	ldr	r2, [pc, #708]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4baf      	ldr	r3, [pc, #700]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	4bac      	ldr	r3, [pc, #688]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4aab      	ldr	r2, [pc, #684]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4ba9      	ldr	r3, [pc, #676]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4ba6      	ldr	r3, [pc, #664]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4aa5      	ldr	r2, [pc, #660]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4ba3      	ldr	r3, [pc, #652]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4ba0      	ldr	r3, [pc, #640]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a9f      	ldr	r2, [pc, #636]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b9d      	ldr	r3, [pc, #628]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b9a      	ldr	r3, [pc, #616]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a99      	ldr	r2, [pc, #612]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b97      	ldr	r3, [pc, #604]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001462:	4b94      	ldr	r3, [pc, #592]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a93      	ldr	r2, [pc, #588]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b91      	ldr	r3, [pc, #580]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800147a:	f003 fd3b 	bl	8004ef4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a8c      	ldr	r2, [pc, #560]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b8a      	ldr	r3, [pc, #552]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b87      	ldr	r3, [pc, #540]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a86      	ldr	r2, [pc, #536]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b84      	ldr	r3, [pc, #528]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b7e      	ldr	r3, [pc, #504]	; (80016b4 <MX_GPIO_Init+0x2e0>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f244 0114 	movw	r1, #16404	; 0x4014
 80014cc:	487a      	ldr	r0, [pc, #488]	; (80016b8 <MX_GPIO_Init+0x2e4>)
 80014ce:	f003 fc35 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	4878      	ldr	r0, [pc, #480]	; (80016bc <MX_GPIO_Init+0x2e8>)
 80014da:	f003 fc2f 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f003 fc29 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2104      	movs	r1, #4
 80014ee:	4874      	ldr	r0, [pc, #464]	; (80016c0 <MX_GPIO_Init+0x2ec>)
 80014f0:	f003 fc24 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80014f4:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001506:	2305      	movs	r3, #5
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	486c      	ldr	r0, [pc, #432]	; (80016c4 <MX_GPIO_Init+0x2f0>)
 8001512:	f003 fa69 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8001516:	f244 0314 	movw	r3, #16404	; 0x4014
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	4862      	ldr	r0, [pc, #392]	; (80016b8 <MX_GPIO_Init+0x2e4>)
 8001530:	f003 fa5a 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin PSRAM_A20_Pin PSRAM_A19_Pin
                           D7_Pin D6_Pin D12_Pin D5_Pin
                           D11_Pin D4_Pin D10_Pin D9_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001534:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001546:	230c      	movs	r3, #12
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	485d      	ldr	r0, [pc, #372]	; (80016c8 <MX_GPIO_Init+0x2f4>)
 8001552:	f003 fa49 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001556:	2310      	movs	r3, #16
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4853      	ldr	r0, [pc, #332]	; (80016c0 <MX_GPIO_Init+0x2ec>)
 8001572:	f003 fa39 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001588:	2307      	movs	r3, #7
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001596:	f003 fa27 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 800159a:	2301      	movs	r3, #1
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015aa:	2305      	movs	r3, #5
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4843      	ldr	r0, [pc, #268]	; (80016c4 <MX_GPIO_Init+0x2f0>)
 80015b6:	f003 fa17 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80015ba:	23b0      	movs	r3, #176	; 0xb0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80015ca:	230a      	movs	r3, #10
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	483b      	ldr	r0, [pc, #236]	; (80016c4 <MX_GPIO_Init+0x2f0>)
 80015d6:	f003 fa07 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80015da:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015ec:	230d      	movs	r3, #13
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4832      	ldr	r0, [pc, #200]	; (80016c0 <MX_GPIO_Init+0x2ec>)
 80015f8:	f003 f9f6 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80015fc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800160e:	2305      	movs	r3, #5
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	482c      	ldr	r0, [pc, #176]	; (80016cc <MX_GPIO_Init+0x2f8>)
 800161a:	f003 f9e5 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin PSRAM_OE_Pin D3_Pin PSRAM_WE_Pin
                           PSRAM_WAIT_Pin PSRAM_CLK_Pin PSRAM_NE1_Pin PSRAM_A18_Pin
                           D1_Pin D0_Pin PSRAM_A17_Pin PSRAM_A16_Pin
                           D15_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800161e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001630:	230c      	movs	r3, #12
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4825      	ldr	r0, [pc, #148]	; (80016d0 <MX_GPIO_Init+0x2fc>)
 800163c:	f003 f9d4 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001640:	2302      	movs	r3, #2
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001644:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	481b      	ldr	r0, [pc, #108]	; (80016c4 <MX_GPIO_Init+0x2f0>)
 8001656:	f003 f9c7 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 800165a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800166c:	230a      	movs	r3, #10
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <MX_GPIO_Init+0x2e4>)
 8001678:	f003 f9b6 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 800167c:	2340      	movs	r3, #64	; 0x40
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168c:	2304      	movs	r3, #4
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	480a      	ldr	r0, [pc, #40]	; (80016c0 <MX_GPIO_Init+0x2ec>)
 8001698:	f003 f9a6 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800169c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e010      	b.n	80016d4 <MX_GPIO_Init+0x300>
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	48001c00 	.word	0x48001c00
 80016bc:	48000800 	.word	0x48000800
 80016c0:	48000400 	.word	0x48000400
 80016c4:	48002000 	.word	0x48002000
 80016c8:	48001000 	.word	0x48001000
 80016cc:	48001800 	.word	0x48001800
 80016d0:	48000c00 	.word	0x48000c00
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	48b2      	ldr	r0, [pc, #712]	; (80019a8 <MX_GPIO_Init+0x5d4>)
 80016de:	f003 f983 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 80016e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80016f4:	2305      	movs	r3, #5
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	48aa      	ldr	r0, [pc, #680]	; (80019a8 <MX_GPIO_Init+0x5d4>)
 8001700:	f003 f972 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001714:	230d      	movs	r3, #13
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	48a3      	ldr	r0, [pc, #652]	; (80019ac <MX_GPIO_Init+0x5d8>)
 8001720:	f003 f962 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSRAM_ADV_Pin */
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	489c      	ldr	r0, [pc, #624]	; (80019b0 <MX_GPIO_Init+0x5dc>)
 8001740:	f003 f952 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8001744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001756:	230a      	movs	r3, #10
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f003 f940 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	488c      	ldr	r0, [pc, #560]	; (80019b4 <MX_GPIO_Init+0x5e0>)
 8001782:	f003 f931 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001786:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001798:	230c      	movs	r3, #12
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	4885      	ldr	r0, [pc, #532]	; (80019b8 <MX_GPIO_Init+0x5e4>)
 80017a4:	f003 f920 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 80017a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ba:	2304      	movs	r3, #4
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	487d      	ldr	r0, [pc, #500]	; (80019bc <MX_GPIO_Init+0x5e8>)
 80017c6:	f003 f90f 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	4875      	ldr	r0, [pc, #468]	; (80019b4 <MX_GPIO_Init+0x5e0>)
 80017e0:	f003 f902 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 80017e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ea:	2312      	movs	r3, #18
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f6:	2304      	movs	r3, #4
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	486e      	ldr	r0, [pc, #440]	; (80019bc <MX_GPIO_Init+0x5e8>)
 8001802:	f003 f8f1 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A15_Pin PSRAM_A11_Pin
                           PSRAM_A12_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001806:	233f      	movs	r3, #63	; 0x3f
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001816:	230c      	movs	r3, #12
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4866      	ldr	r0, [pc, #408]	; (80019bc <MX_GPIO_Init+0x5e8>)
 8001822:	f003 f8e1 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800182e:	2302      	movs	r3, #2
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	485e      	ldr	r0, [pc, #376]	; (80019b4 <MX_GPIO_Init+0x5e0>)
 800183a:	f003 f8d5 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800183e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4855      	ldr	r0, [pc, #340]	; (80019b0 <MX_GPIO_Init+0x5dc>)
 800185c:	f003 f8c4 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001860:	2303      	movs	r3, #3
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001870:	2308      	movs	r3, #8
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	484e      	ldr	r0, [pc, #312]	; (80019b4 <MX_GPIO_Init+0x5e0>)
 800187c:	f003 f8b4 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 8001880:	2304      	movs	r3, #4
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001890:	2306      	movs	r3, #6
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4846      	ldr	r0, [pc, #280]	; (80019b4 <MX_GPIO_Init+0x5e0>)
 800189c:	f003 f8a4 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018a0:	2320      	movs	r3, #32
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f003 f897 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f003 f888 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80018d8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ea:	2305      	movs	r3, #5
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	482e      	ldr	r0, [pc, #184]	; (80019b0 <MX_GPIO_Init+0x5dc>)
 80018f6:	f003 f877 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 80018fa:	2308      	movs	r3, #8
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190a:	2307      	movs	r3, #7
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f003 f866 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 800191c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 800192e:	230b      	movs	r3, #11
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	481f      	ldr	r0, [pc, #124]	; (80019b8 <MX_GPIO_Init+0x5e4>)
 800193a:	f003 f855 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 800193e:	2310      	movs	r3, #16
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800194e:	230a      	movs	r3, #10
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f003 f844 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001960:	2304      	movs	r3, #4
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	480e      	ldr	r0, [pc, #56]	; (80019b0 <MX_GPIO_Init+0x5dc>)
 8001978:	f003 f836 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800198e:	2306      	movs	r3, #6
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_GPIO_Init+0x5dc>)
 800199a:	f003 f825 	bl	80049e8 <HAL_GPIO_Init>

}
 800199e:	bf00      	nop
 80019a0:	3738      	adds	r7, #56	; 0x38
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	48001c00 	.word	0x48001c00
 80019ac:	48001000 	.word	0x48001000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48001400 	.word	0x48001400
 80019bc:	48001800 	.word	0x48001800

080019c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f00c f800 	bl	800d9ce <osDelay>
 80019ce:	e7fb      	b.n	80019c8 <StartDefaultTask+0x8>

080019d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019e2:	f000 fc21 	bl	8002228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40001000 	.word	0x40001000

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <SD_init>:
uint16_t rtext[_MAX_SS];/* File read buffer */
/* USER CODE END 1 */


//if unmount SD card, need to rerun this block SD_init again to re-mount sd card, otherwise data collection process will be halted.
void SD_init(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK){
 8001a06:	2200      	movs	r2, #0
 8001a08:	490d      	ldr	r1, [pc, #52]	; (8001a40 <SD_init+0x40>)
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <SD_init+0x44>)
 8001a0c:	f00a fcd0 	bl	800c3b0 <f_mount>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <SD_init+0x1c>
		Error_Handler();
 8001a16:	f7ff ffed 	bl	80019f4 <Error_Handler>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		{
			Error_Handler();
		}
	}
}
 8001a1a:	e00d      	b.n	8001a38 <SD_init+0x38>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8001a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <SD_init+0x48>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	2107      	movs	r1, #7
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <SD_init+0x40>)
 8001a2a:	f00b f947 	bl	800ccbc <f_mkfs>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SD_init+0x38>
			Error_Handler();
 8001a34:	f7ff ffde 	bl	80019f4 <Error_Handler>
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000088c 	.word	0x2000088c
 8001a44:	20000890 	.word	0x20000890
 8001a48:	20000434 	.word	0x20000434

08001a4c <SD_process>:
//
//void* is common denominator for all pointers. Temp var to be changed to use with anything else
void SD_process(const char *filename, void *buffer, int length){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
			//Open file for writing (Create)
//			if(f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK){
			if(f_open(&SDFile, filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK){
 8001a58:	2232      	movs	r2, #50	; 0x32
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <SD_process+0x5c>)
 8001a5e:	f00a fd0b 	bl	800c478 <f_open>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <SD_process+0x22>
				Error_Handler();
 8001a68:	f7ff ffc4 	bl	80019f4 <Error_Handler>
					f_close(&SDFile);
				}
			}
			//create if condition to check if buffer is null/bad function calls
//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
 8001a6c:	e017      	b.n	8001a9e <SD_process+0x52>
				res = f_write(&SDFile, buffer, length, (void *)&byteswritten);
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <SD_process+0x60>)
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <SD_process+0x5c>)
 8001a76:	f00a fec4 	bl	800c802 <f_write>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <SD_process+0x64>)
 8001a80:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK)){
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <SD_process+0x60>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <SD_process+0x46>
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <SD_process+0x64>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <SD_process+0x4c>
					Error_Handler();
 8001a92:	f7ff ffaf 	bl	80019f4 <Error_Handler>
}
 8001a96:	e002      	b.n	8001a9e <SD_process+0x52>
					f_close(&SDFile);
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <SD_process+0x5c>)
 8001a9a:	f00b f8df 	bl	800cc5c <f_close>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000ac4 	.word	0x20000ac4
 8001aac:	20000430 	.word	0x20000430
 8001ab0:	2000042c 	.word	0x2000042c

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_MspInit+0x4c>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	210f      	movs	r1, #15
 8001aee:	f06f 0001 	mvn.w	r0, #1
 8001af2:	f002 fcdd 	bl	80044b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0b2      	sub	sp, #200	; 0xc8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	229c      	movs	r2, #156	; 0x9c
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00f fda2 	bl	801166e <memset>
  if(hadc->Instance==ADC1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5d      	ldr	r2, [pc, #372]	; (8001ca4 <HAL_ADC_MspInit+0x1a0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	f040 80b2 	bne.w	8001c9a <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001b44:	2303      	movs	r3, #3
 8001b46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 f8da 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001b72:	f7ff ff3f 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b76:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4a39      	ldr	r2, [pc, #228]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_ADC_MspInit+0x1a4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8001bd6:	2318      	movs	r3, #24
 8001bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bdc:	230b      	movs	r3, #11
 8001bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bec:	4619      	mov	r1, r3
 8001bee:	482f      	ldr	r0, [pc, #188]	; (8001cac <HAL_ADC_MspInit+0x1a8>)
 8001bf0:	f002 fefa 	bl	80049e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8001bf4:	2387      	movs	r3, #135	; 0x87
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bfa:	230b      	movs	r3, #11
 8001bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c10:	f002 feea 	bl	80049e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c1a:	230b      	movs	r3, #11
 8001c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4820      	ldr	r0, [pc, #128]	; (8001cb0 <HAL_ADC_MspInit+0x1ac>)
 8001c2e:	f002 fedb 	bl	80049e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_ADC_MspInit+0x1b4>)
 8001c36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c62:	2220      	movs	r2, #32
 8001c64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c68:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001c6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c6e:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c70:	f002 fc48 	bl	8004504 <HAL_DMA_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8001c7a:	f7ff febb 	bl	80019f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c82:	651a      	str	r2, [r3, #80]	; 0x50
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_ADC_MspInit+0x1b0>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	2012      	movs	r0, #18
 8001c90:	f002 fc0e 	bl	80044b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001c94:	2012      	movs	r0, #18
 8001c96:	f002 fc27 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	37c8      	adds	r7, #200	; 0xc8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	50040000 	.word	0x50040000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	20000320 	.word	0x20000320
 8001cb8:	40020044 	.word	0x40020044

08001cbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_CAN_MspInit+0x90>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d131      	bne.n	8001d42 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_CAN_MspInit+0x94>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_CAN_MspInit+0x94>)
 8001ce4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_CAN_MspInit+0x94>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_CAN_MspInit+0x94>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <HAL_CAN_MspInit+0x94>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_CAN_MspInit+0x94>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001d0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d20:	2309      	movs	r3, #9
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f002 fe5b 	bl	80049e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	2014      	movs	r0, #20
 8001d38:	f002 fbba 	bl	80044b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d3c:	2014      	movs	r0, #20
 8001d3e:	f002 fbd3 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40006400 	.word	0x40006400
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0b2      	sub	sp, #200	; 0xc8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	229c      	movs	r2, #156	; 0x9c
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00f fc7a 	bl	801166e <memset>
  if(hsd->Instance==SDMMC1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a38      	ldr	r2, [pc, #224]	; (8001e60 <HAL_SD_MspInit+0x10c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d169      	bne.n	8001e58 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001d92:	2303      	movs	r3, #3
 8001d94:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 ffc0 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001da6:	f7ff fe25 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_SD_MspInit+0x110>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001df2:	2304      	movs	r3, #4
 8001df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <HAL_SD_MspInit+0x114>)
 8001e18:	f002 fde6 	bl	80049e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001e1c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e36:	230c      	movs	r3, #12
 8001e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e40:	4619      	mov	r1, r3
 8001e42:	480a      	ldr	r0, [pc, #40]	; (8001e6c <HAL_SD_MspInit+0x118>)
 8001e44:	f002 fdd0 	bl	80049e8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	2031      	movs	r0, #49	; 0x31
 8001e4e:	f002 fb2f 	bl	80044b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001e52:	2031      	movs	r0, #49	; 0x31
 8001e54:	f002 fb48 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	37c8      	adds	r7, #200	; 0xc8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	50062400 	.word	0x50062400
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	48000800 	.word	0x48000800

08001e70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	; 0x38
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_InitTick+0xe0>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <HAL_InitTick+0xe0>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_InitTick+0xe0>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e96:	f107 0210 	add.w	r2, r7, #16
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fe4d 	bl	8005b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eb0:	f003 fe1a 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	6378      	str	r0, [r7, #52]	; 0x34
 8001eb6:	e004      	b.n	8001ec2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001eb8:	f003 fe16 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <HAL_InitTick+0xe4>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9b      	lsrs	r3, r3, #18
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_InitTick+0xe8>)
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_InitTick+0xec>)
 8001ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_InitTick+0xe8>)
 8001ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001edc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_InitTick+0xe8>)
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_InitTick+0xe8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_InitTick+0xe8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_InitTick+0xe8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ef6:	4818      	ldr	r0, [pc, #96]	; (8001f58 <HAL_InitTick+0xe8>)
 8001ef8:	f007 f9b1 	bl	800925e <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11b      	bne.n	8001f42 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <HAL_InitTick+0xe8>)
 8001f0c:	f007 fa08 	bl	8009320 <HAL_TIM_Base_Start_IT>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d111      	bne.n	8001f42 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1e:	2036      	movs	r0, #54	; 0x36
 8001f20:	f002 fae2 	bl	80044e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	d808      	bhi.n	8001f3c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	2036      	movs	r0, #54	; 0x36
 8001f30:	f002 fabe 	bl	80044b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_InitTick+0xf0>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e002      	b.n	8001f42 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3738      	adds	r7, #56	; 0x38
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	20000834 	.word	0x20000834
 8001f5c:	40001000 	.word	0x40001000
 8001f60:	20000004 	.word	0x20000004

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <NMI_Handler+0x4>

08001f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler+0x4>

08001f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA1_Channel4_IRQHandler+0x10>)
 8001f96:	f002 fbd8 	bl	800474a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000320 	.word	0x20000320

08001fa4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <ADC1_IRQHandler+0x10>)
 8001faa:	f000 fd3f 	bl	8002a2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200002b8 	.word	0x200002b8

08001fb8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <CAN1_RX0_IRQHandler+0x10>)
 8001fbe:	f001 ff90 	bl	8003ee2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000380 	.word	0x20000380

08001fcc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <SDMMC1_IRQHandler+0x10>)
 8001fd2:	f005 fec7 	bl	8007d64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200003a8 	.word	0x200003a8

08001fe0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM6_DAC_IRQHandler+0x10>)
 8001fe6:	f007 fa0b 	bl	8009400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000834 	.word	0x20000834

08001ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_kill>:

int _kill(int pid, int sig)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800200e:	f00f f9fd 	bl	801140c <__errno>
 8002012:	4603      	mov	r3, r0
 8002014:	2216      	movs	r2, #22
 8002016:	601a      	str	r2, [r3, #0]
  return -1;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_exit>:

void _exit (int status)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800202c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffe7 	bl	8002004 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002036:	e7fe      	b.n	8002036 <_exit+0x12>

08002038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e00a      	b.n	8002060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800204a:	f3af 8000 	nop.w
 800204e:	4601      	mov	r1, r0
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf0      	blt.n	800204a <_read+0x12>
  }

  return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e009      	b.n	8002098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf1      	blt.n	8002084 <_write+0x12>
  }
  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_close>:

int _close(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d2:	605a      	str	r2, [r3, #4]
  return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_isatty>:

int _isatty(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f00f f962 	bl	801140c <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200a0000 	.word	0x200a0000
 8002174:	00000800 	.word	0x00000800
 8002178:	20000880 	.word	0x20000880
 800217c:	20002708 	.word	0x20002708

08002180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a8:	f7ff ffea 	bl	8002180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ae:	490d      	ldr	r1, [pc, #52]	; (80021e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <LoopForever+0xe>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c4:	4c0a      	ldr	r4, [pc, #40]	; (80021f0 <LoopForever+0x16>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f00f fa17 	bl	8011604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021d6:	f7fe ff77 	bl	80010c8 <main>

080021da <LoopForever>:

LoopForever:
    b LoopForever
 80021da:	e7fe      	b.n	80021da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021e8:	08016584 	.word	0x08016584
  ldr r2, =_sbss
 80021ec:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80021f0:	20002704 	.word	0x20002704

080021f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <CAN1_RX1_IRQHandler>

080021f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002200:	2003      	movs	r0, #3
 8002202:	f002 f94a 	bl	800449a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002206:	200f      	movs	r0, #15
 8002208:	f7ff fe32 	bl	8001e70 <HAL_InitTick>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	71fb      	strb	r3, [r7, #7]
 8002216:	e001      	b.n	800221c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002218:	f7ff fc4c 	bl	8001ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800221c:	79fb      	ldrb	r3, [r7, #7]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008
 800224c:	20000884 	.word	0x20000884

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000884 	.word	0x20000884

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <LL_ADC_SetOffset+0x44>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	03fff000 	.word	0x03fff000

08002360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3330      	adds	r3, #48	; 0x30
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	4413      	add	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	211f      	movs	r1, #31
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	401a      	ands	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	f003 011f 	and.w	r1, r3, #31
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	431a      	orrs	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3314      	adds	r3, #20
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	0e5b      	lsrs	r3, r3, #25
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	4413      	add	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0d1b      	lsrs	r3, r3, #20
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2107      	movs	r1, #7
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	0d1b      	lsrs	r3, r3, #20
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0318 	and.w	r3, r3, #24
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002508:	40d9      	lsrs	r1, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	400b      	ands	r3, r1
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	431a      	orrs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	0007ffff 	.word	0x0007ffff

0800252c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800253c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6093      	str	r3, [r2, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d101      	bne.n	800256a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800258c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b4:	d101      	bne.n	80025ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <LL_ADC_IsEnabled+0x18>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_ADC_IsEnabled+0x1a>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002626:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d101      	bne.n	800267c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e12f      	b.n	8002906 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fa25 	bl	8001b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff3f 	bl	8002550 <LL_ADC_IsDeepPowerDownEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff25 	bl	800252c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff5a 	bl	80025a0 <LL_ADC_IsInternalRegulatorEnabled>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d115      	bne.n	800271e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff3e 	bl	8002578 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026fc:	4b84      	ldr	r3, [pc, #528]	; (8002910 <HAL_ADC_Init+0x284>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	4a84      	ldr	r2, [pc, #528]	; (8002914 <HAL_ADC_Init+0x288>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002710:	e002      	b.n	8002718 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3b01      	subs	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f9      	bne.n	8002712 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff3c 	bl	80025a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff75 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 8002754:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 80c8 	bne.w	80028f4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80c4 	bne.w	80028f4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002774:	f043 0202 	orr.w	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff35 	bl	80025f0 <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800278c:	4862      	ldr	r0, [pc, #392]	; (8002918 <HAL_ADC_Init+0x28c>)
 800278e:	f7ff ff2f 	bl	80025f0 <LL_ADC_IsEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	485f      	ldr	r0, [pc, #380]	; (800291c <HAL_ADC_Init+0x290>)
 80027a0:	f7ff fd86 	bl	80022b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7e5b      	ldrb	r3, [r3, #25]
 80027a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	3b01      	subs	r3, #1
 80027d8:	045b      	lsls	r3, r3, #17
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_ADC_Init+0x294>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	430b      	orrs	r3, r1
 800280e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff12 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 800281a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff1f 	bl	8002664 <LL_ADC_INJ_IsConversionOngoing>
 8002826:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d140      	bne.n	80028b0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d13d      	bne.n	80028b0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e1b      	ldrb	r3, [r3, #24]
 800283c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800283e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002846:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002856:	f023 0306 	bic.w	r3, r3, #6
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	430b      	orrs	r3, r1
 8002862:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286a:	2b01      	cmp	r3, #1
 800286c:	d118      	bne.n	80028a0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002884:	4311      	orrs	r1, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002890:	430a      	orrs	r2, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	e007      	b.n	80028b0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10c      	bne.n	80028d2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f023 010f 	bic.w	r1, r3, #15
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
 80028d0:	e007      	b.n	80028e2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 020f 	bic.w	r2, r2, #15
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	659a      	str	r2, [r3, #88]	; 0x58
 80028f2:	e007      	b.n	8002904 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f043 0210 	orr.w	r2, r3, #16
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002904:	7ffb      	ldrb	r3, [r7, #31]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000
 8002914:	053e2d63 	.word	0x053e2d63
 8002918:	50040000 	.word	0x50040000
 800291c:	50040300 	.word	0x50040300
 8002920:	fff0c007 	.word	0xfff0c007

08002924 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fe82 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d167      	bne.n	8002a10 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_ADC_Start_DMA+0x2a>
 800294a:	2302      	movs	r3, #2
 800294c:	e063      	b.n	8002a16 <HAL_ADC_Start_DMA+0xf2>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fe36 	bl	80035c8 <ADC_Enable>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d14f      	bne.n	8002a06 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f023 0206 	bic.w	r2, r3, #6
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c
 8002992:	e002      	b.n	800299a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	4a20      	ldr	r2, [pc, #128]	; (8002a20 <HAL_ADC_Start_DMA+0xfc>)
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_ADC_Start_DMA+0x100>)
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_ADC_Start_DMA+0x104>)
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	221c      	movs	r2, #28
 80029b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0210 	orr.w	r2, r2, #16
 80029d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3340      	adds	r3, #64	; 0x40
 80029ec:	4619      	mov	r1, r3
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f001 fe2f 	bl	8004654 <HAL_DMA_Start_IT>
 80029f6:	4603      	mov	r3, r0
 80029f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fe09 	bl	8002616 <LL_ADC_REG_StartConversion>
 8002a04:	e006      	b.n	8002a14 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002a0e:	e001      	b.n	8002a14 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	080036d5 	.word	0x080036d5
 8002a24:	080037ad 	.word	0x080037ad
 8002a28:	080037c9 	.word	0x080037c9

08002a2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x56>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fee9 	bl	800384c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x6a>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05e      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d059      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc8e 	bl	80023e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03e      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d135      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d12e      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fda1 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11a      	bne.n	8002b38 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 020c 	bic.w	r2, r2, #12
 8002b10:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d112      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
 8002b36:	e00b      	b.n	8002b50 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fe f905 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_ADC_IRQHandler+0x146>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d072      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06d      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc5f 	bl	8002466 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ba8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fc1a 	bl	80023e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bb4:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d047      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_ADC_IRQHandler+0x1b2>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d03f      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d13a      	bne.n	8002c54 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d133      	bne.n	8002c54 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d12e      	bne.n	8002c54 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fd32 	bl	8002664 <LL_ADC_INJ_IsConversionOngoing>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11a      	bne.n	8002c3c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c14:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d112      	bne.n	8002c54 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
 8002c3a:	e00b      	b.n	8002c54 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f043 0210 	orr.w	r2, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fdd1 	bl	80037fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2260      	movs	r2, #96	; 0x60
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d011      	beq.n	8002c90 <HAL_ADC_IRQHandler+0x264>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00c      	beq.n	8002c90 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f890 	bl	8002da8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d012      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x294>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fdb7 	bl	8003824 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x2c4>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fda9 	bl	8003838 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02a      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x324>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d025      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e008      	b.n	8002d24 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002d20:	2301      	movs	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10e      	bne.n	8002d48 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f83a 	bl	8002dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d018      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x360>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	f043 0208 	orr.w	r2, r3, #8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d84:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fd42 	bl	8003810 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b0b6      	sub	sp, #216	; 0xd8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x22>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e3d5      	b.n	800359e <HAL_ADC_ConfigChannel+0x7ce>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fc1d 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 83ba 	bne.w	8003580 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d824      	bhi.n	8002e5e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	3b02      	subs	r3, #2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d81b      	bhi.n	8002e56 <HAL_ADC_ConfigChannel+0x86>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_ADC_ConfigChannel+0x54>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002e4d 	.word	0x08002e4d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	220c      	movs	r2, #12
 8002e38:	605a      	str	r2, [r3, #4]
          break;
 8002e3a:	e011      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2212      	movs	r2, #18
 8002e40:	605a      	str	r2, [r3, #4]
          break;
 8002e42:	e00d      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2218      	movs	r2, #24
 8002e48:	605a      	str	r2, [r3, #4]
          break;
 8002e4a:	e009      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e52:	605a      	str	r2, [r3, #4]
          break;
 8002e54:	e004      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2206      	movs	r2, #6
 8002e5a:	605a      	str	r2, [r3, #4]
          break;
 8002e5c:	e000      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002e5e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f7ff face 	bl	800240e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fbe1 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fbed 	bl	8002664 <LL_ADC_INJ_IsConversionOngoing>
 8002e8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 81c1 	bne.w	800321a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 81bc 	bne.w	800321a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eaa:	d10f      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7ff fae8 	bl	800248c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fa7c 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002eca:	e00e      	b.n	8002eea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f7ff fad7 	bl	800248c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fa6c 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d00a      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6919      	ldr	r1, [r3, #16]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f1c:	f7ff f9fc 	bl	8002318 <LL_ADC_SetOffset>
 8002f20:	e17b      	b.n	800321a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fa19 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x17e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fa0e 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	0e9b      	lsrs	r3, r3, #26
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	e01e      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x1bc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fa03 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e004      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x1d4>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	e018      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x206>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e004      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d106      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f9d2 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff f9b6 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x244>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f9ab 	bl	8002360 <LL_ADC_GetOffsetChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	e01e      	b.n	8003052 <HAL_ADC_ConfigChannel+0x282>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff f9a0 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800303a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e004      	b.n	8003050 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_ADC_ConfigChannel+0x29a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	e018      	b.n	800309c <HAL_ADC_ConfigChannel+0x2cc>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800307e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f96f 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f953 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x30a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2102      	movs	r1, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f948 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	e01e      	b.n	8003118 <HAL_ADC_ConfigChannel+0x348>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f93d 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80030f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e004      	b.n	8003116 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800310c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x360>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	e016      	b.n	800315e <HAL_ADC_ConfigChannel+0x38e>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e004      	b.n	800315e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800315e:	429a      	cmp	r2, r3
 8003160:	d106      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f90e 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2103      	movs	r1, #3
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f8f2 	bl	8002360 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x3cc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2103      	movs	r1, #3
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f8e7 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	e017      	b.n	80031cc <HAL_ADC_ConfigChannel+0x3fc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2103      	movs	r1, #3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f8dc 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80031be:	2320      	movs	r3, #32
 80031c0:	e003      	b.n	80031ca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80031c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x414>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	e011      	b.n	8003208 <HAL_ADC_ConfigChannel+0x438>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80031f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e003      	b.n	8003208 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003208:	429a      	cmp	r2, r3
 800320a:	d106      	bne.n	800321a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2200      	movs	r2, #0
 8003212:	2103      	movs	r1, #3
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f8b9 	bl	800238c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f9e6 	bl	80025f0 <LL_ADC_IsEnabled>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 8140 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	461a      	mov	r2, r3
 800323a:	f7ff f953 	bl	80024e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4a8f      	ldr	r2, [pc, #572]	; (8003480 <HAL_ADC_ConfigChannel+0x6b0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	f040 8131 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x4a2>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2b09      	cmp	r3, #9
 8003268:	bf94      	ite	ls
 800326a:	2301      	movls	r3, #1
 800326c:	2300      	movhi	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e019      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x4d6>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003282:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800328e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2b09      	cmp	r3, #9
 800329e:	bf94      	ite	ls
 80032a0:	2301      	movls	r3, #1
 80032a2:	2300      	movhi	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d079      	beq.n	800339e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x4f6>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	3301      	adds	r3, #1
 80032be:	069b      	lsls	r3, r3, #26
 80032c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c4:	e015      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x522>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e003      	b.n	80032ea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80032e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	069b      	lsls	r3, r3, #26
 80032ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x542>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	3301      	adds	r3, #1
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	e017      	b.n	8003342 <HAL_ADC_ConfigChannel+0x572>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e003      	b.n	8003336 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800332e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	ea42 0103 	orr.w	r1, r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x598>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	f003 021f 	and.w	r2, r3, #31
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	051b      	lsls	r3, r3, #20
 8003366:	e018      	b.n	800339a <HAL_ADC_ConfigChannel+0x5ca>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e003      	b.n	800338c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f003 021f 	and.w	r2, r3, #31
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800339a:	430b      	orrs	r3, r1
 800339c:	e081      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x5ea>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	3301      	adds	r3, #1
 80033b2:	069b      	lsls	r3, r3, #26
 80033b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b8:	e015      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x616>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e003      	b.n	80033de <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	069b      	lsls	r3, r3, #26
 80033e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x636>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	e017      	b.n	8003436 <HAL_ADC_ConfigChannel+0x666>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
  return result;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e003      	b.n	800342a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	ea42 0103 	orr.w	r1, r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x692>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	3b1e      	subs	r3, #30
 800345a:	051b      	lsls	r3, r3, #20
 800345c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003460:	e01e      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x6d0>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	613b      	str	r3, [r7, #16]
  return result;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e006      	b.n	800348c <HAL_ADC_ConfigChannel+0x6bc>
 800347e:	bf00      	nop
 8003480:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	3b1e      	subs	r3, #30
 800349a:	051b      	lsls	r3, r3, #20
 800349c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a0:	430b      	orrs	r3, r1
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	6892      	ldr	r2, [r2, #8]
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fe fff0 	bl	800248c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d06c      	beq.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b8:	483c      	ldr	r0, [pc, #240]	; (80035ac <HAL_ADC_ConfigChannel+0x7dc>)
 80034ba:	f7fe ff1f 	bl	80022fc <LL_ADC_GetCommonPathInternalCh>
 80034be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <HAL_ADC_ConfigChannel+0x7e0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d127      	bne.n	800351c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d121      	bne.n	800351c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a35      	ldr	r2, [pc, #212]	; (80035b4 <HAL_ADC_ConfigChannel+0x7e4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d157      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ea:	4619      	mov	r1, r3
 80034ec:	482f      	ldr	r0, [pc, #188]	; (80035ac <HAL_ADC_ConfigChannel+0x7dc>)
 80034ee:	f7fe fef2 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_ADC_ConfigChannel+0x7e8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <HAL_ADC_ConfigChannel+0x7ec>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800350c:	e002      	b.n	8003514 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b01      	subs	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f9      	bne.n	800350e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800351a:	e03a      	b.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d113      	bne.n	800354e <HAL_ADC_ConfigChannel+0x77e>
 8003526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800352a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10d      	bne.n	800354e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d12a      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800353c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003544:	4619      	mov	r1, r3
 8003546:	4819      	ldr	r0, [pc, #100]	; (80035ac <HAL_ADC_ConfigChannel+0x7dc>)
 8003548:	f7fe fec5 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800354c:	e021      	b.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d11c      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800355c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d111      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003572:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003576:	4619      	mov	r1, r3
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <HAL_ADC_ConfigChannel+0x7dc>)
 800357a:	f7fe feac 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
 800357e:	e008      	b.n	8003592 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800359a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800359e:	4618      	mov	r0, r3
 80035a0:	37d8      	adds	r7, #216	; 0xd8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	80080000 	.word	0x80080000
 80035ac:	50040300 	.word	0x50040300
 80035b0:	c7520000 	.word	0xc7520000
 80035b4:	50040000 	.word	0x50040000
 80035b8:	20000000 	.word	0x20000000
 80035bc:	053e2d63 	.word	0x053e2d63
 80035c0:	cb840000 	.word	0xcb840000
 80035c4:	80000001 	.word	0x80000001

080035c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f809 	bl	80025f0 <LL_ADC_IsEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d169      	bne.n	80036b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <ADC_Enable+0xfc>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e055      	b.n	80036ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe ffd8 	bl	80025c8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003618:	482b      	ldr	r0, [pc, #172]	; (80036c8 <ADC_Enable+0x100>)
 800361a:	f7fe fe6f 	bl	80022fc <LL_ADC_GetCommonPathInternalCh>
 800361e:	4603      	mov	r3, r0
 8003620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003628:	4b28      	ldr	r3, [pc, #160]	; (80036cc <ADC_Enable+0x104>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <ADC_Enable+0x108>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003642:	e002      	b.n	800364a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3b01      	subs	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003650:	f7fe fdfe 	bl	8002250 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003656:	e028      	b.n	80036aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe ffc7 	bl	80025f0 <LL_ADC_IsEnabled>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe ffab 	bl	80025c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003672:	f7fe fded 	bl	8002250 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d914      	bls.n	80036aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d00d      	beq.n	80036aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d1cf      	bne.n	8003658 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	8000003f 	.word	0x8000003f
 80036c8:	50040300 	.word	0x50040300
 80036cc:	20000000 	.word	0x20000000
 80036d0:	053e2d63 	.word	0x053e2d63

080036d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d14b      	bne.n	8003786 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d021      	beq.n	800374c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fe6b 	bl	80023e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d032      	beq.n	800377e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d12b      	bne.n	800377e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11f      	bne.n	800377e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	659a      	str	r2, [r3, #88]	; 0x58
 800374a:	e018      	b.n	800377e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d111      	bne.n	800377e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7fd faee 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003784:	e00e      	b.n	80037a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff fb12 	bl	8002dbc <HAL_ADC_ErrorCallback>
}
 8003798:	e004      	b.n	80037a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff faea 	bl	8002d94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f043 0204 	orr.w	r2, r3, #4
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fae4 	bl	8002dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0ed      	b.n	8003a4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fe fa1c 	bl	8001cbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003894:	f7fe fcdc 	bl	8002250 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800389a:	e012      	b.n	80038c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800389c:	f7fe fcd8 	bl	8002250 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d90b      	bls.n	80038c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0c5      	b.n	8003a4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0e5      	beq.n	800389c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0202 	bic.w	r2, r2, #2
 80038de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e0:	f7fe fcb6 	bl	8002250 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038e6:	e012      	b.n	800390e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038e8:	f7fe fcb2 	bl	8002250 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b0a      	cmp	r3, #10
 80038f4:	d90b      	bls.n	800390e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2205      	movs	r2, #5
 8003906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e09f      	b.n	8003a4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7e1b      	ldrb	r3, [r3, #24]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d108      	bne.n	8003936 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e007      	b.n	8003946 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7e5b      	ldrb	r3, [r3, #25]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e007      	b.n	8003970 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e9b      	ldrb	r3, [r3, #26]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d108      	bne.n	800398a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0220 	orr.w	r2, r2, #32
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e007      	b.n	800399a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0220 	bic.w	r2, r2, #32
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7edb      	ldrb	r3, [r3, #27]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e007      	b.n	80039c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0210 	orr.w	r2, r2, #16
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7f1b      	ldrb	r3, [r3, #28]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d108      	bne.n	80039de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e007      	b.n	80039ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0208 	bic.w	r2, r2, #8
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7f5b      	ldrb	r3, [r3, #29]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0204 	orr.w	r2, r2, #4
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e007      	b.n	8003a18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	ea42 0103 	orr.w	r1, r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b087      	sub	sp, #28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d003      	beq.n	8003a7c <HAL_CAN_ConfigFilter+0x26>
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	f040 80aa 	bne.w	8003bd0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2201      	movs	r2, #1
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d123      	bne.n	8003afe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	401a      	ands	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ad8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3248      	adds	r2, #72	; 0x48
 8003ade:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003af2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	3348      	adds	r3, #72	; 0x48
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d122      	bne.n	8003b4c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3248      	adds	r2, #72	; 0x48
 8003b2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	3348      	adds	r3, #72	; 0x48
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b66:	e007      	b.n	8003b78 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b92:	e007      	b.n	8003ba4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e006      	b.n	8003bde <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d12e      	bne.n	8003c5c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c16:	f7fe fb1b 	bl	8002250 <HAL_GetTick>
 8003c1a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c1c:	e012      	b.n	8003c44 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c1e:	f7fe fb17 	bl	8002250 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b0a      	cmp	r3, #10
 8003c2a:	d90b      	bls.n	8003c44 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e012      	b.n	8003c6a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e006      	b.n	8003c6a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d003      	beq.n	8003c96 <HAL_CAN_GetRxMessage+0x24>
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	f040 80f3 	bne.w	8003e7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10e      	bne.n	8003cba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0e7      	b.n	8003e8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0d8      	b.n	8003e8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	331b      	adds	r3, #27
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4413      	add	r3, r2
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0204 	and.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	331b      	adds	r3, #27
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0d5b      	lsrs	r3, r3, #21
 8003d06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e00b      	b.n	8003d28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	331b      	adds	r3, #27
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	4413      	add	r3, r2
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	08db      	lsrs	r3, r3, #3
 8003d20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	331b      	adds	r3, #27
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4413      	add	r3, r2
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0202 	and.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	331b      	adds	r3, #27
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	331b      	adds	r3, #27
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	331b      	adds	r3, #27
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	4413      	add	r3, r2
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0a1a      	lsrs	r2, r3, #8
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0c1a      	lsrs	r2, r3, #16
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	3302      	adds	r3, #2
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e1a      	lsrs	r2, r3, #24
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	3303      	adds	r3, #3
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	0a1a      	lsrs	r2, r3, #8
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	3305      	adds	r3, #5
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0c1a      	lsrs	r2, r3, #16
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3306      	adds	r3, #6
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	0e1a      	lsrs	r2, r3, #24
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	3307      	adds	r3, #7
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d108      	bne.n	8003e68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0220 	orr.w	r2, r2, #32
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	e007      	b.n	8003e78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0220 	orr.w	r2, r2, #32
 8003e76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e006      	b.n	8003e8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d002      	beq.n	8003eb4 <HAL_CAN_ActivateNotification+0x1e>
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d109      	bne.n	8003ec8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6959      	ldr	r1, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e006      	b.n	8003ed6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	; 0x28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d07c      	beq.n	8004022 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d023      	beq.n	8003f7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f983 	bl	8004250 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f4a:	e016      	b.n	8003f7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	e00c      	b.n	8003f7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	e002      	b.n	8003f7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f989 	bl	800428c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d024      	beq.n	8003fce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f963 	bl	8004264 <HAL_CAN_TxMailbox1CompleteCallback>
 8003f9e:	e016      	b.n	8003fce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	e00c      	b.n	8003fce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	e002      	b.n	8003fce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f969 	bl	80042a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d024      	beq.n	8004022 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fe0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f943 	bl	8004278 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ff2:	e016      	b.n	8004022 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e00c      	b.n	8004022 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e002      	b.n	8004022 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f949 	bl	80042b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2210      	movs	r2, #16
 8004044:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2208      	movs	r2, #8
 8004060:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f930 	bl	80042c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc ff1f 	bl	8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2210      	movs	r2, #16
 80040a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2208      	movs	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f912 	bl	80042f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f8f9 	bl	80042dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2210      	movs	r2, #16
 8004104:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8fc 	bl	8004304 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8f5 	bl	8004318 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d07b      	beq.n	8004230 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d072      	beq.n	8004228 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d043      	beq.n	8004228 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03e      	beq.n	8004228 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041b0:	2b60      	cmp	r3, #96	; 0x60
 80041b2:	d02b      	beq.n	800420c <HAL_CAN_IRQHandler+0x32a>
 80041b4:	2b60      	cmp	r3, #96	; 0x60
 80041b6:	d82e      	bhi.n	8004216 <HAL_CAN_IRQHandler+0x334>
 80041b8:	2b50      	cmp	r3, #80	; 0x50
 80041ba:	d022      	beq.n	8004202 <HAL_CAN_IRQHandler+0x320>
 80041bc:	2b50      	cmp	r3, #80	; 0x50
 80041be:	d82a      	bhi.n	8004216 <HAL_CAN_IRQHandler+0x334>
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d019      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x316>
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d826      	bhi.n	8004216 <HAL_CAN_IRQHandler+0x334>
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d010      	beq.n	80041ee <HAL_CAN_IRQHandler+0x30c>
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d822      	bhi.n	8004216 <HAL_CAN_IRQHandler+0x334>
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d002      	beq.n	80041da <HAL_CAN_IRQHandler+0x2f8>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d005      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041d8:	e01d      	b.n	8004216 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041e2:	e019      	b.n	8004218 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f043 0310 	orr.w	r3, r3, #16
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041ec:	e014      	b.n	8004218 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	f043 0320 	orr.w	r3, r3, #32
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041f6:	e00f      	b.n	8004218 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004200:	e00a      	b.n	8004218 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800420a:	e005      	b.n	8004218 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004214:	e000      	b.n	8004218 <HAL_CAN_IRQHandler+0x336>
            break;
 8004216:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004226:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2204      	movs	r2, #4
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f872 	bl	800432c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004248:	bf00      	nop
 800424a:	3728      	adds	r7, #40	; 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <__NVIC_SetPriorityGrouping+0x44>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800435c:	4013      	ands	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800436c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004372:	4a04      	ldr	r2, [pc, #16]	; (8004384 <__NVIC_SetPriorityGrouping+0x44>)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	60d3      	str	r3, [r2, #12]
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <__NVIC_GetPriorityGrouping+0x18>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 0307 	and.w	r3, r3, #7
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	db0b      	blt.n	80043ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	4907      	ldr	r1, [pc, #28]	; (80043dc <__NVIC_EnableIRQ+0x38>)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2001      	movs	r0, #1
 80043c6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000e100 	.word	0xe000e100

080043e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db0a      	blt.n	800440a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	490c      	ldr	r1, [pc, #48]	; (800442c <__NVIC_SetPriority+0x4c>)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	440b      	add	r3, r1
 8004404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004408:	e00a      	b.n	8004420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4908      	ldr	r1, [pc, #32]	; (8004430 <__NVIC_SetPriority+0x50>)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	3b04      	subs	r3, #4
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	440b      	add	r3, r1
 800441e:	761a      	strb	r2, [r3, #24]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000e100 	.word	0xe000e100
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f1c3 0307 	rsb	r3, r3, #7
 800444e:	2b04      	cmp	r3, #4
 8004450:	bf28      	it	cs
 8004452:	2304      	movcs	r3, #4
 8004454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3304      	adds	r3, #4
 800445a:	2b06      	cmp	r3, #6
 800445c:	d902      	bls.n	8004464 <NVIC_EncodePriority+0x30>
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3b03      	subs	r3, #3
 8004462:	e000      	b.n	8004466 <NVIC_EncodePriority+0x32>
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	401a      	ands	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800447c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa01 f303 	lsl.w	r3, r1, r3
 8004486:	43d9      	mvns	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	4313      	orrs	r3, r2
         );
}
 800448e:	4618      	mov	r0, r3
 8004490:	3724      	adds	r7, #36	; 0x24
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff ff4c 	bl	8004340 <__NVIC_SetPriorityGrouping>
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044c2:	f7ff ff61 	bl	8004388 <__NVIC_GetPriorityGrouping>
 80044c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f7ff ffb1 	bl	8004434 <NVIC_EncodePriority>
 80044d2:	4602      	mov	r2, r0
 80044d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff80 	bl	80043e0 <__NVIC_SetPriority>
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ff54 	bl	80043a4 <__NVIC_EnableIRQ>
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e08d      	b.n	8004632 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_DMA_Init+0x138>)
 800451e:	429a      	cmp	r2, r3
 8004520:	d80f      	bhi.n	8004542 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	4b45      	ldr	r3, [pc, #276]	; (8004640 <HAL_DMA_Init+0x13c>)
 800452a:	4413      	add	r3, r2
 800452c:	4a45      	ldr	r2, [pc, #276]	; (8004644 <HAL_DMA_Init+0x140>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	009a      	lsls	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a42      	ldr	r2, [pc, #264]	; (8004648 <HAL_DMA_Init+0x144>)
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
 8004540:	e00e      	b.n	8004560 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_DMA_Init+0x148>)
 800454a:	4413      	add	r3, r2
 800454c:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <HAL_DMA_Init+0x140>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	009a      	lsls	r2, r3, #2
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a3c      	ldr	r2, [pc, #240]	; (8004650 <HAL_DMA_Init+0x14c>)
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9b6 	bl	8004924 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c0:	d102      	bne.n	80045c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045dc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_DMA_Init+0x104>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d80c      	bhi.n	8004608 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9d6 	bl	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	e008      	b.n	800461a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40020407 	.word	0x40020407
 8004640:	bffdfff8 	.word	0xbffdfff8
 8004644:	cccccccd 	.word	0xcccccccd
 8004648:	40020000 	.word	0x40020000
 800464c:	bffdfbf8 	.word	0xbffdfbf8
 8004650:	40020400 	.word	0x40020400

08004654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_DMA_Start_IT+0x20>
 8004670:	2302      	movs	r3, #2
 8004672:	e066      	b.n	8004742 <HAL_DMA_Start_IT+0xee>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d155      	bne.n	8004734 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f8fb 	bl	80048a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 020e 	orr.w	r2, r2, #14
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e00f      	b.n	80046ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0204 	bic.w	r2, r2, #4
 80046da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 020a 	orr.w	r2, r2, #10
 80046ea:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004708:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004720:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e005      	b.n	8004740 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004740:	7dfb      	ldrb	r3, [r7, #23]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 031c 	and.w	r3, r3, #28
 800476a:	2204      	movs	r2, #4
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d026      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d021      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d107      	bne.n	800479e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0204 	bic.w	r2, r2, #4
 800479c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f003 021c 	and.w	r2, r3, #28
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2104      	movs	r1, #4
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d071      	beq.n	800489e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80047c2:	e06c      	b.n	800489e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f003 031c 	and.w	r3, r3, #28
 80047cc:	2202      	movs	r2, #2
 80047ce:	409a      	lsls	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d02e      	beq.n	8004836 <HAL_DMA_IRQHandler+0xec>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d029      	beq.n	8004836 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 020a 	bic.w	r2, r2, #10
 80047fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	f003 021c 	and.w	r2, r3, #28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2102      	movs	r1, #2
 8004816:	fa01 f202 	lsl.w	r2, r1, r2
 800481a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d038      	beq.n	800489e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004834:	e033      	b.n	800489e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f003 031c 	and.w	r3, r3, #28
 800483e:	2208      	movs	r2, #8
 8004840:	409a      	lsls	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02a      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x156>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d025      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 020e 	bic.w	r2, r2, #14
 8004862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f003 021c 	and.w	r2, r3, #28
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f202 	lsl.w	r2, r1, r2
 8004876:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
}
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048be:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048d0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f003 021c 	and.w	r2, r3, #28
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f202 	lsl.w	r2, r1, r2
 80048e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d108      	bne.n	8004908 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004906:	e007      	b.n	8004918 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004934:	429a      	cmp	r2, r3
 8004936:	d80a      	bhi.n	800494e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004944:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6493      	str	r3, [r2, #72]	; 0x48
 800494c:	e007      	b.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004958:	4413      	add	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3b08      	subs	r3, #8
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004974:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40020407 	.word	0x40020407
 8004994:	4002081c 	.word	0x4002081c
 8004998:	cccccccd 	.word	0xcccccccd
 800499c:	40020880 	.word	0x40020880

080049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	1000823f 	.word	0x1000823f
 80049e4:	40020940 	.word	0x40020940

080049e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f6:	e166      	b.n	8004cc6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8158 	beq.w	8004cc0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d005      	beq.n	8004a28 <HAL_GPIO_Init+0x40>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d130      	bne.n	8004a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2203      	movs	r2, #3
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0201 	and.w	r2, r3, #1
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d017      	beq.n	8004ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d123      	bne.n	8004b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	08da      	lsrs	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3208      	adds	r2, #8
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	6939      	ldr	r1, [r7, #16]
 8004b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	2203      	movs	r2, #3
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0203 	and.w	r2, r3, #3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80b2 	beq.w	8004cc0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5c:	4b61      	ldr	r3, [pc, #388]	; (8004ce4 <HAL_GPIO_Init+0x2fc>)
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	4a60      	ldr	r2, [pc, #384]	; (8004ce4 <HAL_GPIO_Init+0x2fc>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6613      	str	r3, [r2, #96]	; 0x60
 8004b68:	4b5e      	ldr	r3, [pc, #376]	; (8004ce4 <HAL_GPIO_Init+0x2fc>)
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b74:	4a5c      	ldr	r2, [pc, #368]	; (8004ce8 <HAL_GPIO_Init+0x300>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b9e:	d02b      	beq.n	8004bf8 <HAL_GPIO_Init+0x210>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_GPIO_Init+0x304>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d025      	beq.n	8004bf4 <HAL_GPIO_Init+0x20c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a51      	ldr	r2, [pc, #324]	; (8004cf0 <HAL_GPIO_Init+0x308>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d01f      	beq.n	8004bf0 <HAL_GPIO_Init+0x208>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a50      	ldr	r2, [pc, #320]	; (8004cf4 <HAL_GPIO_Init+0x30c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d019      	beq.n	8004bec <HAL_GPIO_Init+0x204>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a4f      	ldr	r2, [pc, #316]	; (8004cf8 <HAL_GPIO_Init+0x310>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_GPIO_Init+0x200>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a4e      	ldr	r2, [pc, #312]	; (8004cfc <HAL_GPIO_Init+0x314>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00d      	beq.n	8004be4 <HAL_GPIO_Init+0x1fc>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a4d      	ldr	r2, [pc, #308]	; (8004d00 <HAL_GPIO_Init+0x318>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <HAL_GPIO_Init+0x1f8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a4c      	ldr	r2, [pc, #304]	; (8004d04 <HAL_GPIO_Init+0x31c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_GPIO_Init+0x1f4>
 8004bd8:	2307      	movs	r3, #7
 8004bda:	e00e      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004bdc:	2308      	movs	r3, #8
 8004bde:	e00c      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004be0:	2306      	movs	r3, #6
 8004be2:	e00a      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004be4:	2305      	movs	r3, #5
 8004be6:	e008      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004be8:	2304      	movs	r3, #4
 8004bea:	e006      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004bec:	2303      	movs	r3, #3
 8004bee:	e004      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e002      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_GPIO_Init+0x212>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	f002 0203 	and.w	r2, r2, #3
 8004c00:	0092      	lsls	r2, r2, #2
 8004c02:	4093      	lsls	r3, r2
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c0a:	4937      	ldr	r1, [pc, #220]	; (8004ce8 <HAL_GPIO_Init+0x300>)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	3302      	adds	r3, #2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c18:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c3c:	4a32      	ldr	r2, [pc, #200]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c66:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c6c:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <HAL_GPIO_Init+0x320>)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f ae91 	bne.w	80049f8 <HAL_GPIO_Init+0x10>
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	48000400 	.word	0x48000400
 8004cf0:	48000800 	.word	0x48000800
 8004cf4:	48000c00 	.word	0x48000c00
 8004cf8:	48001000 	.word	0x48001000
 8004cfc:	48001400 	.word	0x48001400
 8004d00:	48001800 	.word	0x48001800
 8004d04:	48001c00 	.word	0x48001c00
 8004d08:	40010400 	.word	0x40010400

08004d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e001      	b.n	8004d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d4c:	787b      	ldrb	r3, [r7, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d58:	e002      	b.n	8004d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d102      	bne.n	8004d84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d82:	e00b      	b.n	8004d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	d102      	bne.n	8004d9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d98:	e000      	b.n	8004d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40007000 	.word	0x40007000

08004dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d141      	bne.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dba:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d131      	bne.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc8:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dce:	4a46      	ldr	r2, [pc, #280]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004de0:	4a41      	ldr	r2, [pc, #260]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2232      	movs	r2, #50	; 0x32
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	4a3f      	ldr	r2, [pc, #252]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	0c9b      	lsrs	r3, r3, #18
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfe:	e002      	b.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d102      	bne.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f2      	bne.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e1a:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e26:	d158      	bne.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e057      	b.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e32:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e3c:	e04d      	b.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d141      	bne.n	8004eca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e52:	d131      	bne.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e54:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5a:	4a23      	ldr	r2, [pc, #140]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e64:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2232      	movs	r2, #50	; 0x32
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	0c9b      	lsrs	r3, r3, #18
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e8a:	e002      	b.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d102      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f2      	bne.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d112      	bne.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e011      	b.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ec8:	e007      	b.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	20000000 	.word	0x20000000
 8004ef0:	431bde83 	.word	0x431bde83

08004ef4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f02:	6053      	str	r3, [r2, #4]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40007000 	.word	0x40007000

08004f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 bc08 	b.w	8005738 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f28:	4b96      	ldr	r3, [pc, #600]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f32:	4b94      	ldr	r3, [pc, #592]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80e4 	beq.w	8005112 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4c>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	f040 808b 	bne.w	800506e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	f040 8087 	bne.w	800506e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f60:	4b88      	ldr	r3, [pc, #544]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_OscConfig+0x64>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e3df      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	4b81      	ldr	r3, [pc, #516]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_RCC_OscConfig+0x7e>
 8004f88:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f90:	e005      	b.n	8004f9e <HAL_RCC_OscConfig+0x8a>
 8004f92:	4b7c      	ldr	r3, [pc, #496]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d223      	bcs.n	8004fea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fdfc 	bl	8005ba4 <RCC_SetFlashLatencyFromMSIRange>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e3c0      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb6:	4b73      	ldr	r3, [pc, #460]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a72      	ldr	r2, [pc, #456]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fbc:	f043 0308 	orr.w	r3, r3, #8
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b70      	ldr	r3, [pc, #448]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	496d      	ldr	r1, [pc, #436]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd4:	4b6b      	ldr	r3, [pc, #428]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	4968      	ldr	r1, [pc, #416]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	e025      	b.n	8005036 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fea:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	f043 0308 	orr.w	r3, r3, #8
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b63      	ldr	r3, [pc, #396]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	4960      	ldr	r1, [pc, #384]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005008:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	495b      	ldr	r1, [pc, #364]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fdbc 	bl	8005ba4 <RCC_SetFlashLatencyFromMSIRange>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e380      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005036:	f000 fcc1 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b51      	ldr	r3, [pc, #324]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	4950      	ldr	r1, [pc, #320]	; (8005188 <HAL_RCC_OscConfig+0x274>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	4a4e      	ldr	r2, [pc, #312]	; (800518c <HAL_RCC_OscConfig+0x278>)
 8005054:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005056:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <HAL_RCC_OscConfig+0x27c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fc ff08 	bl	8001e70 <HAL_InitTick>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d052      	beq.n	8005110 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	e364      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d032      	beq.n	80050dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005076:	4b43      	ldr	r3, [pc, #268]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a42      	ldr	r2, [pc, #264]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005082:	f7fd f8e5 	bl	8002250 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800508a:	f7fd f8e1 	bl	8002250 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e34d      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800509c:	4b39      	ldr	r3, [pc, #228]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a8:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a35      	ldr	r2, [pc, #212]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050ae:	f043 0308 	orr.w	r3, r3, #8
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4930      	ldr	r1, [pc, #192]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	492b      	ldr	r1, [pc, #172]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
 80050da:	e01a      	b.n	8005112 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050dc:	4b29      	ldr	r3, [pc, #164]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a28      	ldr	r2, [pc, #160]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050e8:	f7fd f8b2 	bl	8002250 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050f0:	f7fd f8ae 	bl	8002250 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e31a      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x1dc>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d073      	beq.n	8005206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d005      	beq.n	8005130 <HAL_RCC_OscConfig+0x21c>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	d10e      	bne.n	8005148 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d10b      	bne.n	8005148 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d063      	beq.n	8005204 <HAL_RCC_OscConfig+0x2f0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d15f      	bne.n	8005204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e2f7      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d106      	bne.n	8005160 <HAL_RCC_OscConfig+0x24c>
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e025      	b.n	80051ac <HAL_RCC_OscConfig+0x298>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005168:	d114      	bne.n	8005194 <HAL_RCC_OscConfig+0x280>
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a05      	ldr	r2, [pc, #20]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b03      	ldr	r3, [pc, #12]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a02      	ldr	r2, [pc, #8]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e013      	b.n	80051ac <HAL_RCC_OscConfig+0x298>
 8005184:	40021000 	.word	0x40021000
 8005188:	08015fdc 	.word	0x08015fdc
 800518c:	20000000 	.word	0x20000000
 8005190:	20000004 	.word	0x20000004
 8005194:	4ba0      	ldr	r3, [pc, #640]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a9f      	ldr	r2, [pc, #636]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800519a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	4b9d      	ldr	r3, [pc, #628]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a9c      	ldr	r2, [pc, #624]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fd f84c 	bl	8002250 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051bc:	f7fd f848 	bl	8002250 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e2b4      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ce:	4b92      	ldr	r3, [pc, #584]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x2a8>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd f838 	bl	8002250 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd f834 	bl	8002250 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e2a0      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051f6:	4b88      	ldr	r3, [pc, #544]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2d0>
 8005202:	e000      	b.n	8005206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d060      	beq.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d005      	beq.n	8005224 <HAL_RCC_OscConfig+0x310>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d119      	bne.n	8005252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d116      	bne.n	8005252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005224:	4b7c      	ldr	r3, [pc, #496]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x328>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e27d      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b76      	ldr	r3, [pc, #472]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	4973      	ldr	r1, [pc, #460]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	e040      	b.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d023      	beq.n	80052a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525a:	4b6f      	ldr	r3, [pc, #444]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6e      	ldr	r2, [pc, #440]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fc fff3 	bl	8002250 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526e:	f7fc ffef 	bl	8002250 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e25b      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005280:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528c:	4b62      	ldr	r3, [pc, #392]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	495f      	ldr	r1, [pc, #380]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
 80052a0:	e018      	b.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a2:	4b5d      	ldr	r3, [pc, #372]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5c      	ldr	r2, [pc, #368]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fc ffcf 	bl	8002250 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fc ffcb 	bl	8002250 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e237      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d03c      	beq.n	800535a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01c      	beq.n	8005322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e8:	4b4b      	ldr	r3, [pc, #300]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ee:	4a4a      	ldr	r2, [pc, #296]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fc ffaa 	bl	8002250 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005300:	f7fc ffa6 	bl	8002250 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e212      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005312:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ef      	beq.n	8005300 <HAL_RCC_OscConfig+0x3ec>
 8005320:	e01b      	b.n	800535a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005328:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fc ff8d 	bl	8002250 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533a:	f7fc ff89 	bl	8002250 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e1f5      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800534c:	4b32      	ldr	r3, [pc, #200]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ef      	bne.n	800533a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80a6 	beq.w	80054b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800536c:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	4a26      	ldr	r2, [pc, #152]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	6593      	str	r3, [r2, #88]	; 0x58
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <HAL_RCC_OscConfig+0x508>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d118      	bne.n	80053d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a0:	4b1e      	ldr	r3, [pc, #120]	; (800541c <HAL_RCC_OscConfig+0x508>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <HAL_RCC_OscConfig+0x508>)
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ac:	f7fc ff50 	bl	8002250 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b4:	f7fc ff4c 	bl	8002250 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1b8      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <HAL_RCC_OscConfig+0x508>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <HAL_RCC_OscConfig+0x4d8>
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ea:	e029      	b.n	8005440 <HAL_RCC_OscConfig+0x52c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d115      	bne.n	8005420 <HAL_RCC_OscConfig+0x50c>
 80053f4:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	4a03      	ldr	r2, [pc, #12]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005414:	e014      	b.n	8005440 <HAL_RCC_OscConfig+0x52c>
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	40007000 	.word	0x40007000
 8005420:	4b9d      	ldr	r3, [pc, #628]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a9c      	ldr	r2, [pc, #624]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005430:	4b99      	ldr	r3, [pc, #612]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	4a98      	ldr	r2, [pc, #608]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d016      	beq.n	8005476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fc ff02 	bl	8002250 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005450:	f7fc fefe 	bl	8002250 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e168      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005466:	4b8c      	ldr	r3, [pc, #560]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ed      	beq.n	8005450 <HAL_RCC_OscConfig+0x53c>
 8005474:	e015      	b.n	80054a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fc feeb 	bl	8002250 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800547c:	e00a      	b.n	8005494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547e:	f7fc fee7 	bl	8002250 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f241 3288 	movw	r2, #5000	; 0x1388
 800548c:	4293      	cmp	r3, r2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e151      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005494:	4b80      	ldr	r3, [pc, #512]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1ed      	bne.n	800547e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a2:	7ffb      	ldrb	r3, [r7, #31]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d105      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a8:	4b7b      	ldr	r3, [pc, #492]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	4a7a      	ldr	r2, [pc, #488]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d03c      	beq.n	800553a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01c      	beq.n	8005502 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054c8:	4b73      	ldr	r3, [pc, #460]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ce:	4a72      	ldr	r2, [pc, #456]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fc feba 	bl	8002250 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e0:	f7fc feb6 	bl	8002250 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e122      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054f2:	4b69      	ldr	r3, [pc, #420]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ef      	beq.n	80054e0 <HAL_RCC_OscConfig+0x5cc>
 8005500:	e01b      	b.n	800553a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005502:	4b65      	ldr	r3, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005508:	4a63      	ldr	r2, [pc, #396]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fc fe9d 	bl	8002250 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551a:	f7fc fe99 	bl	8002250 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e105      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800552c:	4b5a      	ldr	r3, [pc, #360]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 800552e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ef      	bne.n	800551a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80f9 	beq.w	8005736 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	2b02      	cmp	r3, #2
 800554a:	f040 80cf 	bne.w	80056ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800554e:	4b52      	ldr	r3, [pc, #328]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	429a      	cmp	r2, r3
 8005560:	d12c      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	3b01      	subs	r3, #1
 800556e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d123      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d11b      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d113      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d109      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	3b01      	subs	r3, #1
 80055b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d071      	beq.n	80056a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d068      	beq.n	8005694 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055c2:	4b35      	ldr	r3, [pc, #212]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80055ce:	4b32      	ldr	r3, [pc, #200]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0ac      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055de:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055ea:	f7fc fe31 	bl	8002250 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fc fe2d 	bl	8002250 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e099      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f0      	bne.n	80055f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCC_OscConfig+0x788>)
 8005616:	4013      	ands	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005620:	3a01      	subs	r2, #1
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800562a:	0212      	lsls	r2, r2, #8
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005632:	0852      	lsrs	r2, r2, #1
 8005634:	3a01      	subs	r2, #1
 8005636:	0552      	lsls	r2, r2, #21
 8005638:	4311      	orrs	r1, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	3a01      	subs	r2, #1
 8005642:	0652      	lsls	r2, r2, #25
 8005644:	4311      	orrs	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800564a:	06d2      	lsls	r2, r2, #27
 800564c:	430a      	orrs	r2, r1
 800564e:	4912      	ldr	r1, [pc, #72]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005650:	4313      	orrs	r3, r2
 8005652:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005654:	4b10      	ldr	r3, [pc, #64]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 800565a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800565e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005660:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a0c      	ldr	r2, [pc, #48]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800566a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800566c:	f7fc fdf0 	bl	8002250 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005674:	f7fc fdec 	bl	8002250 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e058      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005692:	e050      	b.n	8005736 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e04f      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
 8005698:	40021000 	.word	0x40021000
 800569c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d144      	bne.n	8005736 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a23      	ldr	r2, [pc, #140]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056c4:	f7fc fdc4 	bl	8002250 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fc fdc0 	bl	8002250 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e02c      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056de:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x7b8>
 80056ea:	e024      	b.n	8005736 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d01f      	beq.n	8005732 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a12      	ldr	r2, [pc, #72]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fc fda7 	bl	8002250 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005706:	f7fc fda3 	bl	8002250 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e00f      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	4905      	ldr	r1, [pc, #20]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_OscConfig+0x830>)
 800572c:	4013      	ands	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
 8005730:	e001      	b.n	8005736 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	feeefffc 	.word	0xfeeefffc

08005748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e11d      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b90      	ldr	r3, [pc, #576]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d910      	bls.n	8005790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 020f 	bic.w	r2, r3, #15
 8005776:	498b      	ldr	r1, [pc, #556]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b89      	ldr	r3, [pc, #548]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e105      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d908      	bls.n	80057be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ac:	4b7e      	ldr	r3, [pc, #504]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	497b      	ldr	r1, [pc, #492]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d079      	beq.n	80058be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d11e      	bne.n	8005810 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	4b75      	ldr	r3, [pc, #468]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0dc      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80057e2:	f000 fa39 	bl	8005c58 <RCC_GetSysClockFreqFromPLLSource>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4a70      	ldr	r2, [pc, #448]	; (80059ac <HAL_RCC_ClockConfig+0x264>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d946      	bls.n	800587c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057ee:	4b6e      	ldr	r3, [pc, #440]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d140      	bne.n	800587c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fa:	4b6b      	ldr	r3, [pc, #428]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005802:	4a69      	ldr	r2, [pc, #420]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e035      	b.n	800587c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005818:	4b63      	ldr	r3, [pc, #396]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d115      	bne.n	8005850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0b9      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005830:	4b5d      	ldr	r3, [pc, #372]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0ad      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005840:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0a5      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005850:	f000 f8b4 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8005854:	4603      	mov	r3, r0
 8005856:	4a55      	ldr	r2, [pc, #340]	; (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d90f      	bls.n	800587c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800585c:	4b52      	ldr	r3, [pc, #328]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005868:	4b4f      	ldr	r3, [pc, #316]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005870:	4a4d      	ldr	r2, [pc, #308]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800587c:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 0203 	bic.w	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4947      	ldr	r1, [pc, #284]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588e:	f7fc fcdf 	bl	8002250 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005894:	e00a      	b.n	80058ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005896:	f7fc fcdb 	bl	8002250 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e077      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ac:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 020c 	and.w	r2, r3, #12
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d1eb      	bne.n	8005896 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d105      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058c4:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a37      	ldr	r2, [pc, #220]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d208      	bcs.n	80058fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ec:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	492b      	ldr	r1, [pc, #172]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058fe:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d210      	bcs.n	800592e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590c:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 020f 	bic.w	r2, r3, #15
 8005914:	4923      	ldr	r1, [pc, #140]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591c:	4b21      	ldr	r3, [pc, #132]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d001      	beq.n	800592e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e036      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4918      	ldr	r1, [pc, #96]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005948:	4313      	orrs	r3, r2
 800594a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4910      	ldr	r1, [pc, #64]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005968:	4313      	orrs	r3, r2
 800596a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800596c:	f000 f826 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8005970:	4602      	mov	r2, r0
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	490c      	ldr	r1, [pc, #48]	; (80059b0 <HAL_RCC_ClockConfig+0x268>)
 800597e:	5ccb      	ldrb	r3, [r1, r3]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <HAL_RCC_ClockConfig+0x26c>)
 800598a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_RCC_ClockConfig+0x270>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fc fa6d 	bl	8001e70 <HAL_InitTick>
 8005996:	4603      	mov	r3, r0
 8005998:	73fb      	strb	r3, [r7, #15]

  return status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40022000 	.word	0x40022000
 80059a8:	40021000 	.word	0x40021000
 80059ac:	04c4b400 	.word	0x04c4b400
 80059b0:	08015fdc 	.word	0x08015fdc
 80059b4:	20000000 	.word	0x20000000
 80059b8:	20000004 	.word	0x20000004

080059bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ca:	4b3e      	ldr	r3, [pc, #248]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d4:	4b3b      	ldr	r3, [pc, #236]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0x34>
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d121      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d11e      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059f0:	4b34      	ldr	r3, [pc, #208]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059fc:	4b31      	ldr	r3, [pc, #196]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e005      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a18:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10d      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	e004      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a40:	4b22      	ldr	r3, [pc, #136]	; (8005acc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d134      	bne.n	8005ab4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0xac>
 8005a60:	e005      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a64:	617b      	str	r3, [r7, #20]
      break;
 8005a66:	e005      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a68:	4b18      	ldr	r3, [pc, #96]	; (8005acc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a6a:	617b      	str	r3, [r7, #20]
      break;
 8005a6c:	e002      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	617b      	str	r3, [r7, #20]
      break;
 8005a72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	3301      	adds	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	fb03 f202 	mul.w	r2, r3, r2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	0e5b      	lsrs	r3, r3, #25
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3724      	adds	r7, #36	; 0x24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	08015ff4 	.word	0x08015ff4
 8005acc:	00f42400 	.word	0x00f42400

08005ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000000 	.word	0x20000000

08005ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005aec:	f7ff fff0 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4904      	ldr	r1, [pc, #16]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	08015fec 	.word	0x08015fec

08005b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b18:	f7ff ffda 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	0adb      	lsrs	r3, r3, #11
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4904      	ldr	r1, [pc, #16]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	08015fec 	.word	0x08015fec

08005b40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0203 	and.w	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b68:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <HAL_RCC_GetClockConfig+0x60>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	601a      	str	r2, [r3, #0]
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40022000 	.word	0x40022000

08005ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bbc:	f7ff f8d6 	bl	8004d6c <HAL_PWREx_GetVoltageRange>
 8005bc0:	6178      	str	r0, [r7, #20]
 8005bc2:	e014      	b.n	8005bee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bc4:	4b22      	ldr	r3, [pc, #136]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	4a21      	ldr	r2, [pc, #132]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bce:	6593      	str	r3, [r2, #88]	; 0x58
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bdc:	f7ff f8c6 	bl	8004d6c <HAL_PWREx_GetVoltageRange>
 8005be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005be2:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf4:	d10b      	bne.n	8005c0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b80      	cmp	r3, #128	; 0x80
 8005bfa:	d913      	bls.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2ba0      	cmp	r3, #160	; 0xa0
 8005c00:	d902      	bls.n	8005c08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c02:	2302      	movs	r3, #2
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e00d      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c08:	2301      	movs	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	e00a      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b7f      	cmp	r3, #127	; 0x7f
 8005c12:	d902      	bls.n	8005c1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c14:	2302      	movs	r3, #2
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e004      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b70      	cmp	r3, #112	; 0x70
 8005c1e:	d101      	bne.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c20:	2301      	movs	r3, #1
 8005c22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f023 020f 	bic.w	r2, r3, #15
 8005c2c:	4909      	ldr	r1, [pc, #36]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c34:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40022000 	.word	0x40022000

08005c58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d00b      	beq.n	8005c86 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d825      	bhi.n	8005cc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d008      	beq.n	8005c8c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d11f      	bne.n	8005cc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005c80:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c82:	613b      	str	r3, [r7, #16]
    break;
 8005c84:	e01f      	b.n	8005cc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c88:	613b      	str	r3, [r7, #16]
    break;
 8005c8a:	e01c      	b.n	8005cc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c8c:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d107      	bne.n	8005ca8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e005      	b.n	8005cb4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005cb4:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	613b      	str	r3, [r7, #16]
    break;
 8005cbe:	e002      	b.n	8005cc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
    break;
 8005cc4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	fb03 f202 	mul.w	r2, r3, r2
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0e5b      	lsrs	r3, r3, #25
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d06:	683b      	ldr	r3, [r7, #0]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40021000 	.word	0x40021000
 8005d18:	00f42400 	.word	0x00f42400
 8005d1c:	08015ff4 	.word	0x08015ff4

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d040      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d02a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d825      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d48:	2b60      	cmp	r3, #96	; 0x60
 8005d4a:	d026      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d4c:	2b60      	cmp	r3, #96	; 0x60
 8005d4e:	d821      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d006      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	d81d      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d60:	e018      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	4a88      	ldr	r2, [pc, #544]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d6e:	e015      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fa82 	bl	8007280 <RCCEx_PLLSAI1_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d80:	e00c      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3320      	adds	r3, #32
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 fb6d 	bl	8007468 <RCCEx_PLLSAI2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	74fb      	strb	r3, [r7, #19]
      break;
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da2:	4b79      	ldr	r3, [pc, #484]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db0:	4975      	ldr	r1, [pc, #468]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005db8:	e001      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d047      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd2:	d030      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	d82a      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dde:	d02a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de4:	d824      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dea:	d008      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df0:	d81e      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005dfc:	e018      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dfe:	4b62      	ldr	r3, [pc, #392]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	4a61      	ldr	r2, [pc, #388]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e08:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e0a:	e015      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fa34 	bl	8007280 <RCCEx_PLLSAI1_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e1c:	e00c      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3320      	adds	r3, #32
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fb1f 	bl	8007468 <RCCEx_PLLSAI2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e2e:	e003      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	74fb      	strb	r3, [r7, #19]
      break;
 8005e34:	e000      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e38:	7cfb      	ldrb	r3, [r7, #19]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10b      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e3e:	4b52      	ldr	r3, [pc, #328]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	494e      	ldr	r1, [pc, #312]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e54:	e001      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 809f 	beq.w	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e6c:	4b46      	ldr	r3, [pc, #280]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e82:	4b41      	ldr	r3, [pc, #260]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	4a40      	ldr	r2, [pc, #256]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a3a      	ldr	r2, [pc, #232]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eaa:	f7fc f9d1 	bl	8002250 <HAL_GetTick>
 8005eae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005eb0:	e009      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb2:	f7fc f9cd 	bl	8002250 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d902      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ec4:	e005      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec6:	4b31      	ldr	r3, [pc, #196]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ef      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005ed2:	7cfb      	ldrb	r3, [r7, #19]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d15b      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01f      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d019      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f02:	4b21      	ldr	r3, [pc, #132]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f22:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d016      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fc f98c 	bl	8002250 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3c:	f7fc f988 	bl	8002250 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d902      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	74fb      	strb	r3, [r7, #19]
            break;
 8005f52:	e006      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0ec      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f62:	7cfb      	ldrb	r3, [r7, #19]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10c      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f78:	4903      	ldr	r1, [pc, #12]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f80:	e008      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f82:	7cfb      	ldrb	r3, [r7, #19]
 8005f84:	74bb      	strb	r3, [r7, #18]
 8005f86:	e005      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f94:	7c7b      	ldrb	r3, [r7, #17]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d105      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f9a:	4ba0      	ldr	r3, [pc, #640]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	4a9f      	ldr	r2, [pc, #636]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fb2:	4b9a      	ldr	r3, [pc, #616]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f023 0203 	bic.w	r2, r3, #3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc0:	4996      	ldr	r1, [pc, #600]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fd4:	4b91      	ldr	r3, [pc, #580]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f023 020c 	bic.w	r2, r3, #12
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	498e      	ldr	r1, [pc, #568]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ff6:	4b89      	ldr	r3, [pc, #548]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	4985      	ldr	r1, [pc, #532]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006018:	4b80      	ldr	r3, [pc, #512]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006026:	497d      	ldr	r1, [pc, #500]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800603a:	4b78      	ldr	r3, [pc, #480]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	4974      	ldr	r1, [pc, #464]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800605c:	4b6f      	ldr	r3, [pc, #444]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	496c      	ldr	r1, [pc, #432]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800607e:	4b67      	ldr	r3, [pc, #412]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608c:	4963      	ldr	r1, [pc, #396]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060a0:	4b5e      	ldr	r3, [pc, #376]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ae:	495b      	ldr	r1, [pc, #364]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060c2:	4b56      	ldr	r3, [pc, #344]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	4952      	ldr	r1, [pc, #328]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060e4:	4b4d      	ldr	r3, [pc, #308]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	494a      	ldr	r1, [pc, #296]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006106:	4b45      	ldr	r3, [pc, #276]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006114:	4941      	ldr	r1, [pc, #260]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006128:	4b3c      	ldr	r3, [pc, #240]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612e:	f023 0203 	bic.w	r2, r3, #3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006136:	4939      	ldr	r1, [pc, #228]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d028      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800614a:	4b34      	ldr	r3, [pc, #208]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006158:	4930      	ldr	r1, [pc, #192]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006168:	d106      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800616a:	4b2c      	ldr	r3, [pc, #176]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006174:	60d3      	str	r3, [r2, #12]
 8006176:	e011      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006180:	d10c      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3304      	adds	r3, #4
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f879 	bl	8007280 <RCCEx_PLLSAI1_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006192:	7cfb      	ldrb	r3, [r7, #19]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006198:	7cfb      	ldrb	r3, [r7, #19]
 800619a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d04d      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b0:	d108      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80061b2:	4b1a      	ldr	r3, [pc, #104]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b8:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061c2:	e012      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061c4:	4b15      	ldr	r3, [pc, #84]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ca:	4a14      	ldr	r2, [pc, #80]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e2:	490e      	ldr	r1, [pc, #56]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f2:	d106      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f4:	4b09      	ldr	r3, [pc, #36]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a08      	ldr	r2, [pc, #32]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fe:	60d3      	str	r3, [r2, #12]
 8006200:	e020      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620a:	d109      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a02      	ldr	r2, [pc, #8]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006216:	60d3      	str	r3, [r2, #12]
 8006218:	e014      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800621a:	bf00      	nop
 800621c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006228:	d10c      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3304      	adds	r3, #4
 800622e:	2101      	movs	r1, #1
 8006230:	4618      	mov	r0, r3
 8006232:	f001 f825 	bl	8007280 <RCCEx_PLLSAI1_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800623a:	7cfb      	ldrb	r3, [r7, #19]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d028      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006250:	4b7a      	ldr	r3, [pc, #488]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800625e:	4977      	ldr	r1, [pc, #476]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800626e:	d106      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006270:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4a71      	ldr	r2, [pc, #452]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800627a:	60d3      	str	r3, [r2, #12]
 800627c:	e011      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006286:	d10c      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3304      	adds	r3, #4
 800628c:	2101      	movs	r1, #1
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fff6 	bl	8007280 <RCCEx_PLLSAI1_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01e      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062ae:	4b63      	ldr	r3, [pc, #396]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062be:	495f      	ldr	r1, [pc, #380]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062d0:	d10c      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2102      	movs	r1, #2
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 ffd1 	bl	8007280 <RCCEx_PLLSAI1_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e2:	7cfb      	ldrb	r3, [r7, #19]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062f8:	4b50      	ldr	r3, [pc, #320]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fe:	f023 0204 	bic.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006308:	494c      	ldr	r1, [pc, #304]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800631c:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800631e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006322:	f023 0218 	bic.w	r2, r3, #24
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	4943      	ldr	r1, [pc, #268]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d035      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006340:	4b3e      	ldr	r3, [pc, #248]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a3d      	ldr	r2, [pc, #244]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634c:	f7fb ff80 	bl	8002250 <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006352:	e009      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006354:	f7fb ff7c 	bl	8002250 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d902      	bls.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	74fb      	strb	r3, [r7, #19]
        break;
 8006366:	e005      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006368:	4b34      	ldr	r3, [pc, #208]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ef      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d113      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800637a:	4b30      	ldr	r3, [pc, #192]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800637c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638a:	492c      	ldr	r1, [pc, #176]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3320      	adds	r3, #32
 8006396:	2102      	movs	r1, #2
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f865 	bl	8007468 <RCCEx_PLLSAI2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01e      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80063b8:	4b20      	ldr	r3, [pc, #128]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80063ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	491c      	ldr	r1, [pc, #112]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063da:	d10c      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3320      	adds	r3, #32
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f840 	bl	8007468 <RCCEx_PLLSAI2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80063f2:	7cfb      	ldrb	r3, [r7, #19]
 80063f4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d017      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006402:	4b0e      	ldr	r3, [pc, #56]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006412:	490a      	ldr	r1, [pc, #40]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006424:	d105      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4a04      	ldr	r2, [pc, #16]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800642c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006430:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006432:	7cbb      	ldrb	r3, [r7, #18]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40021000 	.word	0x40021000

08006440 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006452:	d13e      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006454:	4bb6      	ldr	r3, [pc, #728]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006466:	d028      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646e:	f200 86f2 	bhi.w	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006478:	d005      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006480:	d00e      	beq.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006482:	f000 bee8 	b.w	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006486:	4baa      	ldr	r3, [pc, #680]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	f040 86e2 	bne.w	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649a:	61fb      	str	r3, [r7, #28]
      break;
 800649c:	f000 bedd 	b.w	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80064a0:	4ba3      	ldr	r3, [pc, #652]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	f040 86d7 	bne.w	800725e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80064b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064b4:	61fb      	str	r3, [r7, #28]
      break;
 80064b6:	f000 bed2 	b.w	800725e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064ba:	4b9d      	ldr	r3, [pc, #628]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c6:	f040 86cc 	bne.w	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80064ca:	4b9a      	ldr	r3, [pc, #616]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80064cc:	61fb      	str	r3, [r7, #28]
      break;
 80064ce:	f000 bec8 	b.w	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d2:	4b97      	ldr	r3, [pc, #604]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d036      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d840      	bhi.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d003      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d020      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80064f4:	e039      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80064f6:	4b8e      	ldr	r3, [pc, #568]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d116      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006502:	4b8b      	ldr	r3, [pc, #556]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800650e:	4b88      	ldr	r3, [pc, #544]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	e005      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800651a:	4b85      	ldr	r3, [pc, #532]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800651c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	4a84      	ldr	r2, [pc, #528]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800652e:	e01f      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
      break;
 8006534:	e01c      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006536:	4b7e      	ldr	r3, [pc, #504]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006542:	d102      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006544:	4b7d      	ldr	r3, [pc, #500]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006546:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006548:	e012      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
      break;
 800654e:	e00f      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006550:	4b77      	ldr	r3, [pc, #476]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800655c:	d102      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800655e:	4b77      	ldr	r3, [pc, #476]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006560:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006562:	e005      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
      break;
 8006568:	e002      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
      break;
 800656e:	bf00      	nop
    }

    switch(PeriphClk)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006576:	f000 8604 	beq.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006580:	f200 8671 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800658a:	f000 8467 	beq.w	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006594:	f200 8667 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659e:	f000 852f 	beq.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a8:	f200 865d 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065b2:	f000 8185 	beq.w	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065bc:	f200 8653 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065c6:	f000 80cb 	beq.w	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065d0:	f200 8649 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	f000 842e 	beq.w	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e4:	f200 863f 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ee:	f000 83e2 	beq.w	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f8:	f200 8635 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006602:	f000 80ad 	beq.w	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660c:	f200 862b 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	f000 809b 	beq.w	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006620:	f200 8621 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800662a:	f000 8089 	beq.w	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006634:	f200 8617 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663e:	f000 8552 	beq.w	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006648:	f200 860d 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	f000 84fe 	beq.w	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	f200 8603 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006666:	f000 849f 	beq.w	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	f200 85f9 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	f000 846a 	beq.w	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b80      	cmp	r3, #128	; 0x80
 8006680:	f200 85f1 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b20      	cmp	r3, #32
 8006688:	d84c      	bhi.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 85ea 	beq.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3b01      	subs	r3, #1
 8006696:	2b1f      	cmp	r3, #31
 8006698:	f200 85e5 	bhi.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	08006ab5 	.word	0x08006ab5
 80066a8:	08006b23 	.word	0x08006b23
 80066ac:	08007267 	.word	0x08007267
 80066b0:	08006bb7 	.word	0x08006bb7
 80066b4:	08007267 	.word	0x08007267
 80066b8:	08007267 	.word	0x08007267
 80066bc:	08007267 	.word	0x08007267
 80066c0:	08006c2f 	.word	0x08006c2f
 80066c4:	08007267 	.word	0x08007267
 80066c8:	08007267 	.word	0x08007267
 80066cc:	08007267 	.word	0x08007267
 80066d0:	08007267 	.word	0x08007267
 80066d4:	08007267 	.word	0x08007267
 80066d8:	08007267 	.word	0x08007267
 80066dc:	08007267 	.word	0x08007267
 80066e0:	08006cb3 	.word	0x08006cb3
 80066e4:	08007267 	.word	0x08007267
 80066e8:	08007267 	.word	0x08007267
 80066ec:	08007267 	.word	0x08007267
 80066f0:	08007267 	.word	0x08007267
 80066f4:	08007267 	.word	0x08007267
 80066f8:	08007267 	.word	0x08007267
 80066fc:	08007267 	.word	0x08007267
 8006700:	08007267 	.word	0x08007267
 8006704:	08007267 	.word	0x08007267
 8006708:	08007267 	.word	0x08007267
 800670c:	08007267 	.word	0x08007267
 8006710:	08007267 	.word	0x08007267
 8006714:	08007267 	.word	0x08007267
 8006718:	08007267 	.word	0x08007267
 800671c:	08007267 	.word	0x08007267
 8006720:	08006d35 	.word	0x08006d35
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	f000 83e6 	beq.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800672c:	f000 bd9b 	b.w	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006730:	40021000 	.word	0x40021000
 8006734:	0007a120 	.word	0x0007a120
 8006738:	08015ff4 	.word	0x08015ff4
 800673c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006746:	f000 ff83 	bl	8007650 <RCCEx_GetSAIxPeriphCLKFreq>
 800674a:	61f8      	str	r0, [r7, #28]
      break;
 800674c:	f000 bd8e 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006756:	f000 ff7b 	bl	8007650 <RCCEx_GetSAIxPeriphCLKFreq>
 800675a:	61f8      	str	r0, [r7, #28]
      break;
 800675c:	f000 bd86 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006760:	4b9a      	ldr	r3, [pc, #616]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006772:	d015      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800677a:	f200 8092 	bhi.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006784:	d029      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678c:	f200 8089 	bhi.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d07b      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800679c:	d04a      	beq.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800679e:	e080      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067a0:	4b8a      	ldr	r3, [pc, #552]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d17d      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067ac:	4b87      	ldr	r3, [pc, #540]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80067b8:	4b84      	ldr	r3, [pc, #528]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	e005      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80067c4:	4b81      	ldr	r3, [pc, #516]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	4a7f      	ldr	r2, [pc, #508]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	61fb      	str	r3, [r7, #28]
          break;
 80067d8:	e066      	b.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80067da:	4b7c      	ldr	r3, [pc, #496]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e6:	d162      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80067e8:	4b78      	ldr	r3, [pc, #480]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f4:	d15b      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067f6:	4b75      	ldr	r3, [pc, #468]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006800:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	fb03 f202 	mul.w	r2, r3, r2
 800680a:	4b70      	ldr	r3, [pc, #448]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	3301      	adds	r3, #1
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800681c:	4b6b      	ldr	r3, [pc, #428]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	0d5b      	lsrs	r3, r3, #21
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	3301      	adds	r3, #1
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006830:	61fb      	str	r3, [r7, #28]
          break;
 8006832:	e03c      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006834:	4b65      	ldr	r3, [pc, #404]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800683c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006840:	d138      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006842:	4b62      	ldr	r3, [pc, #392]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684e:	d131      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006850:	4b5e      	ldr	r3, [pc, #376]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	0a1b      	lsrs	r3, r3, #8
 8006856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	fb03 f202 	mul.w	r2, r3, r2
 8006864:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	3301      	adds	r3, #1
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006876:	4b55      	ldr	r3, [pc, #340]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	0d5b      	lsrs	r3, r3, #21
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	3301      	adds	r3, #1
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	61fb      	str	r3, [r7, #28]
          break;
 800688c:	e012      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800688e:	4b4f      	ldr	r3, [pc, #316]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d10e      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 800689c:	4b4d      	ldr	r3, [pc, #308]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800689e:	61fb      	str	r3, [r7, #28]
          break;
 80068a0:	e00b      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80068a2:	bf00      	nop
 80068a4:	f000 bce2 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80068a8:	bf00      	nop
 80068aa:	f000 bcdf 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80068ae:	bf00      	nop
 80068b0:	f000 bcdc 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80068b4:	bf00      	nop
 80068b6:	f000 bcd9 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80068ba:	bf00      	nop
        break;
 80068bc:	f000 bcd6 	b.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80068c0:	4b42      	ldr	r3, [pc, #264]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ce:	d13d      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068d0:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068dc:	f040 84c5 	bne.w	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80068e0:	4b3a      	ldr	r3, [pc, #232]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ec:	f040 84bd 	bne.w	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068f0:	4b36      	ldr	r3, [pc, #216]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	fb03 f202 	mul.w	r2, r3, r2
 8006904:	4b31      	ldr	r3, [pc, #196]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	3301      	adds	r3, #1
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006916:	4b2d      	ldr	r3, [pc, #180]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	0edb      	lsrs	r3, r3, #27
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006928:	4b28      	ldr	r3, [pc, #160]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8006934:	2311      	movs	r3, #17
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e001      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800693a:	2307      	movs	r3, #7
 800693c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	61fb      	str	r3, [r7, #28]
      break;
 8006948:	f000 bc8f 	b.w	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800694c:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800695e:	d016      	beq.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006966:	f200 809b 	bhi.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006970:	d032      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006978:	f200 8092 	bhi.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8084 	beq.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800698a:	d052      	beq.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800698c:	e088      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	f040 8084 	bne.w	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	e005      	b.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	4a03      	ldr	r2, [pc, #12]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c6:	61fb      	str	r3, [r7, #28]
          break;
 80069c8:	e06c      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	08015ff4 	.word	0x08015ff4
 80069d4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069d8:	4ba5      	ldr	r3, [pc, #660]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e4:	d160      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80069e6:	4ba2      	ldr	r3, [pc, #648]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f2:	d159      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069f4:	4b9e      	ldr	r3, [pc, #632]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	0a1b      	lsrs	r3, r3, #8
 80069fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	fb03 f202 	mul.w	r2, r3, r2
 8006a08:	4b99      	ldr	r3, [pc, #612]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	3301      	adds	r3, #1
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a1a:	4b95      	ldr	r3, [pc, #596]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	0d5b      	lsrs	r3, r3, #21
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	3301      	adds	r3, #1
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2e:	61fb      	str	r3, [r7, #28]
          break;
 8006a30:	e03a      	b.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006a32:	4b8f      	ldr	r3, [pc, #572]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a3e:	d135      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a40:	4b8b      	ldr	r3, [pc, #556]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4c:	d12e      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a4e:	4b88      	ldr	r3, [pc, #544]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a58:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	fb03 f202 	mul.w	r2, r3, r2
 8006a62:	4b83      	ldr	r3, [pc, #524]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006a74:	4b7e      	ldr	r3, [pc, #504]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	0d5b      	lsrs	r3, r3, #21
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	3301      	adds	r3, #1
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	61fb      	str	r3, [r7, #28]
          break;
 8006a8a:	e00f      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006a8c:	4b78      	ldr	r3, [pc, #480]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d10a      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8006a9a:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a9c:	61fb      	str	r3, [r7, #28]
          break;
 8006a9e:	e007      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8006aa0:	bf00      	nop
 8006aa2:	e3e2      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006aa4:	bf00      	nop
 8006aa6:	e3e0      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006aa8:	bf00      	nop
 8006aaa:	e3de      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006aac:	bf00      	nop
 8006aae:	e3dc      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006ab0:	bf00      	nop
      break;
 8006ab2:	e3da      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ab4:	4b6e      	ldr	r3, [pc, #440]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d827      	bhi.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006ae5 	.word	0x08006ae5
 8006ad4:	08006aed 	.word	0x08006aed
 8006ad8:	08006b01 	.word	0x08006b01
          frequency = HAL_RCC_GetPCLK2Freq();
 8006adc:	f7ff f81a 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8006ae0:	61f8      	str	r0, [r7, #28]
          break;
 8006ae2:	e01d      	b.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ae4:	f7fe ff6a 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006ae8:	61f8      	str	r0, [r7, #28]
          break;
 8006aea:	e019      	b.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006aec:	4b60      	ldr	r3, [pc, #384]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af8:	d10f      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8006afa:	4b5f      	ldr	r3, [pc, #380]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006afc:	61fb      	str	r3, [r7, #28]
          break;
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b00:	4b5b      	ldr	r3, [pc, #364]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8006b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b12:	61fb      	str	r3, [r7, #28]
          break;
 8006b14:	e003      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8006b16:	bf00      	nop
 8006b18:	e3a8      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b1a:	bf00      	nop
 8006b1c:	e3a6      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b1e:	bf00      	nop
        break;
 8006b20:	e3a4      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b22:	4b53      	ldr	r3, [pc, #332]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f003 030c 	and.w	r3, r3, #12
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b0c      	cmp	r3, #12
 8006b32:	d83a      	bhi.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b71 	.word	0x08006b71
 8006b40:	08006bab 	.word	0x08006bab
 8006b44:	08006bab 	.word	0x08006bab
 8006b48:	08006bab 	.word	0x08006bab
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	08006bab 	.word	0x08006bab
 8006b54:	08006bab 	.word	0x08006bab
 8006b58:	08006bab 	.word	0x08006bab
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006bab 	.word	0x08006bab
 8006b64:	08006bab 	.word	0x08006bab
 8006b68:	08006bab 	.word	0x08006bab
 8006b6c:	08006b95 	.word	0x08006b95
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fe ffba 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006b74:	61f8      	str	r0, [r7, #28]
          break;
 8006b76:	e01d      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b78:	f7fe ff20 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006b7c:	61f8      	str	r0, [r7, #28]
          break;
 8006b7e:	e019      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b80:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8c:	d10f      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8006b8e:	4b3a      	ldr	r3, [pc, #232]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b90:	61fb      	str	r3, [r7, #28]
          break;
 8006b92:	e00c      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b94:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba6:	61fb      	str	r3, [r7, #28]
          break;
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8006baa:	bf00      	nop
 8006bac:	e35e      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bae:	bf00      	nop
 8006bb0:	e35c      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bb2:	bf00      	nop
        break;
 8006bb4:	e35a      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006bb6:	4b2e      	ldr	r3, [pc, #184]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b30      	cmp	r3, #48	; 0x30
 8006bc6:	d021      	beq.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b30      	cmp	r3, #48	; 0x30
 8006bcc:	d829      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d011      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d823      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d004      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8006be6:	e01c      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006be8:	f7fe ff7e 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006bec:	61f8      	str	r0, [r7, #28]
          break;
 8006bee:	e01d      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bf0:	f7fe fee4 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006bf4:	61f8      	str	r0, [r7, #28]
          break;
 8006bf6:	e019      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c04:	d10f      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8006c06:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c08:	61fb      	str	r3, [r7, #28]
          break;
 8006c0a:	e00c      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c0c:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d107      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8006c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1e:	61fb      	str	r3, [r7, #28]
          break;
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8006c22:	bf00      	nop
 8006c24:	e322      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006c26:	bf00      	nop
 8006c28:	e320      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006c2a:	bf00      	nop
        break;
 8006c2c:	e31e      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2bc0      	cmp	r3, #192	; 0xc0
 8006c3e:	d027      	beq.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2bc0      	cmp	r3, #192	; 0xc0
 8006c44:	d82f      	bhi.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b80      	cmp	r3, #128	; 0x80
 8006c4a:	d017      	beq.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d829      	bhi.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d004      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8006c5e:	e022      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fe ff42 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006c64:	61f8      	str	r0, [r7, #28]
          break;
 8006c66:	e023      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c68:	f7fe fea8 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006c6c:	61f8      	str	r0, [r7, #28]
          break;
 8006c6e:	e01f      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006c70:	40021000 	.word	0x40021000
 8006c74:	02dc6c00 	.word	0x02dc6c00
 8006c78:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c7c:	4b9b      	ldr	r3, [pc, #620]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d10f      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8006c8a:	4b99      	ldr	r3, [pc, #612]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c8c:	61fb      	str	r3, [r7, #28]
          break;
 8006c8e:	e00c      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c90:	4b96      	ldr	r3, [pc, #600]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d107      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8006c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca2:	61fb      	str	r3, [r7, #28]
          break;
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8006ca6:	bf00      	nop
 8006ca8:	e2e0      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006caa:	bf00      	nop
 8006cac:	e2de      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006cae:	bf00      	nop
        break;
 8006cb0:	e2dc      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006cb2:	4b8e      	ldr	r3, [pc, #568]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc4:	d025      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ccc:	d82c      	bhi.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd4:	d013      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cdc:	d824      	bhi.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cea:	d004      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8006cec:	e01c      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cee:	f7fe fefb 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006cf2:	61f8      	str	r0, [r7, #28]
          break;
 8006cf4:	e01d      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fe fe61 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006cfa:	61f8      	str	r0, [r7, #28]
          break;
 8006cfc:	e019      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cfe:	4b7b      	ldr	r3, [pc, #492]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0a:	d10f      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8006d0c:	4b78      	ldr	r3, [pc, #480]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d0e:	61fb      	str	r3, [r7, #28]
          break;
 8006d10:	e00c      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d12:	4b76      	ldr	r3, [pc, #472]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8006d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d24:	61fb      	str	r3, [r7, #28]
          break;
 8006d26:	e003      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8006d28:	bf00      	nop
 8006d2a:	e29f      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006d2c:	bf00      	nop
 8006d2e:	e29d      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006d30:	bf00      	nop
        break;
 8006d32:	e29b      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d34:	4b6d      	ldr	r3, [pc, #436]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d46:	d025      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d4e:	d82c      	bhi.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d56:	d013      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5e:	d824      	bhi.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d004      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8006d6e:	e01c      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fe feba 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006d74:	61f8      	str	r0, [r7, #28]
          break;
 8006d76:	e01d      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d78:	f7fe fe20 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006d7c:	61f8      	str	r0, [r7, #28]
          break;
 8006d7e:	e019      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d80:	4b5a      	ldr	r3, [pc, #360]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d8c:	d10f      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8006d8e:	4b58      	ldr	r3, [pc, #352]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d90:	61fb      	str	r3, [r7, #28]
          break;
 8006d92:	e00c      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d94:	4b55      	ldr	r3, [pc, #340]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d107      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8006da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da6:	61fb      	str	r3, [r7, #28]
          break;
 8006da8:	e003      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8006daa:	bf00      	nop
 8006dac:	e25e      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006dae:	bf00      	nop
 8006db0:	e25c      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006db2:	bf00      	nop
        break;
 8006db4:	e25a      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006db6:	4b4d      	ldr	r3, [pc, #308]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dc8:	d007      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dd0:	d12f      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dd2:	f7fe fdf3 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006dd6:	61f8      	str	r0, [r7, #28]
          break;
 8006dd8:	e02e      	b.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006dda:	4b44      	ldr	r3, [pc, #272]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de6:	d126      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8006de8:	4b40      	ldr	r3, [pc, #256]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d020      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006df4:	4b3d      	ldr	r3, [pc, #244]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	fb03 f202 	mul.w	r2, r3, r2
 8006e08:	4b38      	ldr	r3, [pc, #224]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	3301      	adds	r3, #1
 8006e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e18:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006e1a:	4b34      	ldr	r3, [pc, #208]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	0e5b      	lsrs	r3, r3, #25
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	3301      	adds	r3, #1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	61fb      	str	r3, [r7, #28]
          break;
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8006e32:	bf00      	nop
 8006e34:	e21a      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006e36:	bf00      	nop
        break;
 8006e38:	e218      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006e3a:	4b2c      	ldr	r3, [pc, #176]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006e4c:	f7fe fe62 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
        break;
 8006e52:	e20b      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e54:	f7fe fdb2 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006e58:	61f8      	str	r0, [r7, #28]
        break;
 8006e5a:	e207      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006e5c:	4b23      	ldr	r3, [pc, #140]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e62:	f003 0318 	and.w	r3, r3, #24
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d010      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d834      	bhi.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d024      	beq.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8006e80:	e02d      	b.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006e82:	69b9      	ldr	r1, [r7, #24]
 8006e84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e88:	f000 fbe2 	bl	8007650 <RCCEx_GetSAIxPeriphCLKFreq>
 8006e8c:	61f8      	str	r0, [r7, #28]
          break;
 8006e8e:	e02b      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006e90:	4b16      	ldr	r3, [pc, #88]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d122      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	091b      	lsrs	r3, r3, #4
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	e005      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec6:	61fb      	str	r3, [r7, #28]
          break;
 8006ec8:	e00b      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eca:	4b08      	ldr	r3, [pc, #32]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8006ed8:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006eda:	61fb      	str	r3, [r7, #28]
          break;
 8006edc:	e003      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8006ede:	bf00      	nop
 8006ee0:	e1c4      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ee2:	bf00      	nop
 8006ee4:	e1c2      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ee6:	bf00      	nop
        break;
 8006ee8:	e1c0      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8006eea:	bf00      	nop
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	00f42400 	.word	0x00f42400
 8006ef4:	08015ff4 	.word	0x08015ff4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006ef8:	4b96      	ldr	r3, [pc, #600]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0a:	d013      	beq.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f12:	d819      	bhi.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	d004      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8006f22:	e011      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fe fde0 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006f28:	61f8      	str	r0, [r7, #28]
          break;
 8006f2a:	e010      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f2c:	f7fe fd46 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006f30:	61f8      	str	r0, [r7, #28]
          break;
 8006f32:	e00c      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f34:	4b87      	ldr	r3, [pc, #540]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f40:	d104      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8006f42:	4b85      	ldr	r3, [pc, #532]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f44:	61fb      	str	r3, [r7, #28]
          break;
 8006f46:	e001      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8006f48:	bf00      	nop
 8006f4a:	e18f      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006f4c:	bf00      	nop
        break;
 8006f4e:	e18d      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f50:	4b80      	ldr	r3, [pc, #512]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f62:	d013      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6a:	d819      	bhi.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f78:	d004      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8006f7a:	e011      	b.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f7c:	f7fe fdb4 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006f80:	61f8      	str	r0, [r7, #28]
          break;
 8006f82:	e010      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f84:	f7fe fd1a 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006f88:	61f8      	str	r0, [r7, #28]
          break;
 8006f8a:	e00c      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f8c:	4b71      	ldr	r3, [pc, #452]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f98:	d104      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8006f9a:	4b6f      	ldr	r3, [pc, #444]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f9c:	61fb      	str	r3, [r7, #28]
          break;
 8006f9e:	e001      	b.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8006fa0:	bf00      	nop
 8006fa2:	e163      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006fa4:	bf00      	nop
        break;
 8006fa6:	e161      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006fa8:	4b6a      	ldr	r3, [pc, #424]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fba:	d013      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc2:	d819      	bhi.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd0:	d004      	beq.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8006fd2:	e011      	b.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fd4:	f7fe fd88 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	61f8      	str	r0, [r7, #28]
          break;
 8006fda:	e010      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fdc:	f7fe fcee 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006fe0:	61f8      	str	r0, [r7, #28]
          break;
 8006fe2:	e00c      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fe4:	4b5b      	ldr	r3, [pc, #364]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff0:	d104      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8006ff2:	4b59      	ldr	r3, [pc, #356]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ff4:	61fb      	str	r3, [r7, #28]
          break;
 8006ff6:	e001      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8006ff8:	bf00      	nop
 8006ffa:	e137      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ffc:	bf00      	nop
        break;
 8006ffe:	e135      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007000:	4b54      	ldr	r3, [pc, #336]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d011      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d818      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d004      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8007024:	e011      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007026:	f7fe fd5f 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 800702a:	61f8      	str	r0, [r7, #28]
          break;
 800702c:	e010      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800702e:	f7fe fcc5 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8007032:	61f8      	str	r0, [r7, #28]
          break;
 8007034:	e00c      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007036:	4b47      	ldr	r3, [pc, #284]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007042:	d104      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8007044:	4b44      	ldr	r3, [pc, #272]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007046:	61fb      	str	r3, [r7, #28]
          break;
 8007048:	e001      	b.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800704a:	bf00      	nop
 800704c:	e10e      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800704e:	bf00      	nop
        break;
 8007050:	e10c      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007052:	4b40      	ldr	r3, [pc, #256]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007064:	d02c      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800706c:	d833      	bhi.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007074:	d01a      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800707c:	d82b      	bhi.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800708a:	d004      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 800708c:	e023      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800708e:	f7fe fd2b 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8007092:	61f8      	str	r0, [r7, #28]
          break;
 8007094:	e026      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007096:	4b2f      	ldr	r3, [pc, #188]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d11a      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80070a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070a8:	61fb      	str	r3, [r7, #28]
          break;
 80070aa:	e016      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b8:	d111      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80070ba:	4b27      	ldr	r3, [pc, #156]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070bc:	61fb      	str	r3, [r7, #28]
          break;
 80070be:	e00e      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070c0:	4b24      	ldr	r3, [pc, #144]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d109      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80070ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d2:	61fb      	str	r3, [r7, #28]
          break;
 80070d4:	e005      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80070d6:	bf00      	nop
 80070d8:	e0c8      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070da:	bf00      	nop
 80070dc:	e0c6      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070de:	bf00      	nop
 80070e0:	e0c4      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070e2:	bf00      	nop
        break;
 80070e4:	e0c2      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80070e6:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070f8:	d030      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007100:	d837      	bhi.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007108:	d01a      	beq.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007110:	d82f      	bhi.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711e:	d004      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007120:	e027      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007122:	f7fe fce1 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8007126:	61f8      	str	r0, [r7, #28]
          break;
 8007128:	e02a      	b.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800712a:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800712c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b02      	cmp	r3, #2
 8007136:	d11e      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8007138:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800713c:	61fb      	str	r3, [r7, #28]
          break;
 800713e:	e01a      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714c:	d115      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800714e:	4b02      	ldr	r3, [pc, #8]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007150:	61fb      	str	r3, [r7, #28]
          break;
 8007152:	e012      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007154:	40021000 	.word	0x40021000
 8007158:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800715c:	4b46      	ldr	r3, [pc, #280]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d109      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	61fb      	str	r3, [r7, #28]
          break;
 8007170:	e005      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8007172:	bf00      	nop
 8007174:	e07a      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007176:	bf00      	nop
 8007178:	e078      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800717a:	bf00      	nop
 800717c:	e076      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800717e:	bf00      	nop
        break;
 8007180:	e074      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007182:	4b3d      	ldr	r3, [pc, #244]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007188:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007194:	d02c      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800719c:	d855      	bhi.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071aa:	d004      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80071ac:	e04d      	b.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fe fc05 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 80071b2:	61f8      	str	r0, [r7, #28]
          break;
 80071b4:	e04e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80071b6:	4b30      	ldr	r3, [pc, #192]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d145      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80071c2:	4b2d      	ldr	r3, [pc, #180]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80071ce:	4b2a      	ldr	r3, [pc, #168]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	091b      	lsrs	r3, r3, #4
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	e005      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80071da:	4b27      	ldr	r3, [pc, #156]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80071dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	4a25      	ldr	r2, [pc, #148]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80071e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ec:	61fb      	str	r3, [r7, #28]
          break;
 80071ee:	e02e      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071f0:	4b21      	ldr	r3, [pc, #132]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071fc:	d129      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80071fe:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800720a:	d122      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	fb03 f202 	mul.w	r2, r3, r2
 8007220:	4b15      	ldr	r3, [pc, #84]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	3301      	adds	r3, #1
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	0d5b      	lsrs	r3, r3, #21
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	3301      	adds	r3, #1
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	fbb2 f3f3 	udiv	r3, r2, r3
 8007246:	61fb      	str	r3, [r7, #28]
          break;
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800724a:	bf00      	nop
 800724c:	e00e      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800724e:	bf00      	nop
 8007250:	e00c      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007252:	bf00      	nop
        break;
 8007254:	e00a      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007256:	bf00      	nop
 8007258:	e008      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800725a:	bf00      	nop
 800725c:	e006      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800726a:	bf00      	nop
    }
  }

  return(frequency);
 800726c:	69fb      	ldr	r3, [r7, #28]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40021000 	.word	0x40021000
 800727c:	08015ff4 	.word	0x08015ff4

08007280 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800728e:	4b72      	ldr	r3, [pc, #456]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00e      	beq.n	80072b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800729a:	4b6f      	ldr	r3, [pc, #444]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f003 0203 	and.w	r2, r3, #3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d103      	bne.n	80072b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
       ||
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d142      	bne.n	8007338 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e03f      	b.n	8007338 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d018      	beq.n	80072f2 <RCCEx_PLLSAI1_Config+0x72>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d825      	bhi.n	8007310 <RCCEx_PLLSAI1_Config+0x90>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d002      	beq.n	80072ce <RCCEx_PLLSAI1_Config+0x4e>
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d009      	beq.n	80072e0 <RCCEx_PLLSAI1_Config+0x60>
 80072cc:	e020      	b.n	8007310 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072ce:	4b62      	ldr	r3, [pc, #392]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d11d      	bne.n	8007316 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072de:	e01a      	b.n	8007316 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072e0:	4b5d      	ldr	r3, [pc, #372]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d116      	bne.n	800731a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072f0:	e013      	b.n	800731a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072f2:	4b59      	ldr	r3, [pc, #356]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072fe:	4b56      	ldr	r3, [pc, #344]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800730e:	e006      	b.n	800731e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
      break;
 8007314:	e004      	b.n	8007320 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007316:	bf00      	nop
 8007318:	e002      	b.n	8007320 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800731a:	bf00      	nop
 800731c:	e000      	b.n	8007320 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800731e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d108      	bne.n	8007338 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007326:	4b4c      	ldr	r3, [pc, #304]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f023 0203 	bic.w	r2, r3, #3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4949      	ldr	r1, [pc, #292]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007334:	4313      	orrs	r3, r2
 8007336:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f040 8086 	bne.w	800744c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007340:	4b45      	ldr	r3, [pc, #276]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a44      	ldr	r2, [pc, #272]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800734a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734c:	f7fa ff80 	bl	8002250 <HAL_GetTick>
 8007350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007352:	e009      	b.n	8007368 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007354:	f7fa ff7c 	bl	8002250 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d902      	bls.n	8007368 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	73fb      	strb	r3, [r7, #15]
        break;
 8007366:	e005      	b.n	8007374 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007368:	4b3b      	ldr	r3, [pc, #236]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1ef      	bne.n	8007354 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d168      	bne.n	800744c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d113      	bne.n	80073a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007380:	4b35      	ldr	r3, [pc, #212]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	4b35      	ldr	r3, [pc, #212]	; (800745c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007386:	4013      	ands	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6892      	ldr	r2, [r2, #8]
 800738c:	0211      	lsls	r1, r2, #8
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	68d2      	ldr	r2, [r2, #12]
 8007392:	06d2      	lsls	r2, r2, #27
 8007394:	4311      	orrs	r1, r2
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6852      	ldr	r2, [r2, #4]
 800739a:	3a01      	subs	r2, #1
 800739c:	0112      	lsls	r2, r2, #4
 800739e:	430a      	orrs	r2, r1
 80073a0:	492d      	ldr	r1, [pc, #180]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	610b      	str	r3, [r1, #16]
 80073a6:	e02d      	b.n	8007404 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d115      	bne.n	80073da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073ae:	4b2a      	ldr	r3, [pc, #168]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	4b2b      	ldr	r3, [pc, #172]	; (8007460 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6892      	ldr	r2, [r2, #8]
 80073ba:	0211      	lsls	r1, r2, #8
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6912      	ldr	r2, [r2, #16]
 80073c0:	0852      	lsrs	r2, r2, #1
 80073c2:	3a01      	subs	r2, #1
 80073c4:	0552      	lsls	r2, r2, #21
 80073c6:	4311      	orrs	r1, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	3a01      	subs	r2, #1
 80073ce:	0112      	lsls	r2, r2, #4
 80073d0:	430a      	orrs	r2, r1
 80073d2:	4921      	ldr	r1, [pc, #132]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	610b      	str	r3, [r1, #16]
 80073d8:	e014      	b.n	8007404 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073da:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	4b21      	ldr	r3, [pc, #132]	; (8007464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6892      	ldr	r2, [r2, #8]
 80073e6:	0211      	lsls	r1, r2, #8
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6952      	ldr	r2, [r2, #20]
 80073ec:	0852      	lsrs	r2, r2, #1
 80073ee:	3a01      	subs	r2, #1
 80073f0:	0652      	lsls	r2, r2, #25
 80073f2:	4311      	orrs	r1, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6852      	ldr	r2, [r2, #4]
 80073f8:	3a01      	subs	r2, #1
 80073fa:	0112      	lsls	r2, r2, #4
 80073fc:	430a      	orrs	r2, r1
 80073fe:	4916      	ldr	r1, [pc, #88]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007400:	4313      	orrs	r3, r2
 8007402:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007404:	4b14      	ldr	r3, [pc, #80]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a13      	ldr	r2, [pc, #76]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800740a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800740e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007410:	f7fa ff1e 	bl	8002250 <HAL_GetTick>
 8007414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007416:	e009      	b.n	800742c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007418:	f7fa ff1a 	bl	8002250 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d902      	bls.n	800742c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	73fb      	strb	r3, [r7, #15]
          break;
 800742a:	e005      	b.n	8007438 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0ef      	beq.n	8007418 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800743e:	4b06      	ldr	r3, [pc, #24]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	4904      	ldr	r1, [pc, #16]	; (8007458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007448:	4313      	orrs	r3, r2
 800744a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40021000 	.word	0x40021000
 800745c:	07ff800f 	.word	0x07ff800f
 8007460:	ff9f800f 	.word	0xff9f800f
 8007464:	f9ff800f 	.word	0xf9ff800f

08007468 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007476:	4b72      	ldr	r3, [pc, #456]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00e      	beq.n	80074a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007482:	4b6f      	ldr	r3, [pc, #444]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f003 0203 	and.w	r2, r3, #3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d103      	bne.n	800749a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
       ||
 8007496:	2b00      	cmp	r3, #0
 8007498:	d142      	bne.n	8007520 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	73fb      	strb	r3, [r7, #15]
 800749e:	e03f      	b.n	8007520 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d018      	beq.n	80074da <RCCEx_PLLSAI2_Config+0x72>
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d825      	bhi.n	80074f8 <RCCEx_PLLSAI2_Config+0x90>
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d002      	beq.n	80074b6 <RCCEx_PLLSAI2_Config+0x4e>
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d009      	beq.n	80074c8 <RCCEx_PLLSAI2_Config+0x60>
 80074b4:	e020      	b.n	80074f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074b6:	4b62      	ldr	r3, [pc, #392]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d11d      	bne.n	80074fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074c6:	e01a      	b.n	80074fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074c8:	4b5d      	ldr	r3, [pc, #372]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d116      	bne.n	8007502 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d8:	e013      	b.n	8007502 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074da:	4b59      	ldr	r3, [pc, #356]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10f      	bne.n	8007506 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074e6:	4b56      	ldr	r3, [pc, #344]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074f6:	e006      	b.n	8007506 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
      break;
 80074fc:	e004      	b.n	8007508 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80074fe:	bf00      	nop
 8007500:	e002      	b.n	8007508 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007502:	bf00      	nop
 8007504:	e000      	b.n	8007508 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007506:	bf00      	nop
    }

    if(status == HAL_OK)
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d108      	bne.n	8007520 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800750e:	4b4c      	ldr	r3, [pc, #304]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f023 0203 	bic.w	r2, r3, #3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4949      	ldr	r1, [pc, #292]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800751c:	4313      	orrs	r3, r2
 800751e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 8086 	bne.w	8007634 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007528:	4b45      	ldr	r3, [pc, #276]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a44      	ldr	r2, [pc, #272]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800752e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007534:	f7fa fe8c 	bl	8002250 <HAL_GetTick>
 8007538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800753a:	e009      	b.n	8007550 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800753c:	f7fa fe88 	bl	8002250 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d902      	bls.n	8007550 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	73fb      	strb	r3, [r7, #15]
        break;
 800754e:	e005      	b.n	800755c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007550:	4b3b      	ldr	r3, [pc, #236]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1ef      	bne.n	800753c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d168      	bne.n	8007634 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d113      	bne.n	8007590 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007568:	4b35      	ldr	r3, [pc, #212]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800756a:	695a      	ldr	r2, [r3, #20]
 800756c:	4b35      	ldr	r3, [pc, #212]	; (8007644 <RCCEx_PLLSAI2_Config+0x1dc>)
 800756e:	4013      	ands	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6892      	ldr	r2, [r2, #8]
 8007574:	0211      	lsls	r1, r2, #8
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68d2      	ldr	r2, [r2, #12]
 800757a:	06d2      	lsls	r2, r2, #27
 800757c:	4311      	orrs	r1, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6852      	ldr	r2, [r2, #4]
 8007582:	3a01      	subs	r2, #1
 8007584:	0112      	lsls	r2, r2, #4
 8007586:	430a      	orrs	r2, r1
 8007588:	492d      	ldr	r1, [pc, #180]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800758a:	4313      	orrs	r3, r2
 800758c:	614b      	str	r3, [r1, #20]
 800758e:	e02d      	b.n	80075ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d115      	bne.n	80075c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007596:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <RCCEx_PLLSAI2_Config+0x1e0>)
 800759c:	4013      	ands	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6892      	ldr	r2, [r2, #8]
 80075a2:	0211      	lsls	r1, r2, #8
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6912      	ldr	r2, [r2, #16]
 80075a8:	0852      	lsrs	r2, r2, #1
 80075aa:	3a01      	subs	r2, #1
 80075ac:	0552      	lsls	r2, r2, #21
 80075ae:	4311      	orrs	r1, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6852      	ldr	r2, [r2, #4]
 80075b4:	3a01      	subs	r2, #1
 80075b6:	0112      	lsls	r2, r2, #4
 80075b8:	430a      	orrs	r2, r1
 80075ba:	4921      	ldr	r1, [pc, #132]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	614b      	str	r3, [r1, #20]
 80075c0:	e014      	b.n	80075ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075c2:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	4b21      	ldr	r3, [pc, #132]	; (800764c <RCCEx_PLLSAI2_Config+0x1e4>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6892      	ldr	r2, [r2, #8]
 80075ce:	0211      	lsls	r1, r2, #8
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6952      	ldr	r2, [r2, #20]
 80075d4:	0852      	lsrs	r2, r2, #1
 80075d6:	3a01      	subs	r2, #1
 80075d8:	0652      	lsls	r2, r2, #25
 80075da:	4311      	orrs	r1, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6852      	ldr	r2, [r2, #4]
 80075e0:	3a01      	subs	r2, #1
 80075e2:	0112      	lsls	r2, r2, #4
 80075e4:	430a      	orrs	r2, r1
 80075e6:	4916      	ldr	r1, [pc, #88]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a13      	ldr	r2, [pc, #76]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f8:	f7fa fe2a 	bl	8002250 <HAL_GetTick>
 80075fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075fe:	e009      	b.n	8007614 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007600:	f7fa fe26 	bl	8002250 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d902      	bls.n	8007614 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	73fb      	strb	r3, [r7, #15]
          break;
 8007612:	e005      	b.n	8007620 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0ef      	beq.n	8007600 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	4904      	ldr	r1, [pc, #16]	; (8007640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007630:	4313      	orrs	r3, r2
 8007632:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
 8007644:	07ff800f 	.word	0x07ff800f
 8007648:	ff9f800f 	.word	0xff9f800f
 800764c:	f9ff800f 	.word	0xf9ff800f

08007650 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007650:	b480      	push	{r7}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800766c:	d10b      	bne.n	8007686 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800766e:	4b7e      	ldr	r3, [pc, #504]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007674:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007678:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b60      	cmp	r3, #96	; 0x60
 800767e:	d112      	bne.n	80076a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007680:	4b7a      	ldr	r3, [pc, #488]	; (800786c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	e00f      	b.n	80076a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768c:	d10b      	bne.n	80076a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800768e:	4b76      	ldr	r3, [pc, #472]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007698:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076a0:	d101      	bne.n	80076a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80076a2:	4b72      	ldr	r3, [pc, #456]	; (800786c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80076a4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f040 80d6 	bne.w	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d003      	beq.n	80076c0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076be:	d13b      	bne.n	8007738 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80076c0:	4b69      	ldr	r3, [pc, #420]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076cc:	f040 80c4 	bne.w	8007858 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80076d0:	4b65      	ldr	r3, [pc, #404]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 80bd 	beq.w	8007858 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80076de:	4b62      	ldr	r3, [pc, #392]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	3301      	adds	r3, #1
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80076f2:	4b5d      	ldr	r3, [pc, #372]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80076fe:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	0edb      	lsrs	r3, r3, #27
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007710:	4b55      	ldr	r3, [pc, #340]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800771c:	2311      	movs	r3, #17
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e001      	b.n	8007726 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007722:	2307      	movs	r3, #7
 8007724:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	fb03 f202 	mul.w	r2, r3, r2
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007736:	e08f      	b.n	8007858 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d13a      	bne.n	80077b4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800773e:	4b4a      	ldr	r3, [pc, #296]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800774a:	f040 8086 	bne.w	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800774e:	4b46      	ldr	r3, [pc, #280]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d07f      	beq.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800775a:	4b43      	ldr	r3, [pc, #268]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	3301      	adds	r3, #1
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800776e:	4b3e      	ldr	r3, [pc, #248]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007778:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800777a:	4b3b      	ldr	r3, [pc, #236]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	0edb      	lsrs	r3, r3, #27
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007798:	2311      	movs	r3, #17
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e001      	b.n	80077a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800779e:	2307      	movs	r3, #7
 80077a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	fb03 f202 	mul.w	r2, r3, r2
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	e052      	b.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	d003      	beq.n	80077c2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d109      	bne.n	80077d6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077c2:	4b29      	ldr	r3, [pc, #164]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ce:	d144      	bne.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80077d0:	4b27      	ldr	r3, [pc, #156]	; (8007870 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80077d2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077d4:	e041      	b.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d003      	beq.n	80077e4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e2:	d13a      	bne.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80077e4:	4b20      	ldr	r3, [pc, #128]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f0:	d133      	bne.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d02d      	beq.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80077fe:	4b1a      	ldr	r3, [pc, #104]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	3301      	adds	r3, #1
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	0edb      	lsrs	r3, r3, #27
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800783c:	2311      	movs	r3, #17
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e001      	b.n	8007846 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007842:	2307      	movs	r3, #7
 8007844:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	fb03 f202 	mul.w	r2, r3, r2
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e000      	b.n	800785a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007858:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800785a:	69fb      	ldr	r3, [r7, #28]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3724      	adds	r7, #36	; 0x24
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	40021000 	.word	0x40021000
 800786c:	001fff68 	.word	0x001fff68
 8007870:	00f42400 	.word	0x00f42400

08007874 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e078      	b.n	8007978 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d105      	bne.n	800789e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7fa fa5b 	bl	8001d54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2203      	movs	r2, #3
 80078a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f86a 	bl	8007980 <HAL_SD_InitCard>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e060      	b.n	8007978 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80078b6:	f107 0308 	add.w	r3, r7, #8
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fdb5 	bl	800842c <HAL_SD_GetCardStatus>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e055      	b.n	8007978 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80078cc:	7e3b      	ldrb	r3, [r7, #24]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80078d2:	7e7b      	ldrb	r3, [r7, #25]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10a      	bne.n	80078f6 <HAL_SD_Init+0x82>
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <HAL_SD_Init+0x78>
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80078f4:	e00b      	b.n	800790e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d104      	bne.n	8007908 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007904:	65da      	str	r2, [r3, #92]	; 0x5c
 8007906:	e002      	b.n	800790e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fe6b 	bl	80085f0 <HAL_SD_ConfigWideBusOperation>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e029      	b.n	8007978 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007924:	f7fa fc94 	bl	8002250 <HAL_GetTick>
 8007928:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800792a:	e014      	b.n	8007956 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800792c:	f7fa fc90 	bl	8002250 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793a:	d10c      	bne.n	8007956 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e010      	b.n	8007978 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 ff5e 	bl	8008818 <HAL_SD_GetCardState>
 800795c:	4603      	mov	r3, r0
 800795e:	2b04      	cmp	r3, #4
 8007960:	d1e4      	bne.n	800792c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3728      	adds	r7, #40	; 0x28
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007980:	b5b0      	push	{r4, r5, r7, lr}
 8007982:	b08e      	sub	sp, #56	; 0x38
 8007984:	af04      	add	r7, sp, #16
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007988:	2300      	movs	r3, #0
 800798a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007998:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800799c:	f7fe fd50 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 80079a0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d109      	bne.n	80079bc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e079      	b.n	8007ab0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	4a3d      	ldr	r2, [pc, #244]	; (8007ab8 <HAL_SD_InitCard+0x138>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	091b      	lsrs	r3, r3, #4
 80079c8:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d107      	bne.n	80079e8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0210 	orr.w	r2, r2, #16
 80079e6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681d      	ldr	r5, [r3, #0]
 80079ec:	466c      	mov	r4, sp
 80079ee:	f107 0314 	add.w	r3, r7, #20
 80079f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079fa:	f107 0308 	add.w	r3, r7, #8
 80079fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a00:	4628      	mov	r0, r5
 8007a02:	f001 fefd 	bl	8009800 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 ff40 	bl	8009890 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007a1c:	4a27      	ldr	r2, [pc, #156]	; (8007abc <HAL_SD_InitCard+0x13c>)
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	3301      	adds	r3, #1
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fa fc1e 	bl	8002268 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 ffd3 	bl	80089d8 <SD_PowerON>
 8007a32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00b      	beq.n	8007a52 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e02e      	b.n	8007ab0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 ff00 	bl	8008858 <SD_InitCard>
 8007a58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e01b      	b.n	8007ab0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 ff9b 	bl	80099bc <SDMMC_CmdBlockLength>
 8007a86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00f      	beq.n	8007aae <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a0b      	ldr	r2, [pc, #44]	; (8007ac0 <HAL_SD_InitCard+0x140>)
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3728      	adds	r7, #40	; 0x28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab8:	014f8b59 	.word	0x014f8b59
 8007abc:	00012110 	.word	0x00012110
 8007ac0:	1fe00fff 	.word	0x1fe00fff

08007ac4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08c      	sub	sp, #48	; 0x30
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e08d      	b.n	8007c08 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 8086 	bne.w	8007c06 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d907      	bls.n	8007b1e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e074      	b.n	8007c08 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2203      	movs	r2, #3
 8007b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	025a      	lsls	r2, r3, #9
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d002      	beq.n	8007b4a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	025b      	lsls	r3, r3, #9
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	025b      	lsls	r3, r3, #9
 8007b54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b56:	2390      	movs	r3, #144	; 0x90
 8007b58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f107 0210 	add.w	r2, r7, #16
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 fef7 	bl	8009964 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b84:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2201      	movs	r2, #1
 8007b94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d90a      	bls.n	8007bb2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2282      	movs	r2, #130	; 0x82
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 ff4d 	bl	8009a48 <SDMMC_CmdReadMultiBlock>
 8007bae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bb0:	e009      	b.n	8007bc6 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2281      	movs	r2, #129	; 0x81
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 ff1f 	bl	8009a02 <SDMMC_CmdReadSingleBlock>
 8007bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d012      	beq.n	8007bf2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0f      	ldr	r2, [pc, #60]	; (8007c10 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e00a      	b.n	8007c08 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3730      	adds	r7, #48	; 0x30
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	1fe00fff 	.word	0x1fe00fff

08007c14 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08c      	sub	sp, #48	; 0x30
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d107      	bne.n	8007c3c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e08d      	b.n	8007d58 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	f040 8086 	bne.w	8007d56 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d907      	bls.n	8007c6e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e074      	b.n	8007d58 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2203      	movs	r2, #3
 8007c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	025a      	lsls	r2, r3, #9
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d002      	beq.n	8007c9a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	025b      	lsls	r3, r3, #9
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	025b      	lsls	r3, r3, #9
 8007ca4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ca6:	2390      	movs	r3, #144	; 0x90
 8007ca8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f107 0210 	add.w	r2, r7, #16
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 fe4f 	bl	8009964 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d90a      	bls.n	8007d02 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	22a0      	movs	r2, #160	; 0xa0
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 feeb 	bl	8009ad4 <SDMMC_CmdWriteMultiBlock>
 8007cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d00:	e009      	b.n	8007d16 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2290      	movs	r2, #144	; 0x90
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 febd 	bl	8009a8e <SDMMC_CmdWriteSingleBlock>
 8007d14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d012      	beq.n	8007d42 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0f      	ldr	r2, [pc, #60]	; (8007d60 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e00a      	b.n	8007d58 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007d50:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	e000      	b.n	8007d58 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007d56:	2302      	movs	r3, #2
  }
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3730      	adds	r7, #48	; 0x30
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	1fe00fff 	.word	0x1fe00fff

08007d64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d008      	beq.n	8007d92 <HAL_SD_IRQHandler+0x2e>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 f98e 	bl	80090ac <SD_Read_IT>
 8007d90:	e199      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80ae 	beq.w	8007efe <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007dba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007dbe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007dce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dde:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d038      	beq.n	8007e5c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_SD_IRQHandler+0x9a>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 fe8a 	bl	8009b1c <SDMMC_CmdStopTransfer>
 8007e08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f957 	bl	80080d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a90      	ldr	r2, [pc, #576]	; (8008068 <HAL_SD_IRQHandler+0x304>)
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d104      	bne.n	8007e4c <HAL_SD_IRQHandler+0xe8>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f002 fb59 	bl	800a504 <HAL_SD_RxCpltCallback>
 8007e52:	e138      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f002 fb4b 	bl	800a4f0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007e5a:	e134      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 812f 	beq.w	80080c6 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2200      	movs	r2, #0
 8007e76:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <HAL_SD_IRQHandler+0x130>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d011      	beq.n	8007eb8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fe3f 	bl	8009b1c <SDMMC_CmdStopTransfer>
 8007e9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d008      	beq.n	8007eb8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f90c 	bl	80080d0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <HAL_SD_IRQHandler+0x176>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f002 fb08 	bl	800a4f0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d105      	bne.n	8007ef6 <HAL_SD_IRQHandler+0x192>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80e8 	beq.w	80080c6 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 fb04 	bl	800a504 <HAL_SD_RxCpltCallback>
}
 8007efc:	e0e3      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <HAL_SD_IRQHandler+0x1ba>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 f919 	bl	800914e <SD_Write_IT>
 8007f1c:	e0d3      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f24:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 809f 	beq.w	800806c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	f043 0202 	orr.w	r2, r3, #2
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	f043 0208 	orr.w	r2, r3, #8
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	f043 0220 	orr.w	r2, r3, #32
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f82:	f003 0310 	and.w	r3, r3, #16
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	f043 0210 	orr.w	r2, r3, #16
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a33      	ldr	r2, [pc, #204]	; (8008068 <HAL_SD_IRQHandler+0x304>)
 8007f9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007fac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fbc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fdc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fd9a 	bl	8009b1c <SDMMC_CmdStopTransfer>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008002:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00a      	beq.n	800802e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f852 	bl	80080d0 <HAL_SD_ErrorCallback>
}
 800802c:	e04b      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008034:	2b00      	cmp	r3, #0
 8008036:	d046      	beq.n	80080c6 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d042      	beq.n	80080c6 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800804e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2200      	movs	r2, #0
 8008056:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f835 	bl	80080d0 <HAL_SD_ErrorCallback>
}
 8008066:	e02e      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
 8008068:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d025      	beq.n	80080c6 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10c      	bne.n	80080ac <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f8d4 	bl	800924a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 80080a2:	e010      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f8bc 	bl	8009222 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 80080aa:	e00c      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 f8bd 	bl	8009236 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 80080bc:	e003      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 f8a5 	bl	800920e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 80080c4:	e7ff      	b.n	80080c6 <HAL_SD_IRQHandler+0x362>
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f2:	0f9b      	lsrs	r3, r3, #30
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080fe:	0e9b      	lsrs	r3, r3, #26
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	b2da      	uxtb	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008110:	0e1b      	lsrs	r3, r3, #24
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	b2da      	uxtb	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	b2da      	uxtb	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812e:	0a1b      	lsrs	r3, r3, #8
 8008130:	b2da      	uxtb	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813a:	b2da      	uxtb	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008144:	0d1b      	lsrs	r3, r3, #20
 8008146:	b29a      	uxth	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	b2da      	uxtb	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008162:	0bdb      	lsrs	r3, r3, #15
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008174:	0b9b      	lsrs	r3, r3, #14
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008186:	0b5b      	lsrs	r3, r3, #13
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	b2da      	uxtb	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008198:	0b1b      	lsrs	r3, r3, #12
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2200      	movs	r2, #0
 80081aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d163      	bne.n	800827c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b8:	009a      	lsls	r2, r3, #2
 80081ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081be:	4013      	ands	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80081c4:	0f92      	lsrs	r2, r2, #30
 80081c6:	431a      	orrs	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d0:	0edb      	lsrs	r3, r3, #27
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e2:	0e1b      	lsrs	r3, r3, #24
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081f4:	0d5b      	lsrs	r3, r3, #21
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008206:	0c9b      	lsrs	r3, r3, #18
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008218:	0bdb      	lsrs	r3, r3, #15
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	b2da      	uxtb	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	7e1b      	ldrb	r3, [r3, #24]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	3302      	adds	r3, #2
 800823c:	2201      	movs	r2, #1
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008246:	fb03 f202 	mul.w	r2, r3, r2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	7a1b      	ldrb	r3, [r3, #8]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	2201      	movs	r2, #1
 800825a:	409a      	lsls	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008268:	0a52      	lsrs	r2, r2, #9
 800826a:	fb03 f202 	mul.w	r2, r3, r2
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008278:	659a      	str	r2, [r3, #88]	; 0x58
 800827a:	e031      	b.n	80082e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d11d      	bne.n	80082c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008292:	0c1b      	lsrs	r3, r3, #16
 8008294:	431a      	orrs	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	3301      	adds	r3, #1
 80082a0:	029a      	lsls	r2, r3, #10
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
 80082be:	e00f      	b.n	80082e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a58      	ldr	r2, [pc, #352]	; (8008428 <HAL_SD_GetCardCSD+0x344>)
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e09d      	b.n	800841c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e4:	0b9b      	lsrs	r3, r3, #14
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f6:	09db      	lsrs	r3, r3, #7
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830e:	b2da      	uxtb	r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008318:	0fdb      	lsrs	r3, r3, #31
 800831a:	b2da      	uxtb	r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008324:	0f5b      	lsrs	r3, r3, #29
 8008326:	b2db      	uxtb	r3, r3
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	b2da      	uxtb	r2, r3
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008336:	0e9b      	lsrs	r3, r3, #26
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	b2da      	uxtb	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	0d9b      	lsrs	r3, r3, #22
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	b2da      	uxtb	r2, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835a:	0d5b      	lsrs	r3, r3, #21
 800835c:	b2db      	uxtb	r3, r3
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	b2da      	uxtb	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	b2da      	uxtb	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800838a:	0bdb      	lsrs	r3, r3, #15
 800838c:	b2db      	uxtb	r3, r3
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	b2da      	uxtb	r2, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839e:	0b9b      	lsrs	r3, r3, #14
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b2:	0b5b      	lsrs	r3, r3, #13
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c6:	0b1b      	lsrs	r3, r3, #12
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083da:	0a9b      	lsrs	r3, r3, #10
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840a:	b2da      	uxtb	r2, r3
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	1fe00fff 	.word	0x1fe00fff

0800842c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b094      	sub	sp, #80	; 0x50
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fbd4 	bl	8008bf0 <SD_SendSDStatus>
 8008448:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800844a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844c:	2b00      	cmp	r3, #0
 800844e:	d011      	beq.n	8008474 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a4f      	ldr	r2, [pc, #316]	; (8008594 <HAL_SD_GetCardStatus+0x168>)
 8008456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008472:	e070      	b.n	8008556 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	099b      	lsrs	r3, r3, #6
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	b2da      	uxtb	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	0a1b      	lsrs	r3, r3, #8
 8008498:	b29b      	uxth	r3, r3
 800849a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	0e1b      	lsrs	r3, r3, #24
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4313      	orrs	r3, r2
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	061a      	lsls	r2, r3, #24
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	0a1b      	lsrs	r3, r3, #8
 80084c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80084c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	0e1b      	lsrs	r3, r3, #24
 80084ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	0d1b      	lsrs	r3, r3, #20
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	0c1b      	lsrs	r3, r3, #16
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	b29b      	uxth	r3, r3
 8008502:	b2db      	uxtb	r3, r3
 8008504:	b29b      	uxth	r3, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	b29a      	uxth	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	0a9b      	lsrs	r3, r3, #10
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008518:	b2da      	uxtb	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	0a1b      	lsrs	r3, r3, #8
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	b2da      	uxtb	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	091b      	lsrs	r3, r3, #4
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 030f 	and.w	r3, r3, #15
 8008538:	b2da      	uxtb	r2, r3
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	0e1b      	lsrs	r3, r3, #24
 8008550:	b2da      	uxtb	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fa2c 	bl	80099bc <SDMMC_CmdBlockLength>
 8008564:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00d      	beq.n	8008588 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a08      	ldr	r2, [pc, #32]	; (8008594 <HAL_SD_GetCardStatus+0x168>)
 8008572:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008578:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008588:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800858c:	4618      	mov	r0, r3
 800858e:	3750      	adds	r7, #80	; 0x50
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	1fe00fff 	.word	0x1fe00fff

08008598 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b090      	sub	sp, #64	; 0x40
 80085f4:	af04      	add	r7, sp, #16
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2203      	movs	r2, #3
 8008604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860c:	2b03      	cmp	r3, #3
 800860e:	d02e      	beq.n	800866e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008616:	d106      	bne.n	8008626 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
 8008624:	e029      	b.n	800867a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800862c:	d10a      	bne.n	8008644 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fbd6 	bl	8008de0 <SD_WideBus_Enable>
 8008634:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	639a      	str	r2, [r3, #56]	; 0x38
 8008642:	e01a      	b.n	800867a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fc13 	bl	8008e76 <SD_WideBus_Disable>
 8008650:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	639a      	str	r2, [r3, #56]	; 0x38
 800865e:	e00c      	b.n	800867a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	; 0x38
 800866c:	e005      	b.n	800867a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a60      	ldr	r2, [pc, #384]	; (8008808 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008688:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008690:	e097      	b.n	80087c2 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008692:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008696:	f7fd fed3 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 800869a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8086 	beq.w	80087b0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	4952      	ldr	r1, [pc, #328]	; (800880c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80086c2:	fba1 1303 	umull	r1, r3, r1, r3
 80086c6:	0e1b      	lsrs	r3, r3, #24
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d303      	bcc.n	80086d4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	e05a      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086dc:	d103      	bne.n	80086e6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e051      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ee:	d126      	bne.n	800873e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10e      	bne.n	8008716 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	4a45      	ldr	r2, [pc, #276]	; (8008810 <HAL_SD_ConfigWideBusOperation+0x220>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d906      	bls.n	800870e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	4a42      	ldr	r2, [pc, #264]	; (800880c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008704:	fba2 2303 	umull	r2, r3, r2, r3
 8008708:	0e5b      	lsrs	r3, r3, #25
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	e03d      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	e039      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008722:	4a3b      	ldr	r2, [pc, #236]	; (8008810 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d906      	bls.n	8008736 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	4a38      	ldr	r2, [pc, #224]	; (800880c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	0e5b      	lsrs	r3, r3, #25
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e029      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	e025      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10e      	bne.n	8008764 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	4a32      	ldr	r2, [pc, #200]	; (8008814 <HAL_SD_ConfigWideBusOperation+0x224>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d906      	bls.n	800875c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	4a2e      	ldr	r2, [pc, #184]	; (800880c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	0e1b      	lsrs	r3, r3, #24
 8008758:	61fb      	str	r3, [r7, #28]
 800875a:	e016      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	e012      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008770:	4a28      	ldr	r2, [pc, #160]	; (8008814 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d906      	bls.n	8008784 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	4a24      	ldr	r2, [pc, #144]	; (800880c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800877a:	fba2 2303 	umull	r2, r3, r2, r3
 800877e:	0e1b      	lsrs	r3, r3, #24
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	e002      	b.n	800878a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681d      	ldr	r5, [r3, #0]
 8008794:	466c      	mov	r4, sp
 8008796:	f107 0318 	add.w	r3, r7, #24
 800879a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800879e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087a2:	f107 030c 	add.w	r3, r7, #12
 80087a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087a8:	4628      	mov	r0, r5
 80087aa:	f001 f829 	bl	8009800 <SDMMC_Init>
 80087ae:	e008      	b.n	80087c2 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 f8f6 	bl	80099bc <SDMMC_CmdBlockLength>
 80087d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00c      	beq.n	80087f2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a0a      	ldr	r2, [pc, #40]	; (8008808 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80087fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3730      	adds	r7, #48	; 0x30
 8008802:	46bd      	mov	sp, r7
 8008804:	bdb0      	pop	{r4, r5, r7, pc}
 8008806:	bf00      	nop
 8008808:	1fe00fff 	.word	0x1fe00fff
 800880c:	55e63b89 	.word	0x55e63b89
 8008810:	02faf080 	.word	0x02faf080
 8008814:	017d7840 	.word	0x017d7840

08008818 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fab0 	bl	8008d90 <SD_SendStatus>
 8008830:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	0a5b      	lsrs	r3, r3, #9
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800884e:	693b      	ldr	r3, [r7, #16]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008858:	b5b0      	push	{r4, r5, r7, lr}
 800885a:	b090      	sub	sp, #64	; 0x40
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008860:	2301      	movs	r3, #1
 8008862:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f001 f823 	bl	80098b4 <SDMMC_GetPowerState>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008874:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008878:	e0a9      	b.n	80089ce <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887e:	2b03      	cmp	r3, #3
 8008880:	d02e      	beq.n	80088e0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fa68 	bl	8009d5c <SDMMC_CmdSendCID>
 800888c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800888e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <SD_InitCard+0x40>
    {
      return errorstate;
 8008894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008896:	e09a      	b.n	80089ce <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 f84d 	bl	800993e <SDMMC_GetResponse>
 80088a4:	4602      	mov	r2, r0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2104      	movs	r1, #4
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 f844 	bl	800993e <SDMMC_GetResponse>
 80088b6:	4602      	mov	r2, r0
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2108      	movs	r1, #8
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 f83b 	bl	800993e <SDMMC_GetResponse>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	210c      	movs	r1, #12
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 f832 	bl	800993e <SDMMC_GetResponse>
 80088da:	4602      	mov	r2, r0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d00d      	beq.n	8008904 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f107 020e 	add.w	r2, r7, #14
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 fa71 	bl	8009dda <SDMMC_CmdSetRelAdd>
 80088f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <SD_InitCard+0xac>
    {
      return errorstate;
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	e064      	b.n	80089ce <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008908:	2b03      	cmp	r3, #3
 800890a:	d036      	beq.n	800897a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800890c:	89fb      	ldrh	r3, [r7, #14]
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891c:	041b      	lsls	r3, r3, #16
 800891e:	4619      	mov	r1, r3
 8008920:	4610      	mov	r0, r2
 8008922:	f001 fa3a 	bl	8009d9a <SDMMC_CmdSendCSD>
 8008926:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <SD_InitCard+0xda>
    {
      return errorstate;
 800892e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008930:	e04d      	b.n	80089ce <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2100      	movs	r1, #0
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f800 	bl	800993e <SDMMC_GetResponse>
 800893e:	4602      	mov	r2, r0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2104      	movs	r1, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fff7 	bl	800993e <SDMMC_GetResponse>
 8008950:	4602      	mov	r2, r0
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2108      	movs	r1, #8
 800895c:	4618      	mov	r0, r3
 800895e:	f000 ffee 	bl	800993e <SDMMC_GetResponse>
 8008962:	4602      	mov	r2, r0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	210c      	movs	r1, #12
 800896e:	4618      	mov	r0, r3
 8008970:	f000 ffe5 	bl	800993e <SDMMC_GetResponse>
 8008974:	4602      	mov	r2, r0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2104      	movs	r1, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f000 ffdc 	bl	800993e <SDMMC_GetResponse>
 8008986:	4603      	mov	r3, r0
 8008988:	0d1a      	lsrs	r2, r3, #20
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800898e:	f107 0310 	add.w	r3, r7, #16
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fba5 	bl	80080e4 <HAL_SD_GetCardCSD>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089a4:	e013      	b.n	80089ce <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	2200      	movs	r2, #0
 80089b2:	461c      	mov	r4, r3
 80089b4:	4615      	mov	r5, r2
 80089b6:	4622      	mov	r2, r4
 80089b8:	462b      	mov	r3, r5
 80089ba:	4608      	mov	r0, r1
 80089bc:	f001 f8e4 	bl	8009b88 <SDMMC_CmdSelDesel>
 80089c0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <SD_InitCard+0x174>
  {
    return errorstate;
 80089c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ca:	e000      	b.n	80089ce <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3740      	adds	r7, #64	; 0x40
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080089d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	2300      	movs	r3, #0
 80089ea:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80089ec:	f7f9 fc30 	bl	8002250 <HAL_GetTick>
 80089f0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 f8ea 	bl	8009bd0 <SDMMC_CmdGoIdleState>
 80089fc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <SD_PowerON+0x30>
  {
    return errorstate;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	e0ed      	b.n	8008be4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 f8fd 	bl	8009c0c <SDMMC_CmdOperCond>
 8008a12:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00d      	beq.n	8008a36 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 f8d3 	bl	8009bd0 <SDMMC_CmdGoIdleState>
 8008a2a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <SD_PowerON+0x64>
    {
      return errorstate;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	e0d6      	b.n	8008be4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d137      	bne.n	8008ab4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 f8fe 	bl	8009c4c <SDMMC_CmdAppCommand>
 8008a50:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d02d      	beq.n	8008ab4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a5c:	e0c2      	b.n	8008be4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 f8f1 	bl	8009c4c <SDMMC_CmdAppCommand>
 8008a6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	e0b6      	b.n	8008be4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	495c      	ldr	r1, [pc, #368]	; (8008bec <SD_PowerON+0x214>)
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 f908 	bl	8009c92 <SDMMC_CmdAppOperCommand>
 8008a82:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a8e:	e0a9      	b.n	8008be4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 ff51 	bl	800993e <SDMMC_GetResponse>
 8008a9c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	0fdb      	lsrs	r3, r3, #31
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d101      	bne.n	8008aaa <SD_PowerON+0xd2>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <SD_PowerON+0xd4>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61bb      	str	r3, [r7, #24]

    count++;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d802      	bhi.n	8008ac4 <SD_PowerON+0xec>
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0cc      	beq.n	8008a5e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d902      	bls.n	8008ad4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ad2:	e087      	b.n	8008be4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d07e      	beq.n	8008bdc <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d17a      	bne.n	8008be2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d075      	beq.n	8008be2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008afc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0208 	orr.w	r2, r2, #8
 8008b0c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 f9c8 	bl	8009ea8 <SDMMC_CmdVoltageSwitch>
 8008b18:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00c      	beq.n	8008b3a <SD_PowerON+0x162>
        {
          return errorstate;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	e05f      	b.n	8008be4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b24:	f7f9 fb94 	bl	8002250 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b32:	d102      	bne.n	8008b3a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b38:	e054      	b.n	8008be4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b48:	d1ec      	bne.n	8008b24 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b62:	d002      	beq.n	8008b6a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b68:	e03c      	b.n	8008be4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	f000 fb44 	bl	80091f8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0204 	orr.w	r2, r2, #4
 8008b7e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008b80:	e00a      	b.n	8008b98 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b82:	f7f9 fb65 	bl	8002250 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b90:	d102      	bne.n	8008b98 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008b92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b96:	e025      	b.n	8008be4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ba6:	d1ec      	bne.n	8008b82 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc0:	d102      	bne.n	8008bc8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bc6:	e00d      	b.n	8008be4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2213      	movs	r2, #19
 8008bce:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8008bda:	e002      	b.n	8008be2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3720      	adds	r7, #32
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	c1100000 	.word	0xc1100000

08008bf0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08c      	sub	sp, #48	; 0x30
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bfa:	f7f9 fb29 	bl	8002250 <HAL_GetTick>
 8008bfe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fe97 	bl	800993e <SDMMC_GetResponse>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c1a:	d102      	bne.n	8008c22 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c20:	e0b0      	b.n	8008d84 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2140      	movs	r1, #64	; 0x40
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fec7 	bl	80099bc <SDMMC_CmdBlockLength>
 8008c2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d005      	beq.n	8008c42 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	e0a0      	b.n	8008d84 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	f000 fffc 	bl	8009c4c <SDMMC_CmdAppCommand>
 8008c54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	e08d      	b.n	8008d84 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c6c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008c72:	2360      	movs	r3, #96	; 0x60
 8008c74:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c76:	2302      	movs	r3, #2
 8008c78:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f107 0208 	add.w	r2, r7, #8
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fe69 	bl	8009964 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 f8e4 	bl	8009e64 <SDMMC_CmdStatusRegister>
 8008c9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d02b      	beq.n	8008cfc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	e069      	b.n	8008d84 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d013      	beq.n	8008ce6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cc2:	e00d      	b.n	8008ce0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fdc3 	bl	8009854 <SDMMC_ReadFIFO>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	601a      	str	r2, [r3, #0]
        pData++;
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	3301      	adds	r3, #1
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	2b07      	cmp	r3, #7
 8008ce4:	d9ee      	bls.n	8008cc4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ce6:	f7f9 fab3 	bl	8002250 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cf4:	d102      	bne.n	8008cfc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cfa:	e043      	b.n	8008d84 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0d2      	beq.n	8008cb0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d18:	2308      	movs	r3, #8
 8008d1a:	e033      	b.n	8008d84 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e02a      	b.n	8008d84 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d017      	beq.n	8008d6c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	e021      	b.n	8008d84 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fd85 	bl	8009854 <SDMMC_ReadFIFO>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	601a      	str	r2, [r3, #0]
    pData++;
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	3304      	adds	r3, #4
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d56:	f7f9 fa7b 	bl	8002250 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d64:	d102      	bne.n	8008d6c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d6a:	e00b      	b.n	8008d84 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e2      	bne.n	8008d40 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a03      	ldr	r2, [pc, #12]	; (8008d8c <SD_SendSDStatus+0x19c>)
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3730      	adds	r7, #48	; 0x30
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	18000f3a 	.word	0x18000f3a

08008d90 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d102      	bne.n	8008da6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008da0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008da4:	e018      	b.n	8008dd8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dae:	041b      	lsls	r3, r3, #16
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f001 f833 	bl	8009e1e <SDMMC_CmdSendStatus>
 8008db8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	e009      	b.n	8008dd8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fdb7 	bl	800993e <SDMMC_GetResponse>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	2300      	movs	r3, #0
 8008dee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2100      	movs	r1, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fda1 	bl	800993e <SDMMC_GetResponse>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e06:	d102      	bne.n	8008e0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e0c:	e02f      	b.n	8008e6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e0e:	f107 030c 	add.w	r3, r7, #12
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f879 	bl	8008f0c <SD_FindSCR>
 8008e1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	e023      	b.n	8008e6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01c      	beq.n	8008e6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	f000 ff05 	bl	8009c4c <SDMMC_CmdAppCommand>
 8008e42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	e00f      	b.n	8008e6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2102      	movs	r1, #2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 ff3c 	bl	8009cd2 <SDMMC_CmdBusWidth>
 8008e5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	e003      	b.n	8008e6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e001      	b.n	8008e6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	2300      	movs	r3, #0
 8008e84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fd56 	bl	800993e <SDMMC_GetResponse>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e9c:	d102      	bne.n	8008ea4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ea2:	e02f      	b.n	8008f04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f82e 	bl	8008f0c <SD_FindSCR>
 8008eb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	e023      	b.n	8008f04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01c      	beq.n	8008f00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f000 feba 	bl	8009c4c <SDMMC_CmdAppCommand>
 8008ed8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	e00f      	b.n	8008f04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fef1 	bl	8009cd2 <SDMMC_CmdBusWidth>
 8008ef0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	e003      	b.n	8008f04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	e001      	b.n	8008f04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08e      	sub	sp, #56	; 0x38
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f16:	f7f9 f99b 	bl	8002250 <HAL_GetTick>
 8008f1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008f20:	2300      	movs	r3, #0
 8008f22:	60bb      	str	r3, [r7, #8]
 8008f24:	2300      	movs	r3, #0
 8008f26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2108      	movs	r1, #8
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fd42 	bl	80099bc <SDMMC_CmdBlockLength>
 8008f38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	e0ad      	b.n	80090a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f4c:	041b      	lsls	r3, r3, #16
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4610      	mov	r0, r2
 8008f52:	f000 fe7b 	bl	8009c4c <SDMMC_CmdAppCommand>
 8008f56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	e09e      	b.n	80090a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f68:	2308      	movs	r3, #8
 8008f6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008f6c:	2330      	movs	r3, #48	; 0x30
 8008f6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f70:	2302      	movs	r3, #2
 8008f72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f107 0210 	add.w	r2, r7, #16
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fcec 	bl	8009964 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fec1 	bl	8009d18 <SDMMC_CmdSendSCR>
 8008f96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d027      	beq.n	8008fee <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	e07e      	b.n	80090a0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d113      	bne.n	8008fd8 <SD_FindSCR+0xcc>
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d110      	bne.n	8008fd8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fc4a 	bl	8009854 <SDMMC_ReadFIFO>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fc43 	bl	8009854 <SDMMC_ReadFIFO>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	60fb      	str	r3, [r7, #12]
      index++;
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fd8:	f7f9 f93a 	bl	8002250 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe6:	d102      	bne.n	8008fee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fec:	e058      	b.n	80090a0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ff4:	f240 532a 	movw	r3, #1322	; 0x52a
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0d1      	beq.n	8008fa2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2208      	movs	r2, #8
 8009012:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009014:	2308      	movs	r3, #8
 8009016:	e043      	b.n	80090a0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2202      	movs	r2, #2
 800902c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800902e:	2302      	movs	r3, #2
 8009030:	e036      	b.n	80090a0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d005      	beq.n	800904c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2220      	movs	r2, #32
 8009046:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009048:	2320      	movs	r3, #32
 800904a:	e029      	b.n	80090a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <SD_FindSCR+0x19c>)
 8009052:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	061a      	lsls	r2, r3, #24
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009060:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	0a1b      	lsrs	r3, r3, #8
 8009066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800906a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	0e1b      	lsrs	r3, r3, #24
 8009070:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	601a      	str	r2, [r3, #0]
    scr++;
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	3304      	adds	r3, #4
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	061a      	lsls	r2, r3, #24
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009088:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009092:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	0e1b      	lsrs	r3, r3, #24
 8009098:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3738      	adds	r7, #56	; 0x38
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	18000f3a 	.word	0x18000f3a

080090ac <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d03f      	beq.n	8009146 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	e033      	b.n	8009134 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fbbf 	bl	8009854 <SDMMC_ReadFIFO>
 80090d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3b01      	subs	r3, #1
 8009100:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	b2da      	uxtb	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	3b01      	subs	r3, #1
 8009116:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	0e1b      	lsrs	r3, r3, #24
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	3b01      	subs	r3, #1
 800912c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	3301      	adds	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2b07      	cmp	r3, #7
 8009138:	d9c8      	bls.n	80090cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009146:	bf00      	nop
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b086      	sub	sp, #24
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d043      	beq.n	80091f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e037      	b.n	80091de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	021a      	lsls	r2, r3, #8
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4313      	orrs	r3, r2
 800918a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3b01      	subs	r3, #1
 8009196:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	041a      	lsls	r2, r3, #16
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	061a      	lsls	r2, r3, #24
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f107 0208 	add.w	r2, r7, #8
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fb4b 	bl	800986e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	3301      	adds	r3, #1
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b07      	cmp	r3, #7
 80091e2:	d9c4      	bls.n	800916e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80091f0:	bf00      	nop
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e049      	b.n	8009304 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f841 	bl	800930c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2202      	movs	r2, #2
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f000 f9f7 	bl	8009690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	d001      	beq.n	8009338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e04f      	b.n	80093d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a23      	ldr	r2, [pc, #140]	; (80093e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d01d      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0x76>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009362:	d018      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0x76>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a1f      	ldr	r2, [pc, #124]	; (80093e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d013      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0x76>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a1e      	ldr	r2, [pc, #120]	; (80093ec <HAL_TIM_Base_Start_IT+0xcc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00e      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0x76>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1c      	ldr	r2, [pc, #112]	; (80093f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d009      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0x76>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1b      	ldr	r2, [pc, #108]	; (80093f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d004      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0x76>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a19      	ldr	r2, [pc, #100]	; (80093f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d115      	bne.n	80093c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <HAL_TIM_Base_Start_IT+0xdc>)
 800939e:	4013      	ands	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b06      	cmp	r3, #6
 80093a6:	d015      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0xb4>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ae:	d011      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c0:	e008      	b.n	80093d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f042 0201 	orr.w	r2, r2, #1
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	e000      	b.n	80093d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	40012c00 	.word	0x40012c00
 80093e8:	40000400 	.word	0x40000400
 80093ec:	40000800 	.word	0x40000800
 80093f0:	40000c00 	.word	0x40000c00
 80093f4:	40013400 	.word	0x40013400
 80093f8:	40014000 	.word	0x40014000
 80093fc:	00010007 	.word	0x00010007

08009400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b02      	cmp	r3, #2
 8009414:	d122      	bne.n	800945c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b02      	cmp	r3, #2
 8009422:	d11b      	bne.n	800945c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0202 	mvn.w	r2, #2
 800942c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f905 	bl	8009652 <HAL_TIM_IC_CaptureCallback>
 8009448:	e005      	b.n	8009456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f8f7 	bl	800963e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f908 	bl	8009666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b04      	cmp	r3, #4
 8009468:	d122      	bne.n	80094b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b04      	cmp	r3, #4
 8009476:	d11b      	bne.n	80094b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0204 	mvn.w	r2, #4
 8009480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2202      	movs	r2, #2
 8009486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f8db 	bl	8009652 <HAL_TIM_IC_CaptureCallback>
 800949c:	e005      	b.n	80094aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8cd 	bl	800963e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f8de 	bl	8009666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0308 	and.w	r3, r3, #8
 80094ba:	2b08      	cmp	r3, #8
 80094bc:	d122      	bne.n	8009504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d11b      	bne.n	8009504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f06f 0208 	mvn.w	r2, #8
 80094d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2204      	movs	r2, #4
 80094da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f8b1 	bl	8009652 <HAL_TIM_IC_CaptureCallback>
 80094f0:	e005      	b.n	80094fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f8a3 	bl	800963e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f8b4 	bl	8009666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b10      	cmp	r3, #16
 8009510:	d122      	bne.n	8009558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0310 	and.w	r3, r3, #16
 800951c:	2b10      	cmp	r3, #16
 800951e:	d11b      	bne.n	8009558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0210 	mvn.w	r2, #16
 8009528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2208      	movs	r2, #8
 800952e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f887 	bl	8009652 <HAL_TIM_IC_CaptureCallback>
 8009544:	e005      	b.n	8009552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f879 	bl	800963e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f88a 	bl	8009666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10e      	bne.n	8009584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b01      	cmp	r3, #1
 8009572:	d107      	bne.n	8009584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f06f 0201 	mvn.w	r2, #1
 800957c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7f8 fa26 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958e:	2b80      	cmp	r3, #128	; 0x80
 8009590:	d10e      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959c:	2b80      	cmp	r3, #128	; 0x80
 800959e:	d107      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f914 	bl	80097d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095be:	d10e      	bne.n	80095de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ca:	2b80      	cmp	r3, #128	; 0x80
 80095cc:	d107      	bne.n	80095de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f907 	bl	80097ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d10e      	bne.n	800960a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	d107      	bne.n	800960a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f838 	bl	800967a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b20      	cmp	r3, #32
 8009616:	d10e      	bne.n	8009636 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b20      	cmp	r3, #32
 8009624:	d107      	bne.n	8009636 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f06f 0220 	mvn.w	r2, #32
 800962e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8c7 	bl	80097c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009646:	bf00      	nop
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a40      	ldr	r2, [pc, #256]	; (80097a4 <TIM_Base_SetConfig+0x114>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d013      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ae:	d00f      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a3d      	ldr	r2, [pc, #244]	; (80097a8 <TIM_Base_SetConfig+0x118>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00b      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a3c      	ldr	r2, [pc, #240]	; (80097ac <TIM_Base_SetConfig+0x11c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d007      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a3b      	ldr	r2, [pc, #236]	; (80097b0 <TIM_Base_SetConfig+0x120>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a3a      	ldr	r2, [pc, #232]	; (80097b4 <TIM_Base_SetConfig+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d108      	bne.n	80096e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a2f      	ldr	r2, [pc, #188]	; (80097a4 <TIM_Base_SetConfig+0x114>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d01f      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f0:	d01b      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a2c      	ldr	r2, [pc, #176]	; (80097a8 <TIM_Base_SetConfig+0x118>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d017      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <TIM_Base_SetConfig+0x11c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a2a      	ldr	r2, [pc, #168]	; (80097b0 <TIM_Base_SetConfig+0x120>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00f      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a29      	ldr	r2, [pc, #164]	; (80097b4 <TIM_Base_SetConfig+0x124>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00b      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a28      	ldr	r2, [pc, #160]	; (80097b8 <TIM_Base_SetConfig+0x128>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d007      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a27      	ldr	r2, [pc, #156]	; (80097bc <TIM_Base_SetConfig+0x12c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d003      	beq.n	800972a <TIM_Base_SetConfig+0x9a>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a26      	ldr	r2, [pc, #152]	; (80097c0 <TIM_Base_SetConfig+0x130>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d108      	bne.n	800973c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a10      	ldr	r2, [pc, #64]	; (80097a4 <TIM_Base_SetConfig+0x114>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00f      	beq.n	8009788 <TIM_Base_SetConfig+0xf8>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a12      	ldr	r2, [pc, #72]	; (80097b4 <TIM_Base_SetConfig+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00b      	beq.n	8009788 <TIM_Base_SetConfig+0xf8>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a11      	ldr	r2, [pc, #68]	; (80097b8 <TIM_Base_SetConfig+0x128>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d007      	beq.n	8009788 <TIM_Base_SetConfig+0xf8>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a10      	ldr	r2, [pc, #64]	; (80097bc <TIM_Base_SetConfig+0x12c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_Base_SetConfig+0xf8>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a0f      	ldr	r2, [pc, #60]	; (80097c0 <TIM_Base_SetConfig+0x130>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d103      	bne.n	8009790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	615a      	str	r2, [r3, #20]
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40000400 	.word	0x40000400
 80097ac:	40000800 	.word	0x40000800
 80097b0:	40000c00 	.word	0x40000c00
 80097b4:	40013400 	.word	0x40013400
 80097b8:	40014000 	.word	0x40014000
 80097bc:	40014400 	.word	0x40014400
 80097c0:	40014800 	.word	0x40014800

080097c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009800:	b084      	sub	sp, #16
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	f107 001c 	add.w	r0, r7, #28
 800980e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009816:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009818:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800981a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800981e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009822:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009826:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	4313      	orrs	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <SDMMC_Init+0x50>)
 8009834:	4013      	ands	r3, r2
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	b004      	add	sp, #16
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	ffc02c00 	.word	0xffc02c00

08009854 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f043 0203 	orr.w	r2, r3, #3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80098a4:	2002      	movs	r0, #2
 80098a6:	f7f8 fcdf 	bl	8002268 <HAL_Delay>

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0303 	and.w	r3, r3, #3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80098f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80098fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	4b06      	ldr	r3, [pc, #24]	; (8009920 <SDMMC_SendCommand+0x50>)
 8009908:	4013      	ands	r3, r2
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	431a      	orrs	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	fffee0c0 	.word	0xfffee0c0

08009924 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	b2db      	uxtb	r3, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3314      	adds	r3, #20
 800994c:	461a      	mov	r2, r3
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	4413      	add	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800998a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009990:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009996:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	431a      	orrs	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0

}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80099ca:	2310      	movs	r3, #16
 80099cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099de:	f107 0308 	add.w	r3, r7, #8
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff ff73 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80099ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ee:	2110      	movs	r1, #16
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fa7b 	bl	8009eec <SDMMC_GetCmdResp1>
 80099f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f8:	69fb      	ldr	r3, [r7, #28]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b088      	sub	sp, #32
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a10:	2311      	movs	r3, #17
 8009a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff ff50 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a34:	2111      	movs	r1, #17
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa58 	bl	8009eec <SDMMC_GetCmdResp1>
 8009a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3e:	69fb      	ldr	r3, [r7, #28]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3720      	adds	r7, #32
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009a56:	2312      	movs	r3, #18
 8009a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a6a:	f107 0308 	add.w	r3, r7, #8
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff ff2d 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a7a:	2112      	movs	r1, #18
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fa35 	bl	8009eec <SDMMC_GetCmdResp1>
 8009a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a84:	69fb      	ldr	r3, [r7, #28]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b088      	sub	sp, #32
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a9c:	2318      	movs	r3, #24
 8009a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ff0a 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac0:	2118      	movs	r1, #24
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa12 	bl	8009eec <SDMMC_GetCmdResp1>
 8009ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aca:	69fb      	ldr	r3, [r7, #28]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009ae2:	2319      	movs	r3, #25
 8009ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fee7 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b06:	2119      	movs	r1, #25
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f9ef 	bl	8009eec <SDMMC_GetCmdResp1>
 8009b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b10:	69fb      	ldr	r3, [r7, #28]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b28:	230c      	movs	r3, #12
 8009b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b3a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b54:	f107 0308 	add.w	r3, r7, #8
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff feb8 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b60:	4a08      	ldr	r2, [pc, #32]	; (8009b84 <SDMMC_CmdStopTransfer+0x68>)
 8009b62:	210c      	movs	r1, #12
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9c1 	bl	8009eec <SDMMC_GetCmdResp1>
 8009b6a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009b78:	69fb      	ldr	r3, [r7, #28]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3720      	adds	r7, #32
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	05f5e100 	.word	0x05f5e100

08009b88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08a      	sub	sp, #40	; 0x28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b98:	2307      	movs	r3, #7
 8009b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ba0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009baa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bac:	f107 0310 	add.w	r3, r7, #16
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f7ff fe8c 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbc:	2107      	movs	r1, #7
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f994 	bl	8009eec <SDMMC_GetCmdResp1>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	; 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009be0:	2300      	movs	r3, #0
 8009be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bee:	f107 0308 	add.w	r3, r7, #8
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fe6b 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fbb8 	bl	800a370 <SDMMC_GetCmdError>
 8009c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c02:	69fb      	ldr	r3, [r7, #28]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c14:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c1a:	2308      	movs	r3, #8
 8009c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c2e:	f107 0308 	add.w	r3, r7, #8
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff fe4b 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fb4a 	bl	800a2d4 <SDMMC_GetCmdResp7>
 8009c40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c42:	69fb      	ldr	r3, [r7, #28]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3720      	adds	r7, #32
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c5a:	2337      	movs	r3, #55	; 0x37
 8009c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff fe2b 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7e:	2137      	movs	r1, #55	; 0x37
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f933 	bl	8009eec <SDMMC_GetCmdResp1>
 8009c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c88:	69fb      	ldr	r3, [r7, #28]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3720      	adds	r7, #32
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b088      	sub	sp, #32
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ca0:	2329      	movs	r3, #41	; 0x29
 8009ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fe08 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa4f 	bl	800a164 <SDMMC_GetCmdResp3>
 8009cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cc8:	69fb      	ldr	r3, [r7, #28]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b088      	sub	sp, #32
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009ce0:	2306      	movs	r3, #6
 8009ce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cf4:	f107 0308 	add.w	r3, r7, #8
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fde8 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d04:	2106      	movs	r1, #6
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f8f0 	bl	8009eec <SDMMC_GetCmdResp1>
 8009d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3720      	adds	r7, #32
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d24:	2333      	movs	r3, #51	; 0x33
 8009d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d38:	f107 0308 	add.w	r3, r7, #8
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fdc6 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d48:	2133      	movs	r1, #51	; 0x33
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8ce 	bl	8009eec <SDMMC_GetCmdResp1>
 8009d50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d52:	69fb      	ldr	r3, [r7, #28]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3720      	adds	r7, #32
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d72:	2300      	movs	r3, #0
 8009d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d7c:	f107 0308 	add.w	r3, r7, #8
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fda4 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f9a1 	bl	800a0d0 <SDMMC_GetCmdResp2>
 8009d8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d90:	69fb      	ldr	r3, [r7, #28]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3720      	adds	r7, #32
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b088      	sub	sp, #32
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009da8:	2309      	movs	r3, #9
 8009daa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009dac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff fd84 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f981 	bl	800a0d0 <SDMMC_GetCmdResp2>
 8009dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b088      	sub	sp, #32
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009de8:	2303      	movs	r3, #3
 8009dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dfc:	f107 0308 	add.w	r3, r7, #8
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fd64 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	2103      	movs	r1, #3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f9e9 	bl	800a1e4 <SDMMC_GetCmdResp6>
 8009e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e14:	69fb      	ldr	r3, [r7, #28]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b088      	sub	sp, #32
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e2c:	230d      	movs	r3, #13
 8009e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fd42 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e50:	210d      	movs	r1, #13
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f84a 	bl	8009eec <SDMMC_GetCmdResp1>
 8009e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3720      	adds	r7, #32
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009e70:	230d      	movs	r3, #13
 8009e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e84:	f107 0308 	add.w	r3, r7, #8
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fd20 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e94:	210d      	movs	r1, #13
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f828 	bl	8009eec <SDMMC_GetCmdResp1>
 8009e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009eb4:	230b      	movs	r3, #11
 8009eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fcfe 	bl	80098d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ed8:	210b      	movs	r1, #11
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f806 	bl	8009eec <SDMMC_GetCmdResp1>
 8009ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee2:	69fb      	ldr	r3, [r7, #28]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3720      	adds	r7, #32
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	607a      	str	r2, [r7, #4]
 8009ef8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009efa:	4b70      	ldr	r3, [pc, #448]	; (800a0bc <SDMMC_GetCmdResp1+0x1d0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a70      	ldr	r2, [pc, #448]	; (800a0c0 <SDMMC_GetCmdResp1+0x1d4>)
 8009f00:	fba2 2303 	umull	r2, r3, r2, r3
 8009f04:	0a5a      	lsrs	r2, r3, #9
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	fb02 f303 	mul.w	r3, r2, r3
 8009f0c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	1e5a      	subs	r2, r3, #1
 8009f12:	61fa      	str	r2, [r7, #28]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f1c:	e0c9      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f22:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	4b67      	ldr	r3, [pc, #412]	; (800a0c4 <SDMMC_GetCmdResp1+0x1d8>)
 8009f28:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0ef      	beq.n	8009f0e <SDMMC_GetCmdResp1+0x22>
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1ea      	bne.n	8009f0e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d004      	beq.n	8009f4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2204      	movs	r2, #4
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	e0b1      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e0a6      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4a58      	ldr	r2, [pc, #352]	; (800a0c8 <SDMMC_GetCmdResp1+0x1dc>)
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff fcda 	bl	8009924 <SDMMC_GetCommandResponse>
 8009f70:	4603      	mov	r3, r0
 8009f72:	461a      	mov	r2, r3
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d001      	beq.n	8009f7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e099      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f7e:	2100      	movs	r1, #0
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f7ff fcdc 	bl	800993e <SDMMC_GetResponse>
 8009f86:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4b50      	ldr	r3, [pc, #320]	; (800a0cc <SDMMC_GetCmdResp1+0x1e0>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e08d      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	da02      	bge.n	8009fa2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fa0:	e087      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fac:	2340      	movs	r3, #64	; 0x40
 8009fae:	e080      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fba:	2380      	movs	r3, #128	; 0x80
 8009fbc:	e079      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fcc:	e071      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fdc:	e069      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fec:	e061      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ffc:	e059      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a00c:	e051      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a01c:	e049      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a02c:	e041      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03c:	e039      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a04c:	e031      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a058:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a05c:	e029      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a068:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a06c:	e021      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a078:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a07c:	e019      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a088:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a08c:	e011      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a09c:	e009      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a0a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0ac:	e001      	b.n	800a0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3720      	adds	r7, #32
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000000 	.word	0x20000000
 800a0c0:	10624dd3 	.word	0x10624dd3
 800a0c4:	00200045 	.word	0x00200045
 800a0c8:	002000c5 	.word	0x002000c5
 800a0cc:	fdffe008 	.word	0xfdffe008

0800a0d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0d8:	4b1f      	ldr	r3, [pc, #124]	; (800a158 <SDMMC_GetCmdResp2+0x88>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <SDMMC_GetCmdResp2+0x8c>)
 800a0de:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e2:	0a5b      	lsrs	r3, r3, #9
 800a0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
 800a0ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	1e5a      	subs	r2, r3, #1
 800a0f2:	60fa      	str	r2, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d102      	bne.n	800a0fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0fc:	e026      	b.n	800a14c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a102:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0ef      	beq.n	800a0ee <SDMMC_GetCmdResp2+0x1e>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1ea      	bne.n	800a0ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11c:	f003 0304 	and.w	r3, r3, #4
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2204      	movs	r2, #4
 800a128:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a12a:	2304      	movs	r3, #4
 800a12c:	e00e      	b.n	800a14c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a140:	2301      	movs	r3, #1
 800a142:	e003      	b.n	800a14c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a06      	ldr	r2, [pc, #24]	; (800a160 <SDMMC_GetCmdResp2+0x90>)
 800a148:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	20000000 	.word	0x20000000
 800a15c:	10624dd3 	.word	0x10624dd3
 800a160:	002000c5 	.word	0x002000c5

0800a164 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a16c:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <SDMMC_GetCmdResp3+0x74>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <SDMMC_GetCmdResp3+0x78>)
 800a172:	fba2 2303 	umull	r2, r3, r2, r3
 800a176:	0a5b      	lsrs	r3, r3, #9
 800a178:	f241 3288 	movw	r2, #5000	; 0x1388
 800a17c:	fb02 f303 	mul.w	r3, r2, r3
 800a180:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1e5a      	subs	r2, r3, #1
 800a186:	60fa      	str	r2, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d102      	bne.n	800a192 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a18c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a190:	e01b      	b.n	800a1ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a196:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0ef      	beq.n	800a182 <SDMMC_GetCmdResp3+0x1e>
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1ea      	bne.n	800a182 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1be:	2304      	movs	r3, #4
 800a1c0:	e003      	b.n	800a1ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a06      	ldr	r2, [pc, #24]	; (800a1e0 <SDMMC_GetCmdResp3+0x7c>)
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	20000000 	.word	0x20000000
 800a1dc:	10624dd3 	.word	0x10624dd3
 800a1e0:	002000c5 	.word	0x002000c5

0800a1e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b088      	sub	sp, #32
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	607a      	str	r2, [r7, #4]
 800a1f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1f2:	4b35      	ldr	r3, [pc, #212]	; (800a2c8 <SDMMC_GetCmdResp6+0xe4>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a35      	ldr	r2, [pc, #212]	; (800a2cc <SDMMC_GetCmdResp6+0xe8>)
 800a1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fc:	0a5b      	lsrs	r3, r3, #9
 800a1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a202:	fb02 f303 	mul.w	r3, r2, r3
 800a206:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	1e5a      	subs	r2, r3, #1
 800a20c:	61fa      	str	r2, [r7, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a216:	e052      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0ef      	beq.n	800a208 <SDMMC_GetCmdResp6+0x24>
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1ea      	bne.n	800a208 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2204      	movs	r2, #4
 800a242:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a244:	2304      	movs	r3, #4
 800a246:	e03a      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d004      	beq.n	800a25e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e02f      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fb60 	bl	8009924 <SDMMC_GetCommandResponse>
 800a264:	4603      	mov	r3, r0
 800a266:	461a      	mov	r2, r3
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d001      	beq.n	800a272 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a26e:	2301      	movs	r3, #1
 800a270:	e025      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4a16      	ldr	r2, [pc, #88]	; (800a2d0 <SDMMC_GetCmdResp6+0xec>)
 800a276:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a278:	2100      	movs	r1, #0
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7ff fb5f 	bl	800993e <SDMMC_GetResponse>
 800a280:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d106      	bne.n	800a29a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	0c1b      	lsrs	r3, r3, #16
 800a290:	b29a      	uxth	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a296:	2300      	movs	r3, #0
 800a298:	e011      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2a8:	e009      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b8:	e001      	b.n	800a2be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3720      	adds	r7, #32
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000000 	.word	0x20000000
 800a2cc:	10624dd3 	.word	0x10624dd3
 800a2d0:	002000c5 	.word	0x002000c5

0800a2d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2dc:	4b22      	ldr	r3, [pc, #136]	; (800a368 <SDMMC_GetCmdResp7+0x94>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a22      	ldr	r2, [pc, #136]	; (800a36c <SDMMC_GetCmdResp7+0x98>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	0a5b      	lsrs	r3, r3, #9
 800a2e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ec:	fb02 f303 	mul.w	r3, r2, r3
 800a2f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	1e5a      	subs	r2, r3, #1
 800a2f6:	60fa      	str	r2, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d102      	bne.n	800a302 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a300:	e02c      	b.n	800a35c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a306:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0ef      	beq.n	800a2f2 <SDMMC_GetCmdResp7+0x1e>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1ea      	bne.n	800a2f2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2204      	movs	r2, #4
 800a32c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a32e:	2304      	movs	r3, #4
 800a330:	e014      	b.n	800a35c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d004      	beq.n	800a348 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a344:	2301      	movs	r3, #1
 800a346:	e009      	b.n	800a35c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2240      	movs	r2, #64	; 0x40
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a35a:	2300      	movs	r3, #0

}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	20000000 	.word	0x20000000
 800a36c:	10624dd3 	.word	0x10624dd3

0800a370 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a378:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <SDMMC_GetCmdError+0x50>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a11      	ldr	r2, [pc, #68]	; (800a3c4 <SDMMC_GetCmdError+0x54>)
 800a37e:	fba2 2303 	umull	r2, r3, r2, r3
 800a382:	0a5b      	lsrs	r3, r3, #9
 800a384:	f241 3288 	movw	r2, #5000	; 0x1388
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1e5a      	subs	r2, r3, #1
 800a392:	60fa      	str	r2, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a39c:	e009      	b.n	800a3b2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0f1      	beq.n	800a38e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a06      	ldr	r2, [pc, #24]	; (800a3c8 <SDMMC_GetCmdError+0x58>)
 800a3ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20000000 	.word	0x20000000
 800a3c4:	10624dd3 	.word	0x10624dd3
 800a3c8:	002000c5 	.word	0x002000c5

0800a3cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a3d0:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <MX_FATFS_Init+0x18>)
 800a3d2:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <MX_FATFS_Init+0x1c>)
 800a3d4:	f003 f8ea 	bl	800d5ac <FATFS_LinkDriver>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4b03      	ldr	r3, [pc, #12]	; (800a3ec <MX_FATFS_Init+0x20>)
 800a3de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a3e0:	bf00      	nop
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	2000088c 	.word	0x2000088c
 800a3e8:	08016024 	.word	0x08016024
 800a3ec:	20000888 	.word	0x20000888

0800a3f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a3f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a40a:	f000 f885 	bl	800a518 <BSP_SD_IsDetected>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b01      	cmp	r3, #1
 800a412:	d001      	beq.n	800a418 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a414:	2302      	movs	r3, #2
 800a416:	e012      	b.n	800a43e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a418:	480b      	ldr	r0, [pc, #44]	; (800a448 <BSP_SD_Init+0x48>)
 800a41a:	f7fd fa2b 	bl	8007874 <HAL_SD_Init>
 800a41e:	4603      	mov	r3, r0
 800a420:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a42c:	4806      	ldr	r0, [pc, #24]	; (800a448 <BSP_SD_Init+0x48>)
 800a42e:	f7fe f8df 	bl	80085f0 <HAL_SD_ConfigWideBusOperation>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a43c:	79fb      	ldrb	r3, [r7, #7]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200003a8 	.word	0x200003a8

0800a44c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	68f9      	ldr	r1, [r7, #12]
 800a462:	4806      	ldr	r0, [pc, #24]	; (800a47c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a464:	f7fd fb2e 	bl	8007ac4 <HAL_SD_ReadBlocks_DMA>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	200003a8 	.word	0x200003a8

0800a480 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	4806      	ldr	r0, [pc, #24]	; (800a4b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a498:	f7fd fbbc 	bl	8007c14 <HAL_SD_WriteBlocks_DMA>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200003a8 	.word	0x200003a8

0800a4b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a4b8:	4805      	ldr	r0, [pc, #20]	; (800a4d0 <BSP_SD_GetCardState+0x1c>)
 800a4ba:	f7fe f9ad 	bl	8008818 <HAL_SD_GetCardState>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200003a8 	.word	0x200003a8

0800a4d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	4803      	ldr	r0, [pc, #12]	; (800a4ec <BSP_SD_GetCardInfo+0x18>)
 800a4e0:	f7fe f85a 	bl	8008598 <HAL_SD_GetCardInfo>
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	200003a8 	.word	0x200003a8

0800a4f0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a4f8:	f000 f9ac 	bl	800a854 <BSP_SD_WriteCpltCallback>
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a50c:	f000 f9b4 	bl	800a878 <BSP_SD_ReadCpltCallback>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a51e:	2301      	movs	r3, #1
 800a520:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a522:	f000 f80b 	bl	800a53c <BSP_PlatformIsDetected>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a52c:	2300      	movs	r3, #0
 800a52e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	b2db      	uxtb	r3, r3
}
 800a534:	4618      	mov	r0, r3
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a542:	2301      	movs	r3, #1
 800a544:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a546:	2180      	movs	r1, #128	; 0x80
 800a548:	4806      	ldr	r0, [pc, #24]	; (800a564 <BSP_PlatformIsDetected+0x28>)
 800a54a:	f7fa fbdf 	bl	8004d0c <HAL_GPIO_ReadPin>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a554:	2300      	movs	r3, #0
 800a556:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a558:	79fb      	ldrb	r3, [r7, #7]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	48000800 	.word	0x48000800

0800a568 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a570:	f003 f920 	bl	800d7b4 <osKernelGetTickCount>
 800a574:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a576:	e006      	b.n	800a586 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a578:	f7ff ff9c 	bl	800a4b4 <BSP_SD_GetCardState>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a582:	2300      	movs	r3, #0
 800a584:	e009      	b.n	800a59a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a586:	f003 f915 	bl	800d7b4 <osKernelGetTickCount>
 800a58a:	4602      	mov	r2, r0
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d8f0      	bhi.n	800a578 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <SD_CheckStatus+0x38>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5b4:	f7ff ff7e 	bl	800a4b4 <BSP_SD_GetCardState>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d107      	bne.n	800a5ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a5be:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <SD_CheckStatus+0x38>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f023 0301 	bic.w	r3, r3, #1
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <SD_CheckStatus+0x38>)
 800a5cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a5ce:	4b03      	ldr	r3, [pc, #12]	; (800a5dc <SD_CheckStatus+0x38>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	b2db      	uxtb	r3, r3
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20000009 	.word	0x20000009

0800a5e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a5ea:	4b1c      	ldr	r3, [pc, #112]	; (800a65c <SD_initialize+0x7c>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a5f0:	f003 f898 	bl	800d724 <osKernelGetState>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d129      	bne.n	800a64e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a5fa:	f7ff ff01 	bl	800a400 <BSP_SD_Init>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d107      	bne.n	800a614 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff ffcc 	bl	800a5a4 <SD_CheckStatus>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	4b12      	ldr	r3, [pc, #72]	; (800a65c <SD_initialize+0x7c>)
 800a612:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a614:	4b11      	ldr	r3, [pc, #68]	; (800a65c <SD_initialize+0x7c>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d017      	beq.n	800a64e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a61e:	4b10      	ldr	r3, [pc, #64]	; (800a660 <SD_initialize+0x80>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d107      	bne.n	800a636 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a626:	2200      	movs	r2, #0
 800a628:	2102      	movs	r1, #2
 800a62a:	200a      	movs	r0, #10
 800a62c:	f003 fc3e 	bl	800deac <osMessageQueueNew>
 800a630:	4603      	mov	r3, r0
 800a632:	4a0b      	ldr	r2, [pc, #44]	; (800a660 <SD_initialize+0x80>)
 800a634:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a636:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <SD_initialize+0x80>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d107      	bne.n	800a64e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a63e:	4b07      	ldr	r3, [pc, #28]	; (800a65c <SD_initialize+0x7c>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	f043 0301 	orr.w	r3, r3, #1
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	4b04      	ldr	r3, [pc, #16]	; (800a65c <SD_initialize+0x7c>)
 800a64c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a64e:	4b03      	ldr	r3, [pc, #12]	; (800a65c <SD_initialize+0x7c>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	b2db      	uxtb	r3, r3
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20000009 	.word	0x20000009
 800a660:	20000cf4 	.word	0x20000cf4

0800a664 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff ff97 	bl	800a5a4 <SD_CheckStatus>
 800a676:	4603      	mov	r3, r0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a694:	f247 5030 	movw	r0, #30000	; 0x7530
 800a698:	f7ff ff66 	bl	800a568 <SD_CheckStatusWithTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da01      	bge.n	800a6a6 <SD_read+0x26>
  {
    return res;
 800a6a2:	7ffb      	ldrb	r3, [r7, #31]
 800a6a4:	e02f      	b.n	800a706 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	68b8      	ldr	r0, [r7, #8]
 800a6ac:	f7ff fece 	bl	800a44c <BSP_SD_ReadBlocks_DMA>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a6b4:	7fbb      	ldrb	r3, [r7, #30]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d124      	bne.n	800a704 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a6ba:	4b15      	ldr	r3, [pc, #84]	; (800a710 <SD_read+0x90>)
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f107 0112 	add.w	r1, r7, #18
 800a6c2:	f247 5330 	movw	r3, #30000	; 0x7530
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f003 fcc4 	bl	800e054 <osMessageQueueGet>
 800a6cc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d117      	bne.n	800a704 <SD_read+0x84>
 800a6d4:	8a7b      	ldrh	r3, [r7, #18]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d114      	bne.n	800a704 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a6da:	f003 f86b 	bl	800d7b4 <osKernelGetTickCount>
 800a6de:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a6e0:	e007      	b.n	800a6f2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a6e2:	f7ff fee7 	bl	800a4b4 <BSP_SD_GetCardState>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <SD_read+0x72>
              {
                res = RES_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a6f0:	e008      	b.n	800a704 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a6f2:	f003 f85f 	bl	800d7b4 <osKernelGetTickCount>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800a700:	4293      	cmp	r3, r2
 800a702:	d9ee      	bls.n	800a6e2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a704:	7ffb      	ldrb	r3, [r7, #31]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000cf4 	.word	0x20000cf4

0800a714 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a728:	f247 5030 	movw	r0, #30000	; 0x7530
 800a72c:	f7ff ff1c 	bl	800a568 <SD_CheckStatusWithTimeout>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	da01      	bge.n	800a73a <SD_write+0x26>
  {
    return res;
 800a736:	7ffb      	ldrb	r3, [r7, #31]
 800a738:	e02d      	b.n	800a796 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	68b8      	ldr	r0, [r7, #8]
 800a740:	f7ff fe9e 	bl	800a480 <BSP_SD_WriteBlocks_DMA>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d124      	bne.n	800a794 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <SD_write+0x8c>)
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f107 0112 	add.w	r1, r7, #18
 800a752:	f247 5330 	movw	r3, #30000	; 0x7530
 800a756:	2200      	movs	r2, #0
 800a758:	f003 fc7c 	bl	800e054 <osMessageQueueGet>
 800a75c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d117      	bne.n	800a794 <SD_write+0x80>
 800a764:	8a7b      	ldrh	r3, [r7, #18]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d114      	bne.n	800a794 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a76a:	f003 f823 	bl	800d7b4 <osKernelGetTickCount>
 800a76e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a770:	e007      	b.n	800a782 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a772:	f7ff fe9f 	bl	800a4b4 <BSP_SD_GetCardState>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d102      	bne.n	800a782 <SD_write+0x6e>
          {
            res = RES_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	77fb      	strb	r3, [r7, #31]
            break;
 800a780:	e008      	b.n	800a794 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a782:	f003 f817 	bl	800d7b4 <osKernelGetTickCount>
 800a786:	4602      	mov	r2, r0
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a790:	4293      	cmp	r3, r2
 800a792:	d9ee      	bls.n	800a772 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a794:	7ffb      	ldrb	r3, [r7, #31]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000cf4 	.word	0x20000cf4

0800a7a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08c      	sub	sp, #48	; 0x30
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	603a      	str	r2, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7ba:	4b25      	ldr	r3, [pc, #148]	; (800a850 <SD_ioctl+0xac>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <SD_ioctl+0x28>
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e03c      	b.n	800a846 <SD_ioctl+0xa2>

  switch (cmd)
 800a7cc:	79bb      	ldrb	r3, [r7, #6]
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d834      	bhi.n	800a83c <SD_ioctl+0x98>
 800a7d2:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <SD_ioctl+0x34>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a7e9 	.word	0x0800a7e9
 800a7dc:	0800a7f1 	.word	0x0800a7f1
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a823 	.word	0x0800a823
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7ee:	e028      	b.n	800a842 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff fe6d 	bl	800a4d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a7fa:	6a3a      	ldr	r2, [r7, #32]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a806:	e01c      	b.n	800a842 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a808:	f107 0308 	add.w	r3, r7, #8
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff fe61 	bl	800a4d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	b29a      	uxth	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a820:	e00f      	b.n	800a842 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fe54 	bl	800a4d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	0a5a      	lsrs	r2, r3, #9
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a83a:	e002      	b.n	800a842 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a846:	4618      	mov	r0, r3
 800a848:	3730      	adds	r7, #48	; 0x30
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20000009 	.word	0x20000009

0800a854 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a85a:	2302      	movs	r3, #2
 800a85c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <BSP_SD_WriteCpltCallback+0x20>)
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	1db9      	adds	r1, r7, #6
 800a864:	2300      	movs	r3, #0
 800a866:	2200      	movs	r2, #0
 800a868:	f003 fb94 	bl	800df94 <osMessageQueuePut>
#endif
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000cf4 	.word	0x20000cf4

0800a878 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a87e:	2301      	movs	r3, #1
 800a880:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a882:	4b05      	ldr	r3, [pc, #20]	; (800a898 <BSP_SD_ReadCpltCallback+0x20>)
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	1db9      	adds	r1, r7, #6
 800a888:	2300      	movs	r3, #0
 800a88a:	2200      	movs	r2, #0
 800a88c:	f003 fb82 	bl	800df94 <osMessageQueuePut>
#endif
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000cf4 	.word	0x20000cf4

0800a89c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <disk_status+0x30>)
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	79fa      	ldrb	r2, [r7, #7]
 800a8b4:	4905      	ldr	r1, [pc, #20]	; (800a8cc <disk_status+0x30>)
 800a8b6:	440a      	add	r2, r1
 800a8b8:	7a12      	ldrb	r2, [r2, #8]
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	4798      	blx	r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000d20 	.word	0x20000d20

0800a8d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a8de:	79fb      	ldrb	r3, [r7, #7]
 800a8e0:	4a0d      	ldr	r2, [pc, #52]	; (800a918 <disk_initialize+0x48>)
 800a8e2:	5cd3      	ldrb	r3, [r2, r3]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d111      	bne.n	800a90c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	4a0b      	ldr	r2, [pc, #44]	; (800a918 <disk_initialize+0x48>)
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	4a09      	ldr	r2, [pc, #36]	; (800a918 <disk_initialize+0x48>)
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	79fa      	ldrb	r2, [r7, #7]
 800a8fe:	4906      	ldr	r1, [pc, #24]	; (800a918 <disk_initialize+0x48>)
 800a900:	440a      	add	r2, r1
 800a902:	7a12      	ldrb	r2, [r2, #8]
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000d20 	.word	0x20000d20

0800a91c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	4a0a      	ldr	r2, [pc, #40]	; (800a958 <disk_read+0x3c>)
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	689c      	ldr	r4, [r3, #8]
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	4a07      	ldr	r2, [pc, #28]	; (800a958 <disk_read+0x3c>)
 800a93c:	4413      	add	r3, r2
 800a93e:	7a18      	ldrb	r0, [r3, #8]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	47a0      	blx	r4
 800a948:	4603      	mov	r3, r0
 800a94a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	371c      	adds	r7, #28
 800a952:	46bd      	mov	sp, r7
 800a954:	bd90      	pop	{r4, r7, pc}
 800a956:	bf00      	nop
 800a958:	20000d20 	.word	0x20000d20

0800a95c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	607a      	str	r2, [r7, #4]
 800a966:	603b      	str	r3, [r7, #0]
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	4a0a      	ldr	r2, [pc, #40]	; (800a998 <disk_write+0x3c>)
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	68dc      	ldr	r4, [r3, #12]
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	4a07      	ldr	r2, [pc, #28]	; (800a998 <disk_write+0x3c>)
 800a97c:	4413      	add	r3, r2
 800a97e:	7a18      	ldrb	r0, [r3, #8]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	47a0      	blx	r4
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	bd90      	pop	{r4, r7, pc}
 800a996:	bf00      	nop
 800a998:	20000d20 	.word	0x20000d20

0800a99c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	603a      	str	r2, [r7, #0]
 800a9a6:	71fb      	strb	r3, [r7, #7]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <disk_ioctl+0x38>)
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	79fa      	ldrb	r2, [r7, #7]
 800a9ba:	4906      	ldr	r1, [pc, #24]	; (800a9d4 <disk_ioctl+0x38>)
 800a9bc:	440a      	add	r2, r1
 800a9be:	7a10      	ldrb	r0, [r2, #8]
 800a9c0:	79b9      	ldrb	r1, [r7, #6]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]
  return res;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000d20 	.word	0x20000d20

0800a9d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a9e8:	89fb      	ldrh	r3, [r7, #14]
 800a9ea:	021b      	lsls	r3, r3, #8
 800a9ec:	b21a      	sxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	b21b      	sxth	r3, r3
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	b21b      	sxth	r3, r3
 800a9f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a9fa:	89fb      	ldrh	r3, [r7, #14]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3303      	adds	r3, #3
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	021b      	lsls	r3, r3, #8
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	3202      	adds	r2, #2
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	021b      	lsls	r3, r3, #8
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	3201      	adds	r2, #1
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]
	return rv;
 800aa40:	68fb      	ldr	r3, [r7, #12]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	887a      	ldrh	r2, [r7, #2]
 800aa62:	b2d2      	uxtb	r2, r2
 800aa64:	701a      	strb	r2, [r3, #0]
 800aa66:	887b      	ldrh	r3, [r7, #2]
 800aa68:	0a1b      	lsrs	r3, r3, #8
 800aa6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	887a      	ldrh	r2, [r7, #2]
 800aa74:	b2d2      	uxtb	r2, r2
 800aa76:	701a      	strb	r2, [r3, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	1c5a      	adds	r2, r3, #1
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	b2d2      	uxtb	r2, r2
 800aa98:	701a      	strb	r2, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	0a1b      	lsrs	r3, r3, #8
 800aa9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	607a      	str	r2, [r7, #4]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	701a      	strb	r2, [r3, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	b2d2      	uxtb	r2, r2
 800aabc:	701a      	strb	r2, [r3, #0]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	607a      	str	r2, [r7, #4]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	701a      	strb	r2, [r3, #0]
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00d      	beq.n	800ab12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	1c53      	adds	r3, r2, #1
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	1c59      	adds	r1, r3, #1
 800ab00:	6179      	str	r1, [r7, #20]
 800ab02:	7812      	ldrb	r2, [r2, #0]
 800ab04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	607b      	str	r3, [r7, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f1      	bne.n	800aaf6 <mem_cpy+0x1a>
	}
}
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	617a      	str	r2, [r7, #20]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	607b      	str	r3, [r7, #4]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f3      	bne.n	800ab2e <mem_set+0x10>
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ab54:	b480      	push	{r7}
 800ab56:	b089      	sub	sp, #36	; 0x24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	61fb      	str	r3, [r7, #28]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	61fa      	str	r2, [r7, #28]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	61ba      	str	r2, [r7, #24]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	1acb      	subs	r3, r1, r3
 800ab80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	607b      	str	r3, [r7, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <mem_cmp+0x40>
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0eb      	beq.n	800ab6c <mem_cmp+0x18>

	return r;
 800ab94:	697b      	ldr	r3, [r7, #20]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3724      	adds	r7, #36	; 0x24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800abac:	e002      	b.n	800abb4 <chk_chr+0x12>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3301      	adds	r3, #1
 800abb2:	607b      	str	r3, [r7, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <chk_chr+0x26>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d1f2      	bne.n	800abae <chk_chr+0xc>
	return *str;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	781b      	ldrb	r3, [r3, #0]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d009      	beq.n	800abfa <lock_fs+0x22>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	4618      	mov	r0, r3
 800abec:	f002 fd12 	bl	800d614 <ff_req_grant>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <lock_fs+0x22>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e000      	b.n	800abfc <lock_fs+0x24>
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00d      	beq.n	800ac32 <unlock_fs+0x2e>
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	2b0c      	cmp	r3, #12
 800ac1a:	d00a      	beq.n	800ac32 <unlock_fs+0x2e>
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	2b0b      	cmp	r3, #11
 800ac20:	d007      	beq.n	800ac32 <unlock_fs+0x2e>
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	2b0f      	cmp	r3, #15
 800ac26:	d004      	beq.n	800ac32 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f002 fd06 	bl	800d63e <ff_rel_grant>
	}
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac46:	2300      	movs	r3, #0
 800ac48:	60bb      	str	r3, [r7, #8]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	e029      	b.n	800aca4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac50:	4a27      	ldr	r2, [pc, #156]	; (800acf0 <chk_lock+0xb4>)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	4413      	add	r3, r2
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d01d      	beq.n	800ac9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac5e:	4a24      	ldr	r2, [pc, #144]	; (800acf0 <chk_lock+0xb4>)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	011b      	lsls	r3, r3, #4
 800ac64:	4413      	add	r3, r2
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d116      	bne.n	800ac9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac70:	4a1f      	ldr	r2, [pc, #124]	; (800acf0 <chk_lock+0xb4>)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	4413      	add	r3, r2
 800ac78:	3304      	adds	r3, #4
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d10c      	bne.n	800ac9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac84:	4a1a      	ldr	r2, [pc, #104]	; (800acf0 <chk_lock+0xb4>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d102      	bne.n	800ac9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac98:	e007      	b.n	800acaa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3301      	adds	r3, #1
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d9d2      	bls.n	800ac50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b02      	cmp	r3, #2
 800acae:	d109      	bne.n	800acc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d102      	bne.n	800acbc <chk_lock+0x80>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d101      	bne.n	800acc0 <chk_lock+0x84>
 800acbc:	2300      	movs	r3, #0
 800acbe:	e010      	b.n	800ace2 <chk_lock+0xa6>
 800acc0:	2312      	movs	r3, #18
 800acc2:	e00e      	b.n	800ace2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d108      	bne.n	800acdc <chk_lock+0xa0>
 800acca:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <chk_lock+0xb4>)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	4413      	add	r3, r2
 800acd2:	330c      	adds	r3, #12
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acda:	d101      	bne.n	800ace0 <chk_lock+0xa4>
 800acdc:	2310      	movs	r3, #16
 800acde:	e000      	b.n	800ace2 <chk_lock+0xa6>
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	20000d00 	.word	0x20000d00

0800acf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acfa:	2300      	movs	r3, #0
 800acfc:	607b      	str	r3, [r7, #4]
 800acfe:	e002      	b.n	800ad06 <enq_lock+0x12>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3301      	adds	r3, #1
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d806      	bhi.n	800ad1a <enq_lock+0x26>
 800ad0c:	4a09      	ldr	r2, [pc, #36]	; (800ad34 <enq_lock+0x40>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	4413      	add	r3, r2
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f2      	bne.n	800ad00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	bf14      	ite	ne
 800ad20:	2301      	movne	r3, #1
 800ad22:	2300      	moveq	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000d00 	.word	0x20000d00

0800ad38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad42:	2300      	movs	r3, #0
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e01f      	b.n	800ad88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad48:	4a41      	ldr	r2, [pc, #260]	; (800ae50 <inc_lock+0x118>)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	011b      	lsls	r3, r3, #4
 800ad4e:	4413      	add	r3, r2
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d113      	bne.n	800ad82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad5a:	4a3d      	ldr	r2, [pc, #244]	; (800ae50 <inc_lock+0x118>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	011b      	lsls	r3, r3, #4
 800ad60:	4413      	add	r3, r2
 800ad62:	3304      	adds	r3, #4
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d109      	bne.n	800ad82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad6e:	4a38      	ldr	r2, [pc, #224]	; (800ae50 <inc_lock+0x118>)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	011b      	lsls	r3, r3, #4
 800ad74:	4413      	add	r3, r2
 800ad76:	3308      	adds	r3, #8
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d006      	beq.n	800ad90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d9dc      	bls.n	800ad48 <inc_lock+0x10>
 800ad8e:	e000      	b.n	800ad92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ad90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d132      	bne.n	800adfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	e002      	b.n	800ada4 <inc_lock+0x6c>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3301      	adds	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d806      	bhi.n	800adb8 <inc_lock+0x80>
 800adaa:	4a29      	ldr	r2, [pc, #164]	; (800ae50 <inc_lock+0x118>)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	4413      	add	r3, r2
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1f2      	bne.n	800ad9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d101      	bne.n	800adc2 <inc_lock+0x8a>
 800adbe:	2300      	movs	r3, #0
 800adc0:	e040      	b.n	800ae44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	4922      	ldr	r1, [pc, #136]	; (800ae50 <inc_lock+0x118>)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	440b      	add	r3, r1
 800adce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	491e      	ldr	r1, [pc, #120]	; (800ae50 <inc_lock+0x118>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	440b      	add	r3, r1
 800addc:	3304      	adds	r3, #4
 800adde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	695a      	ldr	r2, [r3, #20]
 800ade4:	491a      	ldr	r1, [pc, #104]	; (800ae50 <inc_lock+0x118>)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	440b      	add	r3, r1
 800adec:	3308      	adds	r3, #8
 800adee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800adf0:	4a17      	ldr	r2, [pc, #92]	; (800ae50 <inc_lock+0x118>)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	4413      	add	r3, r2
 800adf8:	330c      	adds	r3, #12
 800adfa:	2200      	movs	r2, #0
 800adfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d009      	beq.n	800ae18 <inc_lock+0xe0>
 800ae04:	4a12      	ldr	r2, [pc, #72]	; (800ae50 <inc_lock+0x118>)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	4413      	add	r3, r2
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <inc_lock+0xe0>
 800ae14:	2300      	movs	r3, #0
 800ae16:	e015      	b.n	800ae44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d108      	bne.n	800ae30 <inc_lock+0xf8>
 800ae1e:	4a0c      	ldr	r2, [pc, #48]	; (800ae50 <inc_lock+0x118>)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	011b      	lsls	r3, r3, #4
 800ae24:	4413      	add	r3, r2
 800ae26:	330c      	adds	r3, #12
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	e001      	b.n	800ae34 <inc_lock+0xfc>
 800ae30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae34:	4906      	ldr	r1, [pc, #24]	; (800ae50 <inc_lock+0x118>)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	011b      	lsls	r3, r3, #4
 800ae3a:	440b      	add	r3, r1
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3301      	adds	r3, #1
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	20000d00 	.word	0x20000d00

0800ae54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	607b      	str	r3, [r7, #4]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d825      	bhi.n	800aeb4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae68:	4a17      	ldr	r2, [pc, #92]	; (800aec8 <dec_lock+0x74>)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	011b      	lsls	r3, r3, #4
 800ae6e:	4413      	add	r3, r2
 800ae70:	330c      	adds	r3, #12
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ae76:	89fb      	ldrh	r3, [r7, #14]
 800ae78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae7c:	d101      	bne.n	800ae82 <dec_lock+0x2e>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ae82:	89fb      	ldrh	r3, [r7, #14]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <dec_lock+0x3a>
 800ae88:	89fb      	ldrh	r3, [r7, #14]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ae8e:	4a0e      	ldr	r2, [pc, #56]	; (800aec8 <dec_lock+0x74>)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	4413      	add	r3, r2
 800ae96:	330c      	adds	r3, #12
 800ae98:	89fa      	ldrh	r2, [r7, #14]
 800ae9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ae9c:	89fb      	ldrh	r3, [r7, #14]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d105      	bne.n	800aeae <dec_lock+0x5a>
 800aea2:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <dec_lock+0x74>)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	4413      	add	r3, r2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	737b      	strb	r3, [r7, #13]
 800aeb2:	e001      	b.n	800aeb8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aeb8:	7b7b      	ldrb	r3, [r7, #13]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20000d00 	.word	0x20000d00

0800aecc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aed4:	2300      	movs	r3, #0
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	e010      	b.n	800aefc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aeda:	4a0d      	ldr	r2, [pc, #52]	; (800af10 <clear_lock+0x44>)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	011b      	lsls	r3, r3, #4
 800aee0:	4413      	add	r3, r2
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d105      	bne.n	800aef6 <clear_lock+0x2a>
 800aeea:	4a09      	ldr	r2, [pc, #36]	; (800af10 <clear_lock+0x44>)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	011b      	lsls	r3, r3, #4
 800aef0:	4413      	add	r3, r2
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3301      	adds	r3, #1
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d9eb      	bls.n	800aeda <clear_lock+0xe>
	}
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	20000d00 	.word	0x20000d00

0800af14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	78db      	ldrb	r3, [r3, #3]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d034      	beq.n	800af92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7858      	ldrb	r0, [r3, #1]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af38:	2301      	movs	r3, #1
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	f7ff fd0e 	bl	800a95c <disk_write>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <sync_window+0x38>
			res = FR_DISK_ERR;
 800af46:	2301      	movs	r3, #1
 800af48:	73fb      	strb	r3, [r7, #15]
 800af4a:	e022      	b.n	800af92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	1ad2      	subs	r2, r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d217      	bcs.n	800af92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	789b      	ldrb	r3, [r3, #2]
 800af66:	613b      	str	r3, [r7, #16]
 800af68:	e010      	b.n	800af8c <sync_window+0x78>
					wsect += fs->fsize;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4413      	add	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	7858      	ldrb	r0, [r3, #1]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af7e:	2301      	movs	r3, #1
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	f7ff fceb 	bl	800a95c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	3b01      	subs	r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d8eb      	bhi.n	800af6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800af92:	7bfb      	ldrb	r3, [r7, #15]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d01b      	beq.n	800afec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ffad 	bl	800af14 <sync_window>
 800afba:	4603      	mov	r3, r0
 800afbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d113      	bne.n	800afec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7858      	ldrb	r0, [r3, #1]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800afce:	2301      	movs	r3, #1
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	f7ff fca3 	bl	800a91c <disk_read>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800afdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afe0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff ff87 	bl	800af14 <sync_window>
 800b006:	4603      	mov	r3, r0
 800b008:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d158      	bne.n	800b0c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b03      	cmp	r3, #3
 800b016:	d148      	bne.n	800b0aa <sync_fs+0xb2>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	791b      	ldrb	r3, [r3, #4]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d144      	bne.n	800b0aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3334      	adds	r3, #52	; 0x34
 800b024:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b028:	2100      	movs	r1, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fd77 	bl	800ab1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3334      	adds	r3, #52	; 0x34
 800b034:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b038:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff fd06 	bl	800aa4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3334      	adds	r3, #52	; 0x34
 800b046:	4921      	ldr	r1, [pc, #132]	; (800b0cc <sync_fs+0xd4>)
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fd1b 	bl	800aa84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3334      	adds	r3, #52	; 0x34
 800b052:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b056:	491e      	ldr	r1, [pc, #120]	; (800b0d0 <sync_fs+0xd8>)
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff fd13 	bl	800aa84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3334      	adds	r3, #52	; 0x34
 800b062:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7ff fd09 	bl	800aa84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3334      	adds	r3, #52	; 0x34
 800b076:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f7ff fcff 	bl	800aa84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7858      	ldrb	r0, [r3, #1]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f7ff fc5c 	bl	800a95c <disk_write>
			fs->fsi_flag = 0;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	785b      	ldrb	r3, [r3, #1]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fc72 	bl	800a99c <disk_ioctl>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <sync_fs+0xca>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	41615252 	.word	0x41615252
 800b0d0:	61417272 	.word	0x61417272

0800b0d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	3b02      	subs	r3, #2
 800b0e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	3b02      	subs	r3, #2
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d301      	bcc.n	800b0f4 <clust2sect+0x20>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e008      	b.n	800b106 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	895b      	ldrh	r3, [r3, #10]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	fb03 f202 	mul.w	r2, r3, r2
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	4413      	add	r3, r2
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b086      	sub	sp, #24
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d904      	bls.n	800b132 <get_fat+0x20>
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d302      	bcc.n	800b138 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b132:	2301      	movs	r3, #1
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	e08f      	b.n	800b258 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b13c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b03      	cmp	r3, #3
 800b144:	d062      	beq.n	800b20c <get_fat+0xfa>
 800b146:	2b03      	cmp	r3, #3
 800b148:	dc7c      	bgt.n	800b244 <get_fat+0x132>
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d002      	beq.n	800b154 <get_fat+0x42>
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d042      	beq.n	800b1d8 <get_fat+0xc6>
 800b152:	e077      	b.n	800b244 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	4413      	add	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	0a5b      	lsrs	r3, r3, #9
 800b16a:	4413      	add	r3, r2
 800b16c:	4619      	mov	r1, r3
 800b16e:	6938      	ldr	r0, [r7, #16]
 800b170:	f7ff ff14 	bl	800af9c <move_window>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d167      	bne.n	800b24a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	60fa      	str	r2, [r7, #12]
 800b180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	4413      	add	r3, r2
 800b188:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b18c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	0a5b      	lsrs	r3, r3, #9
 800b196:	4413      	add	r3, r2
 800b198:	4619      	mov	r1, r3
 800b19a:	6938      	ldr	r0, [r7, #16]
 800b19c:	f7ff fefe 	bl	800af9c <move_window>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d153      	bne.n	800b24e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <get_fat+0xbc>
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	091b      	lsrs	r3, r3, #4
 800b1cc:	e002      	b.n	800b1d4 <get_fat+0xc2>
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1d4:	617b      	str	r3, [r7, #20]
			break;
 800b1d6:	e03f      	b.n	800b258 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	0a1b      	lsrs	r3, r3, #8
 800b1e0:	4413      	add	r3, r2
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6938      	ldr	r0, [r7, #16]
 800b1e6:	f7ff fed9 	bl	800af9c <move_window>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d130      	bne.n	800b252 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b1fe:	4413      	add	r3, r2
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fbe9 	bl	800a9d8 <ld_word>
 800b206:	4603      	mov	r3, r0
 800b208:	617b      	str	r3, [r7, #20]
			break;
 800b20a:	e025      	b.n	800b258 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	09db      	lsrs	r3, r3, #7
 800b214:	4413      	add	r3, r2
 800b216:	4619      	mov	r1, r3
 800b218:	6938      	ldr	r0, [r7, #16]
 800b21a:	f7ff febf 	bl	800af9c <move_window>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d118      	bne.n	800b256 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b232:	4413      	add	r3, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff fbe7 	bl	800aa08 <ld_dword>
 800b23a:	4603      	mov	r3, r0
 800b23c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b240:	617b      	str	r3, [r7, #20]
			break;
 800b242:	e009      	b.n	800b258 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b244:	2301      	movs	r3, #1
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	e006      	b.n	800b258 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b24a:	bf00      	nop
 800b24c:	e004      	b.n	800b258 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b24e:	bf00      	nop
 800b250:	e002      	b.n	800b258 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b256:	bf00      	nop
		}
	}

	return val;
 800b258:	697b      	ldr	r3, [r7, #20]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b262:	b590      	push	{r4, r7, lr}
 800b264:	b089      	sub	sp, #36	; 0x24
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b26e:	2302      	movs	r3, #2
 800b270:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	2b01      	cmp	r3, #1
 800b276:	f240 80d2 	bls.w	800b41e <put_fat+0x1bc>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	429a      	cmp	r2, r3
 800b282:	f080 80cc 	bcs.w	800b41e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	f000 8096 	beq.w	800b3bc <put_fat+0x15a>
 800b290:	2b03      	cmp	r3, #3
 800b292:	f300 80cd 	bgt.w	800b430 <put_fat+0x1ce>
 800b296:	2b01      	cmp	r3, #1
 800b298:	d002      	beq.n	800b2a0 <put_fat+0x3e>
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d06e      	beq.n	800b37c <put_fat+0x11a>
 800b29e:	e0c7      	b.n	800b430 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	085b      	lsrs	r3, r3, #1
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	4413      	add	r3, r2
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff fe6e 	bl	800af9c <move_window>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2c4:	7ffb      	ldrb	r3, [r7, #31]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f040 80ab 	bne.w	800b422 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	1c59      	adds	r1, r3, #1
 800b2d6:	61b9      	str	r1, [r7, #24]
 800b2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2dc:	4413      	add	r3, r2
 800b2de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00d      	beq.n	800b306 <put_fat+0xa4>
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	b25b      	sxtb	r3, r3
 800b2f0:	f003 030f 	and.w	r3, r3, #15
 800b2f4:	b25a      	sxtb	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	b25b      	sxtb	r3, r3
 800b2fe:	4313      	orrs	r3, r2
 800b300:	b25b      	sxtb	r3, r3
 800b302:	b2db      	uxtb	r3, r3
 800b304:	e001      	b.n	800b30a <put_fat+0xa8>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2201      	movs	r2, #1
 800b312:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	0a5b      	lsrs	r3, r3, #9
 800b31c:	4413      	add	r3, r2
 800b31e:	4619      	mov	r1, r3
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7ff fe3b 	bl	800af9c <move_window>
 800b326:	4603      	mov	r3, r0
 800b328:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b32a:	7ffb      	ldrb	r3, [r7, #31]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d17a      	bne.n	800b426 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33c:	4413      	add	r3, r2
 800b33e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d003      	beq.n	800b352 <put_fat+0xf0>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	091b      	lsrs	r3, r3, #4
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	e00e      	b.n	800b370 <put_fat+0x10e>
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b25b      	sxtb	r3, r3
 800b358:	f023 030f 	bic.w	r3, r3, #15
 800b35c:	b25a      	sxtb	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	0a1b      	lsrs	r3, r3, #8
 800b362:	b25b      	sxtb	r3, r3
 800b364:	f003 030f 	and.w	r3, r3, #15
 800b368:	b25b      	sxtb	r3, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	b25b      	sxtb	r3, r3
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2201      	movs	r2, #1
 800b378:	70da      	strb	r2, [r3, #3]
			break;
 800b37a:	e059      	b.n	800b430 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	4413      	add	r3, r2
 800b386:	4619      	mov	r1, r3
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7ff fe07 	bl	800af9c <move_window>
 800b38e:	4603      	mov	r3, r0
 800b390:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b392:	7ffb      	ldrb	r3, [r7, #31]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d148      	bne.n	800b42a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3a6:	4413      	add	r3, r2
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	b292      	uxth	r2, r2
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fb4d 	bl	800aa4e <st_word>
			fs->wflag = 1;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	70da      	strb	r2, [r3, #3]
			break;
 800b3ba:	e039      	b.n	800b430 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	09db      	lsrs	r3, r3, #7
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7ff fde7 	bl	800af9c <move_window>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3d2:	7ffb      	ldrb	r3, [r7, #31]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d12a      	bne.n	800b42e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b3ec:	4413      	add	r3, r2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7ff fb0a 	bl	800aa08 <ld_dword>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3fa:	4323      	orrs	r3, r4
 800b3fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b40c:	4413      	add	r3, r2
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fb37 	bl	800aa84 <st_dword>
			fs->wflag = 1;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	70da      	strb	r2, [r3, #3]
			break;
 800b41c:	e008      	b.n	800b430 <put_fat+0x1ce>
		}
	}
 800b41e:	bf00      	nop
 800b420:	e006      	b.n	800b430 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b422:	bf00      	nop
 800b424:	e004      	b.n	800b430 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b426:	bf00      	nop
 800b428:	e002      	b.n	800b430 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b42a:	bf00      	nop
 800b42c:	e000      	b.n	800b430 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b42e:	bf00      	nop
	return res;
 800b430:	7ffb      	ldrb	r3, [r7, #31]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3724      	adds	r7, #36	; 0x24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd90      	pop	{r4, r7, pc}

0800b43a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b088      	sub	sp, #32
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d904      	bls.n	800b460 <remove_chain+0x26>
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d301      	bcc.n	800b464 <remove_chain+0x2a>
 800b460:	2302      	movs	r3, #2
 800b462:	e04b      	b.n	800b4fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00c      	beq.n	800b484 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	69b8      	ldr	r0, [r7, #24]
 800b472:	f7ff fef6 	bl	800b262 <put_fat>
 800b476:	4603      	mov	r3, r0
 800b478:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b47a:	7ffb      	ldrb	r3, [r7, #31]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <remove_chain+0x4a>
 800b480:	7ffb      	ldrb	r3, [r7, #31]
 800b482:	e03b      	b.n	800b4fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7ff fe43 	bl	800b112 <get_fat>
 800b48c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d031      	beq.n	800b4f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <remove_chain+0x64>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e02e      	b.n	800b4fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4a4:	d101      	bne.n	800b4aa <remove_chain+0x70>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e028      	b.n	800b4fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	68b9      	ldr	r1, [r7, #8]
 800b4ae:	69b8      	ldr	r0, [r7, #24]
 800b4b0:	f7ff fed7 	bl	800b262 <put_fat>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b4b8:	7ffb      	ldrb	r3, [r7, #31]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <remove_chain+0x88>
 800b4be:	7ffb      	ldrb	r3, [r7, #31]
 800b4c0:	e01c      	b.n	800b4fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	695a      	ldr	r2, [r3, #20]
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	3b02      	subs	r3, #2
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d20b      	bcs.n	800b4e8 <remove_chain+0xae>
			fs->free_clst++;
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	791b      	ldrb	r3, [r3, #4]
 800b4de:	f043 0301 	orr.w	r3, r3, #1
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d3c6      	bcc.n	800b484 <remove_chain+0x4a>
 800b4f6:	e000      	b.n	800b4fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b4f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10d      	bne.n	800b536 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <create_chain+0x2c>
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d31b      	bcc.n	800b568 <create_chain+0x64>
 800b530:	2301      	movs	r3, #1
 800b532:	61bb      	str	r3, [r7, #24]
 800b534:	e018      	b.n	800b568 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fdea 	bl	800b112 <get_fat>
 800b53e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d801      	bhi.n	800b54a <create_chain+0x46>
 800b546:	2301      	movs	r3, #1
 800b548:	e070      	b.n	800b62c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b550:	d101      	bne.n	800b556 <create_chain+0x52>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	e06a      	b.n	800b62c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d201      	bcs.n	800b564 <create_chain+0x60>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	e063      	b.n	800b62c <create_chain+0x128>
		scl = clst;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	3301      	adds	r3, #1
 800b570:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	69fa      	ldr	r2, [r7, #28]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d307      	bcc.n	800b58c <create_chain+0x88>
				ncl = 2;
 800b57c:	2302      	movs	r3, #2
 800b57e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b580:	69fa      	ldr	r2, [r7, #28]
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	429a      	cmp	r2, r3
 800b586:	d901      	bls.n	800b58c <create_chain+0x88>
 800b588:	2300      	movs	r3, #0
 800b58a:	e04f      	b.n	800b62c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b58c:	69f9      	ldr	r1, [r7, #28]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff fdbf 	bl	800b112 <get_fat>
 800b594:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00e      	beq.n	800b5ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d003      	beq.n	800b5aa <create_chain+0xa6>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5a8:	d101      	bne.n	800b5ae <create_chain+0xaa>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	e03e      	b.n	800b62c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b5ae:	69fa      	ldr	r2, [r7, #28]
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d1da      	bne.n	800b56c <create_chain+0x68>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e038      	b.n	800b62c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b5ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5c0:	69f9      	ldr	r1, [r7, #28]
 800b5c2:	6938      	ldr	r0, [r7, #16]
 800b5c4:	f7ff fe4d 	bl	800b262 <put_fat>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <create_chain+0xe2>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b5d8:	69fa      	ldr	r2, [r7, #28]
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6938      	ldr	r0, [r7, #16]
 800b5de:	f7ff fe40 	bl	800b262 <put_fat>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d116      	bne.n	800b61a <create_chain+0x116>
		fs->last_clst = ncl;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	3b02      	subs	r3, #2
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d804      	bhi.n	800b60a <create_chain+0x106>
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	1e5a      	subs	r2, r3, #1
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	791b      	ldrb	r3, [r3, #4]
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	b2da      	uxtb	r2, r3
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	711a      	strb	r2, [r3, #4]
 800b618:	e007      	b.n	800b62a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d102      	bne.n	800b626 <create_chain+0x122>
 800b620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b624:	e000      	b.n	800b628 <create_chain+0x124>
 800b626:	2301      	movs	r3, #1
 800b628:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b62a:	69fb      	ldr	r3, [r7, #28]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3720      	adds	r7, #32
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	3304      	adds	r3, #4
 800b64a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	0a5b      	lsrs	r3, r3, #9
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	8952      	ldrh	r2, [r2, #10]
 800b654:	fbb3 f3f2 	udiv	r3, r3, r2
 800b658:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	1d1a      	adds	r2, r3, #4
 800b65e:	613a      	str	r2, [r7, #16]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <clmt_clust+0x3a>
 800b66a:	2300      	movs	r3, #0
 800b66c:	e010      	b.n	800b690 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	429a      	cmp	r2, r3
 800b674:	d307      	bcc.n	800b686 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3304      	adds	r3, #4
 800b682:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b684:	e7e9      	b.n	800b65a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b686:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	4413      	add	r3, r2
}
 800b690:	4618      	mov	r0, r3
 800b692:	371c      	adds	r7, #28
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6b2:	d204      	bcs.n	800b6be <dir_sdi+0x22>
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	f003 031f 	and.w	r3, r3, #31
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	e063      	b.n	800b78a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d106      	bne.n	800b6e2 <dir_sdi+0x46>
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d902      	bls.n	800b6e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10c      	bne.n	800b702 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	095b      	lsrs	r3, r3, #5
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	8912      	ldrh	r2, [r2, #8]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d301      	bcc.n	800b6f8 <dir_sdi+0x5c>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e048      	b.n	800b78a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	61da      	str	r2, [r3, #28]
 800b700:	e029      	b.n	800b756 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	895b      	ldrh	r3, [r3, #10]
 800b706:	025b      	lsls	r3, r3, #9
 800b708:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b70a:	e019      	b.n	800b740 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6979      	ldr	r1, [r7, #20]
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fcfe 	bl	800b112 <get_fat>
 800b716:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b71e:	d101      	bne.n	800b724 <dir_sdi+0x88>
 800b720:	2301      	movs	r3, #1
 800b722:	e032      	b.n	800b78a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d904      	bls.n	800b734 <dir_sdi+0x98>
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	429a      	cmp	r2, r3
 800b732:	d301      	bcc.n	800b738 <dir_sdi+0x9c>
 800b734:	2302      	movs	r3, #2
 800b736:	e028      	b.n	800b78a <dir_sdi+0xee>
			ofs -= csz;
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	429a      	cmp	r2, r3
 800b746:	d2e1      	bcs.n	800b70c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b748:	6979      	ldr	r1, [r7, #20]
 800b74a:	6938      	ldr	r0, [r7, #16]
 800b74c:	f7ff fcc2 	bl	800b0d4 <clust2sect>
 800b750:	4602      	mov	r2, r0
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <dir_sdi+0xcc>
 800b764:	2302      	movs	r3, #2
 800b766:	e010      	b.n	800b78a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	69da      	ldr	r2, [r3, #28]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	0a5b      	lsrs	r3, r3, #9
 800b770:	441a      	add	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b782:	441a      	add	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b086      	sub	sp, #24
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	3320      	adds	r3, #32
 800b7a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <dir_next+0x28>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7b8:	d301      	bcc.n	800b7be <dir_next+0x2c>
 800b7ba:	2304      	movs	r3, #4
 800b7bc:	e0aa      	b.n	800b914 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f040 8098 	bne.w	800b8fa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10b      	bne.n	800b7f4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	095b      	lsrs	r3, r3, #5
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	8912      	ldrh	r2, [r2, #8]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	f0c0 8088 	bcc.w	800b8fa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	61da      	str	r2, [r3, #28]
 800b7f0:	2304      	movs	r3, #4
 800b7f2:	e08f      	b.n	800b914 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	0a5b      	lsrs	r3, r3, #9
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	8952      	ldrh	r2, [r2, #10]
 800b7fc:	3a01      	subs	r2, #1
 800b7fe:	4013      	ands	r3, r2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d17a      	bne.n	800b8fa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	4619      	mov	r1, r3
 800b80c:	4610      	mov	r0, r2
 800b80e:	f7ff fc80 	bl	800b112 <get_fat>
 800b812:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d801      	bhi.n	800b81e <dir_next+0x8c>
 800b81a:	2302      	movs	r3, #2
 800b81c:	e07a      	b.n	800b914 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b824:	d101      	bne.n	800b82a <dir_next+0x98>
 800b826:	2301      	movs	r3, #1
 800b828:	e074      	b.n	800b914 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	429a      	cmp	r2, r3
 800b832:	d358      	bcc.n	800b8e6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d104      	bne.n	800b844 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	61da      	str	r2, [r3, #28]
 800b840:	2304      	movs	r3, #4
 800b842:	e067      	b.n	800b914 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f7ff fe59 	bl	800b504 <create_chain>
 800b852:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <dir_next+0xcc>
 800b85a:	2307      	movs	r3, #7
 800b85c:	e05a      	b.n	800b914 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d101      	bne.n	800b868 <dir_next+0xd6>
 800b864:	2302      	movs	r3, #2
 800b866:	e055      	b.n	800b914 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b86e:	d101      	bne.n	800b874 <dir_next+0xe2>
 800b870:	2301      	movs	r3, #1
 800b872:	e04f      	b.n	800b914 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff fb4d 	bl	800af14 <sync_window>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <dir_next+0xf2>
 800b880:	2301      	movs	r3, #1
 800b882:	e047      	b.n	800b914 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3334      	adds	r3, #52	; 0x34
 800b888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b88c:	2100      	movs	r1, #0
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff f945 	bl	800ab1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b894:	2300      	movs	r3, #0
 800b896:	613b      	str	r3, [r7, #16]
 800b898:	6979      	ldr	r1, [r7, #20]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f7ff fc1a 	bl	800b0d4 <clust2sect>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
 800b8a6:	e012      	b.n	800b8ce <dir_next+0x13c>
						fs->wflag = 1;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f7ff fb30 	bl	800af14 <sync_window>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <dir_next+0x12c>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e02a      	b.n	800b914 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	631a      	str	r2, [r3, #48]	; 0x30
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	895b      	ldrh	r3, [r3, #10]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d3e6      	bcc.n	800b8a8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	1ad2      	subs	r2, r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b8ec:	6979      	ldr	r1, [r7, #20]
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff fbf0 	bl	800b0d4 <clust2sect>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90c:	441a      	add	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b92c:	2100      	movs	r1, #0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff feb4 	bl	800b69c <dir_sdi>
 800b934:	4603      	mov	r3, r0
 800b936:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d12b      	bne.n	800b996 <dir_alloc+0x7a>
		n = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	4619      	mov	r1, r3
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f7ff fb27 	bl	800af9c <move_window>
 800b94e:	4603      	mov	r3, r0
 800b950:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d11d      	bne.n	800b994 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	2be5      	cmp	r3, #229	; 0xe5
 800b960:	d004      	beq.n	800b96c <dir_alloc+0x50>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d107      	bne.n	800b97c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	3301      	adds	r3, #1
 800b970:	613b      	str	r3, [r7, #16]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d102      	bne.n	800b980 <dir_alloc+0x64>
 800b97a:	e00c      	b.n	800b996 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b980:	2101      	movs	r1, #1
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff05 	bl	800b792 <dir_next>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d0d7      	beq.n	800b942 <dir_alloc+0x26>
 800b992:	e000      	b.n	800b996 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b994:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d101      	bne.n	800b9a0 <dir_alloc+0x84>
 800b99c:	2307      	movs	r3, #7
 800b99e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	331a      	adds	r3, #26
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff f80d 	bl	800a9d8 <ld_word>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d109      	bne.n	800b9de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	3314      	adds	r3, #20
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff f802 	bl	800a9d8 <ld_word>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	041b      	lsls	r3, r3, #16
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b9de:	68fb      	ldr	r3, [r7, #12]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	331a      	adds	r3, #26
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	b292      	uxth	r2, r2
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff f825 	bl	800aa4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d109      	bne.n	800ba20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f103 0214 	add.w	r2, r3, #20
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	0c1b      	lsrs	r3, r3, #16
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f7ff f817 	bl	800aa4e <st_word>
	}
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ba36:	2100      	movs	r1, #0
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff fe2f 	bl	800b69c <dir_sdi>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <dir_find+0x24>
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	e03e      	b.n	800baca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	4619      	mov	r1, r3
 800ba52:	6938      	ldr	r0, [r7, #16]
 800ba54:	f7ff faa2 	bl	800af9c <move_window>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d12f      	bne.n	800bac2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d102      	bne.n	800ba76 <dir_find+0x4e>
 800ba70:	2304      	movs	r3, #4
 800ba72:	75fb      	strb	r3, [r7, #23]
 800ba74:	e028      	b.n	800bac8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	330b      	adds	r3, #11
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	330b      	adds	r3, #11
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	f003 0308 	and.w	r3, r3, #8
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10a      	bne.n	800baae <dir_find+0x86>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a18      	ldr	r0, [r3, #32]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3324      	adds	r3, #36	; 0x24
 800baa0:	220b      	movs	r2, #11
 800baa2:	4619      	mov	r1, r3
 800baa4:	f7ff f856 	bl	800ab54 <mem_cmp>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00b      	beq.n	800bac6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800baae:	2100      	movs	r1, #0
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff fe6e 	bl	800b792 <dir_next>
 800bab6:	4603      	mov	r3, r0
 800bab8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d0c5      	beq.n	800ba4c <dir_find+0x24>
 800bac0:	e002      	b.n	800bac8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bac6:	bf00      	nop

	return res;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bae0:	2101      	movs	r1, #1
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff ff1a 	bl	800b91c <dir_alloc>
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d11c      	bne.n	800bb2c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	4619      	mov	r1, r3
 800baf8:	68b8      	ldr	r0, [r7, #8]
 800bafa:	f7ff fa4f 	bl	800af9c <move_window>
 800bafe:	4603      	mov	r3, r0
 800bb00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d111      	bne.n	800bb2c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff f804 	bl	800ab1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a18      	ldr	r0, [r3, #32]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3324      	adds	r3, #36	; 0x24
 800bb1e:	220b      	movs	r2, #11
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7fe ffdb 	bl	800aadc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3324      	adds	r3, #36	; 0x24
 800bb4c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bb4e:	220b      	movs	r2, #11
 800bb50:	2120      	movs	r1, #32
 800bb52:	68b8      	ldr	r0, [r7, #8]
 800bb54:	f7fe ffe3 	bl	800ab1e <mem_set>
	si = i = 0; ni = 8;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	613b      	str	r3, [r7, #16]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	61fb      	str	r3, [r7, #28]
 800bb60:	2308      	movs	r3, #8
 800bb62:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	61fa      	str	r2, [r7, #28]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb72:	7efb      	ldrb	r3, [r7, #27]
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d94e      	bls.n	800bc16 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bb78:	7efb      	ldrb	r3, [r7, #27]
 800bb7a:	2b2f      	cmp	r3, #47	; 0x2f
 800bb7c:	d006      	beq.n	800bb8c <create_name+0x54>
 800bb7e:	7efb      	ldrb	r3, [r7, #27]
 800bb80:	2b5c      	cmp	r3, #92	; 0x5c
 800bb82:	d110      	bne.n	800bba6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb84:	e002      	b.n	800bb8c <create_name+0x54>
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	4413      	add	r3, r2
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b2f      	cmp	r3, #47	; 0x2f
 800bb96:	d0f6      	beq.n	800bb86 <create_name+0x4e>
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b5c      	cmp	r3, #92	; 0x5c
 800bba2:	d0f0      	beq.n	800bb86 <create_name+0x4e>
			break;
 800bba4:	e038      	b.n	800bc18 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bba6:	7efb      	ldrb	r3, [r7, #27]
 800bba8:	2b2e      	cmp	r3, #46	; 0x2e
 800bbaa:	d003      	beq.n	800bbb4 <create_name+0x7c>
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d30c      	bcc.n	800bbce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b0b      	cmp	r3, #11
 800bbb8:	d002      	beq.n	800bbc0 <create_name+0x88>
 800bbba:	7efb      	ldrb	r3, [r7, #27]
 800bbbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bbbe:	d001      	beq.n	800bbc4 <create_name+0x8c>
 800bbc0:	2306      	movs	r3, #6
 800bbc2:	e044      	b.n	800bc4e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	613b      	str	r3, [r7, #16]
 800bbc8:	230b      	movs	r3, #11
 800bbca:	617b      	str	r3, [r7, #20]
			continue;
 800bbcc:	e022      	b.n	800bc14 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bbce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da04      	bge.n	800bbe0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bbd6:	7efb      	ldrb	r3, [r7, #27]
 800bbd8:	3b80      	subs	r3, #128	; 0x80
 800bbda:	4a1f      	ldr	r2, [pc, #124]	; (800bc58 <create_name+0x120>)
 800bbdc:	5cd3      	ldrb	r3, [r2, r3]
 800bbde:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bbe0:	7efb      	ldrb	r3, [r7, #27]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	481d      	ldr	r0, [pc, #116]	; (800bc5c <create_name+0x124>)
 800bbe6:	f7fe ffdc 	bl	800aba2 <chk_chr>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <create_name+0xbc>
 800bbf0:	2306      	movs	r3, #6
 800bbf2:	e02c      	b.n	800bc4e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bbf4:	7efb      	ldrb	r3, [r7, #27]
 800bbf6:	2b60      	cmp	r3, #96	; 0x60
 800bbf8:	d905      	bls.n	800bc06 <create_name+0xce>
 800bbfa:	7efb      	ldrb	r3, [r7, #27]
 800bbfc:	2b7a      	cmp	r3, #122	; 0x7a
 800bbfe:	d802      	bhi.n	800bc06 <create_name+0xce>
 800bc00:	7efb      	ldrb	r3, [r7, #27]
 800bc02:	3b20      	subs	r3, #32
 800bc04:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	613a      	str	r2, [r7, #16]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	4413      	add	r3, r2
 800bc10:	7efa      	ldrb	r2, [r7, #27]
 800bc12:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bc14:	e7a6      	b.n	800bb64 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc16:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <create_name+0xf4>
 800bc28:	2306      	movs	r3, #6
 800bc2a:	e010      	b.n	800bc4e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2be5      	cmp	r3, #229	; 0xe5
 800bc32:	d102      	bne.n	800bc3a <create_name+0x102>
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2205      	movs	r2, #5
 800bc38:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bc3a:	7efb      	ldrb	r3, [r7, #27]
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d801      	bhi.n	800bc44 <create_name+0x10c>
 800bc40:	2204      	movs	r2, #4
 800bc42:	e000      	b.n	800bc46 <create_name+0x10e>
 800bc44:	2200      	movs	r2, #0
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	330b      	adds	r3, #11
 800bc4a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bc4c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3720      	adds	r7, #32
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	08016038 	.word	0x08016038
 800bc5c:	08015f1c 	.word	0x08015f1c

0800bc60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc74:	e002      	b.n	800bc7c <follow_path+0x1c>
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b2f      	cmp	r3, #47	; 0x2f
 800bc82:	d0f8      	beq.n	800bc76 <follow_path+0x16>
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b5c      	cmp	r3, #92	; 0x5c
 800bc8a:	d0f4      	beq.n	800bc76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b1f      	cmp	r3, #31
 800bc98:	d80a      	bhi.n	800bcb0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2280      	movs	r2, #128	; 0x80
 800bc9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bca2:	2100      	movs	r1, #0
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff fcf9 	bl	800b69c <dir_sdi>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	75fb      	strb	r3, [r7, #23]
 800bcae:	e043      	b.n	800bd38 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcb0:	463b      	mov	r3, r7
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff ff3f 	bl	800bb38 <create_name>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d134      	bne.n	800bd2e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff feaf 	bl	800ba28 <dir_find>
 800bcca:	4603      	mov	r3, r0
 800bccc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bcd4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	d127      	bne.n	800bd32 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bce2:	7afb      	ldrb	r3, [r7, #11]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d122      	bne.n	800bd32 <follow_path+0xd2>
 800bcec:	2305      	movs	r3, #5
 800bcee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bcf0:	e01f      	b.n	800bd32 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bcf2:	7afb      	ldrb	r3, [r7, #11]
 800bcf4:	f003 0304 	and.w	r3, r3, #4
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d11c      	bne.n	800bd36 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	799b      	ldrb	r3, [r3, #6]
 800bd00:	f003 0310 	and.w	r3, r3, #16
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bd08:	2305      	movs	r3, #5
 800bd0a:	75fb      	strb	r3, [r7, #23]
 800bd0c:	e014      	b.n	800bd38 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1c:	4413      	add	r3, r2
 800bd1e:	4619      	mov	r1, r3
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff fe42 	bl	800b9aa <ld_clust>
 800bd26:	4602      	mov	r2, r0
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd2c:	e7c0      	b.n	800bcb0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bd2e:	bf00      	nop
 800bd30:	e002      	b.n	800bd38 <follow_path+0xd8>
				break;
 800bd32:	bf00      	nop
 800bd34:	e000      	b.n	800bd38 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd36:	bf00      	nop
			}
		}
	}

	return res;
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b087      	sub	sp, #28
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd4e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d031      	beq.n	800bdbc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	617b      	str	r3, [r7, #20]
 800bd5e:	e002      	b.n	800bd66 <get_ldnumber+0x24>
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	3301      	adds	r3, #1
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	d903      	bls.n	800bd76 <get_ldnumber+0x34>
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b3a      	cmp	r3, #58	; 0x3a
 800bd74:	d1f4      	bne.n	800bd60 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b3a      	cmp	r3, #58	; 0x3a
 800bd7c:	d11c      	bne.n	800bdb8 <get_ldnumber+0x76>
			tp = *path;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	60fa      	str	r2, [r7, #12]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	3b30      	subs	r3, #48	; 0x30
 800bd8e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2b09      	cmp	r3, #9
 800bd94:	d80e      	bhi.n	800bdb4 <get_ldnumber+0x72>
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d10a      	bne.n	800bdb4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d107      	bne.n	800bdb4 <get_ldnumber+0x72>
					vol = (int)i;
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	e002      	b.n	800bdbe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bdb8:	2300      	movs	r3, #0
 800bdba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bdbc:	693b      	ldr	r3, [r7, #16]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
	...

0800bdcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	70da      	strb	r2, [r3, #3]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bde2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff f8d8 	bl	800af9c <move_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <check_fs+0x2a>
 800bdf2:	2304      	movs	r3, #4
 800bdf4:	e038      	b.n	800be68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3334      	adds	r3, #52	; 0x34
 800bdfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fe fdea 	bl	800a9d8 <ld_word>
 800be04:	4603      	mov	r3, r0
 800be06:	461a      	mov	r2, r3
 800be08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d001      	beq.n	800be14 <check_fs+0x48>
 800be10:	2303      	movs	r3, #3
 800be12:	e029      	b.n	800be68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be1a:	2be9      	cmp	r3, #233	; 0xe9
 800be1c:	d009      	beq.n	800be32 <check_fs+0x66>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be24:	2beb      	cmp	r3, #235	; 0xeb
 800be26:	d11e      	bne.n	800be66 <check_fs+0x9a>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800be2e:	2b90      	cmp	r3, #144	; 0x90
 800be30:	d119      	bne.n	800be66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	3334      	adds	r3, #52	; 0x34
 800be36:	3336      	adds	r3, #54	; 0x36
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fde5 	bl	800aa08 <ld_dword>
 800be3e:	4603      	mov	r3, r0
 800be40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be44:	4a0a      	ldr	r2, [pc, #40]	; (800be70 <check_fs+0xa4>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d101      	bne.n	800be4e <check_fs+0x82>
 800be4a:	2300      	movs	r3, #0
 800be4c:	e00c      	b.n	800be68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	3334      	adds	r3, #52	; 0x34
 800be52:	3352      	adds	r3, #82	; 0x52
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe fdd7 	bl	800aa08 <ld_dword>
 800be5a:	4603      	mov	r3, r0
 800be5c:	4a05      	ldr	r2, [pc, #20]	; (800be74 <check_fs+0xa8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d101      	bne.n	800be66 <check_fs+0x9a>
 800be62:	2300      	movs	r3, #0
 800be64:	e000      	b.n	800be68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be66:	2302      	movs	r3, #2
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	00544146 	.word	0x00544146
 800be74:	33544146 	.word	0x33544146

0800be78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b096      	sub	sp, #88	; 0x58
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	4613      	mov	r3, r2
 800be84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7ff ff58 	bl	800bd42 <get_ldnumber>
 800be92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be96:	2b00      	cmp	r3, #0
 800be98:	da01      	bge.n	800be9e <find_volume+0x26>
 800be9a:	230b      	movs	r3, #11
 800be9c:	e235      	b.n	800c30a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be9e:	4aa5      	ldr	r2, [pc, #660]	; (800c134 <find_volume+0x2bc>)
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <find_volume+0x3a>
 800beae:	230c      	movs	r3, #12
 800beb0:	e22b      	b.n	800c30a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800beb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800beb4:	f7fe fe90 	bl	800abd8 <lock_fs>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <find_volume+0x4a>
 800bebe:	230f      	movs	r3, #15
 800bec0:	e223      	b.n	800c30a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bec6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01a      	beq.n	800bf0e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fcdd 	bl	800a89c <disk_status>
 800bee2:	4603      	mov	r3, r0
 800bee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10c      	bne.n	800bf0e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d007      	beq.n	800bf0a <find_volume+0x92>
 800befa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800befe:	f003 0304 	and.w	r3, r3, #4
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bf06:	230a      	movs	r3, #10
 800bf08:	e1ff      	b.n	800c30a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e1fd      	b.n	800c30a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fe fcd5 	bl	800a8d0 <disk_initialize>
 800bf26:	4603      	mov	r3, r0
 800bf28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e1e6      	b.n	800c30a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf3c:	79fb      	ldrb	r3, [r7, #7]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <find_volume+0xda>
 800bf42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf46:	f003 0304 	and.w	r3, r3, #4
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bf4e:	230a      	movs	r3, #10
 800bf50:	e1db      	b.n	800c30a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf5a:	f7ff ff37 	bl	800bdcc <check_fs>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d149      	bne.n	800c000 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	643b      	str	r3, [r7, #64]	; 0x40
 800bf70:	e01e      	b.n	800bfb0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bf80:	4413      	add	r3, r2
 800bf82:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	3304      	adds	r3, #4
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d006      	beq.n	800bf9c <find_volume+0x124>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	3308      	adds	r3, #8
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fd38 	bl	800aa08 <ld_dword>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	e000      	b.n	800bf9e <find_volume+0x126>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	3358      	adds	r3, #88	; 0x58
 800bfa4:	443b      	add	r3, r7
 800bfa6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfac:	3301      	adds	r3, #1
 800bfae:	643b      	str	r3, [r7, #64]	; 0x40
 800bfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d9dd      	bls.n	800bf72 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bfba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <find_volume+0x14e>
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	3358      	adds	r3, #88	; 0x58
 800bfcc:	443b      	add	r3, r7
 800bfce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bfd2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bfd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <find_volume+0x16e>
 800bfda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfde:	f7ff fef5 	bl	800bdcc <check_fs>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	e000      	b.n	800bfe8 <find_volume+0x170>
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bfec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d905      	bls.n	800c000 <find_volume+0x188>
 800bff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff6:	3301      	adds	r3, #1
 800bff8:	643b      	str	r3, [r7, #64]	; 0x40
 800bffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d9e2      	bls.n	800bfc6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c004:	2b04      	cmp	r3, #4
 800c006:	d101      	bne.n	800c00c <find_volume+0x194>
 800c008:	2301      	movs	r3, #1
 800c00a:	e17e      	b.n	800c30a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c00c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c010:	2b01      	cmp	r3, #1
 800c012:	d901      	bls.n	800c018 <find_volume+0x1a0>
 800c014:	230d      	movs	r3, #13
 800c016:	e178      	b.n	800c30a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	3334      	adds	r3, #52	; 0x34
 800c01c:	330b      	adds	r3, #11
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fcda 	bl	800a9d8 <ld_word>
 800c024:	4603      	mov	r3, r0
 800c026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c02a:	d001      	beq.n	800c030 <find_volume+0x1b8>
 800c02c:	230d      	movs	r3, #13
 800c02e:	e16c      	b.n	800c30a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	3334      	adds	r3, #52	; 0x34
 800c034:	3316      	adds	r3, #22
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fcce 	bl	800a9d8 <ld_word>
 800c03c:	4603      	mov	r3, r0
 800c03e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c042:	2b00      	cmp	r3, #0
 800c044:	d106      	bne.n	800c054 <find_volume+0x1dc>
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	3334      	adds	r3, #52	; 0x34
 800c04a:	3324      	adds	r3, #36	; 0x24
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fe fcdb 	bl	800aa08 <ld_dword>
 800c052:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c058:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	789b      	ldrb	r3, [r3, #2]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d005      	beq.n	800c078 <find_volume+0x200>
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	789b      	ldrb	r3, [r3, #2]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d001      	beq.n	800c078 <find_volume+0x200>
 800c074:	230d      	movs	r3, #13
 800c076:	e148      	b.n	800c30a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	789b      	ldrb	r3, [r3, #2]
 800c07c:	461a      	mov	r2, r3
 800c07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c080:	fb02 f303 	mul.w	r3, r2, r3
 800c084:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	895b      	ldrh	r3, [r3, #10]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d008      	beq.n	800c0ac <find_volume+0x234>
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	895b      	ldrh	r3, [r3, #10]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	895b      	ldrh	r3, [r3, #10]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <find_volume+0x238>
 800c0ac:	230d      	movs	r3, #13
 800c0ae:	e12c      	b.n	800c30a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	3334      	adds	r3, #52	; 0x34
 800c0b4:	3311      	adds	r3, #17
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fc8e 	bl	800a9d8 <ld_word>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	891b      	ldrh	r3, [r3, #8]
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <find_volume+0x25e>
 800c0d2:	230d      	movs	r3, #13
 800c0d4:	e119      	b.n	800c30a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	3334      	adds	r3, #52	; 0x34
 800c0da:	3313      	adds	r3, #19
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe fc7b 	bl	800a9d8 <ld_word>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d106      	bne.n	800c0fa <find_volume+0x282>
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	3334      	adds	r3, #52	; 0x34
 800c0f0:	3320      	adds	r3, #32
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fc88 	bl	800aa08 <ld_dword>
 800c0f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	3334      	adds	r3, #52	; 0x34
 800c0fe:	330e      	adds	r3, #14
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe fc69 	bl	800a9d8 <ld_word>
 800c106:	4603      	mov	r3, r0
 800c108:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c10a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <find_volume+0x29c>
 800c110:	230d      	movs	r3, #13
 800c112:	e0fa      	b.n	800c30a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c118:	4413      	add	r3, r2
 800c11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c11c:	8912      	ldrh	r2, [r2, #8]
 800c11e:	0912      	lsrs	r2, r2, #4
 800c120:	b292      	uxth	r2, r2
 800c122:	4413      	add	r3, r2
 800c124:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d204      	bcs.n	800c138 <find_volume+0x2c0>
 800c12e:	230d      	movs	r3, #13
 800c130:	e0eb      	b.n	800c30a <find_volume+0x492>
 800c132:	bf00      	nop
 800c134:	20000cf8 	.word	0x20000cf8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c140:	8952      	ldrh	r2, [r2, #10]
 800c142:	fbb3 f3f2 	udiv	r3, r3, r2
 800c146:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <find_volume+0x2da>
 800c14e:	230d      	movs	r3, #13
 800c150:	e0db      	b.n	800c30a <find_volume+0x492>
		fmt = FS_FAT32;
 800c152:	2303      	movs	r3, #3
 800c154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c15e:	4293      	cmp	r3, r2
 800c160:	d802      	bhi.n	800c168 <find_volume+0x2f0>
 800c162:	2302      	movs	r3, #2
 800c164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c16e:	4293      	cmp	r3, r2
 800c170:	d802      	bhi.n	800c178 <find_volume+0x300>
 800c172:	2301      	movs	r3, #1
 800c174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	1c9a      	adds	r2, r3, #2
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c184:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c186:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18a:	441a      	add	r2, r3
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c190:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	441a      	add	r2, r3
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c19a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d11e      	bne.n	800c1e0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	3334      	adds	r3, #52	; 0x34
 800c1a6:	332a      	adds	r3, #42	; 0x2a
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fe fc15 	bl	800a9d8 <ld_word>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <find_volume+0x340>
 800c1b4:	230d      	movs	r3, #13
 800c1b6:	e0a8      	b.n	800c30a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	891b      	ldrh	r3, [r3, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <find_volume+0x34c>
 800c1c0:	230d      	movs	r3, #13
 800c1c2:	e0a2      	b.n	800c30a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	3334      	adds	r3, #52	; 0x34
 800c1c8:	332c      	adds	r3, #44	; 0x2c
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe fc1c 	bl	800aa08 <ld_dword>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	647b      	str	r3, [r7, #68]	; 0x44
 800c1de:	e01f      	b.n	800c220 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	891b      	ldrh	r3, [r3, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <find_volume+0x374>
 800c1e8:	230d      	movs	r3, #13
 800c1ea:	e08e      	b.n	800c30a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f2:	441a      	add	r2, r3
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d103      	bne.n	800c208 <find_volume+0x390>
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	e00a      	b.n	800c21e <find_volume+0x3a6>
 800c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20a:	699a      	ldr	r2, [r3, #24]
 800c20c:	4613      	mov	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	4413      	add	r3, r2
 800c212:	085a      	lsrs	r2, r3, #1
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c21e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c222:	69da      	ldr	r2, [r3, #28]
 800c224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c226:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c22a:	0a5b      	lsrs	r3, r3, #9
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d201      	bcs.n	800c234 <find_volume+0x3bc>
 800c230:	230d      	movs	r3, #13
 800c232:	e06a      	b.n	800c30a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c23a:	615a      	str	r2, [r3, #20]
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	695a      	ldr	r2, [r3, #20]
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	2280      	movs	r2, #128	; 0x80
 800c248:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c24a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d149      	bne.n	800c2e6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	3334      	adds	r3, #52	; 0x34
 800c256:	3330      	adds	r3, #48	; 0x30
 800c258:	4618      	mov	r0, r3
 800c25a:	f7fe fbbd 	bl	800a9d8 <ld_word>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b01      	cmp	r3, #1
 800c262:	d140      	bne.n	800c2e6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c266:	3301      	adds	r3, #1
 800c268:	4619      	mov	r1, r3
 800c26a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c26c:	f7fe fe96 	bl	800af9c <move_window>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d137      	bne.n	800c2e6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c278:	2200      	movs	r2, #0
 800c27a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	3334      	adds	r3, #52	; 0x34
 800c280:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe fba7 	bl	800a9d8 <ld_word>
 800c28a:	4603      	mov	r3, r0
 800c28c:	461a      	mov	r2, r3
 800c28e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c292:	429a      	cmp	r2, r3
 800c294:	d127      	bne.n	800c2e6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	3334      	adds	r3, #52	; 0x34
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fbb4 	bl	800aa08 <ld_dword>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	4a1c      	ldr	r2, [pc, #112]	; (800c314 <find_volume+0x49c>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d11e      	bne.n	800c2e6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	3334      	adds	r3, #52	; 0x34
 800c2ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fe fba9 	bl	800aa08 <ld_dword>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	4a17      	ldr	r2, [pc, #92]	; (800c318 <find_volume+0x4a0>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d113      	bne.n	800c2e6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	3334      	adds	r3, #52	; 0x34
 800c2c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fb9e 	bl	800aa08 <ld_dword>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	3334      	adds	r3, #52	; 0x34
 800c2d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe fb94 	bl	800aa08 <ld_dword>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c2ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c2ee:	4b0b      	ldr	r3, [pc, #44]	; (800c31c <find_volume+0x4a4>)
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	4b09      	ldr	r3, [pc, #36]	; (800c31c <find_volume+0x4a4>)
 800c2f8:	801a      	strh	r2, [r3, #0]
 800c2fa:	4b08      	ldr	r3, [pc, #32]	; (800c31c <find_volume+0x4a4>)
 800c2fc:	881a      	ldrh	r2, [r3, #0]
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c302:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c304:	f7fe fde2 	bl	800aecc <clear_lock>
#endif
	return FR_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3758      	adds	r7, #88	; 0x58
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	41615252 	.word	0x41615252
 800c318:	61417272 	.word	0x61417272
 800c31c:	20000cfc 	.word	0x20000cfc

0800c320 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c32a:	2309      	movs	r3, #9
 800c32c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d02e      	beq.n	800c392 <validate+0x72>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d02a      	beq.n	800c392 <validate+0x72>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d025      	beq.n	800c392 <validate+0x72>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	889a      	ldrh	r2, [r3, #4]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	88db      	ldrh	r3, [r3, #6]
 800c350:	429a      	cmp	r2, r3
 800c352:	d11e      	bne.n	800c392 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fe fc3d 	bl	800abd8 <lock_fs>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d014      	beq.n	800c38e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	785b      	ldrb	r3, [r3, #1]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fa96 	bl	800a89c <disk_status>
 800c370:	4603      	mov	r3, r0
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b00      	cmp	r3, #0
 800c378:	d102      	bne.n	800c380 <validate+0x60>
				res = FR_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]
 800c37e:	e008      	b.n	800c392 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2100      	movs	r1, #0
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fc3c 	bl	800ac04 <unlock_fs>
 800c38c:	e001      	b.n	800c392 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c38e:	230f      	movs	r3, #15
 800c390:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <validate+0x7e>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	e000      	b.n	800c3a0 <validate+0x80>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	6013      	str	r3, [r2, #0]
	return res;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3c2:	f107 0310 	add.w	r3, r7, #16
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fcbb 	bl	800bd42 <get_ldnumber>
 800c3cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	da01      	bge.n	800c3d8 <f_mount+0x28>
 800c3d4:	230b      	movs	r3, #11
 800c3d6:	e048      	b.n	800c46a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3d8:	4a26      	ldr	r2, [pc, #152]	; (800c474 <f_mount+0xc4>)
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00f      	beq.n	800c408 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c3e8:	69b8      	ldr	r0, [r7, #24]
 800c3ea:	f7fe fd6f 	bl	800aecc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f001 f902 	bl	800d5fc <ff_del_syncobj>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <f_mount+0x52>
 800c3fe:	2302      	movs	r3, #2
 800c400:	e033      	b.n	800c46a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00f      	beq.n	800c42e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	b2da      	uxtb	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	330c      	adds	r3, #12
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f001 f8d3 	bl	800d5ca <ff_cre_syncobj>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <f_mount+0x7e>
 800c42a:	2302      	movs	r3, #2
 800c42c:	e01d      	b.n	800c46a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4910      	ldr	r1, [pc, #64]	; (800c474 <f_mount+0xc4>)
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <f_mount+0x94>
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d001      	beq.n	800c448 <f_mount+0x98>
 800c444:	2300      	movs	r3, #0
 800c446:	e010      	b.n	800c46a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c448:	f107 010c 	add.w	r1, r7, #12
 800c44c:	f107 0308 	add.w	r3, r7, #8
 800c450:	2200      	movs	r2, #0
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fd10 	bl	800be78 <find_volume>
 800c458:	4603      	mov	r3, r0
 800c45a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	7dfa      	ldrb	r2, [r7, #23]
 800c460:	4611      	mov	r1, r2
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fbce 	bl	800ac04 <unlock_fs>
 800c468:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000cf8 	.word	0x20000cf8

0800c478 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b098      	sub	sp, #96	; 0x60
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <f_open+0x18>
 800c48c:	2309      	movs	r3, #9
 800c48e:	e1b4      	b.n	800c7fa <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c496:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c498:	79fa      	ldrb	r2, [r7, #7]
 800c49a:	f107 0110 	add.w	r1, r7, #16
 800c49e:	f107 0308 	add.w	r3, r7, #8
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff fce8 	bl	800be78 <find_volume>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c4ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f040 8191 	bne.w	800c7da <f_open+0x362>
		dj.obj.fs = fs;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	f107 0314 	add.w	r3, r7, #20
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7ff fbcb 	bl	800bc60 <follow_path>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d11a      	bne.n	800c50e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	da03      	bge.n	800c4ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800c4e2:	2306      	movs	r3, #6
 800c4e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c4e8:	e011      	b.n	800c50e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	2301      	movne	r3, #1
 800c4f6:	2300      	moveq	r3, #0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f107 0314 	add.w	r3, r7, #20
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe fb9a 	bl	800ac3c <chk_lock>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	f003 031c 	and.w	r3, r3, #28
 800c514:	2b00      	cmp	r3, #0
 800c516:	d07f      	beq.n	800c618 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d017      	beq.n	800c550 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c524:	2b04      	cmp	r3, #4
 800c526:	d10e      	bne.n	800c546 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c528:	f7fe fbe4 	bl	800acf4 <enq_lock>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d006      	beq.n	800c540 <f_open+0xc8>
 800c532:	f107 0314 	add.w	r3, r7, #20
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff facb 	bl	800bad2 <dir_register>
 800c53c:	4603      	mov	r3, r0
 800c53e:	e000      	b.n	800c542 <f_open+0xca>
 800c540:	2312      	movs	r3, #18
 800c542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	f043 0308 	orr.w	r3, r3, #8
 800c54c:	71fb      	strb	r3, [r7, #7]
 800c54e:	e010      	b.n	800c572 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c550:	7ebb      	ldrb	r3, [r7, #26]
 800c552:	f003 0311 	and.w	r3, r3, #17
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <f_open+0xea>
					res = FR_DENIED;
 800c55a:	2307      	movs	r3, #7
 800c55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c560:	e007      	b.n	800c572 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	f003 0304 	and.w	r3, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <f_open+0xfa>
 800c56c:	2308      	movs	r3, #8
 800c56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c576:	2b00      	cmp	r3, #0
 800c578:	d168      	bne.n	800c64c <f_open+0x1d4>
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	f003 0308 	and.w	r3, r3, #8
 800c580:	2b00      	cmp	r3, #0
 800c582:	d063      	beq.n	800c64c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c584:	f7fd ff34 	bl	800a3f0 <get_fattime>
 800c588:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	330e      	adds	r3, #14
 800c58e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe fa77 	bl	800aa84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c598:	3316      	adds	r3, #22
 800c59a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe fa71 	bl	800aa84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	330b      	adds	r3, #11
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff f9fa 	bl	800b9aa <ld_clust>
 800c5b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7ff fa12 	bl	800b9e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c6:	331c      	adds	r3, #28
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe fa5a 	bl	800aa84 <st_dword>
					fs->wflag = 1;
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d037      	beq.n	800c64c <f_open+0x1d4>
						dw = fs->winsect;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c5e2:	f107 0314 	add.w	r3, r7, #20
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe ff25 	bl	800b43a <remove_chain>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d126      	bne.n	800c64c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fcca 	bl	800af9c <move_window>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c612:	3a01      	subs	r2, #1
 800c614:	611a      	str	r2, [r3, #16]
 800c616:	e019      	b.n	800c64c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d115      	bne.n	800c64c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c620:	7ebb      	ldrb	r3, [r7, #26]
 800c622:	f003 0310 	and.w	r3, r3, #16
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c62a:	2304      	movs	r3, #4
 800c62c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c630:	e00c      	b.n	800c64c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c632:	79fb      	ldrb	r3, [r7, #7]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d007      	beq.n	800c64c <f_open+0x1d4>
 800c63c:	7ebb      	ldrb	r3, [r7, #26]
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <f_open+0x1d4>
						res = FR_DENIED;
 800c646:	2307      	movs	r3, #7
 800c648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c64c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c650:	2b00      	cmp	r3, #0
 800c652:	d128      	bne.n	800c6a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	f003 0308 	and.w	r3, r3, #8
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c664:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	f023 0301 	bic.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bf14      	ite	ne
 800c67e:	2301      	movne	r3, #1
 800c680:	2300      	moveq	r3, #0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	461a      	mov	r2, r3
 800c686:	f107 0314 	add.w	r3, r7, #20
 800c68a:	4611      	mov	r1, r2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fb53 	bl	800ad38 <inc_lock>
 800c692:	4602      	mov	r2, r0
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <f_open+0x22e>
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c6a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 8095 	bne.w	800c7da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff f977 	bl	800b9aa <ld_clust>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c4:	331c      	adds	r3, #28
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe f99e 	bl	800aa08 <ld_dword>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	88da      	ldrh	r2, [r3, #6]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	79fa      	ldrb	r2, [r7, #7]
 800c6ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3330      	adds	r3, #48	; 0x30
 800c702:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c706:	2100      	movs	r1, #0
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fa08 	bl	800ab1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	f003 0320 	and.w	r3, r3, #32
 800c714:	2b00      	cmp	r3, #0
 800c716:	d060      	beq.n	800c7da <f_open+0x362>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d05c      	beq.n	800c7da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	895b      	ldrh	r3, [r3, #10]
 800c72c:	025b      	lsls	r3, r3, #9
 800c72e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	657b      	str	r3, [r7, #84]	; 0x54
 800c73c:	e016      	b.n	800c76c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe fce5 	bl	800b112 <get_fat>
 800c748:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c74a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d802      	bhi.n	800c756 <f_open+0x2de>
 800c750:	2302      	movs	r3, #2
 800c752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c75c:	d102      	bne.n	800c764 <f_open+0x2ec>
 800c75e:	2301      	movs	r3, #1
 800c760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	657b      	str	r3, [r7, #84]	; 0x54
 800c76c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <f_open+0x304>
 800c774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c778:	429a      	cmp	r2, r3
 800c77a:	d8e0      	bhi.n	800c73e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c780:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c786:	2b00      	cmp	r3, #0
 800c788:	d127      	bne.n	800c7da <f_open+0x362>
 800c78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c790:	2b00      	cmp	r3, #0
 800c792:	d022      	beq.n	800c7da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fe fc9b 	bl	800b0d4 <clust2sect>
 800c79e:	6478      	str	r0, [r7, #68]	; 0x44
 800c7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d103      	bne.n	800c7ae <f_open+0x336>
						res = FR_INT_ERR;
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7ac:	e015      	b.n	800c7da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7b0:	0a5a      	lsrs	r2, r3, #9
 800c7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7b4:	441a      	add	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	7858      	ldrb	r0, [r3, #1]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6a1a      	ldr	r2, [r3, #32]
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	f7fe f8a7 	bl	800a91c <disk_read>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <f_open+0x362>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c7da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <f_open+0x370>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fa07 	bl	800ac04 <unlock_fs>
 800c7f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3760      	adds	r7, #96	; 0x60
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b08c      	sub	sp, #48	; 0x30
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	607a      	str	r2, [r7, #4]
 800c80e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f107 0210 	add.w	r2, r7, #16
 800c820:	4611      	mov	r1, r2
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff fd7c 	bl	800c320 <validate>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c832:	2b00      	cmp	r3, #0
 800c834:	d107      	bne.n	800c846 <f_write+0x44>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7d5b      	ldrb	r3, [r3, #21]
 800c83a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c83e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c842:	2b00      	cmp	r3, #0
 800c844:	d009      	beq.n	800c85a <f_write+0x58>
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c84c:	4611      	mov	r1, r2
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe f9d8 	bl	800ac04 <unlock_fs>
 800c854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c858:	e173      	b.n	800cb42 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	7d1b      	ldrb	r3, [r3, #20]
 800c85e:	f003 0302 	and.w	r3, r3, #2
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <f_write+0x72>
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	2107      	movs	r1, #7
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fe f9ca 	bl	800ac04 <unlock_fs>
 800c870:	2307      	movs	r3, #7
 800c872:	e166      	b.n	800cb42 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	699a      	ldr	r2, [r3, #24]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	441a      	add	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	429a      	cmp	r2, r3
 800c882:	f080 814b 	bcs.w	800cb1c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	43db      	mvns	r3, r3
 800c88c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c88e:	e145      	b.n	800cb1c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f040 8101 	bne.w	800caa0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	0a5b      	lsrs	r3, r3, #9
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	8952      	ldrh	r2, [r2, #10]
 800c8a8:	3a01      	subs	r2, #1
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d14d      	bne.n	800c950 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10c      	bne.n	800c8d6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d11a      	bne.n	800c8fe <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fe fe19 	bl	800b504 <create_chain>
 800c8d2:	62b8      	str	r0, [r7, #40]	; 0x28
 800c8d4:	e013      	b.n	800c8fe <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7fe fea5 	bl	800b634 <clmt_clust>
 800c8ea:	62b8      	str	r0, [r7, #40]	; 0x28
 800c8ec:	e007      	b.n	800c8fe <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe fe04 	bl	800b504 <create_chain>
 800c8fc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 8110 	beq.w	800cb26 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d109      	bne.n	800c920 <f_write+0x11e>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2202      	movs	r2, #2
 800c910:	755a      	strb	r2, [r3, #21]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2102      	movs	r1, #2
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe f974 	bl	800ac04 <unlock_fs>
 800c91c:	2302      	movs	r3, #2
 800c91e:	e110      	b.n	800cb42 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c926:	d109      	bne.n	800c93c <f_write+0x13a>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	755a      	strb	r2, [r3, #21]
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2101      	movs	r1, #1
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe f966 	bl	800ac04 <unlock_fs>
 800c938:	2301      	movs	r3, #1
 800c93a:	e102      	b.n	800cb42 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c940:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d102      	bne.n	800c950 <f_write+0x14e>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c94e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	7d1b      	ldrb	r3, [r3, #20]
 800c954:	b25b      	sxtb	r3, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	da1d      	bge.n	800c996 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	7858      	ldrb	r0, [r3, #1]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a1a      	ldr	r2, [r3, #32]
 800c968:	2301      	movs	r3, #1
 800c96a:	f7fd fff7 	bl	800a95c <disk_write>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <f_write+0x186>
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2201      	movs	r2, #1
 800c978:	755a      	strb	r2, [r3, #21]
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2101      	movs	r1, #1
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fe f940 	bl	800ac04 <unlock_fs>
 800c984:	2301      	movs	r3, #1
 800c986:	e0dc      	b.n	800cb42 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	7d1b      	ldrb	r3, [r3, #20]
 800c98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c990:	b2da      	uxtb	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f7fe fb98 	bl	800b0d4 <clust2sect>
 800c9a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d109      	bne.n	800c9c0 <f_write+0x1be>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	755a      	strb	r2, [r3, #21]
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2102      	movs	r1, #2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe f924 	bl	800ac04 <unlock_fs>
 800c9bc:	2302      	movs	r3, #2
 800c9be:	e0c0      	b.n	800cb42 <f_write+0x340>
			sect += csect;
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	0a5b      	lsrs	r3, r3, #9
 800c9cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d041      	beq.n	800ca58 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c9d4:	69ba      	ldr	r2, [r7, #24]
 800c9d6:	6a3b      	ldr	r3, [r7, #32]
 800c9d8:	4413      	add	r3, r2
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	8952      	ldrh	r2, [r2, #10]
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d905      	bls.n	800c9ee <f_write+0x1ec>
					cc = fs->csize - csect;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	895b      	ldrh	r3, [r3, #10]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	7858      	ldrb	r0, [r3, #1]
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	69f9      	ldr	r1, [r7, #28]
 800c9f8:	f7fd ffb0 	bl	800a95c <disk_write>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d009      	beq.n	800ca16 <f_write+0x214>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2201      	movs	r2, #1
 800ca06:	755a      	strb	r2, [r3, #21]
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe f8f9 	bl	800ac04 <unlock_fs>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e095      	b.n	800cb42 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6a1a      	ldr	r2, [r3, #32]
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	6a3a      	ldr	r2, [r7, #32]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d915      	bls.n	800ca50 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6a1a      	ldr	r2, [r3, #32]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	025b      	lsls	r3, r3, #9
 800ca34:	69fa      	ldr	r2, [r7, #28]
 800ca36:	4413      	add	r3, r2
 800ca38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f7fe f84d 	bl	800aadc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	7d1b      	ldrb	r3, [r3, #20]
 800ca46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	025b      	lsls	r3, r3, #9
 800ca54:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ca56:	e044      	b.n	800cae2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	697a      	ldr	r2, [r7, #20]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d01b      	beq.n	800ca9a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	699a      	ldr	r2, [r3, #24]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d215      	bcs.n	800ca9a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	7858      	ldrb	r0, [r3, #1]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca78:	2301      	movs	r3, #1
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	f7fd ff4e 	bl	800a91c <disk_read>
 800ca80:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d009      	beq.n	800ca9a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	755a      	strb	r2, [r3, #21]
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2101      	movs	r1, #1
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fe f8b7 	bl	800ac04 <unlock_fs>
 800ca96:	2301      	movs	r3, #1
 800ca98:	e053      	b.n	800cb42 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800caae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d901      	bls.n	800caba <f_write+0x2b8>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac8:	4413      	add	r3, r2
 800caca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cacc:	69f9      	ldr	r1, [r7, #28]
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe f804 	bl	800aadc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	7d1b      	ldrb	r3, [r3, #20]
 800cad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	4413      	add	r3, r2
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	699a      	ldr	r2, [r3, #24]
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	441a      	add	r2, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	619a      	str	r2, [r3, #24]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	bf38      	it	cc
 800cb02:	461a      	movcc	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	60da      	str	r2, [r3, #12]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	441a      	add	r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f47f aeb6 	bne.w	800c890 <f_write+0x8e>
 800cb24:	e000      	b.n	800cb28 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	7d1b      	ldrb	r3, [r3, #20]
 800cb2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fe f862 	bl	800ac04 <unlock_fs>
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3730      	adds	r7, #48	; 0x30
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b086      	sub	sp, #24
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f107 0208 	add.w	r2, r7, #8
 800cb58:	4611      	mov	r1, r2
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7ff fbe0 	bl	800c320 <validate>
 800cb60:	4603      	mov	r3, r0
 800cb62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d16d      	bne.n	800cc46 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7d1b      	ldrb	r3, [r3, #20]
 800cb6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d067      	beq.n	800cc46 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7d1b      	ldrb	r3, [r3, #20]
 800cb7a:	b25b      	sxtb	r3, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	da1a      	bge.n	800cbb6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	7858      	ldrb	r0, [r3, #1]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a1a      	ldr	r2, [r3, #32]
 800cb8e:	2301      	movs	r3, #1
 800cb90:	f7fd fee4 	bl	800a95c <disk_write>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d006      	beq.n	800cba8 <f_sync+0x5e>
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe f830 	bl	800ac04 <unlock_fs>
 800cba4:	2301      	movs	r3, #1
 800cba6:	e055      	b.n	800cc54 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	7d1b      	ldrb	r3, [r3, #20]
 800cbac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cbb6:	f7fd fc1b 	bl	800a3f0 <get_fattime>
 800cbba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f7fe f9e9 	bl	800af9c <move_window>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d138      	bne.n	800cc46 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	330b      	adds	r3, #11
 800cbde:	781a      	ldrb	r2, [r3, #0]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	330b      	adds	r3, #11
 800cbe4:	f042 0220 	orr.w	r2, r2, #32
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6818      	ldr	r0, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	68f9      	ldr	r1, [r7, #12]
 800cbf8:	f7fe fef6 	bl	800b9e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f103 021c 	add.w	r2, r3, #28
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	4619      	mov	r1, r3
 800cc08:	4610      	mov	r0, r2
 800cc0a:	f7fd ff3b 	bl	800aa84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3316      	adds	r3, #22
 800cc12:	6939      	ldr	r1, [r7, #16]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fd ff35 	bl	800aa84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3312      	adds	r3, #18
 800cc1e:	2100      	movs	r1, #0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd ff14 	bl	800aa4e <st_word>
					fs->wflag = 1;
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe f9e2 	bl	800aff8 <sync_fs>
 800cc34:	4603      	mov	r3, r0
 800cc36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7d1b      	ldrb	r3, [r3, #20]
 800cc3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	7dfa      	ldrb	r2, [r7, #23]
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fd ffd9 	bl	800ac04 <unlock_fs>
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ff70 	bl	800cb4a <f_sync>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d11d      	bne.n	800ccb0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f107 0208 	add.w	r2, r7, #8
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fb4f 	bl	800c320 <validate>
 800cc82:	4603      	mov	r3, r0
 800cc84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d111      	bne.n	800ccb0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe f8df 	bl	800ae54 <dec_lock>
 800cc96:	4603      	mov	r3, r0
 800cc98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d102      	bne.n	800cca6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2100      	movs	r1, #0
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fd ffaa 	bl	800ac04 <unlock_fs>
#endif
		}
	}
	return res;
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b09d      	sub	sp, #116	; 0x74
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	603b      	str	r3, [r7, #0]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800cccc:	2301      	movs	r3, #1
 800ccce:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800ccd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccd4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ccd6:	f107 030c 	add.w	r3, r7, #12
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff f831 	bl	800bd42 <get_ldnumber>
 800cce0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da02      	bge.n	800ccee <f_mkfs+0x32>
 800cce8:	230b      	movs	r3, #11
 800ccea:	f000 bc0d 	b.w	800d508 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800ccee:	4a94      	ldr	r2, [pc, #592]	; (800cf40 <f_mkfs+0x284>)
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d005      	beq.n	800cd06 <f_mkfs+0x4a>
 800ccfa:	4a91      	ldr	r2, [pc, #580]	; (800cf40 <f_mkfs+0x284>)
 800ccfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800cd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800cd12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fd fdda 	bl	800a8d0 <disk_initialize>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800cd22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <f_mkfs+0x76>
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e3ea      	b.n	800d508 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cd32:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d001      	beq.n	800cd42 <f_mkfs+0x86>
 800cd3e:	230a      	movs	r3, #10
 800cd40:	e3e2      	b.n	800d508 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800cd42:	f107 0214 	add.w	r2, r7, #20
 800cd46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cd4a:	2103      	movs	r1, #3
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fd fe25 	bl	800a99c <disk_ioctl>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10c      	bne.n	800cd72 <f_mkfs+0xb6>
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d009      	beq.n	800cd72 <f_mkfs+0xb6>
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd64:	d805      	bhi.n	800cd72 <f_mkfs+0xb6>
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	1e5a      	subs	r2, r3, #1
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <f_mkfs+0xba>
 800cd72:	2301      	movs	r3, #1
 800cd74:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800cd76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd7a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <f_mkfs+0xce>
 800cd82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d309      	bcc.n	800cd9e <f_mkfs+0xe2>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cd90:	d805      	bhi.n	800cd9e <f_mkfs+0xe2>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	1e5a      	subs	r2, r3, #1
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4013      	ands	r3, r2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <f_mkfs+0xe6>
 800cd9e:	2313      	movs	r3, #19
 800cda0:	e3b2      	b.n	800d508 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800cda2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdaa:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800cdb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cdb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cdb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800cdbc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	fb02 f303 	mul.w	r3, r2, r3
 800cdc4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <f_mkfs+0x114>
 800cdcc:	230e      	movs	r3, #14
 800cdce:	e39b      	b.n	800d508 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800cdd0:	f107 0210 	add.w	r2, r7, #16
 800cdd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cdd8:	2101      	movs	r1, #1
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fd fdde 	bl	800a99c <disk_ioctl>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <f_mkfs+0x12e>
 800cde6:	2301      	movs	r3, #1
 800cde8:	e38e      	b.n	800d508 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	f003 0308 	and.w	r3, r3, #8
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <f_mkfs+0x13c>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e000      	b.n	800cdfa <f_mkfs+0x13e>
 800cdf8:	233f      	movs	r3, #63	; 0x3f
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d901      	bls.n	800ce08 <f_mkfs+0x14c>
 800ce04:	230e      	movs	r3, #14
 800ce06:	e37f      	b.n	800d508 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	2b7f      	cmp	r3, #127	; 0x7f
 800ce14:	d801      	bhi.n	800ce1a <f_mkfs+0x15e>
 800ce16:	230e      	movs	r3, #14
 800ce18:	e376      	b.n	800d508 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b80      	cmp	r3, #128	; 0x80
 800ce1e:	d901      	bls.n	800ce24 <f_mkfs+0x168>
 800ce20:	2313      	movs	r3, #19
 800ce22:	e371      	b.n	800d508 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800ce24:	7afb      	ldrb	r3, [r7, #11]
 800ce26:	f003 0302 	and.w	r3, r3, #2
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00d      	beq.n	800ce4a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800ce2e:	7afb      	ldrb	r3, [r7, #11]
 800ce30:	f003 0307 	and.w	r3, r3, #7
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d004      	beq.n	800ce42 <f_mkfs+0x186>
 800ce38:	7afb      	ldrb	r3, [r7, #11]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d103      	bne.n	800ce4a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800ce42:	2303      	movs	r3, #3
 800ce44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ce48:	e009      	b.n	800ce5e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ce4a:	7afb      	ldrb	r3, [r7, #11]
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <f_mkfs+0x19c>
 800ce54:	2313      	movs	r3, #19
 800ce56:	e357      	b.n	800d508 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800ce58:	2302      	movs	r3, #2
 800ce5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800ce62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d13c      	bne.n	800cee4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800ce6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d11b      	bne.n	800cea8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	0c5b      	lsrs	r3, r3, #17
 800ce74:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ce76:	2300      	movs	r3, #0
 800ce78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	653b      	str	r3, [r7, #80]	; 0x50
 800ce7e:	e005      	b.n	800ce8c <f_mkfs+0x1d0>
 800ce80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce82:	3301      	adds	r3, #1
 800ce84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce8c:	4a2d      	ldr	r2, [pc, #180]	; (800cf44 <f_mkfs+0x288>)
 800ce8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <f_mkfs+0x1ec>
 800ce98:	4a2a      	ldr	r2, [pc, #168]	; (800cf44 <f_mkfs+0x288>)
 800ce9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cea0:	461a      	mov	r2, r3
 800cea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d2eb      	bcs.n	800ce80 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceac:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	3302      	adds	r3, #2
 800ceb6:	009a      	lsls	r2, r3, #2
 800ceb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ceba:	4413      	add	r3, r2
 800cebc:	1e5a      	subs	r2, r3, #1
 800cebe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800cec6:	2320      	movs	r3, #32
 800cec8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800ceca:	2300      	movs	r3, #0
 800cecc:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d903      	bls.n	800cee0 <f_mkfs+0x224>
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	4a1b      	ldr	r2, [pc, #108]	; (800cf48 <f_mkfs+0x28c>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d952      	bls.n	800cf86 <f_mkfs+0x2ca>
 800cee0:	230e      	movs	r3, #14
 800cee2:	e311      	b.n	800d508 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800cee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d11b      	bne.n	800cf22 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	0b1b      	lsrs	r3, r3, #12
 800ceee:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cef0:	2300      	movs	r3, #0
 800cef2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cef4:	2301      	movs	r3, #1
 800cef6:	653b      	str	r3, [r7, #80]	; 0x50
 800cef8:	e005      	b.n	800cf06 <f_mkfs+0x24a>
 800cefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cefc:	3301      	adds	r3, #1
 800cefe:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	653b      	str	r3, [r7, #80]	; 0x50
 800cf06:	4a11      	ldr	r2, [pc, #68]	; (800cf4c <f_mkfs+0x290>)
 800cf08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d007      	beq.n	800cf22 <f_mkfs+0x266>
 800cf12:	4a0e      	ldr	r2, [pc, #56]	; (800cf4c <f_mkfs+0x290>)
 800cf14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d2eb      	bcs.n	800cefa <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf2a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d90c      	bls.n	800cf50 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	3302      	adds	r3, #2
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf3e:	e012      	b.n	800cf66 <f_mkfs+0x2aa>
 800cf40:	20000cf8 	.word	0x20000cf8
 800cf44:	080160b8 	.word	0x080160b8
 800cf48:	0ffffff5 	.word	0x0ffffff5
 800cf4c:	080160c8 	.word	0x080160c8
				} else {
					fmt = FS_FAT12;
 800cf50:	2301      	movs	r3, #1
 800cf52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cf56:	6a3a      	ldr	r2, [r7, #32]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3301      	adds	r3, #1
 800cf60:	085b      	lsrs	r3, r3, #1
 800cf62:	3303      	adds	r3, #3
 800cf64:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800cf66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cf68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf6a:	4413      	add	r3, r2
 800cf6c:	1e5a      	subs	r2, r3, #1
 800cf6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf74:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800cf76:	2301      	movs	r3, #1
 800cf78:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800cf7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7c:	015a      	lsls	r2, r3, #5
 800cf7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf84:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800cf86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf8a:	4413      	add	r3, r2
 800cf8c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800cf8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf92:	fb03 f202 	mul.w	r2, r3, r2
 800cf96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf98:	4413      	add	r3, r2
 800cf9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf9c:	4413      	add	r3, r2
 800cf9e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800cfa0:	697a      	ldr	r2, [r7, #20]
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	1e5a      	subs	r2, r3, #1
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	425b      	negs	r3, r3
 800cfac:	401a      	ands	r2, r3
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800cfb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d108      	bne.n	800cfce <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800cfbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc0:	4413      	add	r3, r2
 800cfc2:	657b      	str	r3, [r7, #84]	; 0x54
 800cfc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc8:	4413      	add	r3, r2
 800cfca:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfcc:	e006      	b.n	800cfdc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800cfce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cfd8:	4413      	add	r3, r2
 800cfda:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800cfdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfde:	011a      	lsls	r2, r3, #4
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	441a      	add	r2, r3
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	1ad2      	subs	r2, r2, r3
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d901      	bls.n	800cff2 <f_mkfs+0x336>
 800cfee:	230e      	movs	r3, #14
 800cff0:	e28a      	b.n	800d508 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800cff2:	693a      	ldr	r2, [r7, #16]
 800cff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cffa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cffc:	fb01 f303 	mul.w	r3, r1, r3
 800d000:	1ad2      	subs	r2, r2, r3
 800d002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d004:	1ad2      	subs	r2, r2, r3
 800d006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d008:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800d00e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d012:	2b03      	cmp	r3, #3
 800d014:	d10f      	bne.n	800d036 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d80a      	bhi.n	800d036 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <f_mkfs+0x376>
 800d026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d028:	085b      	lsrs	r3, r3, #1
 800d02a:	607b      	str	r3, [r7, #4]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d144      	bne.n	800d0bc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800d032:	230e      	movs	r3, #14
 800d034:	e268      	b.n	800d508 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800d036:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d133      	bne.n	800d0a6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d044:	4293      	cmp	r3, r2
 800d046:	d91e      	bls.n	800d086 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d107      	bne.n	800d05e <f_mkfs+0x3a2>
 800d04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	2b40      	cmp	r3, #64	; 0x40
 800d054:	d803      	bhi.n	800d05e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	607b      	str	r3, [r7, #4]
 800d05c:	e033      	b.n	800d0c6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800d05e:	7afb      	ldrb	r3, [r7, #11]
 800d060:	f003 0302 	and.w	r3, r3, #2
 800d064:	2b00      	cmp	r3, #0
 800d066:	d003      	beq.n	800d070 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d068:	2303      	movs	r3, #3
 800d06a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d06e:	e02a      	b.n	800d0c6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d105      	bne.n	800d082 <f_mkfs+0x3c6>
 800d076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	607b      	str	r3, [r7, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b80      	cmp	r3, #128	; 0x80
 800d080:	d91e      	bls.n	800d0c0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800d082:	230e      	movs	r3, #14
 800d084:	e240      	b.n	800d508 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d80a      	bhi.n	800d0a6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <f_mkfs+0x3e6>
 800d096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	607b      	str	r3, [r7, #4]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b80      	cmp	r3, #128	; 0x80
 800d0a0:	d910      	bls.n	800d0c4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800d0a2:	230e      	movs	r3, #14
 800d0a4:	e230      	b.n	800d508 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d0a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d10c      	bne.n	800d0c8 <f_mkfs+0x40c>
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d907      	bls.n	800d0c8 <f_mkfs+0x40c>
 800d0b8:	230e      	movs	r3, #14
 800d0ba:	e225      	b.n	800d508 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d0bc:	bf00      	nop
 800d0be:	e6ce      	b.n	800ce5e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d0c0:	bf00      	nop
 800d0c2:	e6cc      	b.n	800ce5e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d0c4:	bf00      	nop
			pau = au;
 800d0c6:	e6ca      	b.n	800ce5e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800d0c8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d0ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0d2:	f7fd fd24 	bl	800ab1e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800d0d6:	220b      	movs	r2, #11
 800d0d8:	49b2      	ldr	r1, [pc, #712]	; (800d3a4 <f_mkfs+0x6e8>)
 800d0da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0dc:	f7fd fcfe 	bl	800aadc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	330b      	adds	r3, #11
 800d0e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fd fcb0 	bl	800aa4e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	330d      	adds	r3, #13
 800d0f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0f4:	b2d2      	uxtb	r2, r2
 800d0f6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fa:	330e      	adds	r3, #14
 800d0fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0fe:	b292      	uxth	r2, r2
 800d100:	4611      	mov	r1, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd fca3 	bl	800aa4e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	3310      	adds	r3, #16
 800d10c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d10e:	b2d2      	uxtb	r2, r2
 800d110:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	f103 0211 	add.w	r2, r3, #17
 800d118:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d11c:	2b03      	cmp	r3, #3
 800d11e:	d002      	beq.n	800d126 <f_mkfs+0x46a>
 800d120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d122:	b29b      	uxth	r3, r3
 800d124:	e000      	b.n	800d128 <f_mkfs+0x46c>
 800d126:	2300      	movs	r3, #0
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fd fc8f 	bl	800aa4e <st_word>
		if (sz_vol < 0x10000) {
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d136:	d208      	bcs.n	800d14a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800d138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13a:	3313      	adds	r3, #19
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	b292      	uxth	r2, r2
 800d140:	4611      	mov	r1, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7fd fc83 	bl	800aa4e <st_word>
 800d148:	e006      	b.n	800d158 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14c:	3320      	adds	r3, #32
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f7fd fc96 	bl	800aa84 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	3315      	adds	r3, #21
 800d15c:	22f8      	movs	r2, #248	; 0xf8
 800d15e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	3318      	adds	r3, #24
 800d164:	213f      	movs	r1, #63	; 0x3f
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd fc71 	bl	800aa4e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16e:	331a      	adds	r3, #26
 800d170:	21ff      	movs	r1, #255	; 0xff
 800d172:	4618      	mov	r0, r3
 800d174:	f7fd fc6b 	bl	800aa4e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17a:	331c      	adds	r3, #28
 800d17c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fd fc80 	bl	800aa84 <st_dword>
		if (fmt == FS_FAT32) {
 800d184:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d131      	bne.n	800d1f0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d192:	f7fd f92d 	bl	800a3f0 <get_fattime>
 800d196:	4603      	mov	r3, r0
 800d198:	4619      	mov	r1, r3
 800d19a:	4620      	mov	r0, r4
 800d19c:	f7fd fc72 	bl	800aa84 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a2:	3324      	adds	r3, #36	; 0x24
 800d1a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fd fc6c 	bl	800aa84 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ae:	332c      	adds	r3, #44	; 0x2c
 800d1b0:	2102      	movs	r1, #2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fd fc66 	bl	800aa84 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	3330      	adds	r3, #48	; 0x30
 800d1bc:	2101      	movs	r1, #1
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd fc45 	bl	800aa4e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	3332      	adds	r3, #50	; 0x32
 800d1c8:	2106      	movs	r1, #6
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fd fc3f 	bl	800aa4e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	3340      	adds	r3, #64	; 0x40
 800d1d4:	2280      	movs	r2, #128	; 0x80
 800d1d6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	3342      	adds	r3, #66	; 0x42
 800d1dc:	2229      	movs	r2, #41	; 0x29
 800d1de:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	3347      	adds	r3, #71	; 0x47
 800d1e4:	2213      	movs	r2, #19
 800d1e6:	4970      	ldr	r1, [pc, #448]	; (800d3a8 <f_mkfs+0x6ec>)
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fd fc77 	bl	800aadc <mem_cpy>
 800d1ee:	e020      	b.n	800d232 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d1f6:	f7fd f8fb 	bl	800a3f0 <get_fattime>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4620      	mov	r0, r4
 800d200:	f7fd fc40 	bl	800aa84 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	3316      	adds	r3, #22
 800d208:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d20a:	b292      	uxth	r2, r2
 800d20c:	4611      	mov	r1, r2
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fd fc1d 	bl	800aa4e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d216:	3324      	adds	r3, #36	; 0x24
 800d218:	2280      	movs	r2, #128	; 0x80
 800d21a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	3326      	adds	r3, #38	; 0x26
 800d220:	2229      	movs	r2, #41	; 0x29
 800d222:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	332b      	adds	r3, #43	; 0x2b
 800d228:	2213      	movs	r2, #19
 800d22a:	4960      	ldr	r1, [pc, #384]	; (800d3ac <f_mkfs+0x6f0>)
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fd fc55 	bl	800aadc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d238:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fd fc06 	bl	800aa4e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d242:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d246:	2301      	movs	r3, #1
 800d248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d24c:	f7fd fb86 	bl	800a95c <disk_write>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <f_mkfs+0x59e>
 800d256:	2301      	movs	r3, #1
 800d258:	e156      	b.n	800d508 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d25a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d140      	bne.n	800d2e4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	1d9a      	adds	r2, r3, #6
 800d266:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d26a:	2301      	movs	r3, #1
 800d26c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d26e:	f7fd fb75 	bl	800a95c <disk_write>
			mem_set(buf, 0, ss);
 800d272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d274:	461a      	mov	r2, r3
 800d276:	2100      	movs	r1, #0
 800d278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d27a:	f7fd fc50 	bl	800ab1e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d27e:	494c      	ldr	r1, [pc, #304]	; (800d3b0 <f_mkfs+0x6f4>)
 800d280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d282:	f7fd fbff 	bl	800aa84 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d28c:	4949      	ldr	r1, [pc, #292]	; (800d3b4 <f_mkfs+0x6f8>)
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fd fbf8 	bl	800aa84 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d296:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	3b01      	subs	r3, #1
 800d29e:	4619      	mov	r1, r3
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	f7fd fbef 	bl	800aa84 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d2ac:	2102      	movs	r1, #2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fd fbe8 	bl	800aa84 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fd fbc5 	bl	800aa4e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	1dda      	adds	r2, r3, #7
 800d2c8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2d0:	f7fd fb44 	bl	800a95c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d2dc:	2301      	movs	r3, #1
 800d2de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2e0:	f7fd fb3c 	bl	800a95c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d2e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ea:	f7fd fc18 	bl	800ab1e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2f0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2f6:	e04b      	b.n	800d390 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800d2f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d113      	bne.n	800d328 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d300:	f06f 0107 	mvn.w	r1, #7
 800d304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d306:	f7fd fbbd 	bl	800aa84 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	3304      	adds	r3, #4
 800d30e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d312:	4618      	mov	r0, r3
 800d314:	f7fd fbb6 	bl	800aa84 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	3308      	adds	r3, #8
 800d31c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d320:	4618      	mov	r0, r3
 800d322:	f7fd fbaf 	bl	800aa84 <st_dword>
 800d326:	e00b      	b.n	800d340 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d101      	bne.n	800d334 <f_mkfs+0x678>
 800d330:	4b21      	ldr	r3, [pc, #132]	; (800d3b8 <f_mkfs+0x6fc>)
 800d332:	e001      	b.n	800d338 <f_mkfs+0x67c>
 800d334:	f06f 0307 	mvn.w	r3, #7
 800d338:	4619      	mov	r1, r3
 800d33a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d33c:	f7fd fba2 	bl	800aa84 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d342:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	4293      	cmp	r3, r2
 800d34a:	bf28      	it	cs
 800d34c:	4613      	movcs	r3, r2
 800d34e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d350:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d356:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d35a:	f7fd faff 	bl	800a95c <disk_write>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <f_mkfs+0x6ac>
 800d364:	2301      	movs	r3, #1
 800d366:	e0cf      	b.n	800d508 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800d368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d36a:	461a      	mov	r2, r3
 800d36c:	2100      	movs	r1, #0
 800d36e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d370:	f7fd fbd5 	bl	800ab1e <mem_set>
				sect += n; nsect -= n;
 800d374:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d378:	4413      	add	r3, r2
 800d37a:	667b      	str	r3, [r7, #100]	; 0x64
 800d37c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d37e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1dc      	bne.n	800d344 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d38c:	3301      	adds	r3, #1
 800d38e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d394:	429a      	cmp	r2, r3
 800d396:	d3af      	bcc.n	800d2f8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d398:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	d10d      	bne.n	800d3bc <f_mkfs+0x700>
 800d3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3a2:	e00c      	b.n	800d3be <f_mkfs+0x702>
 800d3a4:	08015f2c 	.word	0x08015f2c
 800d3a8:	08015f38 	.word	0x08015f38
 800d3ac:	08015f4c 	.word	0x08015f4c
 800d3b0:	41615252 	.word	0x41615252
 800d3b4:	61417272 	.word	0x61417272
 800d3b8:	00fffff8 	.word	0x00fffff8
 800d3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3be:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d3c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	bf28      	it	cs
 800d3c8:	4613      	movcs	r3, r2
 800d3ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d3cc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d3d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3d6:	f7fd fac1 	bl	800a95c <disk_write>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <f_mkfs+0x728>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e091      	b.n	800d508 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800d3e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3e8:	4413      	add	r3, r2
 800d3ea:	667b      	str	r3, [r7, #100]	; 0x64
 800d3ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d3f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1e2      	bne.n	800d3c0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d3fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d103      	bne.n	800d40a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800d402:	230c      	movs	r3, #12
 800d404:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d408:	e010      	b.n	800d42c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d410:	d303      	bcc.n	800d41a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d412:	2306      	movs	r3, #6
 800d414:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d418:	e008      	b.n	800d42c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d41a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d101      	bne.n	800d426 <f_mkfs+0x76a>
 800d422:	2304      	movs	r3, #4
 800d424:	e000      	b.n	800d428 <f_mkfs+0x76c>
 800d426:	2301      	movs	r3, #1
 800d428:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d42c:	7afb      	ldrb	r3, [r7, #11]
 800d42e:	f003 0308 	and.w	r3, r3, #8
 800d432:	2b00      	cmp	r3, #0
 800d434:	d15b      	bne.n	800d4ee <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800d436:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d438:	461a      	mov	r2, r3
 800d43a:	2100      	movs	r1, #0
 800d43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d43e:	f7fd fb6e 	bl	800ab1e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d448:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fd fafe 	bl	800aa4e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d458:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	2200      	movs	r2, #0
 800d45e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	3301      	adds	r3, #1
 800d464:	2201      	movs	r2, #1
 800d466:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	3302      	adds	r3, #2
 800d46c:	2201      	movs	r2, #1
 800d46e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	3303      	adds	r3, #3
 800d474:	2200      	movs	r2, #0
 800d476:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	3304      	adds	r3, #4
 800d47c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d480:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	441a      	add	r2, r3
 800d488:	4b21      	ldr	r3, [pc, #132]	; (800d510 <f_mkfs+0x854>)
 800d48a:	fba3 1302 	umull	r1, r3, r3, r2
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	0852      	lsrs	r2, r2, #1
 800d492:	4413      	add	r3, r2
 800d494:	0b5b      	lsrs	r3, r3, #13
 800d496:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	3305      	adds	r3, #5
 800d49c:	22fe      	movs	r2, #254	; 0xfe
 800d49e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d4a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4a2:	089b      	lsrs	r3, r3, #2
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	3306      	adds	r3, #6
 800d4aa:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d4ae:	b2d2      	uxtb	r2, r2
 800d4b0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	3307      	adds	r3, #7
 800d4b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4b8:	b2d2      	uxtb	r2, r2
 800d4ba:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	3308      	adds	r3, #8
 800d4c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fd fade 	bl	800aa84 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	330c      	adds	r3, #12
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fd fad7 	bl	800aa84 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d4d6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d4da:	2301      	movs	r3, #1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4e0:	f7fd fa3c 	bl	800a95c <disk_write>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <f_mkfs+0x832>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e00c      	b.n	800d508 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d4ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fd fa50 	bl	800a99c <disk_ioctl>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <f_mkfs+0x84a>
 800d502:	2301      	movs	r3, #1
 800d504:	e000      	b.n	800d508 <f_mkfs+0x84c>

	return FR_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3774      	adds	r7, #116	; 0x74
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd90      	pop	{r4, r7, pc}
 800d510:	0515565b 	.word	0x0515565b

0800d514 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d514:	b480      	push	{r7}
 800d516:	b087      	sub	sp, #28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	4613      	mov	r3, r2
 800d520:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d522:	2301      	movs	r3, #1
 800d524:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d52a:	4b1f      	ldr	r3, [pc, #124]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d52c:	7a5b      	ldrb	r3, [r3, #9]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	d131      	bne.n	800d598 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d534:	4b1c      	ldr	r3, [pc, #112]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d536:	7a5b      	ldrb	r3, [r3, #9]
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	461a      	mov	r2, r3
 800d53c:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d53e:	2100      	movs	r1, #0
 800d540:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d542:	4b19      	ldr	r3, [pc, #100]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d544:	7a5b      	ldrb	r3, [r3, #9]
 800d546:	b2db      	uxtb	r3, r3
 800d548:	4a17      	ldr	r2, [pc, #92]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d554:	7a5b      	ldrb	r3, [r3, #9]
 800d556:	b2db      	uxtb	r3, r3
 800d558:	461a      	mov	r2, r3
 800d55a:	4b13      	ldr	r3, [pc, #76]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d55c:	4413      	add	r3, r2
 800d55e:	79fa      	ldrb	r2, [r7, #7]
 800d560:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d562:	4b11      	ldr	r3, [pc, #68]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d564:	7a5b      	ldrb	r3, [r3, #9]
 800d566:	b2db      	uxtb	r3, r3
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	b2d1      	uxtb	r1, r2
 800d56c:	4a0e      	ldr	r2, [pc, #56]	; (800d5a8 <FATFS_LinkDriverEx+0x94>)
 800d56e:	7251      	strb	r1, [r2, #9]
 800d570:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d572:	7dbb      	ldrb	r3, [r7, #22]
 800d574:	3330      	adds	r3, #48	; 0x30
 800d576:	b2da      	uxtb	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	3301      	adds	r3, #1
 800d580:	223a      	movs	r2, #58	; 0x3a
 800d582:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	3302      	adds	r3, #2
 800d588:	222f      	movs	r2, #47	; 0x2f
 800d58a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	3303      	adds	r3, #3
 800d590:	2200      	movs	r2, #0
 800d592:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d598:	7dfb      	ldrb	r3, [r7, #23]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	371c      	adds	r7, #28
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20000d20 	.word	0x20000d20

0800d5ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ffaa 	bl	800d514 <FATFS_LinkDriverEx>
 800d5c0:	4603      	mov	r3, r0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	6039      	str	r1, [r7, #0]
 800d5d4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	f000 fa14 	bl	800da04 <osMutexNew>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	bf14      	ite	ne
 800d5ea:	2301      	movne	r3, #1
 800d5ec:	2300      	moveq	r3, #0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	60fb      	str	r3, [r7, #12]

    return ret;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fb0b 	bl	800dc20 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800d60a:	2301      	movs	r3, #1
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d620:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fa73 	bl	800db10 <osMutexAcquire>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d630:	2301      	movs	r3, #1
 800d632:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d634:	68fb      	ldr	r3, [r7, #12]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b082      	sub	sp, #8
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 faad 	bl	800dba6 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800d64c:	bf00      	nop
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <__NVIC_SetPriority>:
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	6039      	str	r1, [r7, #0]
 800d65e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d664:	2b00      	cmp	r3, #0
 800d666:	db0a      	blt.n	800d67e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	490c      	ldr	r1, [pc, #48]	; (800d6a0 <__NVIC_SetPriority+0x4c>)
 800d66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d672:	0112      	lsls	r2, r2, #4
 800d674:	b2d2      	uxtb	r2, r2
 800d676:	440b      	add	r3, r1
 800d678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d67c:	e00a      	b.n	800d694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	b2da      	uxtb	r2, r3
 800d682:	4908      	ldr	r1, [pc, #32]	; (800d6a4 <__NVIC_SetPriority+0x50>)
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	f003 030f 	and.w	r3, r3, #15
 800d68a:	3b04      	subs	r3, #4
 800d68c:	0112      	lsls	r2, r2, #4
 800d68e:	b2d2      	uxtb	r2, r2
 800d690:	440b      	add	r3, r1
 800d692:	761a      	strb	r2, [r3, #24]
}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	e000e100 	.word	0xe000e100
 800d6a4:	e000ed00 	.word	0xe000ed00

0800d6a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <SysTick_Handler+0x1c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d6b0:	f002 fd44 	bl	801013c <xTaskGetSchedulerState>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d001      	beq.n	800d6be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d6ba:	f003 fc2d 	bl	8010f18 <xPortSysTickHandler>
  }
}
 800d6be:	bf00      	nop
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	e000e010 	.word	0xe000e010

0800d6c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f06f 0004 	mvn.w	r0, #4
 800d6d2:	f7ff ffbf 	bl	800d654 <__NVIC_SetPriority>
#endif
}
 800d6d6:	bf00      	nop
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6e2:	f3ef 8305 	mrs	r3, IPSR
 800d6e6:	603b      	str	r3, [r7, #0]
  return(result);
 800d6e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d6ee:	f06f 0305 	mvn.w	r3, #5
 800d6f2:	607b      	str	r3, [r7, #4]
 800d6f4:	e00c      	b.n	800d710 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d6f6:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <osKernelInitialize+0x44>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d105      	bne.n	800d70a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d6fe:	4b08      	ldr	r3, [pc, #32]	; (800d720 <osKernelInitialize+0x44>)
 800d700:	2201      	movs	r2, #1
 800d702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d704:	2300      	movs	r3, #0
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	e002      	b.n	800d710 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d70a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d70e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d710:	687b      	ldr	r3, [r7, #4]
}
 800d712:	4618      	mov	r0, r3
 800d714:	370c      	adds	r7, #12
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	20000d2c 	.word	0x20000d2c

0800d724 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800d72a:	f002 fd07 	bl	801013c <xTaskGetSchedulerState>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d004      	beq.n	800d73e <osKernelGetState+0x1a>
 800d734:	2b02      	cmp	r3, #2
 800d736:	d105      	bne.n	800d744 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800d738:	2302      	movs	r3, #2
 800d73a:	607b      	str	r3, [r7, #4]
      break;
 800d73c:	e00c      	b.n	800d758 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800d73e:	2303      	movs	r3, #3
 800d740:	607b      	str	r3, [r7, #4]
      break;
 800d742:	e009      	b.n	800d758 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800d744:	4b07      	ldr	r3, [pc, #28]	; (800d764 <osKernelGetState+0x40>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d102      	bne.n	800d752 <osKernelGetState+0x2e>
        state = osKernelReady;
 800d74c:	2301      	movs	r3, #1
 800d74e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800d750:	e001      	b.n	800d756 <osKernelGetState+0x32>
        state = osKernelInactive;
 800d752:	2300      	movs	r3, #0
 800d754:	607b      	str	r3, [r7, #4]
      break;
 800d756:	bf00      	nop
  }

  return (state);
 800d758:	687b      	ldr	r3, [r7, #4]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	20000d2c 	.word	0x20000d2c

0800d768 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d76e:	f3ef 8305 	mrs	r3, IPSR
 800d772:	603b      	str	r3, [r7, #0]
  return(result);
 800d774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d77a:	f06f 0305 	mvn.w	r3, #5
 800d77e:	607b      	str	r3, [r7, #4]
 800d780:	e010      	b.n	800d7a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d782:	4b0b      	ldr	r3, [pc, #44]	; (800d7b0 <osKernelStart+0x48>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d109      	bne.n	800d79e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d78a:	f7ff ff9d 	bl	800d6c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d78e:	4b08      	ldr	r3, [pc, #32]	; (800d7b0 <osKernelStart+0x48>)
 800d790:	2202      	movs	r2, #2
 800d792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d794:	f002 f854 	bl	800f840 <vTaskStartScheduler>
      stat = osOK;
 800d798:	2300      	movs	r3, #0
 800d79a:	607b      	str	r3, [r7, #4]
 800d79c:	e002      	b.n	800d7a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7a4:	687b      	ldr	r3, [r7, #4]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	20000d2c 	.word	0x20000d2c

0800d7b4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7ba:	f3ef 8305 	mrs	r3, IPSR
 800d7be:	603b      	str	r3, [r7, #0]
  return(result);
 800d7c0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d7c6:	f002 f967 	bl	800fa98 <xTaskGetTickCountFromISR>
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	e002      	b.n	800d7d4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d7ce:	f002 f953 	bl	800fa78 <xTaskGetTickCount>
 800d7d2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d7d4:	687b      	ldr	r3, [r7, #4]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 800d7e6:	4b06      	ldr	r3, [pc, #24]	; (800d800 <OS_Tick_GetCount+0x20>)
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 800d7ec:	4b04      	ldr	r3, [pc, #16]	; (800d800 <OS_Tick_GetCount+0x20>)
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	1ad3      	subs	r3, r2, r3
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	e000e010 	.word	0xe000e010

0800d804 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 800d804:	b480      	push	{r7}
 800d806:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <OS_Tick_GetOverflow+0x18>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	0c1b      	lsrs	r3, r3, #16
 800d80e:	f003 0301 	and.w	r3, r3, #1
}
 800d812:	4618      	mov	r0, r3
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	e000e010 	.word	0xe000e010

0800d820 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 800d824:	4b03      	ldr	r3, [pc, #12]	; (800d834 <OS_Tick_GetInterval+0x14>)
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	3301      	adds	r3, #1
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	e000e010 	.word	0xe000e010

0800d838 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d83e:	f3ef 8310 	mrs	r3, PRIMASK
 800d842:	60bb      	str	r3, [r7, #8]
  return(result);
 800d844:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 800d846:	2b00      	cmp	r3, #0
 800d848:	d105      	bne.n	800d856 <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d84a:	f3ef 8311 	mrs	r3, BASEPRI
 800d84e:	607b      	str	r3, [r7, #4]
  return(result);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <osKernelGetSysTimerCount+0x22>
 800d856:	2301      	movs	r3, #1
 800d858:	e000      	b.n	800d85c <osKernelGetSysTimerCount+0x24>
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d85e:	b672      	cpsid	i
}
 800d860:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 800d862:	f002 f909 	bl	800fa78 <xTaskGetTickCount>
 800d866:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 800d868:	f7ff ffba 	bl	800d7e0 <OS_Tick_GetCount>
 800d86c:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 800d86e:	f7ff ffc9 	bl	800d804 <OS_Tick_GetOverflow>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d005      	beq.n	800d884 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 800d878:	f7ff ffb2 	bl	800d7e0 <OS_Tick_GetCount>
 800d87c:	6138      	str	r0, [r7, #16]
    ticks++;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	3301      	adds	r3, #1
 800d882:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 800d884:	f7ff ffcc 	bl	800d820 <OS_Tick_GetInterval>
 800d888:	4602      	mov	r2, r0
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	fb02 f303 	mul.w	r3, r2, r3
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4413      	add	r3, r2
 800d894:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 800d89c:	b662      	cpsie	i
}
 800d89e:	bf00      	nop
    __enable_irq();
  }

  return (val);
 800d8a0:	693b      	ldr	r3, [r7, #16]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b08e      	sub	sp, #56	; 0x38
 800d8ae:	af04      	add	r7, sp, #16
 800d8b0:	60f8      	str	r0, [r7, #12]
 800d8b2:	60b9      	str	r1, [r7, #8]
 800d8b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8ba:	f3ef 8305 	mrs	r3, IPSR
 800d8be:	617b      	str	r3, [r7, #20]
  return(result);
 800d8c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d17e      	bne.n	800d9c4 <osThreadNew+0x11a>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d07b      	beq.n	800d9c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8cc:	2380      	movs	r3, #128	; 0x80
 800d8ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8d0:	2318      	movs	r3, #24
 800d8d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d045      	beq.n	800d970 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <osThreadNew+0x48>
        name = attr->name;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d008      	beq.n	800d918 <osThreadNew+0x6e>
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	2b38      	cmp	r3, #56	; 0x38
 800d90a:	d805      	bhi.n	800d918 <osThreadNew+0x6e>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <osThreadNew+0x72>
        return (NULL);
 800d918:	2300      	movs	r3, #0
 800d91a:	e054      	b.n	800d9c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d003      	beq.n	800d92c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	695b      	ldr	r3, [r3, #20]
 800d928:	089b      	lsrs	r3, r3, #2
 800d92a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00e      	beq.n	800d952 <osThreadNew+0xa8>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	2bbb      	cmp	r3, #187	; 0xbb
 800d93a:	d90a      	bls.n	800d952 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d940:	2b00      	cmp	r3, #0
 800d942:	d006      	beq.n	800d952 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	695b      	ldr	r3, [r3, #20]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <osThreadNew+0xa8>
        mem = 1;
 800d94c:	2301      	movs	r3, #1
 800d94e:	61bb      	str	r3, [r7, #24]
 800d950:	e010      	b.n	800d974 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10c      	bne.n	800d974 <osThreadNew+0xca>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d108      	bne.n	800d974 <osThreadNew+0xca>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d104      	bne.n	800d974 <osThreadNew+0xca>
          mem = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	61bb      	str	r3, [r7, #24]
 800d96e:	e001      	b.n	800d974 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d110      	bne.n	800d99c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d982:	9202      	str	r2, [sp, #8]
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	6a3a      	ldr	r2, [r7, #32]
 800d98e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f001 fd69 	bl	800f468 <xTaskCreateStatic>
 800d996:	4603      	mov	r3, r0
 800d998:	613b      	str	r3, [r7, #16]
 800d99a:	e013      	b.n	800d9c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d110      	bne.n	800d9c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	f107 0310 	add.w	r3, r7, #16
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f001 fdb4 	bl	800f522 <xTaskCreate>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d001      	beq.n	800d9c4 <osThreadNew+0x11a>
            hTask = NULL;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d9c4:	693b      	ldr	r3, [r7, #16]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3728      	adds	r7, #40	; 0x28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9d6:	f3ef 8305 	mrs	r3, IPSR
 800d9da:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <osDelay+0x1c>
    stat = osErrorISR;
 800d9e2:	f06f 0305 	mvn.w	r3, #5
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	e007      	b.n	800d9fa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <osDelay+0x2c>
      vTaskDelay(ticks);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f001 feef 	bl	800f7d8 <vTaskDelay>
    }
  }

  return (stat);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800da0c:	2300      	movs	r3, #0
 800da0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da10:	f3ef 8305 	mrs	r3, IPSR
 800da14:	60bb      	str	r3, [r7, #8]
  return(result);
 800da16:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d174      	bne.n	800db06 <osMutexNew+0x102>
    if (attr != NULL) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d003      	beq.n	800da2a <osMutexNew+0x26>
      type = attr->attr_bits;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	61bb      	str	r3, [r7, #24]
 800da28:	e001      	b.n	800da2e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800da2a:	2300      	movs	r3, #0
 800da2c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <osMutexNew+0x3a>
      rmtx = 1U;
 800da38:	2301      	movs	r3, #1
 800da3a:	617b      	str	r3, [r7, #20]
 800da3c:	e001      	b.n	800da42 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	f003 0308 	and.w	r3, r3, #8
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d15c      	bne.n	800db06 <osMutexNew+0x102>
      mem = -1;
 800da4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da50:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d015      	beq.n	800da84 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <osMutexNew+0x6a>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	2b4f      	cmp	r3, #79	; 0x4f
 800da66:	d902      	bls.n	800da6e <osMutexNew+0x6a>
          mem = 1;
 800da68:	2301      	movs	r3, #1
 800da6a:	613b      	str	r3, [r7, #16]
 800da6c:	e00c      	b.n	800da88 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d108      	bne.n	800da88 <osMutexNew+0x84>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d104      	bne.n	800da88 <osMutexNew+0x84>
            mem = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	613b      	str	r3, [r7, #16]
 800da82:	e001      	b.n	800da88 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d112      	bne.n	800dab4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d007      	beq.n	800daa4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	4619      	mov	r1, r3
 800da9a:	2004      	movs	r0, #4
 800da9c:	f000 fd8f 	bl	800e5be <xQueueCreateMutexStatic>
 800daa0:	61f8      	str	r0, [r7, #28]
 800daa2:	e016      	b.n	800dad2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	4619      	mov	r1, r3
 800daaa:	2001      	movs	r0, #1
 800daac:	f000 fd87 	bl	800e5be <xQueueCreateMutexStatic>
 800dab0:	61f8      	str	r0, [r7, #28]
 800dab2:	e00e      	b.n	800dad2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10b      	bne.n	800dad2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d004      	beq.n	800daca <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dac0:	2004      	movs	r0, #4
 800dac2:	f000 fd64 	bl	800e58e <xQueueCreateMutex>
 800dac6:	61f8      	str	r0, [r7, #28]
 800dac8:	e003      	b.n	800dad2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800daca:	2001      	movs	r0, #1
 800dacc:	f000 fd5f 	bl	800e58e <xQueueCreateMutex>
 800dad0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00c      	beq.n	800daf2 <osMutexNew+0xee>
        if (attr != NULL) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <osMutexNew+0xe2>
          name = attr->name;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	e001      	b.n	800daea <osMutexNew+0xe6>
        } else {
          name = NULL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800daea:	68f9      	ldr	r1, [r7, #12]
 800daec:	69f8      	ldr	r0, [r7, #28]
 800daee:	f001 fc33 	bl	800f358 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d006      	beq.n	800db06 <osMutexNew+0x102>
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	f043 0301 	orr.w	r3, r3, #1
 800db04:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800db06:	69fb      	ldr	r3, [r7, #28]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3720      	adds	r7, #32
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f023 0301 	bic.w	r3, r3, #1
 800db20:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f003 0301 	and.w	r3, r3, #1
 800db28:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db2e:	f3ef 8305 	mrs	r3, IPSR
 800db32:	60bb      	str	r3, [r7, #8]
  return(result);
 800db34:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800db3a:	f06f 0305 	mvn.w	r3, #5
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	e02c      	b.n	800db9c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d103      	bne.n	800db50 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800db48:	f06f 0303 	mvn.w	r3, #3
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	e025      	b.n	800db9c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d011      	beq.n	800db7a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	6938      	ldr	r0, [r7, #16]
 800db5a:	f000 fd7f 	bl	800e65c <xQueueTakeMutexRecursive>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b01      	cmp	r3, #1
 800db62:	d01b      	beq.n	800db9c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800db6a:	f06f 0301 	mvn.w	r3, #1
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	e014      	b.n	800db9c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800db72:	f06f 0302 	mvn.w	r3, #2
 800db76:	617b      	str	r3, [r7, #20]
 800db78:	e010      	b.n	800db9c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6938      	ldr	r0, [r7, #16]
 800db7e:	f001 f913 	bl	800eda8 <xQueueSemaphoreTake>
 800db82:	4603      	mov	r3, r0
 800db84:	2b01      	cmp	r3, #1
 800db86:	d009      	beq.n	800db9c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d003      	beq.n	800db96 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800db8e:	f06f 0301 	mvn.w	r3, #1
 800db92:	617b      	str	r3, [r7, #20]
 800db94:	e002      	b.n	800db9c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800db96:	f06f 0302 	mvn.w	r3, #2
 800db9a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800db9c:	697b      	ldr	r3, [r7, #20]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b086      	sub	sp, #24
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f023 0301 	bic.w	r3, r3, #1
 800dbb4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbc2:	f3ef 8305 	mrs	r3, IPSR
 800dbc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbc8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d003      	beq.n	800dbd6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800dbce:	f06f 0305 	mvn.w	r3, #5
 800dbd2:	617b      	str	r3, [r7, #20]
 800dbd4:	e01f      	b.n	800dc16 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d103      	bne.n	800dbe4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800dbdc:	f06f 0303 	mvn.w	r3, #3
 800dbe0:	617b      	str	r3, [r7, #20]
 800dbe2:	e018      	b.n	800dc16 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d009      	beq.n	800dbfe <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800dbea:	6938      	ldr	r0, [r7, #16]
 800dbec:	f000 fd02 	bl	800e5f4 <xQueueGiveMutexRecursive>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d00f      	beq.n	800dc16 <osMutexRelease+0x70>
        stat = osErrorResource;
 800dbf6:	f06f 0302 	mvn.w	r3, #2
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e00b      	b.n	800dc16 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800dbfe:	2300      	movs	r3, #0
 800dc00:	2200      	movs	r2, #0
 800dc02:	2100      	movs	r1, #0
 800dc04:	6938      	ldr	r0, [r7, #16]
 800dc06:	f000 fdc9 	bl	800e79c <xQueueGenericSend>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d002      	beq.n	800dc16 <osMutexRelease+0x70>
        stat = osErrorResource;
 800dc10:	f06f 0302 	mvn.w	r3, #2
 800dc14:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dc16:	697b      	ldr	r3, [r7, #20]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3718      	adds	r7, #24
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f023 0301 	bic.w	r3, r3, #1
 800dc2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc30:	f3ef 8305 	mrs	r3, IPSR
 800dc34:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc36:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <osMutexDelete+0x24>
    stat = osErrorISR;
 800dc3c:	f06f 0305 	mvn.w	r3, #5
 800dc40:	617b      	str	r3, [r7, #20]
 800dc42:	e00e      	b.n	800dc62 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d103      	bne.n	800dc52 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800dc4a:	f06f 0303 	mvn.w	r3, #3
 800dc4e:	617b      	str	r3, [r7, #20]
 800dc50:	e007      	b.n	800dc62 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800dc52:	6938      	ldr	r0, [r7, #16]
 800dc54:	f001 fbaa 	bl	800f3ac <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800dc5c:	6938      	ldr	r0, [r7, #16]
 800dc5e:	f001 fa2f 	bl	800f0c0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800dc62:	697b      	ldr	r3, [r7, #20]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3718      	adds	r7, #24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b08a      	sub	sp, #40	; 0x28
 800dc70:	af02      	add	r7, sp, #8
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc7c:	f3ef 8305 	mrs	r3, IPSR
 800dc80:	613b      	str	r3, [r7, #16]
  return(result);
 800dc82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d175      	bne.n	800dd74 <osSemaphoreNew+0x108>
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d072      	beq.n	800dd74 <osSemaphoreNew+0x108>
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d86e      	bhi.n	800dd74 <osSemaphoreNew+0x108>
    mem = -1;
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d015      	beq.n	800dcce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d006      	beq.n	800dcb8 <osSemaphoreNew+0x4c>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	2b4f      	cmp	r3, #79	; 0x4f
 800dcb0:	d902      	bls.n	800dcb8 <osSemaphoreNew+0x4c>
        mem = 1;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	61bb      	str	r3, [r7, #24]
 800dcb6:	e00c      	b.n	800dcd2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d108      	bne.n	800dcd2 <osSemaphoreNew+0x66>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d104      	bne.n	800dcd2 <osSemaphoreNew+0x66>
          mem = 0;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	61bb      	str	r3, [r7, #24]
 800dccc:	e001      	b.n	800dcd2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcd8:	d04c      	beq.n	800dd74 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d128      	bne.n	800dd32 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d10a      	bne.n	800dcfc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	2203      	movs	r2, #3
 800dcec:	9200      	str	r2, [sp, #0]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	f000 fb5c 	bl	800e3b0 <xQueueGenericCreateStatic>
 800dcf8:	61f8      	str	r0, [r7, #28]
 800dcfa:	e005      	b.n	800dd08 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dcfc:	2203      	movs	r2, #3
 800dcfe:	2100      	movs	r1, #0
 800dd00:	2001      	movs	r0, #1
 800dd02:	f000 fbcd 	bl	800e4a0 <xQueueGenericCreate>
 800dd06:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d022      	beq.n	800dd54 <osSemaphoreNew+0xe8>
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d01f      	beq.n	800dd54 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dd14:	2300      	movs	r3, #0
 800dd16:	2200      	movs	r2, #0
 800dd18:	2100      	movs	r1, #0
 800dd1a:	69f8      	ldr	r0, [r7, #28]
 800dd1c:	f000 fd3e 	bl	800e79c <xQueueGenericSend>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d016      	beq.n	800dd54 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dd26:	69f8      	ldr	r0, [r7, #28]
 800dd28:	f001 f9ca 	bl	800f0c0 <vQueueDelete>
            hSemaphore = NULL;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	61fb      	str	r3, [r7, #28]
 800dd30:	e010      	b.n	800dd54 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d108      	bne.n	800dd4a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	68b9      	ldr	r1, [r7, #8]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 fcc1 	bl	800e6c8 <xQueueCreateCountingSemaphoreStatic>
 800dd46:	61f8      	str	r0, [r7, #28]
 800dd48:	e004      	b.n	800dd54 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dd4a:	68b9      	ldr	r1, [r7, #8]
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f000 fcf2 	bl	800e736 <xQueueCreateCountingSemaphore>
 800dd52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00c      	beq.n	800dd74 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d003      	beq.n	800dd68 <osSemaphoreNew+0xfc>
          name = attr->name;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	617b      	str	r3, [r7, #20]
 800dd66:	e001      	b.n	800dd6c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dd6c:	6979      	ldr	r1, [r7, #20]
 800dd6e:	69f8      	ldr	r0, [r7, #28]
 800dd70:	f001 faf2 	bl	800f358 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dd74:	69fb      	ldr	r3, [r7, #28]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3720      	adds	r7, #32
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d103      	bne.n	800dda0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dd98:	f06f 0303 	mvn.w	r3, #3
 800dd9c:	617b      	str	r3, [r7, #20]
 800dd9e:	e039      	b.n	800de14 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dda0:	f3ef 8305 	mrs	r3, IPSR
 800dda4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dda6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d022      	beq.n	800ddf2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d003      	beq.n	800ddba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ddb2:	f06f 0303 	mvn.w	r3, #3
 800ddb6:	617b      	str	r3, [r7, #20]
 800ddb8:	e02c      	b.n	800de14 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ddbe:	f107 0308 	add.w	r3, r7, #8
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	6938      	ldr	r0, [r7, #16]
 800ddc8:	f001 f8fa 	bl	800efc0 <xQueueReceiveFromISR>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d003      	beq.n	800ddda <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ddd2:	f06f 0302 	mvn.w	r3, #2
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	e01c      	b.n	800de14 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d019      	beq.n	800de14 <osSemaphoreAcquire+0x94>
 800dde0:	4b0f      	ldr	r3, [pc, #60]	; (800de20 <osSemaphoreAcquire+0xa0>)
 800dde2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dde6:	601a      	str	r2, [r3, #0]
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	e010      	b.n	800de14 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6938      	ldr	r0, [r7, #16]
 800ddf6:	f000 ffd7 	bl	800eda8 <xQueueSemaphoreTake>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d009      	beq.n	800de14 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800de06:	f06f 0301 	mvn.w	r3, #1
 800de0a:	617b      	str	r3, [r7, #20]
 800de0c:	e002      	b.n	800de14 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800de0e:	f06f 0302 	mvn.w	r3, #2
 800de12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800de14:	697b      	ldr	r3, [r7, #20]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	e000ed04 	.word	0xe000ed04

0800de24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d103      	bne.n	800de42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800de3a:	f06f 0303 	mvn.w	r3, #3
 800de3e:	617b      	str	r3, [r7, #20]
 800de40:	e02c      	b.n	800de9c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de42:	f3ef 8305 	mrs	r3, IPSR
 800de46:	60fb      	str	r3, [r7, #12]
  return(result);
 800de48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d01a      	beq.n	800de84 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800de4e:	2300      	movs	r3, #0
 800de50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800de52:	f107 0308 	add.w	r3, r7, #8
 800de56:	4619      	mov	r1, r3
 800de58:	6938      	ldr	r0, [r7, #16]
 800de5a:	f000 fe38 	bl	800eace <xQueueGiveFromISR>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b01      	cmp	r3, #1
 800de62:	d003      	beq.n	800de6c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800de64:	f06f 0302 	mvn.w	r3, #2
 800de68:	617b      	str	r3, [r7, #20]
 800de6a:	e017      	b.n	800de9c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d014      	beq.n	800de9c <osSemaphoreRelease+0x78>
 800de72:	4b0d      	ldr	r3, [pc, #52]	; (800dea8 <osSemaphoreRelease+0x84>)
 800de74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	e00b      	b.n	800de9c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800de84:	2300      	movs	r3, #0
 800de86:	2200      	movs	r2, #0
 800de88:	2100      	movs	r1, #0
 800de8a:	6938      	ldr	r0, [r7, #16]
 800de8c:	f000 fc86 	bl	800e79c <xQueueGenericSend>
 800de90:	4603      	mov	r3, r0
 800de92:	2b01      	cmp	r3, #1
 800de94:	d002      	beq.n	800de9c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800de96:	f06f 0302 	mvn.w	r3, #2
 800de9a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800de9c:	697b      	ldr	r3, [r7, #20]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3718      	adds	r7, #24
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	e000ed04 	.word	0xe000ed04

0800deac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b08a      	sub	sp, #40	; 0x28
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800deb8:	2300      	movs	r3, #0
 800deba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800debc:	f3ef 8305 	mrs	r3, IPSR
 800dec0:	613b      	str	r3, [r7, #16]
  return(result);
 800dec2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d15f      	bne.n	800df88 <osMessageQueueNew+0xdc>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d05c      	beq.n	800df88 <osMessageQueueNew+0xdc>
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d059      	beq.n	800df88 <osMessageQueueNew+0xdc>
    mem = -1;
 800ded4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ded8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d029      	beq.n	800df34 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d012      	beq.n	800df0e <osMessageQueueNew+0x62>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	2b4f      	cmp	r3, #79	; 0x4f
 800deee:	d90e      	bls.n	800df0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00a      	beq.n	800df0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	695a      	ldr	r2, [r3, #20]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	68b9      	ldr	r1, [r7, #8]
 800df00:	fb01 f303 	mul.w	r3, r1, r3
 800df04:	429a      	cmp	r2, r3
 800df06:	d302      	bcc.n	800df0e <osMessageQueueNew+0x62>
        mem = 1;
 800df08:	2301      	movs	r3, #1
 800df0a:	61bb      	str	r3, [r7, #24]
 800df0c:	e014      	b.n	800df38 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d110      	bne.n	800df38 <osMessageQueueNew+0x8c>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10c      	bne.n	800df38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df22:	2b00      	cmp	r3, #0
 800df24:	d108      	bne.n	800df38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d104      	bne.n	800df38 <osMessageQueueNew+0x8c>
          mem = 0;
 800df2e:	2300      	movs	r3, #0
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	e001      	b.n	800df38 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d10b      	bne.n	800df56 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	691a      	ldr	r2, [r3, #16]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	2100      	movs	r1, #0
 800df48:	9100      	str	r1, [sp, #0]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f000 fa2f 	bl	800e3b0 <xQueueGenericCreateStatic>
 800df52:	61f8      	str	r0, [r7, #28]
 800df54:	e008      	b.n	800df68 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d105      	bne.n	800df68 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800df5c:	2200      	movs	r2, #0
 800df5e:	68b9      	ldr	r1, [r7, #8]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 fa9d 	bl	800e4a0 <xQueueGenericCreate>
 800df66:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00c      	beq.n	800df88 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d003      	beq.n	800df7c <osMessageQueueNew+0xd0>
        name = attr->name;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	e001      	b.n	800df80 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800df80:	6979      	ldr	r1, [r7, #20]
 800df82:	69f8      	ldr	r0, [r7, #28]
 800df84:	f001 f9e8 	bl	800f358 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800df88:	69fb      	ldr	r3, [r7, #28]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3720      	adds	r7, #32
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfac:	f3ef 8305 	mrs	r3, IPSR
 800dfb0:	617b      	str	r3, [r7, #20]
  return(result);
 800dfb2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d028      	beq.n	800e00a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d005      	beq.n	800dfca <osMessageQueuePut+0x36>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <osMessageQueuePut+0x36>
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dfca:	f06f 0303 	mvn.w	r3, #3
 800dfce:	61fb      	str	r3, [r7, #28]
 800dfd0:	e038      	b.n	800e044 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dfd6:	f107 0210 	add.w	r2, r7, #16
 800dfda:	2300      	movs	r3, #0
 800dfdc:	68b9      	ldr	r1, [r7, #8]
 800dfde:	69b8      	ldr	r0, [r7, #24]
 800dfe0:	f000 fcda 	bl	800e998 <xQueueGenericSendFromISR>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d003      	beq.n	800dff2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dfea:	f06f 0302 	mvn.w	r3, #2
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	e028      	b.n	800e044 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d025      	beq.n	800e044 <osMessageQueuePut+0xb0>
 800dff8:	4b15      	ldr	r3, [pc, #84]	; (800e050 <osMessageQueuePut+0xbc>)
 800dffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dffe:	601a      	str	r2, [r3, #0]
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	e01c      	b.n	800e044 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <osMessageQueuePut+0x82>
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d103      	bne.n	800e01e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e016:	f06f 0303 	mvn.w	r3, #3
 800e01a:	61fb      	str	r3, [r7, #28]
 800e01c:	e012      	b.n	800e044 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e01e:	2300      	movs	r3, #0
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	68b9      	ldr	r1, [r7, #8]
 800e024:	69b8      	ldr	r0, [r7, #24]
 800e026:	f000 fbb9 	bl	800e79c <xQueueGenericSend>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d009      	beq.n	800e044 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d003      	beq.n	800e03e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e036:	f06f 0301 	mvn.w	r3, #1
 800e03a:	61fb      	str	r3, [r7, #28]
 800e03c:	e002      	b.n	800e044 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e03e:	f06f 0302 	mvn.w	r3, #2
 800e042:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e044:	69fb      	ldr	r3, [r7, #28]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3720      	adds	r7, #32
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	e000ed04 	.word	0xe000ed04

0800e054 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
 800e060:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e066:	2300      	movs	r3, #0
 800e068:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e06a:	f3ef 8305 	mrs	r3, IPSR
 800e06e:	617b      	str	r3, [r7, #20]
  return(result);
 800e070:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e072:	2b00      	cmp	r3, #0
 800e074:	d028      	beq.n	800e0c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d005      	beq.n	800e088 <osMessageQueueGet+0x34>
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <osMessageQueueGet+0x34>
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e088:	f06f 0303 	mvn.w	r3, #3
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	e037      	b.n	800e100 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e090:	2300      	movs	r3, #0
 800e092:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e094:	f107 0310 	add.w	r3, r7, #16
 800e098:	461a      	mov	r2, r3
 800e09a:	68b9      	ldr	r1, [r7, #8]
 800e09c:	69b8      	ldr	r0, [r7, #24]
 800e09e:	f000 ff8f 	bl	800efc0 <xQueueReceiveFromISR>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d003      	beq.n	800e0b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e0a8:	f06f 0302 	mvn.w	r3, #2
 800e0ac:	61fb      	str	r3, [r7, #28]
 800e0ae:	e027      	b.n	800e100 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d024      	beq.n	800e100 <osMessageQueueGet+0xac>
 800e0b6:	4b15      	ldr	r3, [pc, #84]	; (800e10c <osMessageQueueGet+0xb8>)
 800e0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	e01b      	b.n	800e100 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <osMessageQueueGet+0x80>
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d103      	bne.n	800e0dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e0d4:	f06f 0303 	mvn.w	r3, #3
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	e011      	b.n	800e100 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	68b9      	ldr	r1, [r7, #8]
 800e0e0:	69b8      	ldr	r0, [r7, #24]
 800e0e2:	f000 fd81 	bl	800ebe8 <xQueueReceive>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d009      	beq.n	800e100 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d003      	beq.n	800e0fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e0f2:	f06f 0301 	mvn.w	r3, #1
 800e0f6:	61fb      	str	r3, [r7, #28]
 800e0f8:	e002      	b.n	800e100 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e0fa:	f06f 0302 	mvn.w	r3, #2
 800e0fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e100:	69fb      	ldr	r3, [r7, #28]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3720      	adds	r7, #32
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	e000ed04 	.word	0xe000ed04

0800e110 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4a07      	ldr	r2, [pc, #28]	; (800e13c <vApplicationGetIdleTaskMemory+0x2c>)
 800e120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	4a06      	ldr	r2, [pc, #24]	; (800e140 <vApplicationGetIdleTaskMemory+0x30>)
 800e126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2280      	movs	r2, #128	; 0x80
 800e12c:	601a      	str	r2, [r3, #0]
}
 800e12e:	bf00      	nop
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20000d30 	.word	0x20000d30
 800e140:	20000dec 	.word	0x20000dec

0800e144 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	4a07      	ldr	r2, [pc, #28]	; (800e170 <vApplicationGetTimerTaskMemory+0x2c>)
 800e154:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	4a06      	ldr	r2, [pc, #24]	; (800e174 <vApplicationGetTimerTaskMemory+0x30>)
 800e15a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e162:	601a      	str	r2, [r3, #0]
}
 800e164:	bf00      	nop
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	20000fec 	.word	0x20000fec
 800e174:	200010a8 	.word	0x200010a8

0800e178 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f103 0208 	add.w	r2, r3, #8
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e190:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f103 0208 	add.w	r2, r3, #8
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f103 0208 	add.w	r2, r3, #8
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1c6:	bf00      	nop
 800e1c8:	370c      	adds	r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b085      	sub	sp, #20
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	689a      	ldr	r2, [r3, #8]
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	601a      	str	r2, [r3, #0]
}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr

0800e21a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e21a:	b480      	push	{r7}
 800e21c:	b085      	sub	sp, #20
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
 800e222:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e230:	d103      	bne.n	800e23a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	691b      	ldr	r3, [r3, #16]
 800e236:	60fb      	str	r3, [r7, #12]
 800e238:	e00c      	b.n	800e254 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	3308      	adds	r3, #8
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e002      	b.n	800e248 <vListInsert+0x2e>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	429a      	cmp	r2, r3
 800e252:	d2f6      	bcs.n	800e242 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	683a      	ldr	r2, [r7, #0]
 800e262:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	683a      	ldr	r2, [r7, #0]
 800e26e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	601a      	str	r2, [r3, #0]
}
 800e280:	bf00      	nop
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	691b      	ldr	r3, [r3, #16]
 800e298:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	687a      	ldr	r2, [r7, #4]
 800e2a0:	6892      	ldr	r2, [r2, #8]
 800e2a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	6852      	ldr	r2, [r2, #4]
 800e2ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d103      	bne.n	800e2c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	689a      	ldr	r2, [r3, #8]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	1e5a      	subs	r2, r3, #1
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10a      	bne.n	800e30a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e306:	bf00      	nop
 800e308:	e7fe      	b.n	800e308 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e30a:	f002 fd73 	bl	8010df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e316:	68f9      	ldr	r1, [r7, #12]
 800e318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e31a:	fb01 f303 	mul.w	r3, r1, r3
 800e31e:	441a      	add	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e33a:	3b01      	subs	r3, #1
 800e33c:	68f9      	ldr	r1, [r7, #12]
 800e33e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e340:	fb01 f303 	mul.w	r3, r1, r3
 800e344:	441a      	add	r2, r3
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	22ff      	movs	r2, #255	; 0xff
 800e34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	22ff      	movs	r2, #255	; 0xff
 800e356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d114      	bne.n	800e38a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d01a      	beq.n	800e39e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	3310      	adds	r3, #16
 800e36c:	4618      	mov	r0, r3
 800e36e:	f001 fd13 	bl	800fd98 <xTaskRemoveFromEventList>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d012      	beq.n	800e39e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e378:	4b0c      	ldr	r3, [pc, #48]	; (800e3ac <xQueueGenericReset+0xcc>)
 800e37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e37e:	601a      	str	r2, [r3, #0]
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	e009      	b.n	800e39e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3310      	adds	r3, #16
 800e38e:	4618      	mov	r0, r3
 800e390:	f7ff fef2 	bl	800e178 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	3324      	adds	r3, #36	; 0x24
 800e398:	4618      	mov	r0, r3
 800e39a:	f7ff feed 	bl	800e178 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e39e:	f002 fd59 	bl	8010e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e3a2:	2301      	movs	r3, #1
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	e000ed04 	.word	0xe000ed04

0800e3b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08e      	sub	sp, #56	; 0x38
 800e3b4:	af02      	add	r7, sp, #8
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10a      	bne.n	800e3da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3d6:	bf00      	nop
 800e3d8:	e7fe      	b.n	800e3d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10a      	bne.n	800e3f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3f2:	bf00      	nop
 800e3f4:	e7fe      	b.n	800e3f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <xQueueGenericCreateStatic+0x52>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <xQueueGenericCreateStatic+0x56>
 800e402:	2301      	movs	r3, #1
 800e404:	e000      	b.n	800e408 <xQueueGenericCreateStatic+0x58>
 800e406:	2300      	movs	r3, #0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	623b      	str	r3, [r7, #32]
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <xQueueGenericCreateStatic+0x7e>
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <xQueueGenericCreateStatic+0x82>
 800e42e:	2301      	movs	r3, #1
 800e430:	e000      	b.n	800e434 <xQueueGenericCreateStatic+0x84>
 800e432:	2300      	movs	r3, #0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	61fb      	str	r3, [r7, #28]
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e44e:	2350      	movs	r3, #80	; 0x50
 800e450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2b50      	cmp	r3, #80	; 0x50
 800e456:	d00a      	beq.n	800e46e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	61bb      	str	r3, [r7, #24]
}
 800e46a:	bf00      	nop
 800e46c:	e7fe      	b.n	800e46c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e46e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00d      	beq.n	800e496 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	2201      	movs	r2, #1
 800e47e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e482:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	4613      	mov	r3, r2
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	68b9      	ldr	r1, [r7, #8]
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f000 f83f 	bl	800e514 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e498:	4618      	mov	r0, r3
 800e49a:	3730      	adds	r7, #48	; 0x30
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08a      	sub	sp, #40	; 0x28
 800e4a4:	af02      	add	r7, sp, #8
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <xQueueGenericCreate+0x2a>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	613b      	str	r3, [r7, #16]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	fb02 f303 	mul.w	r3, r2, r3
 800e4d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	3350      	adds	r3, #80	; 0x50
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 fdad 	bl	8011038 <pvPortMalloc>
 800e4de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d011      	beq.n	800e50a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	3350      	adds	r3, #80	; 0x50
 800e4ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4f8:	79fa      	ldrb	r2, [r7, #7]
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	4613      	mov	r3, r2
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 f805 	bl	800e514 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e50a:	69bb      	ldr	r3, [r7, #24]
	}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d103      	bne.n	800e530 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	69ba      	ldr	r2, [r7, #24]
 800e52c:	601a      	str	r2, [r3, #0]
 800e52e:	e002      	b.n	800e536 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e542:	2101      	movs	r1, #1
 800e544:	69b8      	ldr	r0, [r7, #24]
 800e546:	f7ff fecb 	bl	800e2e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	78fa      	ldrb	r2, [r7, #3]
 800e54e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e552:	bf00      	nop
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00e      	beq.n	800e586 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e57a:	2300      	movs	r3, #0
 800e57c:	2200      	movs	r2, #0
 800e57e:	2100      	movs	r1, #0
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f90b 	bl	800e79c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e586:	bf00      	nop
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b086      	sub	sp, #24
 800e592:	af00      	add	r7, sp, #0
 800e594:	4603      	mov	r3, r0
 800e596:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e598:	2301      	movs	r3, #1
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	2300      	movs	r3, #0
 800e59e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	6939      	ldr	r1, [r7, #16]
 800e5a6:	6978      	ldr	r0, [r7, #20]
 800e5a8:	f7ff ff7a 	bl	800e4a0 <xQueueGenericCreate>
 800e5ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f7ff ffd3 	bl	800e55a <prvInitialiseMutex>

		return xNewQueue;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
	}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b088      	sub	sp, #32
 800e5c2:	af02      	add	r7, sp, #8
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	6039      	str	r1, [r7, #0]
 800e5c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	617b      	str	r3, [r7, #20]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	6939      	ldr	r1, [r7, #16]
 800e5dc:	6978      	ldr	r0, [r7, #20]
 800e5de:	f7ff fee7 	bl	800e3b0 <xQueueGenericCreateStatic>
 800e5e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff ffb8 	bl	800e55a <prvInitialiseMutex>

		return xNewQueue;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
	}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e5f4:	b590      	push	{r4, r7, lr}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10a      	bne.n	800e61c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60a:	f383 8811 	msr	BASEPRI, r3
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f3bf 8f4f 	dsb	sy
 800e616:	60fb      	str	r3, [r7, #12]
}
 800e618:	bf00      	nop
 800e61a:	e7fe      	b.n	800e61a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	689c      	ldr	r4, [r3, #8]
 800e620:	f001 fd7c 	bl	801011c <xTaskGetCurrentTaskHandle>
 800e624:	4603      	mov	r3, r0
 800e626:	429c      	cmp	r4, r3
 800e628:	d111      	bne.n	800e64e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	1e5a      	subs	r2, r3, #1
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d105      	bne.n	800e648 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e63c:	2300      	movs	r3, #0
 800e63e:	2200      	movs	r2, #0
 800e640:	2100      	movs	r1, #0
 800e642:	6938      	ldr	r0, [r7, #16]
 800e644:	f000 f8aa 	bl	800e79c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e648:	2301      	movs	r3, #1
 800e64a:	617b      	str	r3, [r7, #20]
 800e64c:	e001      	b.n	800e652 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e64e:	2300      	movs	r3, #0
 800e650:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e652:	697b      	ldr	r3, [r7, #20]
	}
 800e654:	4618      	mov	r0, r3
 800e656:	371c      	adds	r7, #28
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd90      	pop	{r4, r7, pc}

0800e65c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e65c:	b590      	push	{r4, r7, lr}
 800e65e:	b087      	sub	sp, #28
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10a      	bne.n	800e686 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	60fb      	str	r3, [r7, #12]
}
 800e682:	bf00      	nop
 800e684:	e7fe      	b.n	800e684 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	689c      	ldr	r4, [r3, #8]
 800e68a:	f001 fd47 	bl	801011c <xTaskGetCurrentTaskHandle>
 800e68e:	4603      	mov	r3, r0
 800e690:	429c      	cmp	r4, r3
 800e692:	d107      	bne.n	800e6a4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	617b      	str	r3, [r7, #20]
 800e6a2:	e00c      	b.n	800e6be <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6938      	ldr	r0, [r7, #16]
 800e6a8:	f000 fb7e 	bl	800eda8 <xQueueSemaphoreTake>
 800e6ac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d004      	beq.n	800e6be <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e6be:	697b      	ldr	r3, [r7, #20]
	}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	371c      	adds	r7, #28
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd90      	pop	{r4, r7, pc}

0800e6c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08a      	sub	sp, #40	; 0x28
 800e6cc:	af02      	add	r7, sp, #8
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10a      	bne.n	800e6f0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6de:	f383 8811 	msr	BASEPRI, r3
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	f3bf 8f4f 	dsb	sy
 800e6ea:	61bb      	str	r3, [r7, #24]
}
 800e6ec:	bf00      	nop
 800e6ee:	e7fe      	b.n	800e6ee <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d90a      	bls.n	800e70e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	617b      	str	r3, [r7, #20]
}
 800e70a:	bf00      	nop
 800e70c:	e7fe      	b.n	800e70c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e70e:	2302      	movs	r3, #2
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	2100      	movs	r1, #0
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff fe49 	bl	800e3b0 <xQueueGenericCreateStatic>
 800e71e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e72c:	69fb      	ldr	r3, [r7, #28]
	}
 800e72e:	4618      	mov	r0, r3
 800e730:	3720      	adds	r7, #32
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e736:	b580      	push	{r7, lr}
 800e738:	b086      	sub	sp, #24
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10a      	bne.n	800e75c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	613b      	str	r3, [r7, #16]
}
 800e758:	bf00      	nop
 800e75a:	e7fe      	b.n	800e75a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	429a      	cmp	r2, r3
 800e762:	d90a      	bls.n	800e77a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	60fb      	str	r3, [r7, #12]
}
 800e776:	bf00      	nop
 800e778:	e7fe      	b.n	800e778 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e77a:	2202      	movs	r2, #2
 800e77c:	2100      	movs	r1, #0
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff fe8e 	bl	800e4a0 <xQueueGenericCreate>
 800e784:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e792:	697b      	ldr	r3, [r7, #20]
	}
 800e794:	4618      	mov	r0, r3
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b08e      	sub	sp, #56	; 0x38
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
 800e7a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10a      	bne.n	800e7ce <xQueueGenericSend+0x32>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e7ca:	bf00      	nop
 800e7cc:	e7fe      	b.n	800e7cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d103      	bne.n	800e7dc <xQueueGenericSend+0x40>
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <xQueueGenericSend+0x44>
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e000      	b.n	800e7e2 <xQueueGenericSend+0x46>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10a      	bne.n	800e7fc <xQueueGenericSend+0x60>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7f8:	bf00      	nop
 800e7fa:	e7fe      	b.n	800e7fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d103      	bne.n	800e80a <xQueueGenericSend+0x6e>
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e806:	2b01      	cmp	r3, #1
 800e808:	d101      	bne.n	800e80e <xQueueGenericSend+0x72>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e000      	b.n	800e810 <xQueueGenericSend+0x74>
 800e80e:	2300      	movs	r3, #0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10a      	bne.n	800e82a <xQueueGenericSend+0x8e>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	623b      	str	r3, [r7, #32]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e82a:	f001 fc87 	bl	801013c <xTaskGetSchedulerState>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d102      	bne.n	800e83a <xQueueGenericSend+0x9e>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d101      	bne.n	800e83e <xQueueGenericSend+0xa2>
 800e83a:	2301      	movs	r3, #1
 800e83c:	e000      	b.n	800e840 <xQueueGenericSend+0xa4>
 800e83e:	2300      	movs	r3, #0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10a      	bne.n	800e85a <xQueueGenericSend+0xbe>
	__asm volatile
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	f383 8811 	msr	BASEPRI, r3
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f3bf 8f4f 	dsb	sy
 800e854:	61fb      	str	r3, [r7, #28]
}
 800e856:	bf00      	nop
 800e858:	e7fe      	b.n	800e858 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e85a:	f002 facb 	bl	8010df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e866:	429a      	cmp	r2, r3
 800e868:	d302      	bcc.n	800e870 <xQueueGenericSend+0xd4>
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d129      	bne.n	800e8c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e876:	f000 fc5e 	bl	800f136 <prvCopyDataToQueue>
 800e87a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e880:	2b00      	cmp	r3, #0
 800e882:	d010      	beq.n	800e8a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e886:	3324      	adds	r3, #36	; 0x24
 800e888:	4618      	mov	r0, r3
 800e88a:	f001 fa85 	bl	800fd98 <xTaskRemoveFromEventList>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d013      	beq.n	800e8bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e894:	4b3f      	ldr	r3, [pc, #252]	; (800e994 <xQueueGenericSend+0x1f8>)
 800e896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	e00a      	b.n	800e8bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d007      	beq.n	800e8bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e8ac:	4b39      	ldr	r3, [pc, #228]	; (800e994 <xQueueGenericSend+0x1f8>)
 800e8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e8bc:	f002 faca 	bl	8010e54 <vPortExitCritical>
				return pdPASS;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e063      	b.n	800e98c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d103      	bne.n	800e8d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8ca:	f002 fac3 	bl	8010e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	e05c      	b.n	800e98c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d106      	bne.n	800e8e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8d8:	f107 0314 	add.w	r3, r7, #20
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f001 fabf 	bl	800fe60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8e6:	f002 fab5 	bl	8010e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8ea:	f001 f819 	bl	800f920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8ee:	f002 fa81 	bl	8010df4 <vPortEnterCritical>
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8f8:	b25b      	sxtb	r3, r3
 800e8fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8fe:	d103      	bne.n	800e908 <xQueueGenericSend+0x16c>
 800e900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e90e:	b25b      	sxtb	r3, r3
 800e910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e914:	d103      	bne.n	800e91e <xQueueGenericSend+0x182>
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e91e:	f002 fa99 	bl	8010e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e922:	1d3a      	adds	r2, r7, #4
 800e924:	f107 0314 	add.w	r3, r7, #20
 800e928:	4611      	mov	r1, r2
 800e92a:	4618      	mov	r0, r3
 800e92c:	f001 faae 	bl	800fe8c <xTaskCheckForTimeOut>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d124      	bne.n	800e980 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e938:	f000 fcf5 	bl	800f326 <prvIsQueueFull>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d018      	beq.n	800e974 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	3310      	adds	r3, #16
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	4611      	mov	r1, r2
 800e94a:	4618      	mov	r0, r3
 800e94c:	f001 f9d4 	bl	800fcf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e952:	f000 fc80 	bl	800f256 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e956:	f000 fff1 	bl	800f93c <xTaskResumeAll>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f47f af7c 	bne.w	800e85a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e962:	4b0c      	ldr	r3, [pc, #48]	; (800e994 <xQueueGenericSend+0x1f8>)
 800e964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	e772      	b.n	800e85a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e976:	f000 fc6e 	bl	800f256 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e97a:	f000 ffdf 	bl	800f93c <xTaskResumeAll>
 800e97e:	e76c      	b.n	800e85a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e982:	f000 fc68 	bl	800f256 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e986:	f000 ffd9 	bl	800f93c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e98a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3738      	adds	r7, #56	; 0x38
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	e000ed04 	.word	0xe000ed04

0800e998 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b090      	sub	sp, #64	; 0x40
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d10a      	bne.n	800e9c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	f383 8811 	msr	BASEPRI, r3
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9c2:	bf00      	nop
 800e9c4:	e7fe      	b.n	800e9c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d103      	bne.n	800e9d4 <xQueueGenericSendFromISR+0x3c>
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d101      	bne.n	800e9d8 <xQueueGenericSendFromISR+0x40>
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	e000      	b.n	800e9da <xQueueGenericSendFromISR+0x42>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10a      	bne.n	800e9f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9f0:	bf00      	nop
 800e9f2:	e7fe      	b.n	800e9f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d103      	bne.n	800ea02 <xQueueGenericSendFromISR+0x6a>
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d101      	bne.n	800ea06 <xQueueGenericSendFromISR+0x6e>
 800ea02:	2301      	movs	r3, #1
 800ea04:	e000      	b.n	800ea08 <xQueueGenericSendFromISR+0x70>
 800ea06:	2300      	movs	r3, #0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10a      	bne.n	800ea22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ea0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	623b      	str	r3, [r7, #32]
}
 800ea1e:	bf00      	nop
 800ea20:	e7fe      	b.n	800ea20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea22:	f002 fac9 	bl	8010fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea26:	f3ef 8211 	mrs	r2, BASEPRI
 800ea2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	61fa      	str	r2, [r7, #28]
 800ea3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d302      	bcc.n	800ea54 <xQueueGenericSendFromISR+0xbc>
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d12f      	bne.n	800eab4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea6a:	f000 fb64 	bl	800f136 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ea72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea76:	d112      	bne.n	800ea9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d016      	beq.n	800eaae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea82:	3324      	adds	r3, #36	; 0x24
 800ea84:	4618      	mov	r0, r3
 800ea86:	f001 f987 	bl	800fd98 <xTaskRemoveFromEventList>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00e      	beq.n	800eaae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00b      	beq.n	800eaae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	e007      	b.n	800eaae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	b25a      	sxtb	r2, r3
 800eaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eaae:	2301      	movs	r3, #1
 800eab0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eab2:	e001      	b.n	800eab8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eab4:	2300      	movs	r3, #0
 800eab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eac2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3740      	adds	r7, #64	; 0x40
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b08e      	sub	sp, #56	; 0x38
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
 800ead6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10a      	bne.n	800eaf8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	623b      	str	r3, [r7, #32]
}
 800eaf4:	bf00      	nop
 800eaf6:	e7fe      	b.n	800eaf6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00a      	beq.n	800eb16 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	61fb      	str	r3, [r7, #28]
}
 800eb12:	bf00      	nop
 800eb14:	e7fe      	b.n	800eb14 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d103      	bne.n	800eb26 <xQueueGiveFromISR+0x58>
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d101      	bne.n	800eb2a <xQueueGiveFromISR+0x5c>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e000      	b.n	800eb2c <xQueueGiveFromISR+0x5e>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10a      	bne.n	800eb46 <xQueueGiveFromISR+0x78>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	61bb      	str	r3, [r7, #24]
}
 800eb42:	bf00      	nop
 800eb44:	e7fe      	b.n	800eb44 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb46:	f002 fa37 	bl	8010fb8 <vPortValidateInterruptPriority>
	__asm volatile
 800eb4a:	f3ef 8211 	mrs	r2, BASEPRI
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	617a      	str	r2, [r7, #20]
 800eb60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eb62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d22b      	bcs.n	800ebce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb82:	1c5a      	adds	r2, r3, #1
 800eb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eb88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb90:	d112      	bne.n	800ebb8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d016      	beq.n	800ebc8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	3324      	adds	r3, #36	; 0x24
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f001 f8fa 	bl	800fd98 <xTaskRemoveFromEventList>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00e      	beq.n	800ebc8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00b      	beq.n	800ebc8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	e007      	b.n	800ebc8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ebb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	b25a      	sxtb	r2, r3
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	637b      	str	r3, [r7, #52]	; 0x34
 800ebcc:	e001      	b.n	800ebd2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	637b      	str	r3, [r7, #52]	; 0x34
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f383 8811 	msr	BASEPRI, r3
}
 800ebdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3738      	adds	r7, #56	; 0x38
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08c      	sub	sp, #48	; 0x30
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10a      	bne.n	800ec18 <xQueueReceive+0x30>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	623b      	str	r3, [r7, #32]
}
 800ec14:	bf00      	nop
 800ec16:	e7fe      	b.n	800ec16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d103      	bne.n	800ec26 <xQueueReceive+0x3e>
 800ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d101      	bne.n	800ec2a <xQueueReceive+0x42>
 800ec26:	2301      	movs	r3, #1
 800ec28:	e000      	b.n	800ec2c <xQueueReceive+0x44>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d10a      	bne.n	800ec46 <xQueueReceive+0x5e>
	__asm volatile
 800ec30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec34:	f383 8811 	msr	BASEPRI, r3
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	61fb      	str	r3, [r7, #28]
}
 800ec42:	bf00      	nop
 800ec44:	e7fe      	b.n	800ec44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec46:	f001 fa79 	bl	801013c <xTaskGetSchedulerState>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <xQueueReceive+0x6e>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d101      	bne.n	800ec5a <xQueueReceive+0x72>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <xQueueReceive+0x74>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10a      	bne.n	800ec76 <xQueueReceive+0x8e>
	__asm volatile
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	61bb      	str	r3, [r7, #24]
}
 800ec72:	bf00      	nop
 800ec74:	e7fe      	b.n	800ec74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec76:	f002 f8bd 	bl	8010df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d01f      	beq.n	800ecc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec86:	68b9      	ldr	r1, [r7, #8]
 800ec88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec8a:	f000 fabe 	bl	800f20a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	1e5a      	subs	r2, r3, #1
 800ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	691b      	ldr	r3, [r3, #16]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00f      	beq.n	800ecbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	3310      	adds	r3, #16
 800eca2:	4618      	mov	r0, r3
 800eca4:	f001 f878 	bl	800fd98 <xTaskRemoveFromEventList>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d007      	beq.n	800ecbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ecae:	4b3d      	ldr	r3, [pc, #244]	; (800eda4 <xQueueReceive+0x1bc>)
 800ecb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecb4:	601a      	str	r2, [r3, #0]
 800ecb6:	f3bf 8f4f 	dsb	sy
 800ecba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ecbe:	f002 f8c9 	bl	8010e54 <vPortExitCritical>
				return pdPASS;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e069      	b.n	800ed9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d103      	bne.n	800ecd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eccc:	f002 f8c2 	bl	8010e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	e062      	b.n	800ed9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ecda:	f107 0310 	add.w	r3, r7, #16
 800ecde:	4618      	mov	r0, r3
 800ece0:	f001 f8be 	bl	800fe60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ece4:	2301      	movs	r3, #1
 800ece6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ece8:	f002 f8b4 	bl	8010e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ecec:	f000 fe18 	bl	800f920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecf0:	f002 f880 	bl	8010df4 <vPortEnterCritical>
 800ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecfa:	b25b      	sxtb	r3, r3
 800ecfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed00:	d103      	bne.n	800ed0a <xQueueReceive+0x122>
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed10:	b25b      	sxtb	r3, r3
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed16:	d103      	bne.n	800ed20 <xQueueReceive+0x138>
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed20:	f002 f898 	bl	8010e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed24:	1d3a      	adds	r2, r7, #4
 800ed26:	f107 0310 	add.w	r3, r7, #16
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f001 f8ad 	bl	800fe8c <xTaskCheckForTimeOut>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d123      	bne.n	800ed80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed3a:	f000 fade 	bl	800f2fa <prvIsQueueEmpty>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d017      	beq.n	800ed74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	3324      	adds	r3, #36	; 0x24
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f000 ffd3 	bl	800fcf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed54:	f000 fa7f 	bl	800f256 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed58:	f000 fdf0 	bl	800f93c <xTaskResumeAll>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d189      	bne.n	800ec76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ed62:	4b10      	ldr	r3, [pc, #64]	; (800eda4 <xQueueReceive+0x1bc>)
 800ed64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	e780      	b.n	800ec76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ed74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed76:	f000 fa6e 	bl	800f256 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed7a:	f000 fddf 	bl	800f93c <xTaskResumeAll>
 800ed7e:	e77a      	b.n	800ec76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ed80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed82:	f000 fa68 	bl	800f256 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed86:	f000 fdd9 	bl	800f93c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8c:	f000 fab5 	bl	800f2fa <prvIsQueueEmpty>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f43f af6f 	beq.w	800ec76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3730      	adds	r7, #48	; 0x30
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08e      	sub	sp, #56	; 0x38
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800edb2:	2300      	movs	r3, #0
 800edb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800edba:	2300      	movs	r3, #0
 800edbc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10a      	bne.n	800edda <xQueueSemaphoreTake+0x32>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	623b      	str	r3, [r7, #32]
}
 800edd6:	bf00      	nop
 800edd8:	e7fe      	b.n	800edd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00a      	beq.n	800edf8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ede2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	61fb      	str	r3, [r7, #28]
}
 800edf4:	bf00      	nop
 800edf6:	e7fe      	b.n	800edf6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edf8:	f001 f9a0 	bl	801013c <xTaskGetSchedulerState>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d102      	bne.n	800ee08 <xQueueSemaphoreTake+0x60>
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <xQueueSemaphoreTake+0x64>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e000      	b.n	800ee0e <xQueueSemaphoreTake+0x66>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d10a      	bne.n	800ee28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ee12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee16:	f383 8811 	msr	BASEPRI, r3
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	61bb      	str	r3, [r7, #24]
}
 800ee24:	bf00      	nop
 800ee26:	e7fe      	b.n	800ee26 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee28:	f001 ffe4 	bl	8010df4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ee2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d024      	beq.n	800ee82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3a:	1e5a      	subs	r2, r3, #1
 800ee3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d104      	bne.n	800ee52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ee48:	f001 faee 	bl	8010428 <pvTaskIncrementMutexHeldCount>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00f      	beq.n	800ee7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5c:	3310      	adds	r3, #16
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f000 ff9a 	bl	800fd98 <xTaskRemoveFromEventList>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee6a:	4b54      	ldr	r3, [pc, #336]	; (800efbc <xQueueSemaphoreTake+0x214>)
 800ee6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee7a:	f001 ffeb 	bl	8010e54 <vPortExitCritical>
				return pdPASS;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e097      	b.n	800efb2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d111      	bne.n	800eeac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ee88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00a      	beq.n	800eea4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	617b      	str	r3, [r7, #20]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eea4:	f001 ffd6 	bl	8010e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e082      	b.n	800efb2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eeb2:	f107 030c 	add.w	r3, r7, #12
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f000 ffd2 	bl	800fe60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eebc:	2301      	movs	r3, #1
 800eebe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eec0:	f001 ffc8 	bl	8010e54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eec4:	f000 fd2c 	bl	800f920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eec8:	f001 ff94 	bl	8010df4 <vPortEnterCritical>
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eed2:	b25b      	sxtb	r3, r3
 800eed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eed8:	d103      	bne.n	800eee2 <xQueueSemaphoreTake+0x13a>
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eee8:	b25b      	sxtb	r3, r3
 800eeea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeee:	d103      	bne.n	800eef8 <xQueueSemaphoreTake+0x150>
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eef8:	f001 ffac 	bl	8010e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eefc:	463a      	mov	r2, r7
 800eefe:	f107 030c 	add.w	r3, r7, #12
 800ef02:	4611      	mov	r1, r2
 800ef04:	4618      	mov	r0, r3
 800ef06:	f000 ffc1 	bl	800fe8c <xTaskCheckForTimeOut>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d132      	bne.n	800ef76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef12:	f000 f9f2 	bl	800f2fa <prvIsQueueEmpty>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d026      	beq.n	800ef6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d109      	bne.n	800ef38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ef24:	f001 ff66 	bl	8010df4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f001 f923 	bl	8010178 <xTaskPriorityInherit>
 800ef32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ef34:	f001 ff8e 	bl	8010e54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	3324      	adds	r3, #36	; 0x24
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	4611      	mov	r1, r2
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 fed9 	bl	800fcf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef48:	f000 f985 	bl	800f256 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef4c:	f000 fcf6 	bl	800f93c <xTaskResumeAll>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f47f af68 	bne.w	800ee28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ef58:	4b18      	ldr	r3, [pc, #96]	; (800efbc <xQueueSemaphoreTake+0x214>)
 800ef5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	e75e      	b.n	800ee28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ef6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef6c:	f000 f973 	bl	800f256 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef70:	f000 fce4 	bl	800f93c <xTaskResumeAll>
 800ef74:	e758      	b.n	800ee28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ef76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef78:	f000 f96d 	bl	800f256 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef7c:	f000 fcde 	bl	800f93c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef82:	f000 f9ba 	bl	800f2fa <prvIsQueueEmpty>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f43f af4d 	beq.w	800ee28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00d      	beq.n	800efb0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ef94:	f001 ff2e 	bl	8010df4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ef98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef9a:	f000 f8b4 	bl	800f106 <prvGetDisinheritPriorityAfterTimeout>
 800ef9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f001 f9bc 	bl	8010324 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800efac:	f001 ff52 	bl	8010e54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3738      	adds	r7, #56	; 0x38
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	e000ed04 	.word	0xe000ed04

0800efc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08e      	sub	sp, #56	; 0x38
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800efd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	623b      	str	r3, [r7, #32]
}
 800efe8:	bf00      	nop
 800efea:	e7fe      	b.n	800efea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d103      	bne.n	800effa <xQueueReceiveFromISR+0x3a>
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d101      	bne.n	800effe <xQueueReceiveFromISR+0x3e>
 800effa:	2301      	movs	r3, #1
 800effc:	e000      	b.n	800f000 <xQueueReceiveFromISR+0x40>
 800effe:	2300      	movs	r3, #0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10a      	bne.n	800f01a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	61fb      	str	r3, [r7, #28]
}
 800f016:	bf00      	nop
 800f018:	e7fe      	b.n	800f018 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f01a:	f001 ffcd 	bl	8010fb8 <vPortValidateInterruptPriority>
	__asm volatile
 800f01e:	f3ef 8211 	mrs	r2, BASEPRI
 800f022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f026:	f383 8811 	msr	BASEPRI, r3
 800f02a:	f3bf 8f6f 	isb	sy
 800f02e:	f3bf 8f4f 	dsb	sy
 800f032:	61ba      	str	r2, [r7, #24]
 800f034:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f036:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f038:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f03e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	2b00      	cmp	r3, #0
 800f044:	d02f      	beq.n	800f0a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f050:	68b9      	ldr	r1, [r7, #8]
 800f052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f054:	f000 f8d9 	bl	800f20a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05a:	1e5a      	subs	r2, r3, #1
 800f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f060:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f068:	d112      	bne.n	800f090 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d016      	beq.n	800f0a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f074:	3310      	adds	r3, #16
 800f076:	4618      	mov	r0, r3
 800f078:	f000 fe8e 	bl	800fd98 <xTaskRemoveFromEventList>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00e      	beq.n	800f0a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00b      	beq.n	800f0a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	e007      	b.n	800f0a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f094:	3301      	adds	r3, #1
 800f096:	b2db      	uxtb	r3, r3
 800f098:	b25a      	sxtb	r2, r3
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	637b      	str	r3, [r7, #52]	; 0x34
 800f0a4:	e001      	b.n	800f0aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	f383 8811 	msr	BASEPRI, r3
}
 800f0b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3738      	adds	r7, #56	; 0x38
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10a      	bne.n	800f0e8 <vQueueDelete+0x28>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	60bb      	str	r3, [r7, #8]
}
 800f0e4:	bf00      	nop
 800f0e6:	e7fe      	b.n	800f0e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 f95f 	bl	800f3ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d102      	bne.n	800f0fe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f002 f869 	bl	80111d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f0fe:	bf00      	nop
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f106:	b480      	push	{r7}
 800f108:	b085      	sub	sp, #20
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f112:	2b00      	cmp	r3, #0
 800f114:	d006      	beq.n	800f124 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	e001      	b.n	800f128 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f124:	2300      	movs	r3, #0
 800f126:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f128:	68fb      	ldr	r3, [r7, #12]
	}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b086      	sub	sp, #24
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	60f8      	str	r0, [r7, #12]
 800f13e:	60b9      	str	r1, [r7, #8]
 800f140:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f142:	2300      	movs	r3, #0
 800f144:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f14a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10d      	bne.n	800f170 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d14d      	bne.n	800f1f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	4618      	mov	r0, r3
 800f162:	f001 f871 	bl	8010248 <xTaskPriorityDisinherit>
 800f166:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	609a      	str	r2, [r3, #8]
 800f16e:	e043      	b.n	800f1f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d119      	bne.n	800f1aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6858      	ldr	r0, [r3, #4]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17e:	461a      	mov	r2, r3
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	f002 fa66 	bl	8011652 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18e:	441a      	add	r2, r3
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d32b      	bcc.n	800f1f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	605a      	str	r2, [r3, #4]
 800f1a8:	e026      	b.n	800f1f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	68d8      	ldr	r0, [r3, #12]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	68b9      	ldr	r1, [r7, #8]
 800f1b6:	f002 fa4c 	bl	8011652 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	68da      	ldr	r2, [r3, #12]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c2:	425b      	negs	r3, r3
 800f1c4:	441a      	add	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	68da      	ldr	r2, [r3, #12]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d207      	bcs.n	800f1e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	689a      	ldr	r2, [r3, #8]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1de:	425b      	negs	r3, r3
 800f1e0:	441a      	add	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b02      	cmp	r3, #2
 800f1ea:	d105      	bne.n	800f1f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f200:	697b      	ldr	r3, [r7, #20]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
 800f212:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d018      	beq.n	800f24e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	68da      	ldr	r2, [r3, #12]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f224:	441a      	add	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	68da      	ldr	r2, [r3, #12]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	429a      	cmp	r2, r3
 800f234:	d303      	bcc.n	800f23e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	68d9      	ldr	r1, [r3, #12]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f246:	461a      	mov	r2, r3
 800f248:	6838      	ldr	r0, [r7, #0]
 800f24a:	f002 fa02 	bl	8011652 <memcpy>
	}
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b084      	sub	sp, #16
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f25e:	f001 fdc9 	bl	8010df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f268:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f26a:	e011      	b.n	800f290 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f270:	2b00      	cmp	r3, #0
 800f272:	d012      	beq.n	800f29a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	3324      	adds	r3, #36	; 0x24
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fd8d 	bl	800fd98 <xTaskRemoveFromEventList>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f284:	f000 fe64 	bl	800ff50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	3b01      	subs	r3, #1
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f294:	2b00      	cmp	r3, #0
 800f296:	dce9      	bgt.n	800f26c <prvUnlockQueue+0x16>
 800f298:	e000      	b.n	800f29c <prvUnlockQueue+0x46>
					break;
 800f29a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	22ff      	movs	r2, #255	; 0xff
 800f2a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f2a4:	f001 fdd6 	bl	8010e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2a8:	f001 fda4 	bl	8010df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2b4:	e011      	b.n	800f2da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d012      	beq.n	800f2e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	3310      	adds	r3, #16
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 fd68 	bl	800fd98 <xTaskRemoveFromEventList>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f2ce:	f000 fe3f 	bl	800ff50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f2d2:	7bbb      	ldrb	r3, [r7, #14]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dce9      	bgt.n	800f2b6 <prvUnlockQueue+0x60>
 800f2e2:	e000      	b.n	800f2e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	22ff      	movs	r2, #255	; 0xff
 800f2ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f2ee:	f001 fdb1 	bl	8010e54 <vPortExitCritical>
}
 800f2f2:	bf00      	nop
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b084      	sub	sp, #16
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f302:	f001 fd77 	bl	8010df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d102      	bne.n	800f314 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f30e:	2301      	movs	r3, #1
 800f310:	60fb      	str	r3, [r7, #12]
 800f312:	e001      	b.n	800f318 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f314:	2300      	movs	r3, #0
 800f316:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f318:	f001 fd9c 	bl	8010e54 <vPortExitCritical>

	return xReturn;
 800f31c:	68fb      	ldr	r3, [r7, #12]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b084      	sub	sp, #16
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f32e:	f001 fd61 	bl	8010df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d102      	bne.n	800f344 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f33e:	2301      	movs	r3, #1
 800f340:	60fb      	str	r3, [r7, #12]
 800f342:	e001      	b.n	800f348 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f344:	2300      	movs	r3, #0
 800f346:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f348:	f001 fd84 	bl	8010e54 <vPortExitCritical>

	return xReturn;
 800f34c:	68fb      	ldr	r3, [r7, #12]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f362:	2300      	movs	r3, #0
 800f364:	60fb      	str	r3, [r7, #12]
 800f366:	e014      	b.n	800f392 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f368:	4a0f      	ldr	r2, [pc, #60]	; (800f3a8 <vQueueAddToRegistry+0x50>)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10b      	bne.n	800f38c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f374:	490c      	ldr	r1, [pc, #48]	; (800f3a8 <vQueueAddToRegistry+0x50>)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f37e:	4a0a      	ldr	r2, [pc, #40]	; (800f3a8 <vQueueAddToRegistry+0x50>)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	00db      	lsls	r3, r3, #3
 800f384:	4413      	add	r3, r2
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f38a:	e006      	b.n	800f39a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	3301      	adds	r3, #1
 800f390:	60fb      	str	r3, [r7, #12]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b07      	cmp	r3, #7
 800f396:	d9e7      	bls.n	800f368 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	3714      	adds	r7, #20
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	200014a8 	.word	0x200014a8

0800f3ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	e016      	b.n	800f3e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f3ba:	4a10      	ldr	r2, [pc, #64]	; (800f3fc <vQueueUnregisterQueue+0x50>)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	4413      	add	r3, r2
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d10b      	bne.n	800f3e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f3ca:	4a0c      	ldr	r2, [pc, #48]	; (800f3fc <vQueueUnregisterQueue+0x50>)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2100      	movs	r1, #0
 800f3d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f3d4:	4a09      	ldr	r2, [pc, #36]	; (800f3fc <vQueueUnregisterQueue+0x50>)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	00db      	lsls	r3, r3, #3
 800f3da:	4413      	add	r3, r2
 800f3dc:	2200      	movs	r2, #0
 800f3de:	605a      	str	r2, [r3, #4]
				break;
 800f3e0:	e006      	b.n	800f3f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b07      	cmp	r3, #7
 800f3ec:	d9e5      	bls.n	800f3ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f3ee:	bf00      	nop
 800f3f0:	bf00      	nop
 800f3f2:	3714      	adds	r7, #20
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	200014a8 	.word	0x200014a8

0800f400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f410:	f001 fcf0 	bl	8010df4 <vPortEnterCritical>
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f41a:	b25b      	sxtb	r3, r3
 800f41c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f420:	d103      	bne.n	800f42a <vQueueWaitForMessageRestricted+0x2a>
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2200      	movs	r2, #0
 800f426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f430:	b25b      	sxtb	r3, r3
 800f432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f436:	d103      	bne.n	800f440 <vQueueWaitForMessageRestricted+0x40>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f440:	f001 fd08 	bl	8010e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d106      	bne.n	800f45a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	3324      	adds	r3, #36	; 0x24
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	68b9      	ldr	r1, [r7, #8]
 800f454:	4618      	mov	r0, r3
 800f456:	f000 fc73 	bl	800fd40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f45a:	6978      	ldr	r0, [r7, #20]
 800f45c:	f7ff fefb 	bl	800f256 <prvUnlockQueue>
	}
 800f460:	bf00      	nop
 800f462:	3718      	adds	r7, #24
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08e      	sub	sp, #56	; 0x38
 800f46c:	af04      	add	r7, sp, #16
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10a      	bne.n	800f492 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	623b      	str	r3, [r7, #32]
}
 800f48e:	bf00      	nop
 800f490:	e7fe      	b.n	800f490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10a      	bne.n	800f4ae <xTaskCreateStatic+0x46>
	__asm volatile
 800f498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	61fb      	str	r3, [r7, #28]
}
 800f4aa:	bf00      	nop
 800f4ac:	e7fe      	b.n	800f4ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f4ae:	23bc      	movs	r3, #188	; 0xbc
 800f4b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2bbc      	cmp	r3, #188	; 0xbc
 800f4b6:	d00a      	beq.n	800f4ce <xTaskCreateStatic+0x66>
	__asm volatile
 800f4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4bc:	f383 8811 	msr	BASEPRI, r3
 800f4c0:	f3bf 8f6f 	isb	sy
 800f4c4:	f3bf 8f4f 	dsb	sy
 800f4c8:	61bb      	str	r3, [r7, #24]
}
 800f4ca:	bf00      	nop
 800f4cc:	e7fe      	b.n	800f4cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d01e      	beq.n	800f514 <xTaskCreateStatic+0xac>
 800f4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d01b      	beq.n	800f514 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	2202      	movs	r2, #2
 800f4ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	9303      	str	r3, [sp, #12]
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	9302      	str	r3, [sp, #8]
 800f4f6:	f107 0314 	add.w	r3, r7, #20
 800f4fa:	9301      	str	r3, [sp, #4]
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f000 f850 	bl	800f5ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f50c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f50e:	f000 f8f3 	bl	800f6f8 <prvAddNewTaskToReadyList>
 800f512:	e001      	b.n	800f518 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f514:	2300      	movs	r3, #0
 800f516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f518:	697b      	ldr	r3, [r7, #20]
	}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3728      	adds	r7, #40	; 0x28
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f522:	b580      	push	{r7, lr}
 800f524:	b08c      	sub	sp, #48	; 0x30
 800f526:	af04      	add	r7, sp, #16
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	603b      	str	r3, [r7, #0]
 800f52e:	4613      	mov	r3, r2
 800f530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f532:	88fb      	ldrh	r3, [r7, #6]
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4618      	mov	r0, r3
 800f538:	f001 fd7e 	bl	8011038 <pvPortMalloc>
 800f53c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00e      	beq.n	800f562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f544:	20bc      	movs	r0, #188	; 0xbc
 800f546:	f001 fd77 	bl	8011038 <pvPortMalloc>
 800f54a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d003      	beq.n	800f55a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	631a      	str	r2, [r3, #48]	; 0x30
 800f558:	e005      	b.n	800f566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f55a:	6978      	ldr	r0, [r7, #20]
 800f55c:	f001 fe38 	bl	80111d0 <vPortFree>
 800f560:	e001      	b.n	800f566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f562:	2300      	movs	r3, #0
 800f564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d017      	beq.n	800f59c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f574:	88fa      	ldrh	r2, [r7, #6]
 800f576:	2300      	movs	r3, #0
 800f578:	9303      	str	r3, [sp, #12]
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	9302      	str	r3, [sp, #8]
 800f57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	68b9      	ldr	r1, [r7, #8]
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f000 f80e 	bl	800f5ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f590:	69f8      	ldr	r0, [r7, #28]
 800f592:	f000 f8b1 	bl	800f6f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f596:	2301      	movs	r3, #1
 800f598:	61bb      	str	r3, [r7, #24]
 800f59a:	e002      	b.n	800f5a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
	}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3720      	adds	r7, #32
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b088      	sub	sp, #32
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
 800f5b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	21a5      	movs	r1, #165	; 0xa5
 800f5c6:	f002 f852 	bl	801166e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	f023 0307 	bic.w	r3, r3, #7
 800f5e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	f003 0307 	and.w	r3, r3, #7
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00a      	beq.n	800f604 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	617b      	str	r3, [r7, #20]
}
 800f600:	bf00      	nop
 800f602:	e7fe      	b.n	800f602 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01f      	beq.n	800f64a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f60a:	2300      	movs	r3, #0
 800f60c:	61fb      	str	r3, [r7, #28]
 800f60e:	e012      	b.n	800f636 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	4413      	add	r3, r2
 800f616:	7819      	ldrb	r1, [r3, #0]
 800f618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	4413      	add	r3, r2
 800f61e:	3334      	adds	r3, #52	; 0x34
 800f620:	460a      	mov	r2, r1
 800f622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	4413      	add	r3, r2
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d006      	beq.n	800f63e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	3301      	adds	r3, #1
 800f634:	61fb      	str	r3, [r7, #28]
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	2b0f      	cmp	r3, #15
 800f63a:	d9e9      	bls.n	800f610 <prvInitialiseNewTask+0x64>
 800f63c:	e000      	b.n	800f640 <prvInitialiseNewTask+0x94>
			{
				break;
 800f63e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	2200      	movs	r2, #0
 800f644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f648:	e003      	b.n	800f652 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	2b37      	cmp	r3, #55	; 0x37
 800f656:	d901      	bls.n	800f65c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f658:	2337      	movs	r3, #55	; 0x37
 800f65a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66a:	2200      	movs	r2, #0
 800f66c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	3304      	adds	r3, #4
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe fda0 	bl	800e1b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	3318      	adds	r3, #24
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fe fd9b 	bl	800e1b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	2200      	movs	r2, #0
 800f69c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	3354      	adds	r3, #84	; 0x54
 800f6ac:	2260      	movs	r2, #96	; 0x60
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f001 ffdc 	bl	801166e <memset>
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	4a0c      	ldr	r2, [pc, #48]	; (800f6ec <prvInitialiseNewTask+0x140>)
 800f6ba:	659a      	str	r2, [r3, #88]	; 0x58
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6be:	4a0c      	ldr	r2, [pc, #48]	; (800f6f0 <prvInitialiseNewTask+0x144>)
 800f6c0:	65da      	str	r2, [r3, #92]	; 0x5c
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c4:	4a0b      	ldr	r2, [pc, #44]	; (800f6f4 <prvInitialiseNewTask+0x148>)
 800f6c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6c8:	683a      	ldr	r2, [r7, #0]
 800f6ca:	68f9      	ldr	r1, [r7, #12]
 800f6cc:	69b8      	ldr	r0, [r7, #24]
 800f6ce:	f001 fa61 	bl	8010b94 <pxPortInitialiseStack>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d002      	beq.n	800f6e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6e4:	bf00      	nop
 800f6e6:	3720      	adds	r7, #32
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	080160f8 	.word	0x080160f8
 800f6f0:	08016118 	.word	0x08016118
 800f6f4:	080160d8 	.word	0x080160d8

0800f6f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f700:	f001 fb78 	bl	8010df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f704:	4b2d      	ldr	r3, [pc, #180]	; (800f7bc <prvAddNewTaskToReadyList+0xc4>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	3301      	adds	r3, #1
 800f70a:	4a2c      	ldr	r2, [pc, #176]	; (800f7bc <prvAddNewTaskToReadyList+0xc4>)
 800f70c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f70e:	4b2c      	ldr	r3, [pc, #176]	; (800f7c0 <prvAddNewTaskToReadyList+0xc8>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d109      	bne.n	800f72a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f716:	4a2a      	ldr	r2, [pc, #168]	; (800f7c0 <prvAddNewTaskToReadyList+0xc8>)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f71c:	4b27      	ldr	r3, [pc, #156]	; (800f7bc <prvAddNewTaskToReadyList+0xc4>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d110      	bne.n	800f746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f724:	f000 fc38 	bl	800ff98 <prvInitialiseTaskLists>
 800f728:	e00d      	b.n	800f746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f72a:	4b26      	ldr	r3, [pc, #152]	; (800f7c4 <prvAddNewTaskToReadyList+0xcc>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d109      	bne.n	800f746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f732:	4b23      	ldr	r3, [pc, #140]	; (800f7c0 <prvAddNewTaskToReadyList+0xc8>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d802      	bhi.n	800f746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f740:	4a1f      	ldr	r2, [pc, #124]	; (800f7c0 <prvAddNewTaskToReadyList+0xc8>)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f746:	4b20      	ldr	r3, [pc, #128]	; (800f7c8 <prvAddNewTaskToReadyList+0xd0>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	3301      	adds	r3, #1
 800f74c:	4a1e      	ldr	r2, [pc, #120]	; (800f7c8 <prvAddNewTaskToReadyList+0xd0>)
 800f74e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f750:	4b1d      	ldr	r3, [pc, #116]	; (800f7c8 <prvAddNewTaskToReadyList+0xd0>)
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75c:	4b1b      	ldr	r3, [pc, #108]	; (800f7cc <prvAddNewTaskToReadyList+0xd4>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	429a      	cmp	r2, r3
 800f762:	d903      	bls.n	800f76c <prvAddNewTaskToReadyList+0x74>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f768:	4a18      	ldr	r2, [pc, #96]	; (800f7cc <prvAddNewTaskToReadyList+0xd4>)
 800f76a:	6013      	str	r3, [r2, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f770:	4613      	mov	r3, r2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	4a15      	ldr	r2, [pc, #84]	; (800f7d0 <prvAddNewTaskToReadyList+0xd8>)
 800f77a:	441a      	add	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3304      	adds	r3, #4
 800f780:	4619      	mov	r1, r3
 800f782:	4610      	mov	r0, r2
 800f784:	f7fe fd25 	bl	800e1d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f788:	f001 fb64 	bl	8010e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f78c:	4b0d      	ldr	r3, [pc, #52]	; (800f7c4 <prvAddNewTaskToReadyList+0xcc>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00e      	beq.n	800f7b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f794:	4b0a      	ldr	r3, [pc, #40]	; (800f7c0 <prvAddNewTaskToReadyList+0xc8>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d207      	bcs.n	800f7b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7a2:	4b0c      	ldr	r3, [pc, #48]	; (800f7d4 <prvAddNewTaskToReadyList+0xdc>)
 800f7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7a8:	601a      	str	r2, [r3, #0]
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7b2:	bf00      	nop
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	200019bc 	.word	0x200019bc
 800f7c0:	200014e8 	.word	0x200014e8
 800f7c4:	200019c8 	.word	0x200019c8
 800f7c8:	200019d8 	.word	0x200019d8
 800f7cc:	200019c4 	.word	0x200019c4
 800f7d0:	200014ec 	.word	0x200014ec
 800f7d4:	e000ed04 	.word	0xe000ed04

0800f7d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d017      	beq.n	800f81a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f7ea:	4b13      	ldr	r3, [pc, #76]	; (800f838 <vTaskDelay+0x60>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00a      	beq.n	800f808 <vTaskDelay+0x30>
	__asm volatile
 800f7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f6:	f383 8811 	msr	BASEPRI, r3
 800f7fa:	f3bf 8f6f 	isb	sy
 800f7fe:	f3bf 8f4f 	dsb	sy
 800f802:	60bb      	str	r3, [r7, #8]
}
 800f804:	bf00      	nop
 800f806:	e7fe      	b.n	800f806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f808:	f000 f88a 	bl	800f920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f80c:	2100      	movs	r1, #0
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 fe1e 	bl	8010450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f814:	f000 f892 	bl	800f93c <xTaskResumeAll>
 800f818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d107      	bne.n	800f830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f820:	4b06      	ldr	r3, [pc, #24]	; (800f83c <vTaskDelay+0x64>)
 800f822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f826:	601a      	str	r2, [r3, #0]
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f830:	bf00      	nop
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	200019e4 	.word	0x200019e4
 800f83c:	e000ed04 	.word	0xe000ed04

0800f840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08a      	sub	sp, #40	; 0x28
 800f844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f846:	2300      	movs	r3, #0
 800f848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f84a:	2300      	movs	r3, #0
 800f84c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f84e:	463a      	mov	r2, r7
 800f850:	1d39      	adds	r1, r7, #4
 800f852:	f107 0308 	add.w	r3, r7, #8
 800f856:	4618      	mov	r0, r3
 800f858:	f7fe fc5a 	bl	800e110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68ba      	ldr	r2, [r7, #8]
 800f862:	9202      	str	r2, [sp, #8]
 800f864:	9301      	str	r3, [sp, #4]
 800f866:	2300      	movs	r3, #0
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	2300      	movs	r3, #0
 800f86c:	460a      	mov	r2, r1
 800f86e:	4924      	ldr	r1, [pc, #144]	; (800f900 <vTaskStartScheduler+0xc0>)
 800f870:	4824      	ldr	r0, [pc, #144]	; (800f904 <vTaskStartScheduler+0xc4>)
 800f872:	f7ff fdf9 	bl	800f468 <xTaskCreateStatic>
 800f876:	4603      	mov	r3, r0
 800f878:	4a23      	ldr	r2, [pc, #140]	; (800f908 <vTaskStartScheduler+0xc8>)
 800f87a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f87c:	4b22      	ldr	r3, [pc, #136]	; (800f908 <vTaskStartScheduler+0xc8>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f884:	2301      	movs	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	e001      	b.n	800f88e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f88a:	2300      	movs	r3, #0
 800f88c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2b01      	cmp	r3, #1
 800f892:	d102      	bne.n	800f89a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f894:	f000 fe30 	bl	80104f8 <xTimerCreateTimerTask>
 800f898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d11b      	bne.n	800f8d8 <vTaskStartScheduler+0x98>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	613b      	str	r3, [r7, #16]
}
 800f8b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8b4:	4b15      	ldr	r3, [pc, #84]	; (800f90c <vTaskStartScheduler+0xcc>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	3354      	adds	r3, #84	; 0x54
 800f8ba:	4a15      	ldr	r2, [pc, #84]	; (800f910 <vTaskStartScheduler+0xd0>)
 800f8bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f8be:	4b15      	ldr	r3, [pc, #84]	; (800f914 <vTaskStartScheduler+0xd4>)
 800f8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8c6:	4b14      	ldr	r3, [pc, #80]	; (800f918 <vTaskStartScheduler+0xd8>)
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8cc:	4b13      	ldr	r3, [pc, #76]	; (800f91c <vTaskStartScheduler+0xdc>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8d2:	f001 f9ed 	bl	8010cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8d6:	e00e      	b.n	800f8f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8de:	d10a      	bne.n	800f8f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	60fb      	str	r3, [r7, #12]
}
 800f8f2:	bf00      	nop
 800f8f4:	e7fe      	b.n	800f8f4 <vTaskStartScheduler+0xb4>
}
 800f8f6:	bf00      	nop
 800f8f8:	3718      	adds	r7, #24
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	08015f60 	.word	0x08015f60
 800f904:	0800ff69 	.word	0x0800ff69
 800f908:	200019e0 	.word	0x200019e0
 800f90c:	200014e8 	.word	0x200014e8
 800f910:	20000010 	.word	0x20000010
 800f914:	200019dc 	.word	0x200019dc
 800f918:	200019c8 	.word	0x200019c8
 800f91c:	200019c0 	.word	0x200019c0

0800f920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f920:	b480      	push	{r7}
 800f922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f924:	4b04      	ldr	r3, [pc, #16]	; (800f938 <vTaskSuspendAll+0x18>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3301      	adds	r3, #1
 800f92a:	4a03      	ldr	r2, [pc, #12]	; (800f938 <vTaskSuspendAll+0x18>)
 800f92c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f92e:	bf00      	nop
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	200019e4 	.word	0x200019e4

0800f93c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f942:	2300      	movs	r3, #0
 800f944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f946:	2300      	movs	r3, #0
 800f948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f94a:	4b42      	ldr	r3, [pc, #264]	; (800fa54 <xTaskResumeAll+0x118>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d10a      	bne.n	800f968 <xTaskResumeAll+0x2c>
	__asm volatile
 800f952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	603b      	str	r3, [r7, #0]
}
 800f964:	bf00      	nop
 800f966:	e7fe      	b.n	800f966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f968:	f001 fa44 	bl	8010df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f96c:	4b39      	ldr	r3, [pc, #228]	; (800fa54 <xTaskResumeAll+0x118>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3b01      	subs	r3, #1
 800f972:	4a38      	ldr	r2, [pc, #224]	; (800fa54 <xTaskResumeAll+0x118>)
 800f974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f976:	4b37      	ldr	r3, [pc, #220]	; (800fa54 <xTaskResumeAll+0x118>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d162      	bne.n	800fa44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f97e:	4b36      	ldr	r3, [pc, #216]	; (800fa58 <xTaskResumeAll+0x11c>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d05e      	beq.n	800fa44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f986:	e02f      	b.n	800f9e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f988:	4b34      	ldr	r3, [pc, #208]	; (800fa5c <xTaskResumeAll+0x120>)
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	3318      	adds	r3, #24
 800f994:	4618      	mov	r0, r3
 800f996:	f7fe fc79 	bl	800e28c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3304      	adds	r3, #4
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fe fc74 	bl	800e28c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a8:	4b2d      	ldr	r3, [pc, #180]	; (800fa60 <xTaskResumeAll+0x124>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d903      	bls.n	800f9b8 <xTaskResumeAll+0x7c>
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b4:	4a2a      	ldr	r2, [pc, #168]	; (800fa60 <xTaskResumeAll+0x124>)
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9bc:	4613      	mov	r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4a27      	ldr	r2, [pc, #156]	; (800fa64 <xTaskResumeAll+0x128>)
 800f9c6:	441a      	add	r2, r3
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	f7fe fbff 	bl	800e1d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d8:	4b23      	ldr	r3, [pc, #140]	; (800fa68 <xTaskResumeAll+0x12c>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d302      	bcc.n	800f9e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f9e2:	4b22      	ldr	r3, [pc, #136]	; (800fa6c <xTaskResumeAll+0x130>)
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9e8:	4b1c      	ldr	r3, [pc, #112]	; (800fa5c <xTaskResumeAll+0x120>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1cb      	bne.n	800f988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f9f6:	f000 fb71 	bl	80100dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f9fa:	4b1d      	ldr	r3, [pc, #116]	; (800fa70 <xTaskResumeAll+0x134>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d010      	beq.n	800fa28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa06:	f000 f859 	bl	800fabc <xTaskIncrementTick>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fa10:	4b16      	ldr	r3, [pc, #88]	; (800fa6c <xTaskResumeAll+0x130>)
 800fa12:	2201      	movs	r2, #1
 800fa14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1f1      	bne.n	800fa06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fa22:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <xTaskResumeAll+0x134>)
 800fa24:	2200      	movs	r2, #0
 800fa26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa28:	4b10      	ldr	r3, [pc, #64]	; (800fa6c <xTaskResumeAll+0x130>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d009      	beq.n	800fa44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa30:	2301      	movs	r3, #1
 800fa32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa34:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <xTaskResumeAll+0x138>)
 800fa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa44:	f001 fa06 	bl	8010e54 <vPortExitCritical>

	return xAlreadyYielded;
 800fa48:	68bb      	ldr	r3, [r7, #8]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	200019e4 	.word	0x200019e4
 800fa58:	200019bc 	.word	0x200019bc
 800fa5c:	2000197c 	.word	0x2000197c
 800fa60:	200019c4 	.word	0x200019c4
 800fa64:	200014ec 	.word	0x200014ec
 800fa68:	200014e8 	.word	0x200014e8
 800fa6c:	200019d0 	.word	0x200019d0
 800fa70:	200019cc 	.word	0x200019cc
 800fa74:	e000ed04 	.word	0xe000ed04

0800fa78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa7e:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <xTaskGetTickCount+0x1c>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fa84:	687b      	ldr	r3, [r7, #4]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	370c      	adds	r7, #12
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	200019c0 	.word	0x200019c0

0800fa98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa9e:	f001 fa8b 	bl	8010fb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800faa2:	2300      	movs	r3, #0
 800faa4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800faa6:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <xTaskGetTickCountFromISR+0x20>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800faac:	683b      	ldr	r3, [r7, #0]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	200019c0 	.word	0x200019c0

0800fabc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fac6:	4b4f      	ldr	r3, [pc, #316]	; (800fc04 <xTaskIncrementTick+0x148>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	f040 808f 	bne.w	800fbee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fad0:	4b4d      	ldr	r3, [pc, #308]	; (800fc08 <xTaskIncrementTick+0x14c>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3301      	adds	r3, #1
 800fad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fad8:	4a4b      	ldr	r2, [pc, #300]	; (800fc08 <xTaskIncrementTick+0x14c>)
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d120      	bne.n	800fb26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fae4:	4b49      	ldr	r3, [pc, #292]	; (800fc0c <xTaskIncrementTick+0x150>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00a      	beq.n	800fb04 <xTaskIncrementTick+0x48>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	603b      	str	r3, [r7, #0]
}
 800fb00:	bf00      	nop
 800fb02:	e7fe      	b.n	800fb02 <xTaskIncrementTick+0x46>
 800fb04:	4b41      	ldr	r3, [pc, #260]	; (800fc0c <xTaskIncrementTick+0x150>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	60fb      	str	r3, [r7, #12]
 800fb0a:	4b41      	ldr	r3, [pc, #260]	; (800fc10 <xTaskIncrementTick+0x154>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a3f      	ldr	r2, [pc, #252]	; (800fc0c <xTaskIncrementTick+0x150>)
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	4a3f      	ldr	r2, [pc, #252]	; (800fc10 <xTaskIncrementTick+0x154>)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6013      	str	r3, [r2, #0]
 800fb18:	4b3e      	ldr	r3, [pc, #248]	; (800fc14 <xTaskIncrementTick+0x158>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	4a3d      	ldr	r2, [pc, #244]	; (800fc14 <xTaskIncrementTick+0x158>)
 800fb20:	6013      	str	r3, [r2, #0]
 800fb22:	f000 fadb 	bl	80100dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb26:	4b3c      	ldr	r3, [pc, #240]	; (800fc18 <xTaskIncrementTick+0x15c>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d349      	bcc.n	800fbc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb30:	4b36      	ldr	r3, [pc, #216]	; (800fc0c <xTaskIncrementTick+0x150>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d104      	bne.n	800fb44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb3a:	4b37      	ldr	r3, [pc, #220]	; (800fc18 <xTaskIncrementTick+0x15c>)
 800fb3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb40:	601a      	str	r2, [r3, #0]
					break;
 800fb42:	e03f      	b.n	800fbc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb44:	4b31      	ldr	r3, [pc, #196]	; (800fc0c <xTaskIncrementTick+0x150>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d203      	bcs.n	800fb64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb5c:	4a2e      	ldr	r2, [pc, #184]	; (800fc18 <xTaskIncrementTick+0x15c>)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb62:	e02f      	b.n	800fbc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe fb8f 	bl	800e28c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d004      	beq.n	800fb80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	3318      	adds	r3, #24
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fe fb86 	bl	800e28c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb84:	4b25      	ldr	r3, [pc, #148]	; (800fc1c <xTaskIncrementTick+0x160>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d903      	bls.n	800fb94 <xTaskIncrementTick+0xd8>
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb90:	4a22      	ldr	r2, [pc, #136]	; (800fc1c <xTaskIncrementTick+0x160>)
 800fb92:	6013      	str	r3, [r2, #0]
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb98:	4613      	mov	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	4413      	add	r3, r2
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	4a1f      	ldr	r2, [pc, #124]	; (800fc20 <xTaskIncrementTick+0x164>)
 800fba2:	441a      	add	r2, r3
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	3304      	adds	r3, #4
 800fba8:	4619      	mov	r1, r3
 800fbaa:	4610      	mov	r0, r2
 800fbac:	f7fe fb11 	bl	800e1d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb4:	4b1b      	ldr	r3, [pc, #108]	; (800fc24 <xTaskIncrementTick+0x168>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d3b8      	bcc.n	800fb30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbc2:	e7b5      	b.n	800fb30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fbc4:	4b17      	ldr	r3, [pc, #92]	; (800fc24 <xTaskIncrementTick+0x168>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbca:	4915      	ldr	r1, [pc, #84]	; (800fc20 <xTaskIncrementTick+0x164>)
 800fbcc:	4613      	mov	r3, r2
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	4413      	add	r3, r2
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	440b      	add	r3, r1
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d901      	bls.n	800fbe0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fbe0:	4b11      	ldr	r3, [pc, #68]	; (800fc28 <xTaskIncrementTick+0x16c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d007      	beq.n	800fbf8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	617b      	str	r3, [r7, #20]
 800fbec:	e004      	b.n	800fbf8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <xTaskIncrementTick+0x170>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	4a0d      	ldr	r2, [pc, #52]	; (800fc2c <xTaskIncrementTick+0x170>)
 800fbf6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fbf8:	697b      	ldr	r3, [r7, #20]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3718      	adds	r7, #24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	200019e4 	.word	0x200019e4
 800fc08:	200019c0 	.word	0x200019c0
 800fc0c:	20001974 	.word	0x20001974
 800fc10:	20001978 	.word	0x20001978
 800fc14:	200019d4 	.word	0x200019d4
 800fc18:	200019dc 	.word	0x200019dc
 800fc1c:	200019c4 	.word	0x200019c4
 800fc20:	200014ec 	.word	0x200014ec
 800fc24:	200014e8 	.word	0x200014e8
 800fc28:	200019d0 	.word	0x200019d0
 800fc2c:	200019cc 	.word	0x200019cc

0800fc30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc36:	4b2a      	ldr	r3, [pc, #168]	; (800fce0 <vTaskSwitchContext+0xb0>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d003      	beq.n	800fc46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc3e:	4b29      	ldr	r3, [pc, #164]	; (800fce4 <vTaskSwitchContext+0xb4>)
 800fc40:	2201      	movs	r2, #1
 800fc42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc44:	e046      	b.n	800fcd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fc46:	4b27      	ldr	r3, [pc, #156]	; (800fce4 <vTaskSwitchContext+0xb4>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc4c:	4b26      	ldr	r3, [pc, #152]	; (800fce8 <vTaskSwitchContext+0xb8>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	e010      	b.n	800fc76 <vTaskSwitchContext+0x46>
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10a      	bne.n	800fc70 <vTaskSwitchContext+0x40>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	607b      	str	r3, [r7, #4]
}
 800fc6c:	bf00      	nop
 800fc6e:	e7fe      	b.n	800fc6e <vTaskSwitchContext+0x3e>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3b01      	subs	r3, #1
 800fc74:	60fb      	str	r3, [r7, #12]
 800fc76:	491d      	ldr	r1, [pc, #116]	; (800fcec <vTaskSwitchContext+0xbc>)
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	4413      	add	r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	440b      	add	r3, r1
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d0e4      	beq.n	800fc54 <vTaskSwitchContext+0x24>
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	4413      	add	r3, r2
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	4a15      	ldr	r2, [pc, #84]	; (800fcec <vTaskSwitchContext+0xbc>)
 800fc96:	4413      	add	r3, r2
 800fc98:	60bb      	str	r3, [r7, #8]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	685a      	ldr	r2, [r3, #4]
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	605a      	str	r2, [r3, #4]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	685a      	ldr	r2, [r3, #4]
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	3308      	adds	r3, #8
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d104      	bne.n	800fcba <vTaskSwitchContext+0x8a>
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	685a      	ldr	r2, [r3, #4]
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	605a      	str	r2, [r3, #4]
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	4a0b      	ldr	r2, [pc, #44]	; (800fcf0 <vTaskSwitchContext+0xc0>)
 800fcc2:	6013      	str	r3, [r2, #0]
 800fcc4:	4a08      	ldr	r2, [pc, #32]	; (800fce8 <vTaskSwitchContext+0xb8>)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <vTaskSwitchContext+0xc0>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3354      	adds	r3, #84	; 0x54
 800fcd0:	4a08      	ldr	r2, [pc, #32]	; (800fcf4 <vTaskSwitchContext+0xc4>)
 800fcd2:	6013      	str	r3, [r2, #0]
}
 800fcd4:	bf00      	nop
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	200019e4 	.word	0x200019e4
 800fce4:	200019d0 	.word	0x200019d0
 800fce8:	200019c4 	.word	0x200019c4
 800fcec:	200014ec 	.word	0x200014ec
 800fcf0:	200014e8 	.word	0x200014e8
 800fcf4:	20000010 	.word	0x20000010

0800fcf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10a      	bne.n	800fd1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	60fb      	str	r3, [r7, #12]
}
 800fd1a:	bf00      	nop
 800fd1c:	e7fe      	b.n	800fd1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd1e:	4b07      	ldr	r3, [pc, #28]	; (800fd3c <vTaskPlaceOnEventList+0x44>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3318      	adds	r3, #24
 800fd24:	4619      	mov	r1, r3
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7fe fa77 	bl	800e21a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	6838      	ldr	r0, [r7, #0]
 800fd30:	f000 fb8e 	bl	8010450 <prvAddCurrentTaskToDelayedList>
}
 800fd34:	bf00      	nop
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	200014e8 	.word	0x200014e8

0800fd40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d10a      	bne.n	800fd68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	617b      	str	r3, [r7, #20]
}
 800fd64:	bf00      	nop
 800fd66:	e7fe      	b.n	800fd66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd68:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <vTaskPlaceOnEventListRestricted+0x54>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3318      	adds	r3, #24
 800fd6e:	4619      	mov	r1, r3
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f7fe fa2e 	bl	800e1d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d002      	beq.n	800fd82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd82:	6879      	ldr	r1, [r7, #4]
 800fd84:	68b8      	ldr	r0, [r7, #8]
 800fd86:	f000 fb63 	bl	8010450 <prvAddCurrentTaskToDelayedList>
	}
 800fd8a:	bf00      	nop
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	200014e8 	.word	0x200014e8

0800fd98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10a      	bne.n	800fdc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb2:	f383 8811 	msr	BASEPRI, r3
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	f3bf 8f4f 	dsb	sy
 800fdbe:	60fb      	str	r3, [r7, #12]
}
 800fdc0:	bf00      	nop
 800fdc2:	e7fe      	b.n	800fdc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	3318      	adds	r3, #24
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fe fa5f 	bl	800e28c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdce:	4b1e      	ldr	r3, [pc, #120]	; (800fe48 <xTaskRemoveFromEventList+0xb0>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d11d      	bne.n	800fe12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	3304      	adds	r3, #4
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fe fa56 	bl	800e28c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde4:	4b19      	ldr	r3, [pc, #100]	; (800fe4c <xTaskRemoveFromEventList+0xb4>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d903      	bls.n	800fdf4 <xTaskRemoveFromEventList+0x5c>
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf0:	4a16      	ldr	r2, [pc, #88]	; (800fe4c <xTaskRemoveFromEventList+0xb4>)
 800fdf2:	6013      	str	r3, [r2, #0]
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	4413      	add	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	4a13      	ldr	r2, [pc, #76]	; (800fe50 <xTaskRemoveFromEventList+0xb8>)
 800fe02:	441a      	add	r2, r3
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	3304      	adds	r3, #4
 800fe08:	4619      	mov	r1, r3
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	f7fe f9e1 	bl	800e1d2 <vListInsertEnd>
 800fe10:	e005      	b.n	800fe1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	3318      	adds	r3, #24
 800fe16:	4619      	mov	r1, r3
 800fe18:	480e      	ldr	r0, [pc, #56]	; (800fe54 <xTaskRemoveFromEventList+0xbc>)
 800fe1a:	f7fe f9da 	bl	800e1d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe22:	4b0d      	ldr	r3, [pc, #52]	; (800fe58 <xTaskRemoveFromEventList+0xc0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d905      	bls.n	800fe38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe30:	4b0a      	ldr	r3, [pc, #40]	; (800fe5c <xTaskRemoveFromEventList+0xc4>)
 800fe32:	2201      	movs	r2, #1
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	e001      	b.n	800fe3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe3c:	697b      	ldr	r3, [r7, #20]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3718      	adds	r7, #24
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	200019e4 	.word	0x200019e4
 800fe4c:	200019c4 	.word	0x200019c4
 800fe50:	200014ec 	.word	0x200014ec
 800fe54:	2000197c 	.word	0x2000197c
 800fe58:	200014e8 	.word	0x200014e8
 800fe5c:	200019d0 	.word	0x200019d0

0800fe60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe68:	4b06      	ldr	r3, [pc, #24]	; (800fe84 <vTaskInternalSetTimeOutState+0x24>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe70:	4b05      	ldr	r3, [pc, #20]	; (800fe88 <vTaskInternalSetTimeOutState+0x28>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	605a      	str	r2, [r3, #4]
}
 800fe78:	bf00      	nop
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	200019d4 	.word	0x200019d4
 800fe88:	200019c0 	.word	0x200019c0

0800fe8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10a      	bne.n	800feb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fe9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea0:	f383 8811 	msr	BASEPRI, r3
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	f3bf 8f4f 	dsb	sy
 800feac:	613b      	str	r3, [r7, #16]
}
 800feae:	bf00      	nop
 800feb0:	e7fe      	b.n	800feb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10a      	bne.n	800fece <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800feb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febc:	f383 8811 	msr	BASEPRI, r3
 800fec0:	f3bf 8f6f 	isb	sy
 800fec4:	f3bf 8f4f 	dsb	sy
 800fec8:	60fb      	str	r3, [r7, #12]
}
 800feca:	bf00      	nop
 800fecc:	e7fe      	b.n	800fecc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fece:	f000 ff91 	bl	8010df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fed2:	4b1d      	ldr	r3, [pc, #116]	; (800ff48 <xTaskCheckForTimeOut+0xbc>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	69ba      	ldr	r2, [r7, #24]
 800fede:	1ad3      	subs	r3, r2, r3
 800fee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800feea:	d102      	bne.n	800fef2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800feec:	2300      	movs	r3, #0
 800feee:	61fb      	str	r3, [r7, #28]
 800fef0:	e023      	b.n	800ff3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <xTaskCheckForTimeOut+0xc0>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d007      	beq.n	800ff0e <xTaskCheckForTimeOut+0x82>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	69ba      	ldr	r2, [r7, #24]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d302      	bcc.n	800ff0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	61fb      	str	r3, [r7, #28]
 800ff0c:	e015      	b.n	800ff3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	697a      	ldr	r2, [r7, #20]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d20b      	bcs.n	800ff30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	1ad2      	subs	r2, r2, r3
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff ff9b 	bl	800fe60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	61fb      	str	r3, [r7, #28]
 800ff2e:	e004      	b.n	800ff3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	2200      	movs	r2, #0
 800ff34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff36:	2301      	movs	r3, #1
 800ff38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff3a:	f000 ff8b 	bl	8010e54 <vPortExitCritical>

	return xReturn;
 800ff3e:	69fb      	ldr	r3, [r7, #28]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3720      	adds	r7, #32
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	200019c0 	.word	0x200019c0
 800ff4c:	200019d4 	.word	0x200019d4

0800ff50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff50:	b480      	push	{r7}
 800ff52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff54:	4b03      	ldr	r3, [pc, #12]	; (800ff64 <vTaskMissedYield+0x14>)
 800ff56:	2201      	movs	r2, #1
 800ff58:	601a      	str	r2, [r3, #0]
}
 800ff5a:	bf00      	nop
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	200019d0 	.word	0x200019d0

0800ff68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff70:	f000 f852 	bl	8010018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff74:	4b06      	ldr	r3, [pc, #24]	; (800ff90 <prvIdleTask+0x28>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d9f9      	bls.n	800ff70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff7c:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <prvIdleTask+0x2c>)
 800ff7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff82:	601a      	str	r2, [r3, #0]
 800ff84:	f3bf 8f4f 	dsb	sy
 800ff88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff8c:	e7f0      	b.n	800ff70 <prvIdleTask+0x8>
 800ff8e:	bf00      	nop
 800ff90:	200014ec 	.word	0x200014ec
 800ff94:	e000ed04 	.word	0xe000ed04

0800ff98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	607b      	str	r3, [r7, #4]
 800ffa2:	e00c      	b.n	800ffbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4a12      	ldr	r2, [pc, #72]	; (800fff8 <prvInitialiseTaskLists+0x60>)
 800ffb0:	4413      	add	r3, r2
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fe f8e0 	bl	800e178 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	607b      	str	r3, [r7, #4]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b37      	cmp	r3, #55	; 0x37
 800ffc2:	d9ef      	bls.n	800ffa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffc4:	480d      	ldr	r0, [pc, #52]	; (800fffc <prvInitialiseTaskLists+0x64>)
 800ffc6:	f7fe f8d7 	bl	800e178 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffca:	480d      	ldr	r0, [pc, #52]	; (8010000 <prvInitialiseTaskLists+0x68>)
 800ffcc:	f7fe f8d4 	bl	800e178 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffd0:	480c      	ldr	r0, [pc, #48]	; (8010004 <prvInitialiseTaskLists+0x6c>)
 800ffd2:	f7fe f8d1 	bl	800e178 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffd6:	480c      	ldr	r0, [pc, #48]	; (8010008 <prvInitialiseTaskLists+0x70>)
 800ffd8:	f7fe f8ce 	bl	800e178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ffdc:	480b      	ldr	r0, [pc, #44]	; (801000c <prvInitialiseTaskLists+0x74>)
 800ffde:	f7fe f8cb 	bl	800e178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ffe2:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <prvInitialiseTaskLists+0x78>)
 800ffe4:	4a05      	ldr	r2, [pc, #20]	; (800fffc <prvInitialiseTaskLists+0x64>)
 800ffe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ffe8:	4b0a      	ldr	r3, [pc, #40]	; (8010014 <prvInitialiseTaskLists+0x7c>)
 800ffea:	4a05      	ldr	r2, [pc, #20]	; (8010000 <prvInitialiseTaskLists+0x68>)
 800ffec:	601a      	str	r2, [r3, #0]
}
 800ffee:	bf00      	nop
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	200014ec 	.word	0x200014ec
 800fffc:	2000194c 	.word	0x2000194c
 8010000:	20001960 	.word	0x20001960
 8010004:	2000197c 	.word	0x2000197c
 8010008:	20001990 	.word	0x20001990
 801000c:	200019a8 	.word	0x200019a8
 8010010:	20001974 	.word	0x20001974
 8010014:	20001978 	.word	0x20001978

08010018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801001e:	e019      	b.n	8010054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010020:	f000 fee8 	bl	8010df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010024:	4b10      	ldr	r3, [pc, #64]	; (8010068 <prvCheckTasksWaitingTermination+0x50>)
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	3304      	adds	r3, #4
 8010030:	4618      	mov	r0, r3
 8010032:	f7fe f92b 	bl	800e28c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010036:	4b0d      	ldr	r3, [pc, #52]	; (801006c <prvCheckTasksWaitingTermination+0x54>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	3b01      	subs	r3, #1
 801003c:	4a0b      	ldr	r2, [pc, #44]	; (801006c <prvCheckTasksWaitingTermination+0x54>)
 801003e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010040:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <prvCheckTasksWaitingTermination+0x58>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	3b01      	subs	r3, #1
 8010046:	4a0a      	ldr	r2, [pc, #40]	; (8010070 <prvCheckTasksWaitingTermination+0x58>)
 8010048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801004a:	f000 ff03 	bl	8010e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f810 	bl	8010074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010054:	4b06      	ldr	r3, [pc, #24]	; (8010070 <prvCheckTasksWaitingTermination+0x58>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1e1      	bne.n	8010020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801005c:	bf00      	nop
 801005e:	bf00      	nop
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20001990 	.word	0x20001990
 801006c:	200019bc 	.word	0x200019bc
 8010070:	200019a4 	.word	0x200019a4

08010074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	3354      	adds	r3, #84	; 0x54
 8010080:	4618      	mov	r0, r3
 8010082:	f002 fa19 	bl	80124b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801008c:	2b00      	cmp	r3, #0
 801008e:	d108      	bne.n	80100a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010094:	4618      	mov	r0, r3
 8010096:	f001 f89b 	bl	80111d0 <vPortFree>
				vPortFree( pxTCB );
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f001 f898 	bl	80111d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80100a0:	e018      	b.n	80100d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d103      	bne.n	80100b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f001 f88f 	bl	80111d0 <vPortFree>
	}
 80100b2:	e00f      	b.n	80100d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d00a      	beq.n	80100d4 <prvDeleteTCB+0x60>
	__asm volatile
 80100be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	60fb      	str	r3, [r7, #12]
}
 80100d0:	bf00      	nop
 80100d2:	e7fe      	b.n	80100d2 <prvDeleteTCB+0x5e>
	}
 80100d4:	bf00      	nop
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100e2:	4b0c      	ldr	r3, [pc, #48]	; (8010114 <prvResetNextTaskUnblockTime+0x38>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d104      	bne.n	80100f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80100ec:	4b0a      	ldr	r3, [pc, #40]	; (8010118 <prvResetNextTaskUnblockTime+0x3c>)
 80100ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80100f4:	e008      	b.n	8010108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f6:	4b07      	ldr	r3, [pc, #28]	; (8010114 <prvResetNextTaskUnblockTime+0x38>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	4a04      	ldr	r2, [pc, #16]	; (8010118 <prvResetNextTaskUnblockTime+0x3c>)
 8010106:	6013      	str	r3, [r2, #0]
}
 8010108:	bf00      	nop
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	20001974 	.word	0x20001974
 8010118:	200019dc 	.word	0x200019dc

0801011c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010122:	4b05      	ldr	r3, [pc, #20]	; (8010138 <xTaskGetCurrentTaskHandle+0x1c>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010128:	687b      	ldr	r3, [r7, #4]
	}
 801012a:	4618      	mov	r0, r3
 801012c:	370c      	adds	r7, #12
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	200014e8 	.word	0x200014e8

0801013c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <xTaskGetSchedulerState+0x34>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d102      	bne.n	8010150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801014a:	2301      	movs	r3, #1
 801014c:	607b      	str	r3, [r7, #4]
 801014e:	e008      	b.n	8010162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010150:	4b08      	ldr	r3, [pc, #32]	; (8010174 <xTaskGetSchedulerState+0x38>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d102      	bne.n	801015e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010158:	2302      	movs	r3, #2
 801015a:	607b      	str	r3, [r7, #4]
 801015c:	e001      	b.n	8010162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801015e:	2300      	movs	r3, #0
 8010160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010162:	687b      	ldr	r3, [r7, #4]
	}
 8010164:	4618      	mov	r0, r3
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	200019c8 	.word	0x200019c8
 8010174:	200019e4 	.word	0x200019e4

08010178 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010184:	2300      	movs	r3, #0
 8010186:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d051      	beq.n	8010232 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010192:	4b2a      	ldr	r3, [pc, #168]	; (801023c <xTaskPriorityInherit+0xc4>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010198:	429a      	cmp	r2, r3
 801019a:	d241      	bcs.n	8010220 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	db06      	blt.n	80101b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101a4:	4b25      	ldr	r3, [pc, #148]	; (801023c <xTaskPriorityInherit+0xc4>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	6959      	ldr	r1, [r3, #20]
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ba:	4613      	mov	r3, r2
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4413      	add	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4a1f      	ldr	r2, [pc, #124]	; (8010240 <xTaskPriorityInherit+0xc8>)
 80101c4:	4413      	add	r3, r2
 80101c6:	4299      	cmp	r1, r3
 80101c8:	d122      	bne.n	8010210 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	3304      	adds	r3, #4
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe f85c 	bl	800e28c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80101d4:	4b19      	ldr	r3, [pc, #100]	; (801023c <xTaskPriorityInherit+0xc4>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e2:	4b18      	ldr	r3, [pc, #96]	; (8010244 <xTaskPriorityInherit+0xcc>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d903      	bls.n	80101f2 <xTaskPriorityInherit+0x7a>
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ee:	4a15      	ldr	r2, [pc, #84]	; (8010244 <xTaskPriorityInherit+0xcc>)
 80101f0:	6013      	str	r3, [r2, #0]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f6:	4613      	mov	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	4413      	add	r3, r2
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4a10      	ldr	r2, [pc, #64]	; (8010240 <xTaskPriorityInherit+0xc8>)
 8010200:	441a      	add	r2, r3
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	3304      	adds	r3, #4
 8010206:	4619      	mov	r1, r3
 8010208:	4610      	mov	r0, r2
 801020a:	f7fd ffe2 	bl	800e1d2 <vListInsertEnd>
 801020e:	e004      	b.n	801021a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010210:	4b0a      	ldr	r3, [pc, #40]	; (801023c <xTaskPriorityInherit+0xc4>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801021a:	2301      	movs	r3, #1
 801021c:	60fb      	str	r3, [r7, #12]
 801021e:	e008      	b.n	8010232 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010224:	4b05      	ldr	r3, [pc, #20]	; (801023c <xTaskPriorityInherit+0xc4>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022a:	429a      	cmp	r2, r3
 801022c:	d201      	bcs.n	8010232 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801022e:	2301      	movs	r3, #1
 8010230:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010232:	68fb      	ldr	r3, [r7, #12]
	}
 8010234:	4618      	mov	r0, r3
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	200014e8 	.word	0x200014e8
 8010240:	200014ec 	.word	0x200014ec
 8010244:	200019c4 	.word	0x200019c4

08010248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010248:	b580      	push	{r7, lr}
 801024a:	b086      	sub	sp, #24
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010254:	2300      	movs	r3, #0
 8010256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d056      	beq.n	801030c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801025e:	4b2e      	ldr	r3, [pc, #184]	; (8010318 <xTaskPriorityDisinherit+0xd0>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	429a      	cmp	r2, r3
 8010266:	d00a      	beq.n	801027e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026c:	f383 8811 	msr	BASEPRI, r3
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	60fb      	str	r3, [r7, #12]
}
 801027a:	bf00      	nop
 801027c:	e7fe      	b.n	801027c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010282:	2b00      	cmp	r3, #0
 8010284:	d10a      	bne.n	801029c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	60bb      	str	r3, [r7, #8]
}
 8010298:	bf00      	nop
 801029a:	e7fe      	b.n	801029a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102a0:	1e5a      	subs	r2, r3, #1
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d02c      	beq.n	801030c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d128      	bne.n	801030c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	3304      	adds	r3, #4
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fd ffe4 	bl	800e28c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102dc:	4b0f      	ldr	r3, [pc, #60]	; (801031c <xTaskPriorityDisinherit+0xd4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d903      	bls.n	80102ec <xTaskPriorityDisinherit+0xa4>
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e8:	4a0c      	ldr	r2, [pc, #48]	; (801031c <xTaskPriorityDisinherit+0xd4>)
 80102ea:	6013      	str	r3, [r2, #0]
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f0:	4613      	mov	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	4413      	add	r3, r2
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	4a09      	ldr	r2, [pc, #36]	; (8010320 <xTaskPriorityDisinherit+0xd8>)
 80102fa:	441a      	add	r2, r3
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	3304      	adds	r3, #4
 8010300:	4619      	mov	r1, r3
 8010302:	4610      	mov	r0, r2
 8010304:	f7fd ff65 	bl	800e1d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010308:	2301      	movs	r3, #1
 801030a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801030c:	697b      	ldr	r3, [r7, #20]
	}
 801030e:	4618      	mov	r0, r3
 8010310:	3718      	adds	r7, #24
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	200014e8 	.word	0x200014e8
 801031c:	200019c4 	.word	0x200019c4
 8010320:	200014ec 	.word	0x200014ec

08010324 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010324:	b580      	push	{r7, lr}
 8010326:	b088      	sub	sp, #32
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010332:	2301      	movs	r3, #1
 8010334:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d06a      	beq.n	8010412 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10a      	bne.n	801035a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	60fb      	str	r3, [r7, #12]
}
 8010356:	bf00      	nop
 8010358:	e7fe      	b.n	8010358 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801035e:	683a      	ldr	r2, [r7, #0]
 8010360:	429a      	cmp	r2, r3
 8010362:	d902      	bls.n	801036a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	61fb      	str	r3, [r7, #28]
 8010368:	e002      	b.n	8010370 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801036e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010374:	69fa      	ldr	r2, [r7, #28]
 8010376:	429a      	cmp	r2, r3
 8010378:	d04b      	beq.n	8010412 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801037e:	697a      	ldr	r2, [r7, #20]
 8010380:	429a      	cmp	r2, r3
 8010382:	d146      	bne.n	8010412 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010384:	4b25      	ldr	r3, [pc, #148]	; (801041c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	429a      	cmp	r2, r3
 801038c:	d10a      	bne.n	80103a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	60bb      	str	r3, [r7, #8]
}
 80103a0:	bf00      	nop
 80103a2:	e7fe      	b.n	80103a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80103aa:	69bb      	ldr	r3, [r7, #24]
 80103ac:	69fa      	ldr	r2, [r7, #28]
 80103ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	699b      	ldr	r3, [r3, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	db04      	blt.n	80103c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	6959      	ldr	r1, [r3, #20]
 80103c6:	693a      	ldr	r2, [r7, #16]
 80103c8:	4613      	mov	r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	4413      	add	r3, r2
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	4a13      	ldr	r2, [pc, #76]	; (8010420 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80103d2:	4413      	add	r3, r2
 80103d4:	4299      	cmp	r1, r3
 80103d6:	d11c      	bne.n	8010412 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	3304      	adds	r3, #4
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd ff55 	bl	800e28c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e6:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d903      	bls.n	80103f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f2:	4a0c      	ldr	r2, [pc, #48]	; (8010424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103fa:	4613      	mov	r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	4413      	add	r3, r2
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4a07      	ldr	r2, [pc, #28]	; (8010420 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010404:	441a      	add	r2, r3
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	3304      	adds	r3, #4
 801040a:	4619      	mov	r1, r3
 801040c:	4610      	mov	r0, r2
 801040e:	f7fd fee0 	bl	800e1d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010412:	bf00      	nop
 8010414:	3720      	adds	r7, #32
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	200014e8 	.word	0x200014e8
 8010420:	200014ec 	.word	0x200014ec
 8010424:	200019c4 	.word	0x200019c4

08010428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010428:	b480      	push	{r7}
 801042a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801042c:	4b07      	ldr	r3, [pc, #28]	; (801044c <pvTaskIncrementMutexHeldCount+0x24>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d004      	beq.n	801043e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010434:	4b05      	ldr	r3, [pc, #20]	; (801044c <pvTaskIncrementMutexHeldCount+0x24>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801043a:	3201      	adds	r2, #1
 801043c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801043e:	4b03      	ldr	r3, [pc, #12]	; (801044c <pvTaskIncrementMutexHeldCount+0x24>)
 8010440:	681b      	ldr	r3, [r3, #0]
	}
 8010442:	4618      	mov	r0, r3
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr
 801044c:	200014e8 	.word	0x200014e8

08010450 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801045a:	4b21      	ldr	r3, [pc, #132]	; (80104e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010460:	4b20      	ldr	r3, [pc, #128]	; (80104e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3304      	adds	r3, #4
 8010466:	4618      	mov	r0, r3
 8010468:	f7fd ff10 	bl	800e28c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010472:	d10a      	bne.n	801048a <prvAddCurrentTaskToDelayedList+0x3a>
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d007      	beq.n	801048a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801047a:	4b1a      	ldr	r3, [pc, #104]	; (80104e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3304      	adds	r3, #4
 8010480:	4619      	mov	r1, r3
 8010482:	4819      	ldr	r0, [pc, #100]	; (80104e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010484:	f7fd fea5 	bl	800e1d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010488:	e026      	b.n	80104d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4413      	add	r3, r2
 8010490:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010492:	4b14      	ldr	r3, [pc, #80]	; (80104e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	68ba      	ldr	r2, [r7, #8]
 8010498:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d209      	bcs.n	80104b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104a2:	4b12      	ldr	r3, [pc, #72]	; (80104ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	4b0f      	ldr	r3, [pc, #60]	; (80104e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3304      	adds	r3, #4
 80104ac:	4619      	mov	r1, r3
 80104ae:	4610      	mov	r0, r2
 80104b0:	f7fd feb3 	bl	800e21a <vListInsert>
}
 80104b4:	e010      	b.n	80104d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104b6:	4b0e      	ldr	r3, [pc, #56]	; (80104f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	4b0a      	ldr	r3, [pc, #40]	; (80104e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	3304      	adds	r3, #4
 80104c0:	4619      	mov	r1, r3
 80104c2:	4610      	mov	r0, r2
 80104c4:	f7fd fea9 	bl	800e21a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80104c8:	4b0a      	ldr	r3, [pc, #40]	; (80104f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68ba      	ldr	r2, [r7, #8]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d202      	bcs.n	80104d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80104d2:	4a08      	ldr	r2, [pc, #32]	; (80104f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	6013      	str	r3, [r2, #0]
}
 80104d8:	bf00      	nop
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	200019c0 	.word	0x200019c0
 80104e4:	200014e8 	.word	0x200014e8
 80104e8:	200019a8 	.word	0x200019a8
 80104ec:	20001978 	.word	0x20001978
 80104f0:	20001974 	.word	0x20001974
 80104f4:	200019dc 	.word	0x200019dc

080104f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08a      	sub	sp, #40	; 0x28
 80104fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80104fe:	2300      	movs	r3, #0
 8010500:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010502:	f000 fb07 	bl	8010b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010506:	4b1c      	ldr	r3, [pc, #112]	; (8010578 <xTimerCreateTimerTask+0x80>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d021      	beq.n	8010552 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010512:	2300      	movs	r3, #0
 8010514:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010516:	1d3a      	adds	r2, r7, #4
 8010518:	f107 0108 	add.w	r1, r7, #8
 801051c:	f107 030c 	add.w	r3, r7, #12
 8010520:	4618      	mov	r0, r3
 8010522:	f7fd fe0f 	bl	800e144 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010526:	6879      	ldr	r1, [r7, #4]
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	9202      	str	r2, [sp, #8]
 801052e:	9301      	str	r3, [sp, #4]
 8010530:	2302      	movs	r3, #2
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	2300      	movs	r3, #0
 8010536:	460a      	mov	r2, r1
 8010538:	4910      	ldr	r1, [pc, #64]	; (801057c <xTimerCreateTimerTask+0x84>)
 801053a:	4811      	ldr	r0, [pc, #68]	; (8010580 <xTimerCreateTimerTask+0x88>)
 801053c:	f7fe ff94 	bl	800f468 <xTaskCreateStatic>
 8010540:	4603      	mov	r3, r0
 8010542:	4a10      	ldr	r2, [pc, #64]	; (8010584 <xTimerCreateTimerTask+0x8c>)
 8010544:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010546:	4b0f      	ldr	r3, [pc, #60]	; (8010584 <xTimerCreateTimerTask+0x8c>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801054e:	2301      	movs	r3, #1
 8010550:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d10a      	bne.n	801056e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055c:	f383 8811 	msr	BASEPRI, r3
 8010560:	f3bf 8f6f 	isb	sy
 8010564:	f3bf 8f4f 	dsb	sy
 8010568:	613b      	str	r3, [r7, #16]
}
 801056a:	bf00      	nop
 801056c:	e7fe      	b.n	801056c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801056e:	697b      	ldr	r3, [r7, #20]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	20001a18 	.word	0x20001a18
 801057c:	08015f68 	.word	0x08015f68
 8010580:	080106bd 	.word	0x080106bd
 8010584:	20001a1c 	.word	0x20001a1c

08010588 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b08a      	sub	sp, #40	; 0x28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010596:	2300      	movs	r3, #0
 8010598:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d10a      	bne.n	80105b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80105a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a4:	f383 8811 	msr	BASEPRI, r3
 80105a8:	f3bf 8f6f 	isb	sy
 80105ac:	f3bf 8f4f 	dsb	sy
 80105b0:	623b      	str	r3, [r7, #32]
}
 80105b2:	bf00      	nop
 80105b4:	e7fe      	b.n	80105b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80105b6:	4b1a      	ldr	r3, [pc, #104]	; (8010620 <xTimerGenericCommand+0x98>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d02a      	beq.n	8010614 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2b05      	cmp	r3, #5
 80105ce:	dc18      	bgt.n	8010602 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80105d0:	f7ff fdb4 	bl	801013c <xTaskGetSchedulerState>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	d109      	bne.n	80105ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105da:	4b11      	ldr	r3, [pc, #68]	; (8010620 <xTimerGenericCommand+0x98>)
 80105dc:	6818      	ldr	r0, [r3, #0]
 80105de:	f107 0110 	add.w	r1, r7, #16
 80105e2:	2300      	movs	r3, #0
 80105e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e6:	f7fe f8d9 	bl	800e79c <xQueueGenericSend>
 80105ea:	6278      	str	r0, [r7, #36]	; 0x24
 80105ec:	e012      	b.n	8010614 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80105ee:	4b0c      	ldr	r3, [pc, #48]	; (8010620 <xTimerGenericCommand+0x98>)
 80105f0:	6818      	ldr	r0, [r3, #0]
 80105f2:	f107 0110 	add.w	r1, r7, #16
 80105f6:	2300      	movs	r3, #0
 80105f8:	2200      	movs	r2, #0
 80105fa:	f7fe f8cf 	bl	800e79c <xQueueGenericSend>
 80105fe:	6278      	str	r0, [r7, #36]	; 0x24
 8010600:	e008      	b.n	8010614 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010602:	4b07      	ldr	r3, [pc, #28]	; (8010620 <xTimerGenericCommand+0x98>)
 8010604:	6818      	ldr	r0, [r3, #0]
 8010606:	f107 0110 	add.w	r1, r7, #16
 801060a:	2300      	movs	r3, #0
 801060c:	683a      	ldr	r2, [r7, #0]
 801060e:	f7fe f9c3 	bl	800e998 <xQueueGenericSendFromISR>
 8010612:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010616:	4618      	mov	r0, r3
 8010618:	3728      	adds	r7, #40	; 0x28
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	20001a18 	.word	0x20001a18

08010624 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b088      	sub	sp, #32
 8010628:	af02      	add	r7, sp, #8
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801062e:	4b22      	ldr	r3, [pc, #136]	; (80106b8 <prvProcessExpiredTimer+0x94>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	3304      	adds	r3, #4
 801063c:	4618      	mov	r0, r3
 801063e:	f7fd fe25 	bl	800e28c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010648:	f003 0304 	and.w	r3, r3, #4
 801064c:	2b00      	cmp	r3, #0
 801064e:	d022      	beq.n	8010696 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	699a      	ldr	r2, [r3, #24]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	18d1      	adds	r1, r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	6978      	ldr	r0, [r7, #20]
 801065e:	f000 f8d1 	bl	8010804 <prvInsertTimerInActiveList>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01f      	beq.n	80106a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010668:	2300      	movs	r3, #0
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	2300      	movs	r3, #0
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	2100      	movs	r1, #0
 8010672:	6978      	ldr	r0, [r7, #20]
 8010674:	f7ff ff88 	bl	8010588 <xTimerGenericCommand>
 8010678:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d113      	bne.n	80106a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010684:	f383 8811 	msr	BASEPRI, r3
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	f3bf 8f4f 	dsb	sy
 8010690:	60fb      	str	r3, [r7, #12]
}
 8010692:	bf00      	nop
 8010694:	e7fe      	b.n	8010694 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801069c:	f023 0301 	bic.w	r3, r3, #1
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	6a1b      	ldr	r3, [r3, #32]
 80106ac:	6978      	ldr	r0, [r7, #20]
 80106ae:	4798      	blx	r3
}
 80106b0:	bf00      	nop
 80106b2:	3718      	adds	r7, #24
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	20001a10 	.word	0x20001a10

080106bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106c4:	f107 0308 	add.w	r3, r7, #8
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 f857 	bl	801077c <prvGetNextExpireTime>
 80106ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	4619      	mov	r1, r3
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 f803 	bl	80106e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80106da:	f000 f8d5 	bl	8010888 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106de:	e7f1      	b.n	80106c4 <prvTimerTask+0x8>

080106e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80106ea:	f7ff f919 	bl	800f920 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106ee:	f107 0308 	add.w	r3, r7, #8
 80106f2:	4618      	mov	r0, r3
 80106f4:	f000 f866 	bl	80107c4 <prvSampleTimeNow>
 80106f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d130      	bne.n	8010762 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d10a      	bne.n	801071c <prvProcessTimerOrBlockTask+0x3c>
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	429a      	cmp	r2, r3
 801070c:	d806      	bhi.n	801071c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801070e:	f7ff f915 	bl	800f93c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010712:	68f9      	ldr	r1, [r7, #12]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ff85 	bl	8010624 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801071a:	e024      	b.n	8010766 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d008      	beq.n	8010734 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010722:	4b13      	ldr	r3, [pc, #76]	; (8010770 <prvProcessTimerOrBlockTask+0x90>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d101      	bne.n	8010730 <prvProcessTimerOrBlockTask+0x50>
 801072c:	2301      	movs	r3, #1
 801072e:	e000      	b.n	8010732 <prvProcessTimerOrBlockTask+0x52>
 8010730:	2300      	movs	r3, #0
 8010732:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010734:	4b0f      	ldr	r3, [pc, #60]	; (8010774 <prvProcessTimerOrBlockTask+0x94>)
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	683a      	ldr	r2, [r7, #0]
 8010740:	4619      	mov	r1, r3
 8010742:	f7fe fe5d 	bl	800f400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010746:	f7ff f8f9 	bl	800f93c <xTaskResumeAll>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10a      	bne.n	8010766 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010750:	4b09      	ldr	r3, [pc, #36]	; (8010778 <prvProcessTimerOrBlockTask+0x98>)
 8010752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	f3bf 8f6f 	isb	sy
}
 8010760:	e001      	b.n	8010766 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010762:	f7ff f8eb 	bl	800f93c <xTaskResumeAll>
}
 8010766:	bf00      	nop
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20001a14 	.word	0x20001a14
 8010774:	20001a18 	.word	0x20001a18
 8010778:	e000ed04 	.word	0xe000ed04

0801077c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801077c:	b480      	push	{r7}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010784:	4b0e      	ldr	r3, [pc, #56]	; (80107c0 <prvGetNextExpireTime+0x44>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <prvGetNextExpireTime+0x16>
 801078e:	2201      	movs	r2, #1
 8010790:	e000      	b.n	8010794 <prvGetNextExpireTime+0x18>
 8010792:	2200      	movs	r2, #0
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d105      	bne.n	80107ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80107a0:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <prvGetNextExpireTime+0x44>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	e001      	b.n	80107b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80107ac:	2300      	movs	r3, #0
 80107ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80107b0:	68fb      	ldr	r3, [r7, #12]
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3714      	adds	r7, #20
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	20001a10 	.word	0x20001a10

080107c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80107cc:	f7ff f954 	bl	800fa78 <xTaskGetTickCount>
 80107d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80107d2:	4b0b      	ldr	r3, [pc, #44]	; (8010800 <prvSampleTimeNow+0x3c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d205      	bcs.n	80107e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80107dc:	f000 f936 	bl	8010a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e002      	b.n	80107ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80107ee:	4a04      	ldr	r2, [pc, #16]	; (8010800 <prvSampleTimeNow+0x3c>)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80107f4:	68fb      	ldr	r3, [r7, #12]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20001a20 	.word	0x20001a20

08010804 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
 8010810:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010812:	2300      	movs	r3, #0
 8010814:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	429a      	cmp	r2, r3
 8010828:	d812      	bhi.n	8010850 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	1ad2      	subs	r2, r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	699b      	ldr	r3, [r3, #24]
 8010834:	429a      	cmp	r2, r3
 8010836:	d302      	bcc.n	801083e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	617b      	str	r3, [r7, #20]
 801083c:	e01b      	b.n	8010876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801083e:	4b10      	ldr	r3, [pc, #64]	; (8010880 <prvInsertTimerInActiveList+0x7c>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3304      	adds	r3, #4
 8010846:	4619      	mov	r1, r3
 8010848:	4610      	mov	r0, r2
 801084a:	f7fd fce6 	bl	800e21a <vListInsert>
 801084e:	e012      	b.n	8010876 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	429a      	cmp	r2, r3
 8010856:	d206      	bcs.n	8010866 <prvInsertTimerInActiveList+0x62>
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	429a      	cmp	r2, r3
 801085e:	d302      	bcc.n	8010866 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010860:	2301      	movs	r3, #1
 8010862:	617b      	str	r3, [r7, #20]
 8010864:	e007      	b.n	8010876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010866:	4b07      	ldr	r3, [pc, #28]	; (8010884 <prvInsertTimerInActiveList+0x80>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	3304      	adds	r3, #4
 801086e:	4619      	mov	r1, r3
 8010870:	4610      	mov	r0, r2
 8010872:	f7fd fcd2 	bl	800e21a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010876:	697b      	ldr	r3, [r7, #20]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3718      	adds	r7, #24
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	20001a14 	.word	0x20001a14
 8010884:	20001a10 	.word	0x20001a10

08010888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08e      	sub	sp, #56	; 0x38
 801088c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801088e:	e0ca      	b.n	8010a26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	da18      	bge.n	80108c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010896:	1d3b      	adds	r3, r7, #4
 8010898:	3304      	adds	r3, #4
 801089a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d10a      	bne.n	80108b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80108a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a6:	f383 8811 	msr	BASEPRI, r3
 80108aa:	f3bf 8f6f 	isb	sy
 80108ae:	f3bf 8f4f 	dsb	sy
 80108b2:	61fb      	str	r3, [r7, #28]
}
 80108b4:	bf00      	nop
 80108b6:	e7fe      	b.n	80108b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80108b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108be:	6850      	ldr	r0, [r2, #4]
 80108c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108c2:	6892      	ldr	r2, [r2, #8]
 80108c4:	4611      	mov	r1, r2
 80108c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	f2c0 80aa 	blt.w	8010a24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80108d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d004      	beq.n	80108e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	3304      	adds	r3, #4
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fd fcd3 	bl	800e28c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108e6:	463b      	mov	r3, r7
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7ff ff6b 	bl	80107c4 <prvSampleTimeNow>
 80108ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b09      	cmp	r3, #9
 80108f4:	f200 8097 	bhi.w	8010a26 <prvProcessReceivedCommands+0x19e>
 80108f8:	a201      	add	r2, pc, #4	; (adr r2, 8010900 <prvProcessReceivedCommands+0x78>)
 80108fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108fe:	bf00      	nop
 8010900:	08010929 	.word	0x08010929
 8010904:	08010929 	.word	0x08010929
 8010908:	08010929 	.word	0x08010929
 801090c:	0801099d 	.word	0x0801099d
 8010910:	080109b1 	.word	0x080109b1
 8010914:	080109fb 	.word	0x080109fb
 8010918:	08010929 	.word	0x08010929
 801091c:	08010929 	.word	0x08010929
 8010920:	0801099d 	.word	0x0801099d
 8010924:	080109b1 	.word	0x080109b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801092e:	f043 0301 	orr.w	r3, r3, #1
 8010932:	b2da      	uxtb	r2, r3
 8010934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093e:	699b      	ldr	r3, [r3, #24]
 8010940:	18d1      	adds	r1, r2, r3
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010948:	f7ff ff5c 	bl	8010804 <prvInsertTimerInActiveList>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d069      	beq.n	8010a26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010958:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010960:	f003 0304 	and.w	r3, r3, #4
 8010964:	2b00      	cmp	r3, #0
 8010966:	d05e      	beq.n	8010a26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096c:	699b      	ldr	r3, [r3, #24]
 801096e:	441a      	add	r2, r3
 8010970:	2300      	movs	r3, #0
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	2300      	movs	r3, #0
 8010976:	2100      	movs	r1, #0
 8010978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801097a:	f7ff fe05 	bl	8010588 <xTimerGenericCommand>
 801097e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d14f      	bne.n	8010a26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098a:	f383 8811 	msr	BASEPRI, r3
 801098e:	f3bf 8f6f 	isb	sy
 8010992:	f3bf 8f4f 	dsb	sy
 8010996:	61bb      	str	r3, [r7, #24]
}
 8010998:	bf00      	nop
 801099a:	e7fe      	b.n	801099a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109a2:	f023 0301 	bic.w	r3, r3, #1
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80109ae:	e03a      	b.n	8010a26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80109b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109b6:	f043 0301 	orr.w	r3, r3, #1
 80109ba:	b2da      	uxtb	r2, r3
 80109bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80109c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ca:	699b      	ldr	r3, [r3, #24]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d10a      	bne.n	80109e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	617b      	str	r3, [r7, #20]
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e8:	699a      	ldr	r2, [r3, #24]
 80109ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ec:	18d1      	adds	r1, r2, r3
 80109ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109f4:	f7ff ff06 	bl	8010804 <prvInsertTimerInActiveList>
					break;
 80109f8:	e015      	b.n	8010a26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a00:	f003 0302 	and.w	r3, r3, #2
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d103      	bne.n	8010a10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a0a:	f000 fbe1 	bl	80111d0 <vPortFree>
 8010a0e:	e00a      	b.n	8010a26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a16:	f023 0301 	bic.w	r3, r3, #1
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010a22:	e000      	b.n	8010a26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010a24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a26:	4b08      	ldr	r3, [pc, #32]	; (8010a48 <prvProcessReceivedCommands+0x1c0>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	1d39      	adds	r1, r7, #4
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fe f8da 	bl	800ebe8 <xQueueReceive>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f47f af2a 	bne.w	8010890 <prvProcessReceivedCommands+0x8>
	}
}
 8010a3c:	bf00      	nop
 8010a3e:	bf00      	nop
 8010a40:	3730      	adds	r7, #48	; 0x30
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	20001a18 	.word	0x20001a18

08010a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b088      	sub	sp, #32
 8010a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a52:	e048      	b.n	8010ae6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a54:	4b2d      	ldr	r3, [pc, #180]	; (8010b0c <prvSwitchTimerLists+0xc0>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a5e:	4b2b      	ldr	r3, [pc, #172]	; (8010b0c <prvSwitchTimerLists+0xc0>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fd fc0d 	bl	800e28c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6a1b      	ldr	r3, [r3, #32]
 8010a76:	68f8      	ldr	r0, [r7, #12]
 8010a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a80:	f003 0304 	and.w	r3, r3, #4
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d02e      	beq.n	8010ae6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	699b      	ldr	r3, [r3, #24]
 8010a8c:	693a      	ldr	r2, [r7, #16]
 8010a8e:	4413      	add	r3, r2
 8010a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d90e      	bls.n	8010ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	68fa      	ldr	r2, [r7, #12]
 8010aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010aa6:	4b19      	ldr	r3, [pc, #100]	; (8010b0c <prvSwitchTimerLists+0xc0>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	3304      	adds	r3, #4
 8010aae:	4619      	mov	r1, r3
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	f7fd fbb2 	bl	800e21a <vListInsert>
 8010ab6:	e016      	b.n	8010ae6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ab8:	2300      	movs	r3, #0
 8010aba:	9300      	str	r3, [sp, #0]
 8010abc:	2300      	movs	r3, #0
 8010abe:	693a      	ldr	r2, [r7, #16]
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f7ff fd60 	bl	8010588 <xTimerGenericCommand>
 8010ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10a      	bne.n	8010ae6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad4:	f383 8811 	msr	BASEPRI, r3
 8010ad8:	f3bf 8f6f 	isb	sy
 8010adc:	f3bf 8f4f 	dsb	sy
 8010ae0:	603b      	str	r3, [r7, #0]
}
 8010ae2:	bf00      	nop
 8010ae4:	e7fe      	b.n	8010ae4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ae6:	4b09      	ldr	r3, [pc, #36]	; (8010b0c <prvSwitchTimerLists+0xc0>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d1b1      	bne.n	8010a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010af0:	4b06      	ldr	r3, [pc, #24]	; (8010b0c <prvSwitchTimerLists+0xc0>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010af6:	4b06      	ldr	r3, [pc, #24]	; (8010b10 <prvSwitchTimerLists+0xc4>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a04      	ldr	r2, [pc, #16]	; (8010b0c <prvSwitchTimerLists+0xc0>)
 8010afc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010afe:	4a04      	ldr	r2, [pc, #16]	; (8010b10 <prvSwitchTimerLists+0xc4>)
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	6013      	str	r3, [r2, #0]
}
 8010b04:	bf00      	nop
 8010b06:	3718      	adds	r7, #24
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	20001a10 	.word	0x20001a10
 8010b10:	20001a14 	.word	0x20001a14

08010b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010b1a:	f000 f96b 	bl	8010df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010b1e:	4b15      	ldr	r3, [pc, #84]	; (8010b74 <prvCheckForValidListAndQueue+0x60>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d120      	bne.n	8010b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010b26:	4814      	ldr	r0, [pc, #80]	; (8010b78 <prvCheckForValidListAndQueue+0x64>)
 8010b28:	f7fd fb26 	bl	800e178 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010b2c:	4813      	ldr	r0, [pc, #76]	; (8010b7c <prvCheckForValidListAndQueue+0x68>)
 8010b2e:	f7fd fb23 	bl	800e178 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010b32:	4b13      	ldr	r3, [pc, #76]	; (8010b80 <prvCheckForValidListAndQueue+0x6c>)
 8010b34:	4a10      	ldr	r2, [pc, #64]	; (8010b78 <prvCheckForValidListAndQueue+0x64>)
 8010b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010b38:	4b12      	ldr	r3, [pc, #72]	; (8010b84 <prvCheckForValidListAndQueue+0x70>)
 8010b3a:	4a10      	ldr	r2, [pc, #64]	; (8010b7c <prvCheckForValidListAndQueue+0x68>)
 8010b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b3e:	2300      	movs	r3, #0
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	4b11      	ldr	r3, [pc, #68]	; (8010b88 <prvCheckForValidListAndQueue+0x74>)
 8010b44:	4a11      	ldr	r2, [pc, #68]	; (8010b8c <prvCheckForValidListAndQueue+0x78>)
 8010b46:	2110      	movs	r1, #16
 8010b48:	200a      	movs	r0, #10
 8010b4a:	f7fd fc31 	bl	800e3b0 <xQueueGenericCreateStatic>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	4a08      	ldr	r2, [pc, #32]	; (8010b74 <prvCheckForValidListAndQueue+0x60>)
 8010b52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b54:	4b07      	ldr	r3, [pc, #28]	; (8010b74 <prvCheckForValidListAndQueue+0x60>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d005      	beq.n	8010b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b5c:	4b05      	ldr	r3, [pc, #20]	; (8010b74 <prvCheckForValidListAndQueue+0x60>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	490b      	ldr	r1, [pc, #44]	; (8010b90 <prvCheckForValidListAndQueue+0x7c>)
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fe fbf8 	bl	800f358 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b68:	f000 f974 	bl	8010e54 <vPortExitCritical>
}
 8010b6c:	bf00      	nop
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	20001a18 	.word	0x20001a18
 8010b78:	200019e8 	.word	0x200019e8
 8010b7c:	200019fc 	.word	0x200019fc
 8010b80:	20001a10 	.word	0x20001a10
 8010b84:	20001a14 	.word	0x20001a14
 8010b88:	20001ac4 	.word	0x20001ac4
 8010b8c:	20001a24 	.word	0x20001a24
 8010b90:	08015f70 	.word	0x08015f70

08010b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	3b04      	subs	r3, #4
 8010ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	3b04      	subs	r3, #4
 8010bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	f023 0201 	bic.w	r2, r3, #1
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	3b04      	subs	r3, #4
 8010bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bc4:	4a0c      	ldr	r2, [pc, #48]	; (8010bf8 <pxPortInitialiseStack+0x64>)
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	3b14      	subs	r3, #20
 8010bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	3b04      	subs	r3, #4
 8010bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f06f 0202 	mvn.w	r2, #2
 8010be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	3b20      	subs	r3, #32
 8010be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010bea:	68fb      	ldr	r3, [r7, #12]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr
 8010bf8:	08010bfd 	.word	0x08010bfd

08010bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b085      	sub	sp, #20
 8010c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c06:	4b12      	ldr	r3, [pc, #72]	; (8010c50 <prvTaskExitError+0x54>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c0e:	d00a      	beq.n	8010c26 <prvTaskExitError+0x2a>
	__asm volatile
 8010c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	60fb      	str	r3, [r7, #12]
}
 8010c22:	bf00      	nop
 8010c24:	e7fe      	b.n	8010c24 <prvTaskExitError+0x28>
	__asm volatile
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	60bb      	str	r3, [r7, #8]
}
 8010c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c3a:	bf00      	nop
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0fc      	beq.n	8010c3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c42:	bf00      	nop
 8010c44:	bf00      	nop
 8010c46:	3714      	adds	r7, #20
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr
 8010c50:	2000000c 	.word	0x2000000c
	...

08010c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c60:	4b07      	ldr	r3, [pc, #28]	; (8010c80 <pxCurrentTCBConst2>)
 8010c62:	6819      	ldr	r1, [r3, #0]
 8010c64:	6808      	ldr	r0, [r1, #0]
 8010c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6a:	f380 8809 	msr	PSP, r0
 8010c6e:	f3bf 8f6f 	isb	sy
 8010c72:	f04f 0000 	mov.w	r0, #0
 8010c76:	f380 8811 	msr	BASEPRI, r0
 8010c7a:	4770      	bx	lr
 8010c7c:	f3af 8000 	nop.w

08010c80 <pxCurrentTCBConst2>:
 8010c80:	200014e8 	.word	0x200014e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c84:	bf00      	nop
 8010c86:	bf00      	nop

08010c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c88:	4808      	ldr	r0, [pc, #32]	; (8010cac <prvPortStartFirstTask+0x24>)
 8010c8a:	6800      	ldr	r0, [r0, #0]
 8010c8c:	6800      	ldr	r0, [r0, #0]
 8010c8e:	f380 8808 	msr	MSP, r0
 8010c92:	f04f 0000 	mov.w	r0, #0
 8010c96:	f380 8814 	msr	CONTROL, r0
 8010c9a:	b662      	cpsie	i
 8010c9c:	b661      	cpsie	f
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	df00      	svc	0
 8010ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010caa:	bf00      	nop
 8010cac:	e000ed08 	.word	0xe000ed08

08010cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010cb6:	4b46      	ldr	r3, [pc, #280]	; (8010dd0 <xPortStartScheduler+0x120>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4a46      	ldr	r2, [pc, #280]	; (8010dd4 <xPortStartScheduler+0x124>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d10a      	bne.n	8010cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	613b      	str	r3, [r7, #16]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010cd6:	4b3e      	ldr	r3, [pc, #248]	; (8010dd0 <xPortStartScheduler+0x120>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a3f      	ldr	r2, [pc, #252]	; (8010dd8 <xPortStartScheduler+0x128>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d10a      	bne.n	8010cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	60fb      	str	r3, [r7, #12]
}
 8010cf2:	bf00      	nop
 8010cf4:	e7fe      	b.n	8010cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cf6:	4b39      	ldr	r3, [pc, #228]	; (8010ddc <xPortStartScheduler+0x12c>)
 8010cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	22ff      	movs	r2, #255	; 0xff
 8010d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010d10:	78fb      	ldrb	r3, [r7, #3]
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010d18:	b2da      	uxtb	r2, r3
 8010d1a:	4b31      	ldr	r3, [pc, #196]	; (8010de0 <xPortStartScheduler+0x130>)
 8010d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010d1e:	4b31      	ldr	r3, [pc, #196]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d20:	2207      	movs	r2, #7
 8010d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d24:	e009      	b.n	8010d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010d26:	4b2f      	ldr	r3, [pc, #188]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	4a2d      	ldr	r2, [pc, #180]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d30:	78fb      	ldrb	r3, [r7, #3]
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d3a:	78fb      	ldrb	r3, [r7, #3]
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d42:	2b80      	cmp	r3, #128	; 0x80
 8010d44:	d0ef      	beq.n	8010d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d46:	4b27      	ldr	r3, [pc, #156]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f1c3 0307 	rsb	r3, r3, #7
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	d00a      	beq.n	8010d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	f383 8811 	msr	BASEPRI, r3
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	60bb      	str	r3, [r7, #8]
}
 8010d64:	bf00      	nop
 8010d66:	e7fe      	b.n	8010d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d68:	4b1e      	ldr	r3, [pc, #120]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	021b      	lsls	r3, r3, #8
 8010d6e:	4a1d      	ldr	r2, [pc, #116]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d72:	4b1c      	ldr	r3, [pc, #112]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d7a:	4a1a      	ldr	r2, [pc, #104]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d86:	4b18      	ldr	r3, [pc, #96]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a17      	ldr	r2, [pc, #92]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d92:	4b15      	ldr	r3, [pc, #84]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a14      	ldr	r2, [pc, #80]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d9e:	f000 f8dd 	bl	8010f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010da2:	4b12      	ldr	r3, [pc, #72]	; (8010dec <xPortStartScheduler+0x13c>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010da8:	f000 f8fc 	bl	8010fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <xPortStartScheduler+0x140>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a0f      	ldr	r2, [pc, #60]	; (8010df0 <xPortStartScheduler+0x140>)
 8010db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010db8:	f7ff ff66 	bl	8010c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010dbc:	f7fe ff38 	bl	800fc30 <vTaskSwitchContext>
	prvTaskExitError();
 8010dc0:	f7ff ff1c 	bl	8010bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3718      	adds	r7, #24
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	e000ed00 	.word	0xe000ed00
 8010dd4:	410fc271 	.word	0x410fc271
 8010dd8:	410fc270 	.word	0x410fc270
 8010ddc:	e000e400 	.word	0xe000e400
 8010de0:	20001b14 	.word	0x20001b14
 8010de4:	20001b18 	.word	0x20001b18
 8010de8:	e000ed20 	.word	0xe000ed20
 8010dec:	2000000c 	.word	0x2000000c
 8010df0:	e000ef34 	.word	0xe000ef34

08010df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
	__asm volatile
 8010dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfe:	f383 8811 	msr	BASEPRI, r3
 8010e02:	f3bf 8f6f 	isb	sy
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	607b      	str	r3, [r7, #4]
}
 8010e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010e0e:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <vPortEnterCritical+0x58>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	3301      	adds	r3, #1
 8010e14:	4a0d      	ldr	r2, [pc, #52]	; (8010e4c <vPortEnterCritical+0x58>)
 8010e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010e18:	4b0c      	ldr	r3, [pc, #48]	; (8010e4c <vPortEnterCritical+0x58>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d10f      	bne.n	8010e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010e20:	4b0b      	ldr	r3, [pc, #44]	; (8010e50 <vPortEnterCritical+0x5c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00a      	beq.n	8010e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8010e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	603b      	str	r3, [r7, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	e7fe      	b.n	8010e3e <vPortEnterCritical+0x4a>
	}
}
 8010e40:	bf00      	nop
 8010e42:	370c      	adds	r7, #12
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr
 8010e4c:	2000000c 	.word	0x2000000c
 8010e50:	e000ed04 	.word	0xe000ed04

08010e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e5a:	4b12      	ldr	r3, [pc, #72]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10a      	bne.n	8010e78 <vPortExitCritical+0x24>
	__asm volatile
 8010e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	607b      	str	r3, [r7, #4]
}
 8010e74:	bf00      	nop
 8010e76:	e7fe      	b.n	8010e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e78:	4b0a      	ldr	r3, [pc, #40]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	4a09      	ldr	r2, [pc, #36]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e82:	4b08      	ldr	r3, [pc, #32]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d105      	bne.n	8010e96 <vPortExitCritical+0x42>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	f383 8811 	msr	BASEPRI, r3
}
 8010e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e96:	bf00      	nop
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	2000000c 	.word	0x2000000c
	...

08010eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010eb0:	f3ef 8009 	mrs	r0, PSP
 8010eb4:	f3bf 8f6f 	isb	sy
 8010eb8:	4b15      	ldr	r3, [pc, #84]	; (8010f10 <pxCurrentTCBConst>)
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	f01e 0f10 	tst.w	lr, #16
 8010ec0:	bf08      	it	eq
 8010ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eca:	6010      	str	r0, [r2, #0]
 8010ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ed4:	f380 8811 	msr	BASEPRI, r0
 8010ed8:	f3bf 8f4f 	dsb	sy
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f7fe fea6 	bl	800fc30 <vTaskSwitchContext>
 8010ee4:	f04f 0000 	mov.w	r0, #0
 8010ee8:	f380 8811 	msr	BASEPRI, r0
 8010eec:	bc09      	pop	{r0, r3}
 8010eee:	6819      	ldr	r1, [r3, #0]
 8010ef0:	6808      	ldr	r0, [r1, #0]
 8010ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef6:	f01e 0f10 	tst.w	lr, #16
 8010efa:	bf08      	it	eq
 8010efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010f00:	f380 8809 	msr	PSP, r0
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	4770      	bx	lr
 8010f0a:	bf00      	nop
 8010f0c:	f3af 8000 	nop.w

08010f10 <pxCurrentTCBConst>:
 8010f10:	200014e8 	.word	0x200014e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010f14:	bf00      	nop
 8010f16:	bf00      	nop

08010f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8010f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f22:	f383 8811 	msr	BASEPRI, r3
 8010f26:	f3bf 8f6f 	isb	sy
 8010f2a:	f3bf 8f4f 	dsb	sy
 8010f2e:	607b      	str	r3, [r7, #4]
}
 8010f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f32:	f7fe fdc3 	bl	800fabc <xTaskIncrementTick>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d003      	beq.n	8010f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f3c:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <xPortSysTickHandler+0x40>)
 8010f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	2300      	movs	r3, #0
 8010f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	f383 8811 	msr	BASEPRI, r3
}
 8010f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	e000ed04 	.word	0xe000ed04

08010f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f60:	4b0b      	ldr	r3, [pc, #44]	; (8010f90 <vPortSetupTimerInterrupt+0x34>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f66:	4b0b      	ldr	r3, [pc, #44]	; (8010f94 <vPortSetupTimerInterrupt+0x38>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <vPortSetupTimerInterrupt+0x3c>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	4a0a      	ldr	r2, [pc, #40]	; (8010f9c <vPortSetupTimerInterrupt+0x40>)
 8010f72:	fba2 2303 	umull	r2, r3, r2, r3
 8010f76:	099b      	lsrs	r3, r3, #6
 8010f78:	4a09      	ldr	r2, [pc, #36]	; (8010fa0 <vPortSetupTimerInterrupt+0x44>)
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f7e:	4b04      	ldr	r3, [pc, #16]	; (8010f90 <vPortSetupTimerInterrupt+0x34>)
 8010f80:	2207      	movs	r2, #7
 8010f82:	601a      	str	r2, [r3, #0]
}
 8010f84:	bf00      	nop
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	e000e010 	.word	0xe000e010
 8010f94:	e000e018 	.word	0xe000e018
 8010f98:	20000000 	.word	0x20000000
 8010f9c:	10624dd3 	.word	0x10624dd3
 8010fa0:	e000e014 	.word	0xe000e014

08010fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010fb4 <vPortEnableVFP+0x10>
 8010fa8:	6801      	ldr	r1, [r0, #0]
 8010faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010fae:	6001      	str	r1, [r0, #0]
 8010fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010fb2:	bf00      	nop
 8010fb4:	e000ed88 	.word	0xe000ed88

08010fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010fbe:	f3ef 8305 	mrs	r3, IPSR
 8010fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2b0f      	cmp	r3, #15
 8010fc8:	d914      	bls.n	8010ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010fca:	4a17      	ldr	r2, [pc, #92]	; (8011028 <vPortValidateInterruptPriority+0x70>)
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	4413      	add	r3, r2
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fd4:	4b15      	ldr	r3, [pc, #84]	; (801102c <vPortValidateInterruptPriority+0x74>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	7afa      	ldrb	r2, [r7, #11]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d20a      	bcs.n	8010ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	607b      	str	r3, [r7, #4]
}
 8010ff0:	bf00      	nop
 8010ff2:	e7fe      	b.n	8010ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ff4:	4b0e      	ldr	r3, [pc, #56]	; (8011030 <vPortValidateInterruptPriority+0x78>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ffc:	4b0d      	ldr	r3, [pc, #52]	; (8011034 <vPortValidateInterruptPriority+0x7c>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	429a      	cmp	r2, r3
 8011002:	d90a      	bls.n	801101a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011008:	f383 8811 	msr	BASEPRI, r3
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	603b      	str	r3, [r7, #0]
}
 8011016:	bf00      	nop
 8011018:	e7fe      	b.n	8011018 <vPortValidateInterruptPriority+0x60>
	}
 801101a:	bf00      	nop
 801101c:	3714      	adds	r7, #20
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	e000e3f0 	.word	0xe000e3f0
 801102c:	20001b14 	.word	0x20001b14
 8011030:	e000ed0c 	.word	0xe000ed0c
 8011034:	20001b18 	.word	0x20001b18

08011038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08a      	sub	sp, #40	; 0x28
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011040:	2300      	movs	r3, #0
 8011042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011044:	f7fe fc6c 	bl	800f920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011048:	4b5b      	ldr	r3, [pc, #364]	; (80111b8 <pvPortMalloc+0x180>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d101      	bne.n	8011054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011050:	f000 f920 	bl	8011294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011054:	4b59      	ldr	r3, [pc, #356]	; (80111bc <pvPortMalloc+0x184>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4013      	ands	r3, r2
 801105c:	2b00      	cmp	r3, #0
 801105e:	f040 8093 	bne.w	8011188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d01d      	beq.n	80110a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011068:	2208      	movs	r2, #8
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	4413      	add	r3, r2
 801106e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f003 0307 	and.w	r3, r3, #7
 8011076:	2b00      	cmp	r3, #0
 8011078:	d014      	beq.n	80110a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f023 0307 	bic.w	r3, r3, #7
 8011080:	3308      	adds	r3, #8
 8011082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f003 0307 	and.w	r3, r3, #7
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00a      	beq.n	80110a4 <pvPortMalloc+0x6c>
	__asm volatile
 801108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	617b      	str	r3, [r7, #20]
}
 80110a0:	bf00      	nop
 80110a2:	e7fe      	b.n	80110a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d06e      	beq.n	8011188 <pvPortMalloc+0x150>
 80110aa:	4b45      	ldr	r3, [pc, #276]	; (80111c0 <pvPortMalloc+0x188>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d869      	bhi.n	8011188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80110b4:	4b43      	ldr	r3, [pc, #268]	; (80111c4 <pvPortMalloc+0x18c>)
 80110b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80110b8:	4b42      	ldr	r3, [pc, #264]	; (80111c4 <pvPortMalloc+0x18c>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110be:	e004      	b.n	80110ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d903      	bls.n	80110dc <pvPortMalloc+0xa4>
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1f1      	bne.n	80110c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110dc:	4b36      	ldr	r3, [pc, #216]	; (80111b8 <pvPortMalloc+0x180>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d050      	beq.n	8011188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2208      	movs	r2, #8
 80110ec:	4413      	add	r3, r2
 80110ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	6a3b      	ldr	r3, [r7, #32]
 80110f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	685a      	ldr	r2, [r3, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	2308      	movs	r3, #8
 8011102:	005b      	lsls	r3, r3, #1
 8011104:	429a      	cmp	r2, r3
 8011106:	d91f      	bls.n	8011148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4413      	add	r3, r2
 801110e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	f003 0307 	and.w	r3, r3, #7
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00a      	beq.n	8011130 <pvPortMalloc+0xf8>
	__asm volatile
 801111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111e:	f383 8811 	msr	BASEPRI, r3
 8011122:	f3bf 8f6f 	isb	sy
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	613b      	str	r3, [r7, #16]
}
 801112c:	bf00      	nop
 801112e:	e7fe      	b.n	801112e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	685a      	ldr	r2, [r3, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	1ad2      	subs	r2, r2, r3
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011142:	69b8      	ldr	r0, [r7, #24]
 8011144:	f000 f908 	bl	8011358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011148:	4b1d      	ldr	r3, [pc, #116]	; (80111c0 <pvPortMalloc+0x188>)
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	4a1b      	ldr	r2, [pc, #108]	; (80111c0 <pvPortMalloc+0x188>)
 8011154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011156:	4b1a      	ldr	r3, [pc, #104]	; (80111c0 <pvPortMalloc+0x188>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	4b1b      	ldr	r3, [pc, #108]	; (80111c8 <pvPortMalloc+0x190>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d203      	bcs.n	801116a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011162:	4b17      	ldr	r3, [pc, #92]	; (80111c0 <pvPortMalloc+0x188>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4a18      	ldr	r2, [pc, #96]	; (80111c8 <pvPortMalloc+0x190>)
 8011168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	685a      	ldr	r2, [r3, #4]
 801116e:	4b13      	ldr	r3, [pc, #76]	; (80111bc <pvPortMalloc+0x184>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	431a      	orrs	r2, r3
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801117e:	4b13      	ldr	r3, [pc, #76]	; (80111cc <pvPortMalloc+0x194>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3301      	adds	r3, #1
 8011184:	4a11      	ldr	r2, [pc, #68]	; (80111cc <pvPortMalloc+0x194>)
 8011186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011188:	f7fe fbd8 	bl	800f93c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	f003 0307 	and.w	r3, r3, #7
 8011192:	2b00      	cmp	r3, #0
 8011194:	d00a      	beq.n	80111ac <pvPortMalloc+0x174>
	__asm volatile
 8011196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119a:	f383 8811 	msr	BASEPRI, r3
 801119e:	f3bf 8f6f 	isb	sy
 80111a2:	f3bf 8f4f 	dsb	sy
 80111a6:	60fb      	str	r3, [r7, #12]
}
 80111a8:	bf00      	nop
 80111aa:	e7fe      	b.n	80111aa <pvPortMalloc+0x172>
	return pvReturn;
 80111ac:	69fb      	ldr	r3, [r7, #28]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3728      	adds	r7, #40	; 0x28
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	200026dc 	.word	0x200026dc
 80111bc:	200026f0 	.word	0x200026f0
 80111c0:	200026e0 	.word	0x200026e0
 80111c4:	200026d4 	.word	0x200026d4
 80111c8:	200026e4 	.word	0x200026e4
 80111cc:	200026e8 	.word	0x200026e8

080111d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d04d      	beq.n	801127e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80111e2:	2308      	movs	r3, #8
 80111e4:	425b      	negs	r3, r3
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	4413      	add	r3, r2
 80111ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	685a      	ldr	r2, [r3, #4]
 80111f4:	4b24      	ldr	r3, [pc, #144]	; (8011288 <vPortFree+0xb8>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4013      	ands	r3, r2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d10a      	bne.n	8011214 <vPortFree+0x44>
	__asm volatile
 80111fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	60fb      	str	r3, [r7, #12]
}
 8011210:	bf00      	nop
 8011212:	e7fe      	b.n	8011212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00a      	beq.n	8011232 <vPortFree+0x62>
	__asm volatile
 801121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011220:	f383 8811 	msr	BASEPRI, r3
 8011224:	f3bf 8f6f 	isb	sy
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	60bb      	str	r3, [r7, #8]
}
 801122e:	bf00      	nop
 8011230:	e7fe      	b.n	8011230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	4b14      	ldr	r3, [pc, #80]	; (8011288 <vPortFree+0xb8>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4013      	ands	r3, r2
 801123c:	2b00      	cmp	r3, #0
 801123e:	d01e      	beq.n	801127e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d11a      	bne.n	801127e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	4b0e      	ldr	r3, [pc, #56]	; (8011288 <vPortFree+0xb8>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	43db      	mvns	r3, r3
 8011252:	401a      	ands	r2, r3
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011258:	f7fe fb62 	bl	800f920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	685a      	ldr	r2, [r3, #4]
 8011260:	4b0a      	ldr	r3, [pc, #40]	; (801128c <vPortFree+0xbc>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4413      	add	r3, r2
 8011266:	4a09      	ldr	r2, [pc, #36]	; (801128c <vPortFree+0xbc>)
 8011268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801126a:	6938      	ldr	r0, [r7, #16]
 801126c:	f000 f874 	bl	8011358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011270:	4b07      	ldr	r3, [pc, #28]	; (8011290 <vPortFree+0xc0>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3301      	adds	r3, #1
 8011276:	4a06      	ldr	r2, [pc, #24]	; (8011290 <vPortFree+0xc0>)
 8011278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801127a:	f7fe fb5f 	bl	800f93c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801127e:	bf00      	nop
 8011280:	3718      	adds	r7, #24
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	200026f0 	.word	0x200026f0
 801128c:	200026e0 	.word	0x200026e0
 8011290:	200026ec 	.word	0x200026ec

08011294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801129a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801129e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80112a0:	4b27      	ldr	r3, [pc, #156]	; (8011340 <prvHeapInit+0xac>)
 80112a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f003 0307 	and.w	r3, r3, #7
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00c      	beq.n	80112c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	3307      	adds	r3, #7
 80112b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f023 0307 	bic.w	r3, r3, #7
 80112ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	4a1f      	ldr	r2, [pc, #124]	; (8011340 <prvHeapInit+0xac>)
 80112c4:	4413      	add	r3, r2
 80112c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112cc:	4a1d      	ldr	r2, [pc, #116]	; (8011344 <prvHeapInit+0xb0>)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112d2:	4b1c      	ldr	r3, [pc, #112]	; (8011344 <prvHeapInit+0xb0>)
 80112d4:	2200      	movs	r2, #0
 80112d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	68ba      	ldr	r2, [r7, #8]
 80112dc:	4413      	add	r3, r2
 80112de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80112e0:	2208      	movs	r2, #8
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	1a9b      	subs	r3, r3, r2
 80112e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f023 0307 	bic.w	r3, r3, #7
 80112ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4a15      	ldr	r2, [pc, #84]	; (8011348 <prvHeapInit+0xb4>)
 80112f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80112f6:	4b14      	ldr	r3, [pc, #80]	; (8011348 <prvHeapInit+0xb4>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2200      	movs	r2, #0
 80112fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80112fe:	4b12      	ldr	r3, [pc, #72]	; (8011348 <prvHeapInit+0xb4>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	1ad2      	subs	r2, r2, r3
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011314:	4b0c      	ldr	r3, [pc, #48]	; (8011348 <prvHeapInit+0xb4>)
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	4a0a      	ldr	r2, [pc, #40]	; (801134c <prvHeapInit+0xb8>)
 8011322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4a09      	ldr	r2, [pc, #36]	; (8011350 <prvHeapInit+0xbc>)
 801132a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801132c:	4b09      	ldr	r3, [pc, #36]	; (8011354 <prvHeapInit+0xc0>)
 801132e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011332:	601a      	str	r2, [r3, #0]
}
 8011334:	bf00      	nop
 8011336:	3714      	adds	r7, #20
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	20001b1c 	.word	0x20001b1c
 8011344:	200026d4 	.word	0x200026d4
 8011348:	200026dc 	.word	0x200026dc
 801134c:	200026e4 	.word	0x200026e4
 8011350:	200026e0 	.word	0x200026e0
 8011354:	200026f0 	.word	0x200026f0

08011358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011358:	b480      	push	{r7}
 801135a:	b085      	sub	sp, #20
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011360:	4b28      	ldr	r3, [pc, #160]	; (8011404 <prvInsertBlockIntoFreeList+0xac>)
 8011362:	60fb      	str	r3, [r7, #12]
 8011364:	e002      	b.n	801136c <prvInsertBlockIntoFreeList+0x14>
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	429a      	cmp	r2, r3
 8011374:	d8f7      	bhi.n	8011366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	4413      	add	r3, r2
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	429a      	cmp	r2, r3
 8011386:	d108      	bne.n	801139a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	441a      	add	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	68ba      	ldr	r2, [r7, #8]
 80113a4:	441a      	add	r2, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d118      	bne.n	80113e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	4b15      	ldr	r3, [pc, #84]	; (8011408 <prvInsertBlockIntoFreeList+0xb0>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d00d      	beq.n	80113d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685a      	ldr	r2, [r3, #4]
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	441a      	add	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	601a      	str	r2, [r3, #0]
 80113d4:	e008      	b.n	80113e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113d6:	4b0c      	ldr	r3, [pc, #48]	; (8011408 <prvInsertBlockIntoFreeList+0xb0>)
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	e003      	b.n	80113e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d002      	beq.n	80113f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113f6:	bf00      	nop
 80113f8:	3714      	adds	r7, #20
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	200026d4 	.word	0x200026d4
 8011408:	200026dc 	.word	0x200026dc

0801140c <__errno>:
 801140c:	4b01      	ldr	r3, [pc, #4]	; (8011414 <__errno+0x8>)
 801140e:	6818      	ldr	r0, [r3, #0]
 8011410:	4770      	bx	lr
 8011412:	bf00      	nop
 8011414:	20000010 	.word	0x20000010

08011418 <std>:
 8011418:	2300      	movs	r3, #0
 801141a:	b510      	push	{r4, lr}
 801141c:	4604      	mov	r4, r0
 801141e:	e9c0 3300 	strd	r3, r3, [r0]
 8011422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011426:	6083      	str	r3, [r0, #8]
 8011428:	8181      	strh	r1, [r0, #12]
 801142a:	6643      	str	r3, [r0, #100]	; 0x64
 801142c:	81c2      	strh	r2, [r0, #14]
 801142e:	6183      	str	r3, [r0, #24]
 8011430:	4619      	mov	r1, r3
 8011432:	2208      	movs	r2, #8
 8011434:	305c      	adds	r0, #92	; 0x5c
 8011436:	f000 f91a 	bl	801166e <memset>
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <std+0x38>)
 801143c:	6263      	str	r3, [r4, #36]	; 0x24
 801143e:	4b05      	ldr	r3, [pc, #20]	; (8011454 <std+0x3c>)
 8011440:	62a3      	str	r3, [r4, #40]	; 0x28
 8011442:	4b05      	ldr	r3, [pc, #20]	; (8011458 <std+0x40>)
 8011444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011446:	4b05      	ldr	r3, [pc, #20]	; (801145c <std+0x44>)
 8011448:	6224      	str	r4, [r4, #32]
 801144a:	6323      	str	r3, [r4, #48]	; 0x30
 801144c:	bd10      	pop	{r4, pc}
 801144e:	bf00      	nop
 8011450:	08012645 	.word	0x08012645
 8011454:	08012667 	.word	0x08012667
 8011458:	0801269f 	.word	0x0801269f
 801145c:	080126c3 	.word	0x080126c3

08011460 <_cleanup_r>:
 8011460:	4901      	ldr	r1, [pc, #4]	; (8011468 <_cleanup_r+0x8>)
 8011462:	f000 b8af 	b.w	80115c4 <_fwalk_reent>
 8011466:	bf00      	nop
 8011468:	08014271 	.word	0x08014271

0801146c <__sfmoreglue>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	2268      	movs	r2, #104	; 0x68
 8011470:	1e4d      	subs	r5, r1, #1
 8011472:	4355      	muls	r5, r2
 8011474:	460e      	mov	r6, r1
 8011476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801147a:	f000 f921 	bl	80116c0 <_malloc_r>
 801147e:	4604      	mov	r4, r0
 8011480:	b140      	cbz	r0, 8011494 <__sfmoreglue+0x28>
 8011482:	2100      	movs	r1, #0
 8011484:	e9c0 1600 	strd	r1, r6, [r0]
 8011488:	300c      	adds	r0, #12
 801148a:	60a0      	str	r0, [r4, #8]
 801148c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011490:	f000 f8ed 	bl	801166e <memset>
 8011494:	4620      	mov	r0, r4
 8011496:	bd70      	pop	{r4, r5, r6, pc}

08011498 <__sfp_lock_acquire>:
 8011498:	4801      	ldr	r0, [pc, #4]	; (80114a0 <__sfp_lock_acquire+0x8>)
 801149a:	f000 b8d8 	b.w	801164e <__retarget_lock_acquire_recursive>
 801149e:	bf00      	nop
 80114a0:	200026f5 	.word	0x200026f5

080114a4 <__sfp_lock_release>:
 80114a4:	4801      	ldr	r0, [pc, #4]	; (80114ac <__sfp_lock_release+0x8>)
 80114a6:	f000 b8d3 	b.w	8011650 <__retarget_lock_release_recursive>
 80114aa:	bf00      	nop
 80114ac:	200026f5 	.word	0x200026f5

080114b0 <__sinit_lock_acquire>:
 80114b0:	4801      	ldr	r0, [pc, #4]	; (80114b8 <__sinit_lock_acquire+0x8>)
 80114b2:	f000 b8cc 	b.w	801164e <__retarget_lock_acquire_recursive>
 80114b6:	bf00      	nop
 80114b8:	200026f6 	.word	0x200026f6

080114bc <__sinit_lock_release>:
 80114bc:	4801      	ldr	r0, [pc, #4]	; (80114c4 <__sinit_lock_release+0x8>)
 80114be:	f000 b8c7 	b.w	8011650 <__retarget_lock_release_recursive>
 80114c2:	bf00      	nop
 80114c4:	200026f6 	.word	0x200026f6

080114c8 <__sinit>:
 80114c8:	b510      	push	{r4, lr}
 80114ca:	4604      	mov	r4, r0
 80114cc:	f7ff fff0 	bl	80114b0 <__sinit_lock_acquire>
 80114d0:	69a3      	ldr	r3, [r4, #24]
 80114d2:	b11b      	cbz	r3, 80114dc <__sinit+0x14>
 80114d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d8:	f7ff bff0 	b.w	80114bc <__sinit_lock_release>
 80114dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114e0:	6523      	str	r3, [r4, #80]	; 0x50
 80114e2:	4b13      	ldr	r3, [pc, #76]	; (8011530 <__sinit+0x68>)
 80114e4:	4a13      	ldr	r2, [pc, #76]	; (8011534 <__sinit+0x6c>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80114ea:	42a3      	cmp	r3, r4
 80114ec:	bf04      	itt	eq
 80114ee:	2301      	moveq	r3, #1
 80114f0:	61a3      	streq	r3, [r4, #24]
 80114f2:	4620      	mov	r0, r4
 80114f4:	f000 f820 	bl	8011538 <__sfp>
 80114f8:	6060      	str	r0, [r4, #4]
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 f81c 	bl	8011538 <__sfp>
 8011500:	60a0      	str	r0, [r4, #8]
 8011502:	4620      	mov	r0, r4
 8011504:	f000 f818 	bl	8011538 <__sfp>
 8011508:	2200      	movs	r2, #0
 801150a:	60e0      	str	r0, [r4, #12]
 801150c:	2104      	movs	r1, #4
 801150e:	6860      	ldr	r0, [r4, #4]
 8011510:	f7ff ff82 	bl	8011418 <std>
 8011514:	68a0      	ldr	r0, [r4, #8]
 8011516:	2201      	movs	r2, #1
 8011518:	2109      	movs	r1, #9
 801151a:	f7ff ff7d 	bl	8011418 <std>
 801151e:	68e0      	ldr	r0, [r4, #12]
 8011520:	2202      	movs	r2, #2
 8011522:	2112      	movs	r1, #18
 8011524:	f7ff ff78 	bl	8011418 <std>
 8011528:	2301      	movs	r3, #1
 801152a:	61a3      	str	r3, [r4, #24]
 801152c:	e7d2      	b.n	80114d4 <__sinit+0xc>
 801152e:	bf00      	nop
 8011530:	08016138 	.word	0x08016138
 8011534:	08011461 	.word	0x08011461

08011538 <__sfp>:
 8011538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153a:	4607      	mov	r7, r0
 801153c:	f7ff ffac 	bl	8011498 <__sfp_lock_acquire>
 8011540:	4b1e      	ldr	r3, [pc, #120]	; (80115bc <__sfp+0x84>)
 8011542:	681e      	ldr	r6, [r3, #0]
 8011544:	69b3      	ldr	r3, [r6, #24]
 8011546:	b913      	cbnz	r3, 801154e <__sfp+0x16>
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff ffbd 	bl	80114c8 <__sinit>
 801154e:	3648      	adds	r6, #72	; 0x48
 8011550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011554:	3b01      	subs	r3, #1
 8011556:	d503      	bpl.n	8011560 <__sfp+0x28>
 8011558:	6833      	ldr	r3, [r6, #0]
 801155a:	b30b      	cbz	r3, 80115a0 <__sfp+0x68>
 801155c:	6836      	ldr	r6, [r6, #0]
 801155e:	e7f7      	b.n	8011550 <__sfp+0x18>
 8011560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011564:	b9d5      	cbnz	r5, 801159c <__sfp+0x64>
 8011566:	4b16      	ldr	r3, [pc, #88]	; (80115c0 <__sfp+0x88>)
 8011568:	60e3      	str	r3, [r4, #12]
 801156a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801156e:	6665      	str	r5, [r4, #100]	; 0x64
 8011570:	f000 f86c 	bl	801164c <__retarget_lock_init_recursive>
 8011574:	f7ff ff96 	bl	80114a4 <__sfp_lock_release>
 8011578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801157c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011580:	6025      	str	r5, [r4, #0]
 8011582:	61a5      	str	r5, [r4, #24]
 8011584:	2208      	movs	r2, #8
 8011586:	4629      	mov	r1, r5
 8011588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801158c:	f000 f86f 	bl	801166e <memset>
 8011590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011598:	4620      	mov	r0, r4
 801159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159c:	3468      	adds	r4, #104	; 0x68
 801159e:	e7d9      	b.n	8011554 <__sfp+0x1c>
 80115a0:	2104      	movs	r1, #4
 80115a2:	4638      	mov	r0, r7
 80115a4:	f7ff ff62 	bl	801146c <__sfmoreglue>
 80115a8:	4604      	mov	r4, r0
 80115aa:	6030      	str	r0, [r6, #0]
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d1d5      	bne.n	801155c <__sfp+0x24>
 80115b0:	f7ff ff78 	bl	80114a4 <__sfp_lock_release>
 80115b4:	230c      	movs	r3, #12
 80115b6:	603b      	str	r3, [r7, #0]
 80115b8:	e7ee      	b.n	8011598 <__sfp+0x60>
 80115ba:	bf00      	nop
 80115bc:	08016138 	.word	0x08016138
 80115c0:	ffff0001 	.word	0xffff0001

080115c4 <_fwalk_reent>:
 80115c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c8:	4606      	mov	r6, r0
 80115ca:	4688      	mov	r8, r1
 80115cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115d0:	2700      	movs	r7, #0
 80115d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115d6:	f1b9 0901 	subs.w	r9, r9, #1
 80115da:	d505      	bpl.n	80115e8 <_fwalk_reent+0x24>
 80115dc:	6824      	ldr	r4, [r4, #0]
 80115de:	2c00      	cmp	r4, #0
 80115e0:	d1f7      	bne.n	80115d2 <_fwalk_reent+0xe>
 80115e2:	4638      	mov	r0, r7
 80115e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e8:	89ab      	ldrh	r3, [r5, #12]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d907      	bls.n	80115fe <_fwalk_reent+0x3a>
 80115ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115f2:	3301      	adds	r3, #1
 80115f4:	d003      	beq.n	80115fe <_fwalk_reent+0x3a>
 80115f6:	4629      	mov	r1, r5
 80115f8:	4630      	mov	r0, r6
 80115fa:	47c0      	blx	r8
 80115fc:	4307      	orrs	r7, r0
 80115fe:	3568      	adds	r5, #104	; 0x68
 8011600:	e7e9      	b.n	80115d6 <_fwalk_reent+0x12>
	...

08011604 <__libc_init_array>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	4d0d      	ldr	r5, [pc, #52]	; (801163c <__libc_init_array+0x38>)
 8011608:	4c0d      	ldr	r4, [pc, #52]	; (8011640 <__libc_init_array+0x3c>)
 801160a:	1b64      	subs	r4, r4, r5
 801160c:	10a4      	asrs	r4, r4, #2
 801160e:	2600      	movs	r6, #0
 8011610:	42a6      	cmp	r6, r4
 8011612:	d109      	bne.n	8011628 <__libc_init_array+0x24>
 8011614:	4d0b      	ldr	r5, [pc, #44]	; (8011644 <__libc_init_array+0x40>)
 8011616:	4c0c      	ldr	r4, [pc, #48]	; (8011648 <__libc_init_array+0x44>)
 8011618:	f004 fc3c 	bl	8015e94 <_init>
 801161c:	1b64      	subs	r4, r4, r5
 801161e:	10a4      	asrs	r4, r4, #2
 8011620:	2600      	movs	r6, #0
 8011622:	42a6      	cmp	r6, r4
 8011624:	d105      	bne.n	8011632 <__libc_init_array+0x2e>
 8011626:	bd70      	pop	{r4, r5, r6, pc}
 8011628:	f855 3b04 	ldr.w	r3, [r5], #4
 801162c:	4798      	blx	r3
 801162e:	3601      	adds	r6, #1
 8011630:	e7ee      	b.n	8011610 <__libc_init_array+0xc>
 8011632:	f855 3b04 	ldr.w	r3, [r5], #4
 8011636:	4798      	blx	r3
 8011638:	3601      	adds	r6, #1
 801163a:	e7f2      	b.n	8011622 <__libc_init_array+0x1e>
 801163c:	0801657c 	.word	0x0801657c
 8011640:	0801657c 	.word	0x0801657c
 8011644:	0801657c 	.word	0x0801657c
 8011648:	08016580 	.word	0x08016580

0801164c <__retarget_lock_init_recursive>:
 801164c:	4770      	bx	lr

0801164e <__retarget_lock_acquire_recursive>:
 801164e:	4770      	bx	lr

08011650 <__retarget_lock_release_recursive>:
 8011650:	4770      	bx	lr

08011652 <memcpy>:
 8011652:	440a      	add	r2, r1
 8011654:	4291      	cmp	r1, r2
 8011656:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801165a:	d100      	bne.n	801165e <memcpy+0xc>
 801165c:	4770      	bx	lr
 801165e:	b510      	push	{r4, lr}
 8011660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011668:	4291      	cmp	r1, r2
 801166a:	d1f9      	bne.n	8011660 <memcpy+0xe>
 801166c:	bd10      	pop	{r4, pc}

0801166e <memset>:
 801166e:	4402      	add	r2, r0
 8011670:	4603      	mov	r3, r0
 8011672:	4293      	cmp	r3, r2
 8011674:	d100      	bne.n	8011678 <memset+0xa>
 8011676:	4770      	bx	lr
 8011678:	f803 1b01 	strb.w	r1, [r3], #1
 801167c:	e7f9      	b.n	8011672 <memset+0x4>
	...

08011680 <sbrk_aligned>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	4e0e      	ldr	r6, [pc, #56]	; (80116bc <sbrk_aligned+0x3c>)
 8011684:	460c      	mov	r4, r1
 8011686:	6831      	ldr	r1, [r6, #0]
 8011688:	4605      	mov	r5, r0
 801168a:	b911      	cbnz	r1, 8011692 <sbrk_aligned+0x12>
 801168c:	f000 ff70 	bl	8012570 <_sbrk_r>
 8011690:	6030      	str	r0, [r6, #0]
 8011692:	4621      	mov	r1, r4
 8011694:	4628      	mov	r0, r5
 8011696:	f000 ff6b 	bl	8012570 <_sbrk_r>
 801169a:	1c43      	adds	r3, r0, #1
 801169c:	d00a      	beq.n	80116b4 <sbrk_aligned+0x34>
 801169e:	1cc4      	adds	r4, r0, #3
 80116a0:	f024 0403 	bic.w	r4, r4, #3
 80116a4:	42a0      	cmp	r0, r4
 80116a6:	d007      	beq.n	80116b8 <sbrk_aligned+0x38>
 80116a8:	1a21      	subs	r1, r4, r0
 80116aa:	4628      	mov	r0, r5
 80116ac:	f000 ff60 	bl	8012570 <_sbrk_r>
 80116b0:	3001      	adds	r0, #1
 80116b2:	d101      	bne.n	80116b8 <sbrk_aligned+0x38>
 80116b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80116b8:	4620      	mov	r0, r4
 80116ba:	bd70      	pop	{r4, r5, r6, pc}
 80116bc:	200026fc 	.word	0x200026fc

080116c0 <_malloc_r>:
 80116c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c4:	1ccd      	adds	r5, r1, #3
 80116c6:	f025 0503 	bic.w	r5, r5, #3
 80116ca:	3508      	adds	r5, #8
 80116cc:	2d0c      	cmp	r5, #12
 80116ce:	bf38      	it	cc
 80116d0:	250c      	movcc	r5, #12
 80116d2:	2d00      	cmp	r5, #0
 80116d4:	4607      	mov	r7, r0
 80116d6:	db01      	blt.n	80116dc <_malloc_r+0x1c>
 80116d8:	42a9      	cmp	r1, r5
 80116da:	d905      	bls.n	80116e8 <_malloc_r+0x28>
 80116dc:	230c      	movs	r3, #12
 80116de:	603b      	str	r3, [r7, #0]
 80116e0:	2600      	movs	r6, #0
 80116e2:	4630      	mov	r0, r6
 80116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e8:	4e2e      	ldr	r6, [pc, #184]	; (80117a4 <_malloc_r+0xe4>)
 80116ea:	f003 f99d 	bl	8014a28 <__malloc_lock>
 80116ee:	6833      	ldr	r3, [r6, #0]
 80116f0:	461c      	mov	r4, r3
 80116f2:	bb34      	cbnz	r4, 8011742 <_malloc_r+0x82>
 80116f4:	4629      	mov	r1, r5
 80116f6:	4638      	mov	r0, r7
 80116f8:	f7ff ffc2 	bl	8011680 <sbrk_aligned>
 80116fc:	1c43      	adds	r3, r0, #1
 80116fe:	4604      	mov	r4, r0
 8011700:	d14d      	bne.n	801179e <_malloc_r+0xde>
 8011702:	6834      	ldr	r4, [r6, #0]
 8011704:	4626      	mov	r6, r4
 8011706:	2e00      	cmp	r6, #0
 8011708:	d140      	bne.n	801178c <_malloc_r+0xcc>
 801170a:	6823      	ldr	r3, [r4, #0]
 801170c:	4631      	mov	r1, r6
 801170e:	4638      	mov	r0, r7
 8011710:	eb04 0803 	add.w	r8, r4, r3
 8011714:	f000 ff2c 	bl	8012570 <_sbrk_r>
 8011718:	4580      	cmp	r8, r0
 801171a:	d13a      	bne.n	8011792 <_malloc_r+0xd2>
 801171c:	6821      	ldr	r1, [r4, #0]
 801171e:	3503      	adds	r5, #3
 8011720:	1a6d      	subs	r5, r5, r1
 8011722:	f025 0503 	bic.w	r5, r5, #3
 8011726:	3508      	adds	r5, #8
 8011728:	2d0c      	cmp	r5, #12
 801172a:	bf38      	it	cc
 801172c:	250c      	movcc	r5, #12
 801172e:	4629      	mov	r1, r5
 8011730:	4638      	mov	r0, r7
 8011732:	f7ff ffa5 	bl	8011680 <sbrk_aligned>
 8011736:	3001      	adds	r0, #1
 8011738:	d02b      	beq.n	8011792 <_malloc_r+0xd2>
 801173a:	6823      	ldr	r3, [r4, #0]
 801173c:	442b      	add	r3, r5
 801173e:	6023      	str	r3, [r4, #0]
 8011740:	e00e      	b.n	8011760 <_malloc_r+0xa0>
 8011742:	6822      	ldr	r2, [r4, #0]
 8011744:	1b52      	subs	r2, r2, r5
 8011746:	d41e      	bmi.n	8011786 <_malloc_r+0xc6>
 8011748:	2a0b      	cmp	r2, #11
 801174a:	d916      	bls.n	801177a <_malloc_r+0xba>
 801174c:	1961      	adds	r1, r4, r5
 801174e:	42a3      	cmp	r3, r4
 8011750:	6025      	str	r5, [r4, #0]
 8011752:	bf18      	it	ne
 8011754:	6059      	strne	r1, [r3, #4]
 8011756:	6863      	ldr	r3, [r4, #4]
 8011758:	bf08      	it	eq
 801175a:	6031      	streq	r1, [r6, #0]
 801175c:	5162      	str	r2, [r4, r5]
 801175e:	604b      	str	r3, [r1, #4]
 8011760:	4638      	mov	r0, r7
 8011762:	f104 060b 	add.w	r6, r4, #11
 8011766:	f003 f965 	bl	8014a34 <__malloc_unlock>
 801176a:	f026 0607 	bic.w	r6, r6, #7
 801176e:	1d23      	adds	r3, r4, #4
 8011770:	1af2      	subs	r2, r6, r3
 8011772:	d0b6      	beq.n	80116e2 <_malloc_r+0x22>
 8011774:	1b9b      	subs	r3, r3, r6
 8011776:	50a3      	str	r3, [r4, r2]
 8011778:	e7b3      	b.n	80116e2 <_malloc_r+0x22>
 801177a:	6862      	ldr	r2, [r4, #4]
 801177c:	42a3      	cmp	r3, r4
 801177e:	bf0c      	ite	eq
 8011780:	6032      	streq	r2, [r6, #0]
 8011782:	605a      	strne	r2, [r3, #4]
 8011784:	e7ec      	b.n	8011760 <_malloc_r+0xa0>
 8011786:	4623      	mov	r3, r4
 8011788:	6864      	ldr	r4, [r4, #4]
 801178a:	e7b2      	b.n	80116f2 <_malloc_r+0x32>
 801178c:	4634      	mov	r4, r6
 801178e:	6876      	ldr	r6, [r6, #4]
 8011790:	e7b9      	b.n	8011706 <_malloc_r+0x46>
 8011792:	230c      	movs	r3, #12
 8011794:	603b      	str	r3, [r7, #0]
 8011796:	4638      	mov	r0, r7
 8011798:	f003 f94c 	bl	8014a34 <__malloc_unlock>
 801179c:	e7a1      	b.n	80116e2 <_malloc_r+0x22>
 801179e:	6025      	str	r5, [r4, #0]
 80117a0:	e7de      	b.n	8011760 <_malloc_r+0xa0>
 80117a2:	bf00      	nop
 80117a4:	200026f8 	.word	0x200026f8

080117a8 <__cvt>:
 80117a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117ac:	ec55 4b10 	vmov	r4, r5, d0
 80117b0:	2d00      	cmp	r5, #0
 80117b2:	460e      	mov	r6, r1
 80117b4:	4619      	mov	r1, r3
 80117b6:	462b      	mov	r3, r5
 80117b8:	bfbb      	ittet	lt
 80117ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80117be:	461d      	movlt	r5, r3
 80117c0:	2300      	movge	r3, #0
 80117c2:	232d      	movlt	r3, #45	; 0x2d
 80117c4:	700b      	strb	r3, [r1, #0]
 80117c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80117cc:	4691      	mov	r9, r2
 80117ce:	f023 0820 	bic.w	r8, r3, #32
 80117d2:	bfbc      	itt	lt
 80117d4:	4622      	movlt	r2, r4
 80117d6:	4614      	movlt	r4, r2
 80117d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80117dc:	d005      	beq.n	80117ea <__cvt+0x42>
 80117de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80117e2:	d100      	bne.n	80117e6 <__cvt+0x3e>
 80117e4:	3601      	adds	r6, #1
 80117e6:	2102      	movs	r1, #2
 80117e8:	e000      	b.n	80117ec <__cvt+0x44>
 80117ea:	2103      	movs	r1, #3
 80117ec:	ab03      	add	r3, sp, #12
 80117ee:	9301      	str	r3, [sp, #4]
 80117f0:	ab02      	add	r3, sp, #8
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	ec45 4b10 	vmov	d0, r4, r5
 80117f8:	4653      	mov	r3, sl
 80117fa:	4632      	mov	r2, r6
 80117fc:	f001 fec4 	bl	8013588 <_dtoa_r>
 8011800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011804:	4607      	mov	r7, r0
 8011806:	d102      	bne.n	801180e <__cvt+0x66>
 8011808:	f019 0f01 	tst.w	r9, #1
 801180c:	d022      	beq.n	8011854 <__cvt+0xac>
 801180e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011812:	eb07 0906 	add.w	r9, r7, r6
 8011816:	d110      	bne.n	801183a <__cvt+0x92>
 8011818:	783b      	ldrb	r3, [r7, #0]
 801181a:	2b30      	cmp	r3, #48	; 0x30
 801181c:	d10a      	bne.n	8011834 <__cvt+0x8c>
 801181e:	2200      	movs	r2, #0
 8011820:	2300      	movs	r3, #0
 8011822:	4620      	mov	r0, r4
 8011824:	4629      	mov	r1, r5
 8011826:	f7ef f967 	bl	8000af8 <__aeabi_dcmpeq>
 801182a:	b918      	cbnz	r0, 8011834 <__cvt+0x8c>
 801182c:	f1c6 0601 	rsb	r6, r6, #1
 8011830:	f8ca 6000 	str.w	r6, [sl]
 8011834:	f8da 3000 	ldr.w	r3, [sl]
 8011838:	4499      	add	r9, r3
 801183a:	2200      	movs	r2, #0
 801183c:	2300      	movs	r3, #0
 801183e:	4620      	mov	r0, r4
 8011840:	4629      	mov	r1, r5
 8011842:	f7ef f959 	bl	8000af8 <__aeabi_dcmpeq>
 8011846:	b108      	cbz	r0, 801184c <__cvt+0xa4>
 8011848:	f8cd 900c 	str.w	r9, [sp, #12]
 801184c:	2230      	movs	r2, #48	; 0x30
 801184e:	9b03      	ldr	r3, [sp, #12]
 8011850:	454b      	cmp	r3, r9
 8011852:	d307      	bcc.n	8011864 <__cvt+0xbc>
 8011854:	9b03      	ldr	r3, [sp, #12]
 8011856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011858:	1bdb      	subs	r3, r3, r7
 801185a:	4638      	mov	r0, r7
 801185c:	6013      	str	r3, [r2, #0]
 801185e:	b004      	add	sp, #16
 8011860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011864:	1c59      	adds	r1, r3, #1
 8011866:	9103      	str	r1, [sp, #12]
 8011868:	701a      	strb	r2, [r3, #0]
 801186a:	e7f0      	b.n	801184e <__cvt+0xa6>

0801186c <__exponent>:
 801186c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801186e:	4603      	mov	r3, r0
 8011870:	2900      	cmp	r1, #0
 8011872:	bfb8      	it	lt
 8011874:	4249      	neglt	r1, r1
 8011876:	f803 2b02 	strb.w	r2, [r3], #2
 801187a:	bfb4      	ite	lt
 801187c:	222d      	movlt	r2, #45	; 0x2d
 801187e:	222b      	movge	r2, #43	; 0x2b
 8011880:	2909      	cmp	r1, #9
 8011882:	7042      	strb	r2, [r0, #1]
 8011884:	dd2a      	ble.n	80118dc <__exponent+0x70>
 8011886:	f10d 0407 	add.w	r4, sp, #7
 801188a:	46a4      	mov	ip, r4
 801188c:	270a      	movs	r7, #10
 801188e:	46a6      	mov	lr, r4
 8011890:	460a      	mov	r2, r1
 8011892:	fb91 f6f7 	sdiv	r6, r1, r7
 8011896:	fb07 1516 	mls	r5, r7, r6, r1
 801189a:	3530      	adds	r5, #48	; 0x30
 801189c:	2a63      	cmp	r2, #99	; 0x63
 801189e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80118a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80118a6:	4631      	mov	r1, r6
 80118a8:	dcf1      	bgt.n	801188e <__exponent+0x22>
 80118aa:	3130      	adds	r1, #48	; 0x30
 80118ac:	f1ae 0502 	sub.w	r5, lr, #2
 80118b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80118b4:	1c44      	adds	r4, r0, #1
 80118b6:	4629      	mov	r1, r5
 80118b8:	4561      	cmp	r1, ip
 80118ba:	d30a      	bcc.n	80118d2 <__exponent+0x66>
 80118bc:	f10d 0209 	add.w	r2, sp, #9
 80118c0:	eba2 020e 	sub.w	r2, r2, lr
 80118c4:	4565      	cmp	r5, ip
 80118c6:	bf88      	it	hi
 80118c8:	2200      	movhi	r2, #0
 80118ca:	4413      	add	r3, r2
 80118cc:	1a18      	subs	r0, r3, r0
 80118ce:	b003      	add	sp, #12
 80118d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80118da:	e7ed      	b.n	80118b8 <__exponent+0x4c>
 80118dc:	2330      	movs	r3, #48	; 0x30
 80118de:	3130      	adds	r1, #48	; 0x30
 80118e0:	7083      	strb	r3, [r0, #2]
 80118e2:	70c1      	strb	r1, [r0, #3]
 80118e4:	1d03      	adds	r3, r0, #4
 80118e6:	e7f1      	b.n	80118cc <__exponent+0x60>

080118e8 <_printf_float>:
 80118e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ec:	ed2d 8b02 	vpush	{d8}
 80118f0:	b08d      	sub	sp, #52	; 0x34
 80118f2:	460c      	mov	r4, r1
 80118f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80118f8:	4616      	mov	r6, r2
 80118fa:	461f      	mov	r7, r3
 80118fc:	4605      	mov	r5, r0
 80118fe:	f003 f863 	bl	80149c8 <_localeconv_r>
 8011902:	f8d0 a000 	ldr.w	sl, [r0]
 8011906:	4650      	mov	r0, sl
 8011908:	f7ee fc7a 	bl	8000200 <strlen>
 801190c:	2300      	movs	r3, #0
 801190e:	930a      	str	r3, [sp, #40]	; 0x28
 8011910:	6823      	ldr	r3, [r4, #0]
 8011912:	9305      	str	r3, [sp, #20]
 8011914:	f8d8 3000 	ldr.w	r3, [r8]
 8011918:	f894 b018 	ldrb.w	fp, [r4, #24]
 801191c:	3307      	adds	r3, #7
 801191e:	f023 0307 	bic.w	r3, r3, #7
 8011922:	f103 0208 	add.w	r2, r3, #8
 8011926:	f8c8 2000 	str.w	r2, [r8]
 801192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801193a:	9307      	str	r3, [sp, #28]
 801193c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011940:	ee08 0a10 	vmov	s16, r0
 8011944:	4b9f      	ldr	r3, [pc, #636]	; (8011bc4 <_printf_float+0x2dc>)
 8011946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801194a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801194e:	f7ef f905 	bl	8000b5c <__aeabi_dcmpun>
 8011952:	bb88      	cbnz	r0, 80119b8 <_printf_float+0xd0>
 8011954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011958:	4b9a      	ldr	r3, [pc, #616]	; (8011bc4 <_printf_float+0x2dc>)
 801195a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801195e:	f7ef f8df 	bl	8000b20 <__aeabi_dcmple>
 8011962:	bb48      	cbnz	r0, 80119b8 <_printf_float+0xd0>
 8011964:	2200      	movs	r2, #0
 8011966:	2300      	movs	r3, #0
 8011968:	4640      	mov	r0, r8
 801196a:	4649      	mov	r1, r9
 801196c:	f7ef f8ce 	bl	8000b0c <__aeabi_dcmplt>
 8011970:	b110      	cbz	r0, 8011978 <_printf_float+0x90>
 8011972:	232d      	movs	r3, #45	; 0x2d
 8011974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011978:	4b93      	ldr	r3, [pc, #588]	; (8011bc8 <_printf_float+0x2e0>)
 801197a:	4894      	ldr	r0, [pc, #592]	; (8011bcc <_printf_float+0x2e4>)
 801197c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011980:	bf94      	ite	ls
 8011982:	4698      	movls	r8, r3
 8011984:	4680      	movhi	r8, r0
 8011986:	2303      	movs	r3, #3
 8011988:	6123      	str	r3, [r4, #16]
 801198a:	9b05      	ldr	r3, [sp, #20]
 801198c:	f023 0204 	bic.w	r2, r3, #4
 8011990:	6022      	str	r2, [r4, #0]
 8011992:	f04f 0900 	mov.w	r9, #0
 8011996:	9700      	str	r7, [sp, #0]
 8011998:	4633      	mov	r3, r6
 801199a:	aa0b      	add	r2, sp, #44	; 0x2c
 801199c:	4621      	mov	r1, r4
 801199e:	4628      	mov	r0, r5
 80119a0:	f000 f9d8 	bl	8011d54 <_printf_common>
 80119a4:	3001      	adds	r0, #1
 80119a6:	f040 8090 	bne.w	8011aca <_printf_float+0x1e2>
 80119aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119ae:	b00d      	add	sp, #52	; 0x34
 80119b0:	ecbd 8b02 	vpop	{d8}
 80119b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b8:	4642      	mov	r2, r8
 80119ba:	464b      	mov	r3, r9
 80119bc:	4640      	mov	r0, r8
 80119be:	4649      	mov	r1, r9
 80119c0:	f7ef f8cc 	bl	8000b5c <__aeabi_dcmpun>
 80119c4:	b140      	cbz	r0, 80119d8 <_printf_float+0xf0>
 80119c6:	464b      	mov	r3, r9
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	bfbc      	itt	lt
 80119cc:	232d      	movlt	r3, #45	; 0x2d
 80119ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80119d2:	487f      	ldr	r0, [pc, #508]	; (8011bd0 <_printf_float+0x2e8>)
 80119d4:	4b7f      	ldr	r3, [pc, #508]	; (8011bd4 <_printf_float+0x2ec>)
 80119d6:	e7d1      	b.n	801197c <_printf_float+0x94>
 80119d8:	6863      	ldr	r3, [r4, #4]
 80119da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80119de:	9206      	str	r2, [sp, #24]
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	d13f      	bne.n	8011a64 <_printf_float+0x17c>
 80119e4:	2306      	movs	r3, #6
 80119e6:	6063      	str	r3, [r4, #4]
 80119e8:	9b05      	ldr	r3, [sp, #20]
 80119ea:	6861      	ldr	r1, [r4, #4]
 80119ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80119f0:	2300      	movs	r3, #0
 80119f2:	9303      	str	r3, [sp, #12]
 80119f4:	ab0a      	add	r3, sp, #40	; 0x28
 80119f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80119fa:	ab09      	add	r3, sp, #36	; 0x24
 80119fc:	ec49 8b10 	vmov	d0, r8, r9
 8011a00:	9300      	str	r3, [sp, #0]
 8011a02:	6022      	str	r2, [r4, #0]
 8011a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f7ff fecd 	bl	80117a8 <__cvt>
 8011a0e:	9b06      	ldr	r3, [sp, #24]
 8011a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a12:	2b47      	cmp	r3, #71	; 0x47
 8011a14:	4680      	mov	r8, r0
 8011a16:	d108      	bne.n	8011a2a <_printf_float+0x142>
 8011a18:	1cc8      	adds	r0, r1, #3
 8011a1a:	db02      	blt.n	8011a22 <_printf_float+0x13a>
 8011a1c:	6863      	ldr	r3, [r4, #4]
 8011a1e:	4299      	cmp	r1, r3
 8011a20:	dd41      	ble.n	8011aa6 <_printf_float+0x1be>
 8011a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8011a26:	fa5f fb8b 	uxtb.w	fp, fp
 8011a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a2e:	d820      	bhi.n	8011a72 <_printf_float+0x18a>
 8011a30:	3901      	subs	r1, #1
 8011a32:	465a      	mov	r2, fp
 8011a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011a38:	9109      	str	r1, [sp, #36]	; 0x24
 8011a3a:	f7ff ff17 	bl	801186c <__exponent>
 8011a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a40:	1813      	adds	r3, r2, r0
 8011a42:	2a01      	cmp	r2, #1
 8011a44:	4681      	mov	r9, r0
 8011a46:	6123      	str	r3, [r4, #16]
 8011a48:	dc02      	bgt.n	8011a50 <_printf_float+0x168>
 8011a4a:	6822      	ldr	r2, [r4, #0]
 8011a4c:	07d2      	lsls	r2, r2, #31
 8011a4e:	d501      	bpl.n	8011a54 <_printf_float+0x16c>
 8011a50:	3301      	adds	r3, #1
 8011a52:	6123      	str	r3, [r4, #16]
 8011a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d09c      	beq.n	8011996 <_printf_float+0xae>
 8011a5c:	232d      	movs	r3, #45	; 0x2d
 8011a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a62:	e798      	b.n	8011996 <_printf_float+0xae>
 8011a64:	9a06      	ldr	r2, [sp, #24]
 8011a66:	2a47      	cmp	r2, #71	; 0x47
 8011a68:	d1be      	bne.n	80119e8 <_printf_float+0x100>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1bc      	bne.n	80119e8 <_printf_float+0x100>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e7b9      	b.n	80119e6 <_printf_float+0xfe>
 8011a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011a76:	d118      	bne.n	8011aaa <_printf_float+0x1c2>
 8011a78:	2900      	cmp	r1, #0
 8011a7a:	6863      	ldr	r3, [r4, #4]
 8011a7c:	dd0b      	ble.n	8011a96 <_printf_float+0x1ae>
 8011a7e:	6121      	str	r1, [r4, #16]
 8011a80:	b913      	cbnz	r3, 8011a88 <_printf_float+0x1a0>
 8011a82:	6822      	ldr	r2, [r4, #0]
 8011a84:	07d0      	lsls	r0, r2, #31
 8011a86:	d502      	bpl.n	8011a8e <_printf_float+0x1a6>
 8011a88:	3301      	adds	r3, #1
 8011a8a:	440b      	add	r3, r1
 8011a8c:	6123      	str	r3, [r4, #16]
 8011a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a90:	f04f 0900 	mov.w	r9, #0
 8011a94:	e7de      	b.n	8011a54 <_printf_float+0x16c>
 8011a96:	b913      	cbnz	r3, 8011a9e <_printf_float+0x1b6>
 8011a98:	6822      	ldr	r2, [r4, #0]
 8011a9a:	07d2      	lsls	r2, r2, #31
 8011a9c:	d501      	bpl.n	8011aa2 <_printf_float+0x1ba>
 8011a9e:	3302      	adds	r3, #2
 8011aa0:	e7f4      	b.n	8011a8c <_printf_float+0x1a4>
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	e7f2      	b.n	8011a8c <_printf_float+0x1a4>
 8011aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aac:	4299      	cmp	r1, r3
 8011aae:	db05      	blt.n	8011abc <_printf_float+0x1d4>
 8011ab0:	6823      	ldr	r3, [r4, #0]
 8011ab2:	6121      	str	r1, [r4, #16]
 8011ab4:	07d8      	lsls	r0, r3, #31
 8011ab6:	d5ea      	bpl.n	8011a8e <_printf_float+0x1a6>
 8011ab8:	1c4b      	adds	r3, r1, #1
 8011aba:	e7e7      	b.n	8011a8c <_printf_float+0x1a4>
 8011abc:	2900      	cmp	r1, #0
 8011abe:	bfd4      	ite	le
 8011ac0:	f1c1 0202 	rsble	r2, r1, #2
 8011ac4:	2201      	movgt	r2, #1
 8011ac6:	4413      	add	r3, r2
 8011ac8:	e7e0      	b.n	8011a8c <_printf_float+0x1a4>
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	055a      	lsls	r2, r3, #21
 8011ace:	d407      	bmi.n	8011ae0 <_printf_float+0x1f8>
 8011ad0:	6923      	ldr	r3, [r4, #16]
 8011ad2:	4642      	mov	r2, r8
 8011ad4:	4631      	mov	r1, r6
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	47b8      	blx	r7
 8011ada:	3001      	adds	r0, #1
 8011adc:	d12c      	bne.n	8011b38 <_printf_float+0x250>
 8011ade:	e764      	b.n	80119aa <_printf_float+0xc2>
 8011ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011ae4:	f240 80e0 	bls.w	8011ca8 <_printf_float+0x3c0>
 8011ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011aec:	2200      	movs	r2, #0
 8011aee:	2300      	movs	r3, #0
 8011af0:	f7ef f802 	bl	8000af8 <__aeabi_dcmpeq>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	d034      	beq.n	8011b62 <_printf_float+0x27a>
 8011af8:	4a37      	ldr	r2, [pc, #220]	; (8011bd8 <_printf_float+0x2f0>)
 8011afa:	2301      	movs	r3, #1
 8011afc:	4631      	mov	r1, r6
 8011afe:	4628      	mov	r0, r5
 8011b00:	47b8      	blx	r7
 8011b02:	3001      	adds	r0, #1
 8011b04:	f43f af51 	beq.w	80119aa <_printf_float+0xc2>
 8011b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	db02      	blt.n	8011b16 <_printf_float+0x22e>
 8011b10:	6823      	ldr	r3, [r4, #0]
 8011b12:	07d8      	lsls	r0, r3, #31
 8011b14:	d510      	bpl.n	8011b38 <_printf_float+0x250>
 8011b16:	ee18 3a10 	vmov	r3, s16
 8011b1a:	4652      	mov	r2, sl
 8011b1c:	4631      	mov	r1, r6
 8011b1e:	4628      	mov	r0, r5
 8011b20:	47b8      	blx	r7
 8011b22:	3001      	adds	r0, #1
 8011b24:	f43f af41 	beq.w	80119aa <_printf_float+0xc2>
 8011b28:	f04f 0800 	mov.w	r8, #0
 8011b2c:	f104 091a 	add.w	r9, r4, #26
 8011b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b32:	3b01      	subs	r3, #1
 8011b34:	4543      	cmp	r3, r8
 8011b36:	dc09      	bgt.n	8011b4c <_printf_float+0x264>
 8011b38:	6823      	ldr	r3, [r4, #0]
 8011b3a:	079b      	lsls	r3, r3, #30
 8011b3c:	f100 8105 	bmi.w	8011d4a <_printf_float+0x462>
 8011b40:	68e0      	ldr	r0, [r4, #12]
 8011b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b44:	4298      	cmp	r0, r3
 8011b46:	bfb8      	it	lt
 8011b48:	4618      	movlt	r0, r3
 8011b4a:	e730      	b.n	80119ae <_printf_float+0xc6>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	464a      	mov	r2, r9
 8011b50:	4631      	mov	r1, r6
 8011b52:	4628      	mov	r0, r5
 8011b54:	47b8      	blx	r7
 8011b56:	3001      	adds	r0, #1
 8011b58:	f43f af27 	beq.w	80119aa <_printf_float+0xc2>
 8011b5c:	f108 0801 	add.w	r8, r8, #1
 8011b60:	e7e6      	b.n	8011b30 <_printf_float+0x248>
 8011b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	dc39      	bgt.n	8011bdc <_printf_float+0x2f4>
 8011b68:	4a1b      	ldr	r2, [pc, #108]	; (8011bd8 <_printf_float+0x2f0>)
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	4631      	mov	r1, r6
 8011b6e:	4628      	mov	r0, r5
 8011b70:	47b8      	blx	r7
 8011b72:	3001      	adds	r0, #1
 8011b74:	f43f af19 	beq.w	80119aa <_printf_float+0xc2>
 8011b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	d102      	bne.n	8011b86 <_printf_float+0x29e>
 8011b80:	6823      	ldr	r3, [r4, #0]
 8011b82:	07d9      	lsls	r1, r3, #31
 8011b84:	d5d8      	bpl.n	8011b38 <_printf_float+0x250>
 8011b86:	ee18 3a10 	vmov	r3, s16
 8011b8a:	4652      	mov	r2, sl
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	4628      	mov	r0, r5
 8011b90:	47b8      	blx	r7
 8011b92:	3001      	adds	r0, #1
 8011b94:	f43f af09 	beq.w	80119aa <_printf_float+0xc2>
 8011b98:	f04f 0900 	mov.w	r9, #0
 8011b9c:	f104 0a1a 	add.w	sl, r4, #26
 8011ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ba2:	425b      	negs	r3, r3
 8011ba4:	454b      	cmp	r3, r9
 8011ba6:	dc01      	bgt.n	8011bac <_printf_float+0x2c4>
 8011ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011baa:	e792      	b.n	8011ad2 <_printf_float+0x1ea>
 8011bac:	2301      	movs	r3, #1
 8011bae:	4652      	mov	r2, sl
 8011bb0:	4631      	mov	r1, r6
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	47b8      	blx	r7
 8011bb6:	3001      	adds	r0, #1
 8011bb8:	f43f aef7 	beq.w	80119aa <_printf_float+0xc2>
 8011bbc:	f109 0901 	add.w	r9, r9, #1
 8011bc0:	e7ee      	b.n	8011ba0 <_printf_float+0x2b8>
 8011bc2:	bf00      	nop
 8011bc4:	7fefffff 	.word	0x7fefffff
 8011bc8:	0801613c 	.word	0x0801613c
 8011bcc:	08016140 	.word	0x08016140
 8011bd0:	08016148 	.word	0x08016148
 8011bd4:	08016144 	.word	0x08016144
 8011bd8:	0801614c 	.word	0x0801614c
 8011bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011be0:	429a      	cmp	r2, r3
 8011be2:	bfa8      	it	ge
 8011be4:	461a      	movge	r2, r3
 8011be6:	2a00      	cmp	r2, #0
 8011be8:	4691      	mov	r9, r2
 8011bea:	dc37      	bgt.n	8011c5c <_printf_float+0x374>
 8011bec:	f04f 0b00 	mov.w	fp, #0
 8011bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bf4:	f104 021a 	add.w	r2, r4, #26
 8011bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011bfa:	9305      	str	r3, [sp, #20]
 8011bfc:	eba3 0309 	sub.w	r3, r3, r9
 8011c00:	455b      	cmp	r3, fp
 8011c02:	dc33      	bgt.n	8011c6c <_printf_float+0x384>
 8011c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	db3b      	blt.n	8011c84 <_printf_float+0x39c>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	07da      	lsls	r2, r3, #31
 8011c10:	d438      	bmi.n	8011c84 <_printf_float+0x39c>
 8011c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c14:	9a05      	ldr	r2, [sp, #20]
 8011c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c18:	1a9a      	subs	r2, r3, r2
 8011c1a:	eba3 0901 	sub.w	r9, r3, r1
 8011c1e:	4591      	cmp	r9, r2
 8011c20:	bfa8      	it	ge
 8011c22:	4691      	movge	r9, r2
 8011c24:	f1b9 0f00 	cmp.w	r9, #0
 8011c28:	dc35      	bgt.n	8011c96 <_printf_float+0x3ae>
 8011c2a:	f04f 0800 	mov.w	r8, #0
 8011c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c32:	f104 0a1a 	add.w	sl, r4, #26
 8011c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c3a:	1a9b      	subs	r3, r3, r2
 8011c3c:	eba3 0309 	sub.w	r3, r3, r9
 8011c40:	4543      	cmp	r3, r8
 8011c42:	f77f af79 	ble.w	8011b38 <_printf_float+0x250>
 8011c46:	2301      	movs	r3, #1
 8011c48:	4652      	mov	r2, sl
 8011c4a:	4631      	mov	r1, r6
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	47b8      	blx	r7
 8011c50:	3001      	adds	r0, #1
 8011c52:	f43f aeaa 	beq.w	80119aa <_printf_float+0xc2>
 8011c56:	f108 0801 	add.w	r8, r8, #1
 8011c5a:	e7ec      	b.n	8011c36 <_printf_float+0x34e>
 8011c5c:	4613      	mov	r3, r2
 8011c5e:	4631      	mov	r1, r6
 8011c60:	4642      	mov	r2, r8
 8011c62:	4628      	mov	r0, r5
 8011c64:	47b8      	blx	r7
 8011c66:	3001      	adds	r0, #1
 8011c68:	d1c0      	bne.n	8011bec <_printf_float+0x304>
 8011c6a:	e69e      	b.n	80119aa <_printf_float+0xc2>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	4631      	mov	r1, r6
 8011c70:	4628      	mov	r0, r5
 8011c72:	9205      	str	r2, [sp, #20]
 8011c74:	47b8      	blx	r7
 8011c76:	3001      	adds	r0, #1
 8011c78:	f43f ae97 	beq.w	80119aa <_printf_float+0xc2>
 8011c7c:	9a05      	ldr	r2, [sp, #20]
 8011c7e:	f10b 0b01 	add.w	fp, fp, #1
 8011c82:	e7b9      	b.n	8011bf8 <_printf_float+0x310>
 8011c84:	ee18 3a10 	vmov	r3, s16
 8011c88:	4652      	mov	r2, sl
 8011c8a:	4631      	mov	r1, r6
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	47b8      	blx	r7
 8011c90:	3001      	adds	r0, #1
 8011c92:	d1be      	bne.n	8011c12 <_printf_float+0x32a>
 8011c94:	e689      	b.n	80119aa <_printf_float+0xc2>
 8011c96:	9a05      	ldr	r2, [sp, #20]
 8011c98:	464b      	mov	r3, r9
 8011c9a:	4442      	add	r2, r8
 8011c9c:	4631      	mov	r1, r6
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	47b8      	blx	r7
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d1c1      	bne.n	8011c2a <_printf_float+0x342>
 8011ca6:	e680      	b.n	80119aa <_printf_float+0xc2>
 8011ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011caa:	2a01      	cmp	r2, #1
 8011cac:	dc01      	bgt.n	8011cb2 <_printf_float+0x3ca>
 8011cae:	07db      	lsls	r3, r3, #31
 8011cb0:	d538      	bpl.n	8011d24 <_printf_float+0x43c>
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	4642      	mov	r2, r8
 8011cb6:	4631      	mov	r1, r6
 8011cb8:	4628      	mov	r0, r5
 8011cba:	47b8      	blx	r7
 8011cbc:	3001      	adds	r0, #1
 8011cbe:	f43f ae74 	beq.w	80119aa <_printf_float+0xc2>
 8011cc2:	ee18 3a10 	vmov	r3, s16
 8011cc6:	4652      	mov	r2, sl
 8011cc8:	4631      	mov	r1, r6
 8011cca:	4628      	mov	r0, r5
 8011ccc:	47b8      	blx	r7
 8011cce:	3001      	adds	r0, #1
 8011cd0:	f43f ae6b 	beq.w	80119aa <_printf_float+0xc2>
 8011cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f7ee ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 8011ce0:	b9d8      	cbnz	r0, 8011d1a <_printf_float+0x432>
 8011ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ce4:	f108 0201 	add.w	r2, r8, #1
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	4631      	mov	r1, r6
 8011cec:	4628      	mov	r0, r5
 8011cee:	47b8      	blx	r7
 8011cf0:	3001      	adds	r0, #1
 8011cf2:	d10e      	bne.n	8011d12 <_printf_float+0x42a>
 8011cf4:	e659      	b.n	80119aa <_printf_float+0xc2>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	4652      	mov	r2, sl
 8011cfa:	4631      	mov	r1, r6
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	47b8      	blx	r7
 8011d00:	3001      	adds	r0, #1
 8011d02:	f43f ae52 	beq.w	80119aa <_printf_float+0xc2>
 8011d06:	f108 0801 	add.w	r8, r8, #1
 8011d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	4543      	cmp	r3, r8
 8011d10:	dcf1      	bgt.n	8011cf6 <_printf_float+0x40e>
 8011d12:	464b      	mov	r3, r9
 8011d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d18:	e6dc      	b.n	8011ad4 <_printf_float+0x1ec>
 8011d1a:	f04f 0800 	mov.w	r8, #0
 8011d1e:	f104 0a1a 	add.w	sl, r4, #26
 8011d22:	e7f2      	b.n	8011d0a <_printf_float+0x422>
 8011d24:	2301      	movs	r3, #1
 8011d26:	4642      	mov	r2, r8
 8011d28:	e7df      	b.n	8011cea <_printf_float+0x402>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	464a      	mov	r2, r9
 8011d2e:	4631      	mov	r1, r6
 8011d30:	4628      	mov	r0, r5
 8011d32:	47b8      	blx	r7
 8011d34:	3001      	adds	r0, #1
 8011d36:	f43f ae38 	beq.w	80119aa <_printf_float+0xc2>
 8011d3a:	f108 0801 	add.w	r8, r8, #1
 8011d3e:	68e3      	ldr	r3, [r4, #12]
 8011d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d42:	1a5b      	subs	r3, r3, r1
 8011d44:	4543      	cmp	r3, r8
 8011d46:	dcf0      	bgt.n	8011d2a <_printf_float+0x442>
 8011d48:	e6fa      	b.n	8011b40 <_printf_float+0x258>
 8011d4a:	f04f 0800 	mov.w	r8, #0
 8011d4e:	f104 0919 	add.w	r9, r4, #25
 8011d52:	e7f4      	b.n	8011d3e <_printf_float+0x456>

08011d54 <_printf_common>:
 8011d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d58:	4616      	mov	r6, r2
 8011d5a:	4699      	mov	r9, r3
 8011d5c:	688a      	ldr	r2, [r1, #8]
 8011d5e:	690b      	ldr	r3, [r1, #16]
 8011d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d64:	4293      	cmp	r3, r2
 8011d66:	bfb8      	it	lt
 8011d68:	4613      	movlt	r3, r2
 8011d6a:	6033      	str	r3, [r6, #0]
 8011d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d70:	4607      	mov	r7, r0
 8011d72:	460c      	mov	r4, r1
 8011d74:	b10a      	cbz	r2, 8011d7a <_printf_common+0x26>
 8011d76:	3301      	adds	r3, #1
 8011d78:	6033      	str	r3, [r6, #0]
 8011d7a:	6823      	ldr	r3, [r4, #0]
 8011d7c:	0699      	lsls	r1, r3, #26
 8011d7e:	bf42      	ittt	mi
 8011d80:	6833      	ldrmi	r3, [r6, #0]
 8011d82:	3302      	addmi	r3, #2
 8011d84:	6033      	strmi	r3, [r6, #0]
 8011d86:	6825      	ldr	r5, [r4, #0]
 8011d88:	f015 0506 	ands.w	r5, r5, #6
 8011d8c:	d106      	bne.n	8011d9c <_printf_common+0x48>
 8011d8e:	f104 0a19 	add.w	sl, r4, #25
 8011d92:	68e3      	ldr	r3, [r4, #12]
 8011d94:	6832      	ldr	r2, [r6, #0]
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	42ab      	cmp	r3, r5
 8011d9a:	dc26      	bgt.n	8011dea <_printf_common+0x96>
 8011d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011da0:	1e13      	subs	r3, r2, #0
 8011da2:	6822      	ldr	r2, [r4, #0]
 8011da4:	bf18      	it	ne
 8011da6:	2301      	movne	r3, #1
 8011da8:	0692      	lsls	r2, r2, #26
 8011daa:	d42b      	bmi.n	8011e04 <_printf_common+0xb0>
 8011dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011db0:	4649      	mov	r1, r9
 8011db2:	4638      	mov	r0, r7
 8011db4:	47c0      	blx	r8
 8011db6:	3001      	adds	r0, #1
 8011db8:	d01e      	beq.n	8011df8 <_printf_common+0xa4>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	68e5      	ldr	r5, [r4, #12]
 8011dbe:	6832      	ldr	r2, [r6, #0]
 8011dc0:	f003 0306 	and.w	r3, r3, #6
 8011dc4:	2b04      	cmp	r3, #4
 8011dc6:	bf08      	it	eq
 8011dc8:	1aad      	subeq	r5, r5, r2
 8011dca:	68a3      	ldr	r3, [r4, #8]
 8011dcc:	6922      	ldr	r2, [r4, #16]
 8011dce:	bf0c      	ite	eq
 8011dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dd4:	2500      	movne	r5, #0
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	bfc4      	itt	gt
 8011dda:	1a9b      	subgt	r3, r3, r2
 8011ddc:	18ed      	addgt	r5, r5, r3
 8011dde:	2600      	movs	r6, #0
 8011de0:	341a      	adds	r4, #26
 8011de2:	42b5      	cmp	r5, r6
 8011de4:	d11a      	bne.n	8011e1c <_printf_common+0xc8>
 8011de6:	2000      	movs	r0, #0
 8011de8:	e008      	b.n	8011dfc <_printf_common+0xa8>
 8011dea:	2301      	movs	r3, #1
 8011dec:	4652      	mov	r2, sl
 8011dee:	4649      	mov	r1, r9
 8011df0:	4638      	mov	r0, r7
 8011df2:	47c0      	blx	r8
 8011df4:	3001      	adds	r0, #1
 8011df6:	d103      	bne.n	8011e00 <_printf_common+0xac>
 8011df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e00:	3501      	adds	r5, #1
 8011e02:	e7c6      	b.n	8011d92 <_printf_common+0x3e>
 8011e04:	18e1      	adds	r1, r4, r3
 8011e06:	1c5a      	adds	r2, r3, #1
 8011e08:	2030      	movs	r0, #48	; 0x30
 8011e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e0e:	4422      	add	r2, r4
 8011e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e18:	3302      	adds	r3, #2
 8011e1a:	e7c7      	b.n	8011dac <_printf_common+0x58>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	4622      	mov	r2, r4
 8011e20:	4649      	mov	r1, r9
 8011e22:	4638      	mov	r0, r7
 8011e24:	47c0      	blx	r8
 8011e26:	3001      	adds	r0, #1
 8011e28:	d0e6      	beq.n	8011df8 <_printf_common+0xa4>
 8011e2a:	3601      	adds	r6, #1
 8011e2c:	e7d9      	b.n	8011de2 <_printf_common+0x8e>
	...

08011e30 <_printf_i>:
 8011e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e34:	7e0f      	ldrb	r7, [r1, #24]
 8011e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e38:	2f78      	cmp	r7, #120	; 0x78
 8011e3a:	4691      	mov	r9, r2
 8011e3c:	4680      	mov	r8, r0
 8011e3e:	460c      	mov	r4, r1
 8011e40:	469a      	mov	sl, r3
 8011e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e46:	d807      	bhi.n	8011e58 <_printf_i+0x28>
 8011e48:	2f62      	cmp	r7, #98	; 0x62
 8011e4a:	d80a      	bhi.n	8011e62 <_printf_i+0x32>
 8011e4c:	2f00      	cmp	r7, #0
 8011e4e:	f000 80d8 	beq.w	8012002 <_printf_i+0x1d2>
 8011e52:	2f58      	cmp	r7, #88	; 0x58
 8011e54:	f000 80a3 	beq.w	8011f9e <_printf_i+0x16e>
 8011e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e60:	e03a      	b.n	8011ed8 <_printf_i+0xa8>
 8011e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e66:	2b15      	cmp	r3, #21
 8011e68:	d8f6      	bhi.n	8011e58 <_printf_i+0x28>
 8011e6a:	a101      	add	r1, pc, #4	; (adr r1, 8011e70 <_printf_i+0x40>)
 8011e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e70:	08011ec9 	.word	0x08011ec9
 8011e74:	08011edd 	.word	0x08011edd
 8011e78:	08011e59 	.word	0x08011e59
 8011e7c:	08011e59 	.word	0x08011e59
 8011e80:	08011e59 	.word	0x08011e59
 8011e84:	08011e59 	.word	0x08011e59
 8011e88:	08011edd 	.word	0x08011edd
 8011e8c:	08011e59 	.word	0x08011e59
 8011e90:	08011e59 	.word	0x08011e59
 8011e94:	08011e59 	.word	0x08011e59
 8011e98:	08011e59 	.word	0x08011e59
 8011e9c:	08011fe9 	.word	0x08011fe9
 8011ea0:	08011f0d 	.word	0x08011f0d
 8011ea4:	08011fcb 	.word	0x08011fcb
 8011ea8:	08011e59 	.word	0x08011e59
 8011eac:	08011e59 	.word	0x08011e59
 8011eb0:	0801200b 	.word	0x0801200b
 8011eb4:	08011e59 	.word	0x08011e59
 8011eb8:	08011f0d 	.word	0x08011f0d
 8011ebc:	08011e59 	.word	0x08011e59
 8011ec0:	08011e59 	.word	0x08011e59
 8011ec4:	08011fd3 	.word	0x08011fd3
 8011ec8:	682b      	ldr	r3, [r5, #0]
 8011eca:	1d1a      	adds	r2, r3, #4
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	602a      	str	r2, [r5, #0]
 8011ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e0a3      	b.n	8012024 <_printf_i+0x1f4>
 8011edc:	6820      	ldr	r0, [r4, #0]
 8011ede:	6829      	ldr	r1, [r5, #0]
 8011ee0:	0606      	lsls	r6, r0, #24
 8011ee2:	f101 0304 	add.w	r3, r1, #4
 8011ee6:	d50a      	bpl.n	8011efe <_printf_i+0xce>
 8011ee8:	680e      	ldr	r6, [r1, #0]
 8011eea:	602b      	str	r3, [r5, #0]
 8011eec:	2e00      	cmp	r6, #0
 8011eee:	da03      	bge.n	8011ef8 <_printf_i+0xc8>
 8011ef0:	232d      	movs	r3, #45	; 0x2d
 8011ef2:	4276      	negs	r6, r6
 8011ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ef8:	485e      	ldr	r0, [pc, #376]	; (8012074 <_printf_i+0x244>)
 8011efa:	230a      	movs	r3, #10
 8011efc:	e019      	b.n	8011f32 <_printf_i+0x102>
 8011efe:	680e      	ldr	r6, [r1, #0]
 8011f00:	602b      	str	r3, [r5, #0]
 8011f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f06:	bf18      	it	ne
 8011f08:	b236      	sxthne	r6, r6
 8011f0a:	e7ef      	b.n	8011eec <_printf_i+0xbc>
 8011f0c:	682b      	ldr	r3, [r5, #0]
 8011f0e:	6820      	ldr	r0, [r4, #0]
 8011f10:	1d19      	adds	r1, r3, #4
 8011f12:	6029      	str	r1, [r5, #0]
 8011f14:	0601      	lsls	r1, r0, #24
 8011f16:	d501      	bpl.n	8011f1c <_printf_i+0xec>
 8011f18:	681e      	ldr	r6, [r3, #0]
 8011f1a:	e002      	b.n	8011f22 <_printf_i+0xf2>
 8011f1c:	0646      	lsls	r6, r0, #25
 8011f1e:	d5fb      	bpl.n	8011f18 <_printf_i+0xe8>
 8011f20:	881e      	ldrh	r6, [r3, #0]
 8011f22:	4854      	ldr	r0, [pc, #336]	; (8012074 <_printf_i+0x244>)
 8011f24:	2f6f      	cmp	r7, #111	; 0x6f
 8011f26:	bf0c      	ite	eq
 8011f28:	2308      	moveq	r3, #8
 8011f2a:	230a      	movne	r3, #10
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f32:	6865      	ldr	r5, [r4, #4]
 8011f34:	60a5      	str	r5, [r4, #8]
 8011f36:	2d00      	cmp	r5, #0
 8011f38:	bfa2      	ittt	ge
 8011f3a:	6821      	ldrge	r1, [r4, #0]
 8011f3c:	f021 0104 	bicge.w	r1, r1, #4
 8011f40:	6021      	strge	r1, [r4, #0]
 8011f42:	b90e      	cbnz	r6, 8011f48 <_printf_i+0x118>
 8011f44:	2d00      	cmp	r5, #0
 8011f46:	d04d      	beq.n	8011fe4 <_printf_i+0x1b4>
 8011f48:	4615      	mov	r5, r2
 8011f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8011f52:	5dc7      	ldrb	r7, [r0, r7]
 8011f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011f58:	4637      	mov	r7, r6
 8011f5a:	42bb      	cmp	r3, r7
 8011f5c:	460e      	mov	r6, r1
 8011f5e:	d9f4      	bls.n	8011f4a <_printf_i+0x11a>
 8011f60:	2b08      	cmp	r3, #8
 8011f62:	d10b      	bne.n	8011f7c <_printf_i+0x14c>
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	07de      	lsls	r6, r3, #31
 8011f68:	d508      	bpl.n	8011f7c <_printf_i+0x14c>
 8011f6a:	6923      	ldr	r3, [r4, #16]
 8011f6c:	6861      	ldr	r1, [r4, #4]
 8011f6e:	4299      	cmp	r1, r3
 8011f70:	bfde      	ittt	le
 8011f72:	2330      	movle	r3, #48	; 0x30
 8011f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011f7c:	1b52      	subs	r2, r2, r5
 8011f7e:	6122      	str	r2, [r4, #16]
 8011f80:	f8cd a000 	str.w	sl, [sp]
 8011f84:	464b      	mov	r3, r9
 8011f86:	aa03      	add	r2, sp, #12
 8011f88:	4621      	mov	r1, r4
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	f7ff fee2 	bl	8011d54 <_printf_common>
 8011f90:	3001      	adds	r0, #1
 8011f92:	d14c      	bne.n	801202e <_printf_i+0x1fe>
 8011f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f98:	b004      	add	sp, #16
 8011f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f9e:	4835      	ldr	r0, [pc, #212]	; (8012074 <_printf_i+0x244>)
 8011fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011fa4:	6829      	ldr	r1, [r5, #0]
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011fac:	6029      	str	r1, [r5, #0]
 8011fae:	061d      	lsls	r5, r3, #24
 8011fb0:	d514      	bpl.n	8011fdc <_printf_i+0x1ac>
 8011fb2:	07df      	lsls	r7, r3, #31
 8011fb4:	bf44      	itt	mi
 8011fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8011fba:	6023      	strmi	r3, [r4, #0]
 8011fbc:	b91e      	cbnz	r6, 8011fc6 <_printf_i+0x196>
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	f023 0320 	bic.w	r3, r3, #32
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	2310      	movs	r3, #16
 8011fc8:	e7b0      	b.n	8011f2c <_printf_i+0xfc>
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	f043 0320 	orr.w	r3, r3, #32
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	2378      	movs	r3, #120	; 0x78
 8011fd4:	4828      	ldr	r0, [pc, #160]	; (8012078 <_printf_i+0x248>)
 8011fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fda:	e7e3      	b.n	8011fa4 <_printf_i+0x174>
 8011fdc:	0659      	lsls	r1, r3, #25
 8011fde:	bf48      	it	mi
 8011fe0:	b2b6      	uxthmi	r6, r6
 8011fe2:	e7e6      	b.n	8011fb2 <_printf_i+0x182>
 8011fe4:	4615      	mov	r5, r2
 8011fe6:	e7bb      	b.n	8011f60 <_printf_i+0x130>
 8011fe8:	682b      	ldr	r3, [r5, #0]
 8011fea:	6826      	ldr	r6, [r4, #0]
 8011fec:	6961      	ldr	r1, [r4, #20]
 8011fee:	1d18      	adds	r0, r3, #4
 8011ff0:	6028      	str	r0, [r5, #0]
 8011ff2:	0635      	lsls	r5, r6, #24
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	d501      	bpl.n	8011ffc <_printf_i+0x1cc>
 8011ff8:	6019      	str	r1, [r3, #0]
 8011ffa:	e002      	b.n	8012002 <_printf_i+0x1d2>
 8011ffc:	0670      	lsls	r0, r6, #25
 8011ffe:	d5fb      	bpl.n	8011ff8 <_printf_i+0x1c8>
 8012000:	8019      	strh	r1, [r3, #0]
 8012002:	2300      	movs	r3, #0
 8012004:	6123      	str	r3, [r4, #16]
 8012006:	4615      	mov	r5, r2
 8012008:	e7ba      	b.n	8011f80 <_printf_i+0x150>
 801200a:	682b      	ldr	r3, [r5, #0]
 801200c:	1d1a      	adds	r2, r3, #4
 801200e:	602a      	str	r2, [r5, #0]
 8012010:	681d      	ldr	r5, [r3, #0]
 8012012:	6862      	ldr	r2, [r4, #4]
 8012014:	2100      	movs	r1, #0
 8012016:	4628      	mov	r0, r5
 8012018:	f7ee f8fa 	bl	8000210 <memchr>
 801201c:	b108      	cbz	r0, 8012022 <_printf_i+0x1f2>
 801201e:	1b40      	subs	r0, r0, r5
 8012020:	6060      	str	r0, [r4, #4]
 8012022:	6863      	ldr	r3, [r4, #4]
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	2300      	movs	r3, #0
 8012028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801202c:	e7a8      	b.n	8011f80 <_printf_i+0x150>
 801202e:	6923      	ldr	r3, [r4, #16]
 8012030:	462a      	mov	r2, r5
 8012032:	4649      	mov	r1, r9
 8012034:	4640      	mov	r0, r8
 8012036:	47d0      	blx	sl
 8012038:	3001      	adds	r0, #1
 801203a:	d0ab      	beq.n	8011f94 <_printf_i+0x164>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	079b      	lsls	r3, r3, #30
 8012040:	d413      	bmi.n	801206a <_printf_i+0x23a>
 8012042:	68e0      	ldr	r0, [r4, #12]
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	4298      	cmp	r0, r3
 8012048:	bfb8      	it	lt
 801204a:	4618      	movlt	r0, r3
 801204c:	e7a4      	b.n	8011f98 <_printf_i+0x168>
 801204e:	2301      	movs	r3, #1
 8012050:	4632      	mov	r2, r6
 8012052:	4649      	mov	r1, r9
 8012054:	4640      	mov	r0, r8
 8012056:	47d0      	blx	sl
 8012058:	3001      	adds	r0, #1
 801205a:	d09b      	beq.n	8011f94 <_printf_i+0x164>
 801205c:	3501      	adds	r5, #1
 801205e:	68e3      	ldr	r3, [r4, #12]
 8012060:	9903      	ldr	r1, [sp, #12]
 8012062:	1a5b      	subs	r3, r3, r1
 8012064:	42ab      	cmp	r3, r5
 8012066:	dcf2      	bgt.n	801204e <_printf_i+0x21e>
 8012068:	e7eb      	b.n	8012042 <_printf_i+0x212>
 801206a:	2500      	movs	r5, #0
 801206c:	f104 0619 	add.w	r6, r4, #25
 8012070:	e7f5      	b.n	801205e <_printf_i+0x22e>
 8012072:	bf00      	nop
 8012074:	0801614e 	.word	0x0801614e
 8012078:	0801615f 	.word	0x0801615f

0801207c <_scanf_float>:
 801207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012080:	b087      	sub	sp, #28
 8012082:	4617      	mov	r7, r2
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	688b      	ldr	r3, [r1, #8]
 8012088:	1e5a      	subs	r2, r3, #1
 801208a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801208e:	bf83      	ittte	hi
 8012090:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012094:	195b      	addhi	r3, r3, r5
 8012096:	9302      	strhi	r3, [sp, #8]
 8012098:	2300      	movls	r3, #0
 801209a:	bf86      	itte	hi
 801209c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80120a0:	608b      	strhi	r3, [r1, #8]
 80120a2:	9302      	strls	r3, [sp, #8]
 80120a4:	680b      	ldr	r3, [r1, #0]
 80120a6:	468b      	mov	fp, r1
 80120a8:	2500      	movs	r5, #0
 80120aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80120ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80120b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80120b6:	4680      	mov	r8, r0
 80120b8:	460c      	mov	r4, r1
 80120ba:	465e      	mov	r6, fp
 80120bc:	46aa      	mov	sl, r5
 80120be:	46a9      	mov	r9, r5
 80120c0:	9501      	str	r5, [sp, #4]
 80120c2:	68a2      	ldr	r2, [r4, #8]
 80120c4:	b152      	cbz	r2, 80120dc <_scanf_float+0x60>
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	2b4e      	cmp	r3, #78	; 0x4e
 80120cc:	d864      	bhi.n	8012198 <_scanf_float+0x11c>
 80120ce:	2b40      	cmp	r3, #64	; 0x40
 80120d0:	d83c      	bhi.n	801214c <_scanf_float+0xd0>
 80120d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80120d6:	b2c8      	uxtb	r0, r1
 80120d8:	280e      	cmp	r0, #14
 80120da:	d93a      	bls.n	8012152 <_scanf_float+0xd6>
 80120dc:	f1b9 0f00 	cmp.w	r9, #0
 80120e0:	d003      	beq.n	80120ea <_scanf_float+0x6e>
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120e8:	6023      	str	r3, [r4, #0]
 80120ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80120ee:	f1ba 0f01 	cmp.w	sl, #1
 80120f2:	f200 8113 	bhi.w	801231c <_scanf_float+0x2a0>
 80120f6:	455e      	cmp	r6, fp
 80120f8:	f200 8105 	bhi.w	8012306 <_scanf_float+0x28a>
 80120fc:	2501      	movs	r5, #1
 80120fe:	4628      	mov	r0, r5
 8012100:	b007      	add	sp, #28
 8012102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012106:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801210a:	2a0d      	cmp	r2, #13
 801210c:	d8e6      	bhi.n	80120dc <_scanf_float+0x60>
 801210e:	a101      	add	r1, pc, #4	; (adr r1, 8012114 <_scanf_float+0x98>)
 8012110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012114:	08012253 	.word	0x08012253
 8012118:	080120dd 	.word	0x080120dd
 801211c:	080120dd 	.word	0x080120dd
 8012120:	080120dd 	.word	0x080120dd
 8012124:	080122b3 	.word	0x080122b3
 8012128:	0801228b 	.word	0x0801228b
 801212c:	080120dd 	.word	0x080120dd
 8012130:	080120dd 	.word	0x080120dd
 8012134:	08012261 	.word	0x08012261
 8012138:	080120dd 	.word	0x080120dd
 801213c:	080120dd 	.word	0x080120dd
 8012140:	080120dd 	.word	0x080120dd
 8012144:	080120dd 	.word	0x080120dd
 8012148:	08012219 	.word	0x08012219
 801214c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012150:	e7db      	b.n	801210a <_scanf_float+0x8e>
 8012152:	290e      	cmp	r1, #14
 8012154:	d8c2      	bhi.n	80120dc <_scanf_float+0x60>
 8012156:	a001      	add	r0, pc, #4	; (adr r0, 801215c <_scanf_float+0xe0>)
 8012158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801215c:	0801220b 	.word	0x0801220b
 8012160:	080120dd 	.word	0x080120dd
 8012164:	0801220b 	.word	0x0801220b
 8012168:	0801229f 	.word	0x0801229f
 801216c:	080120dd 	.word	0x080120dd
 8012170:	080121b9 	.word	0x080121b9
 8012174:	080121f5 	.word	0x080121f5
 8012178:	080121f5 	.word	0x080121f5
 801217c:	080121f5 	.word	0x080121f5
 8012180:	080121f5 	.word	0x080121f5
 8012184:	080121f5 	.word	0x080121f5
 8012188:	080121f5 	.word	0x080121f5
 801218c:	080121f5 	.word	0x080121f5
 8012190:	080121f5 	.word	0x080121f5
 8012194:	080121f5 	.word	0x080121f5
 8012198:	2b6e      	cmp	r3, #110	; 0x6e
 801219a:	d809      	bhi.n	80121b0 <_scanf_float+0x134>
 801219c:	2b60      	cmp	r3, #96	; 0x60
 801219e:	d8b2      	bhi.n	8012106 <_scanf_float+0x8a>
 80121a0:	2b54      	cmp	r3, #84	; 0x54
 80121a2:	d077      	beq.n	8012294 <_scanf_float+0x218>
 80121a4:	2b59      	cmp	r3, #89	; 0x59
 80121a6:	d199      	bne.n	80120dc <_scanf_float+0x60>
 80121a8:	2d07      	cmp	r5, #7
 80121aa:	d197      	bne.n	80120dc <_scanf_float+0x60>
 80121ac:	2508      	movs	r5, #8
 80121ae:	e029      	b.n	8012204 <_scanf_float+0x188>
 80121b0:	2b74      	cmp	r3, #116	; 0x74
 80121b2:	d06f      	beq.n	8012294 <_scanf_float+0x218>
 80121b4:	2b79      	cmp	r3, #121	; 0x79
 80121b6:	e7f6      	b.n	80121a6 <_scanf_float+0x12a>
 80121b8:	6821      	ldr	r1, [r4, #0]
 80121ba:	05c8      	lsls	r0, r1, #23
 80121bc:	d51a      	bpl.n	80121f4 <_scanf_float+0x178>
 80121be:	9b02      	ldr	r3, [sp, #8]
 80121c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80121c4:	6021      	str	r1, [r4, #0]
 80121c6:	f109 0901 	add.w	r9, r9, #1
 80121ca:	b11b      	cbz	r3, 80121d4 <_scanf_float+0x158>
 80121cc:	3b01      	subs	r3, #1
 80121ce:	3201      	adds	r2, #1
 80121d0:	9302      	str	r3, [sp, #8]
 80121d2:	60a2      	str	r2, [r4, #8]
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	3b01      	subs	r3, #1
 80121d8:	60a3      	str	r3, [r4, #8]
 80121da:	6923      	ldr	r3, [r4, #16]
 80121dc:	3301      	adds	r3, #1
 80121de:	6123      	str	r3, [r4, #16]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3b01      	subs	r3, #1
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	607b      	str	r3, [r7, #4]
 80121e8:	f340 8084 	ble.w	80122f4 <_scanf_float+0x278>
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	3301      	adds	r3, #1
 80121f0:	603b      	str	r3, [r7, #0]
 80121f2:	e766      	b.n	80120c2 <_scanf_float+0x46>
 80121f4:	eb1a 0f05 	cmn.w	sl, r5
 80121f8:	f47f af70 	bne.w	80120dc <_scanf_float+0x60>
 80121fc:	6822      	ldr	r2, [r4, #0]
 80121fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012202:	6022      	str	r2, [r4, #0]
 8012204:	f806 3b01 	strb.w	r3, [r6], #1
 8012208:	e7e4      	b.n	80121d4 <_scanf_float+0x158>
 801220a:	6822      	ldr	r2, [r4, #0]
 801220c:	0610      	lsls	r0, r2, #24
 801220e:	f57f af65 	bpl.w	80120dc <_scanf_float+0x60>
 8012212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012216:	e7f4      	b.n	8012202 <_scanf_float+0x186>
 8012218:	f1ba 0f00 	cmp.w	sl, #0
 801221c:	d10e      	bne.n	801223c <_scanf_float+0x1c0>
 801221e:	f1b9 0f00 	cmp.w	r9, #0
 8012222:	d10e      	bne.n	8012242 <_scanf_float+0x1c6>
 8012224:	6822      	ldr	r2, [r4, #0]
 8012226:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801222a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801222e:	d108      	bne.n	8012242 <_scanf_float+0x1c6>
 8012230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012234:	6022      	str	r2, [r4, #0]
 8012236:	f04f 0a01 	mov.w	sl, #1
 801223a:	e7e3      	b.n	8012204 <_scanf_float+0x188>
 801223c:	f1ba 0f02 	cmp.w	sl, #2
 8012240:	d055      	beq.n	80122ee <_scanf_float+0x272>
 8012242:	2d01      	cmp	r5, #1
 8012244:	d002      	beq.n	801224c <_scanf_float+0x1d0>
 8012246:	2d04      	cmp	r5, #4
 8012248:	f47f af48 	bne.w	80120dc <_scanf_float+0x60>
 801224c:	3501      	adds	r5, #1
 801224e:	b2ed      	uxtb	r5, r5
 8012250:	e7d8      	b.n	8012204 <_scanf_float+0x188>
 8012252:	f1ba 0f01 	cmp.w	sl, #1
 8012256:	f47f af41 	bne.w	80120dc <_scanf_float+0x60>
 801225a:	f04f 0a02 	mov.w	sl, #2
 801225e:	e7d1      	b.n	8012204 <_scanf_float+0x188>
 8012260:	b97d      	cbnz	r5, 8012282 <_scanf_float+0x206>
 8012262:	f1b9 0f00 	cmp.w	r9, #0
 8012266:	f47f af3c 	bne.w	80120e2 <_scanf_float+0x66>
 801226a:	6822      	ldr	r2, [r4, #0]
 801226c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012274:	f47f af39 	bne.w	80120ea <_scanf_float+0x6e>
 8012278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801227c:	6022      	str	r2, [r4, #0]
 801227e:	2501      	movs	r5, #1
 8012280:	e7c0      	b.n	8012204 <_scanf_float+0x188>
 8012282:	2d03      	cmp	r5, #3
 8012284:	d0e2      	beq.n	801224c <_scanf_float+0x1d0>
 8012286:	2d05      	cmp	r5, #5
 8012288:	e7de      	b.n	8012248 <_scanf_float+0x1cc>
 801228a:	2d02      	cmp	r5, #2
 801228c:	f47f af26 	bne.w	80120dc <_scanf_float+0x60>
 8012290:	2503      	movs	r5, #3
 8012292:	e7b7      	b.n	8012204 <_scanf_float+0x188>
 8012294:	2d06      	cmp	r5, #6
 8012296:	f47f af21 	bne.w	80120dc <_scanf_float+0x60>
 801229a:	2507      	movs	r5, #7
 801229c:	e7b2      	b.n	8012204 <_scanf_float+0x188>
 801229e:	6822      	ldr	r2, [r4, #0]
 80122a0:	0591      	lsls	r1, r2, #22
 80122a2:	f57f af1b 	bpl.w	80120dc <_scanf_float+0x60>
 80122a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80122aa:	6022      	str	r2, [r4, #0]
 80122ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80122b0:	e7a8      	b.n	8012204 <_scanf_float+0x188>
 80122b2:	6822      	ldr	r2, [r4, #0]
 80122b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80122b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80122bc:	d006      	beq.n	80122cc <_scanf_float+0x250>
 80122be:	0550      	lsls	r0, r2, #21
 80122c0:	f57f af0c 	bpl.w	80120dc <_scanf_float+0x60>
 80122c4:	f1b9 0f00 	cmp.w	r9, #0
 80122c8:	f43f af0f 	beq.w	80120ea <_scanf_float+0x6e>
 80122cc:	0591      	lsls	r1, r2, #22
 80122ce:	bf58      	it	pl
 80122d0:	9901      	ldrpl	r1, [sp, #4]
 80122d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80122d6:	bf58      	it	pl
 80122d8:	eba9 0101 	subpl.w	r1, r9, r1
 80122dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80122e0:	bf58      	it	pl
 80122e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80122e6:	6022      	str	r2, [r4, #0]
 80122e8:	f04f 0900 	mov.w	r9, #0
 80122ec:	e78a      	b.n	8012204 <_scanf_float+0x188>
 80122ee:	f04f 0a03 	mov.w	sl, #3
 80122f2:	e787      	b.n	8012204 <_scanf_float+0x188>
 80122f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80122f8:	4639      	mov	r1, r7
 80122fa:	4640      	mov	r0, r8
 80122fc:	4798      	blx	r3
 80122fe:	2800      	cmp	r0, #0
 8012300:	f43f aedf 	beq.w	80120c2 <_scanf_float+0x46>
 8012304:	e6ea      	b.n	80120dc <_scanf_float+0x60>
 8012306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801230a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801230e:	463a      	mov	r2, r7
 8012310:	4640      	mov	r0, r8
 8012312:	4798      	blx	r3
 8012314:	6923      	ldr	r3, [r4, #16]
 8012316:	3b01      	subs	r3, #1
 8012318:	6123      	str	r3, [r4, #16]
 801231a:	e6ec      	b.n	80120f6 <_scanf_float+0x7a>
 801231c:	1e6b      	subs	r3, r5, #1
 801231e:	2b06      	cmp	r3, #6
 8012320:	d825      	bhi.n	801236e <_scanf_float+0x2f2>
 8012322:	2d02      	cmp	r5, #2
 8012324:	d836      	bhi.n	8012394 <_scanf_float+0x318>
 8012326:	455e      	cmp	r6, fp
 8012328:	f67f aee8 	bls.w	80120fc <_scanf_float+0x80>
 801232c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012330:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012334:	463a      	mov	r2, r7
 8012336:	4640      	mov	r0, r8
 8012338:	4798      	blx	r3
 801233a:	6923      	ldr	r3, [r4, #16]
 801233c:	3b01      	subs	r3, #1
 801233e:	6123      	str	r3, [r4, #16]
 8012340:	e7f1      	b.n	8012326 <_scanf_float+0x2aa>
 8012342:	9802      	ldr	r0, [sp, #8]
 8012344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012348:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801234c:	9002      	str	r0, [sp, #8]
 801234e:	463a      	mov	r2, r7
 8012350:	4640      	mov	r0, r8
 8012352:	4798      	blx	r3
 8012354:	6923      	ldr	r3, [r4, #16]
 8012356:	3b01      	subs	r3, #1
 8012358:	6123      	str	r3, [r4, #16]
 801235a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801235e:	fa5f fa8a 	uxtb.w	sl, sl
 8012362:	f1ba 0f02 	cmp.w	sl, #2
 8012366:	d1ec      	bne.n	8012342 <_scanf_float+0x2c6>
 8012368:	3d03      	subs	r5, #3
 801236a:	b2ed      	uxtb	r5, r5
 801236c:	1b76      	subs	r6, r6, r5
 801236e:	6823      	ldr	r3, [r4, #0]
 8012370:	05da      	lsls	r2, r3, #23
 8012372:	d52f      	bpl.n	80123d4 <_scanf_float+0x358>
 8012374:	055b      	lsls	r3, r3, #21
 8012376:	d510      	bpl.n	801239a <_scanf_float+0x31e>
 8012378:	455e      	cmp	r6, fp
 801237a:	f67f aebf 	bls.w	80120fc <_scanf_float+0x80>
 801237e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012386:	463a      	mov	r2, r7
 8012388:	4640      	mov	r0, r8
 801238a:	4798      	blx	r3
 801238c:	6923      	ldr	r3, [r4, #16]
 801238e:	3b01      	subs	r3, #1
 8012390:	6123      	str	r3, [r4, #16]
 8012392:	e7f1      	b.n	8012378 <_scanf_float+0x2fc>
 8012394:	46aa      	mov	sl, r5
 8012396:	9602      	str	r6, [sp, #8]
 8012398:	e7df      	b.n	801235a <_scanf_float+0x2de>
 801239a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801239e:	6923      	ldr	r3, [r4, #16]
 80123a0:	2965      	cmp	r1, #101	; 0x65
 80123a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80123a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80123aa:	6123      	str	r3, [r4, #16]
 80123ac:	d00c      	beq.n	80123c8 <_scanf_float+0x34c>
 80123ae:	2945      	cmp	r1, #69	; 0x45
 80123b0:	d00a      	beq.n	80123c8 <_scanf_float+0x34c>
 80123b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80123b6:	463a      	mov	r2, r7
 80123b8:	4640      	mov	r0, r8
 80123ba:	4798      	blx	r3
 80123bc:	6923      	ldr	r3, [r4, #16]
 80123be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80123c2:	3b01      	subs	r3, #1
 80123c4:	1eb5      	subs	r5, r6, #2
 80123c6:	6123      	str	r3, [r4, #16]
 80123c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80123cc:	463a      	mov	r2, r7
 80123ce:	4640      	mov	r0, r8
 80123d0:	4798      	blx	r3
 80123d2:	462e      	mov	r6, r5
 80123d4:	6825      	ldr	r5, [r4, #0]
 80123d6:	f015 0510 	ands.w	r5, r5, #16
 80123da:	d159      	bne.n	8012490 <_scanf_float+0x414>
 80123dc:	7035      	strb	r5, [r6, #0]
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80123e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123e8:	d11b      	bne.n	8012422 <_scanf_float+0x3a6>
 80123ea:	9b01      	ldr	r3, [sp, #4]
 80123ec:	454b      	cmp	r3, r9
 80123ee:	eba3 0209 	sub.w	r2, r3, r9
 80123f2:	d123      	bne.n	801243c <_scanf_float+0x3c0>
 80123f4:	2200      	movs	r2, #0
 80123f6:	4659      	mov	r1, fp
 80123f8:	4640      	mov	r0, r8
 80123fa:	f000 ff8b 	bl	8013314 <_strtod_r>
 80123fe:	6822      	ldr	r2, [r4, #0]
 8012400:	9b03      	ldr	r3, [sp, #12]
 8012402:	f012 0f02 	tst.w	r2, #2
 8012406:	ec57 6b10 	vmov	r6, r7, d0
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	d021      	beq.n	8012452 <_scanf_float+0x3d6>
 801240e:	9903      	ldr	r1, [sp, #12]
 8012410:	1d1a      	adds	r2, r3, #4
 8012412:	600a      	str	r2, [r1, #0]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	e9c3 6700 	strd	r6, r7, [r3]
 801241a:	68e3      	ldr	r3, [r4, #12]
 801241c:	3301      	adds	r3, #1
 801241e:	60e3      	str	r3, [r4, #12]
 8012420:	e66d      	b.n	80120fe <_scanf_float+0x82>
 8012422:	9b04      	ldr	r3, [sp, #16]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d0e5      	beq.n	80123f4 <_scanf_float+0x378>
 8012428:	9905      	ldr	r1, [sp, #20]
 801242a:	230a      	movs	r3, #10
 801242c:	462a      	mov	r2, r5
 801242e:	3101      	adds	r1, #1
 8012430:	4640      	mov	r0, r8
 8012432:	f000 fff7 	bl	8013424 <_strtol_r>
 8012436:	9b04      	ldr	r3, [sp, #16]
 8012438:	9e05      	ldr	r6, [sp, #20]
 801243a:	1ac2      	subs	r2, r0, r3
 801243c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012440:	429e      	cmp	r6, r3
 8012442:	bf28      	it	cs
 8012444:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012448:	4912      	ldr	r1, [pc, #72]	; (8012494 <_scanf_float+0x418>)
 801244a:	4630      	mov	r0, r6
 801244c:	f000 f8da 	bl	8012604 <siprintf>
 8012450:	e7d0      	b.n	80123f4 <_scanf_float+0x378>
 8012452:	9903      	ldr	r1, [sp, #12]
 8012454:	f012 0f04 	tst.w	r2, #4
 8012458:	f103 0204 	add.w	r2, r3, #4
 801245c:	600a      	str	r2, [r1, #0]
 801245e:	d1d9      	bne.n	8012414 <_scanf_float+0x398>
 8012460:	f8d3 8000 	ldr.w	r8, [r3]
 8012464:	ee10 2a10 	vmov	r2, s0
 8012468:	ee10 0a10 	vmov	r0, s0
 801246c:	463b      	mov	r3, r7
 801246e:	4639      	mov	r1, r7
 8012470:	f7ee fb74 	bl	8000b5c <__aeabi_dcmpun>
 8012474:	b128      	cbz	r0, 8012482 <_scanf_float+0x406>
 8012476:	4808      	ldr	r0, [pc, #32]	; (8012498 <_scanf_float+0x41c>)
 8012478:	f000 f88a 	bl	8012590 <nanf>
 801247c:	ed88 0a00 	vstr	s0, [r8]
 8012480:	e7cb      	b.n	801241a <_scanf_float+0x39e>
 8012482:	4630      	mov	r0, r6
 8012484:	4639      	mov	r1, r7
 8012486:	f7ee fbc7 	bl	8000c18 <__aeabi_d2f>
 801248a:	f8c8 0000 	str.w	r0, [r8]
 801248e:	e7c4      	b.n	801241a <_scanf_float+0x39e>
 8012490:	2500      	movs	r5, #0
 8012492:	e634      	b.n	80120fe <_scanf_float+0x82>
 8012494:	08016170 	.word	0x08016170
 8012498:	08016578 	.word	0x08016578

0801249c <cleanup_glue>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	6809      	ldr	r1, [r1, #0]
 80124a2:	4605      	mov	r5, r0
 80124a4:	b109      	cbz	r1, 80124aa <cleanup_glue+0xe>
 80124a6:	f7ff fff9 	bl	801249c <cleanup_glue>
 80124aa:	4621      	mov	r1, r4
 80124ac:	4628      	mov	r0, r5
 80124ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124b2:	f002 bf9d 	b.w	80153f0 <_free_r>
	...

080124b8 <_reclaim_reent>:
 80124b8:	4b2c      	ldr	r3, [pc, #176]	; (801256c <_reclaim_reent+0xb4>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4283      	cmp	r3, r0
 80124be:	b570      	push	{r4, r5, r6, lr}
 80124c0:	4604      	mov	r4, r0
 80124c2:	d051      	beq.n	8012568 <_reclaim_reent+0xb0>
 80124c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124c6:	b143      	cbz	r3, 80124da <_reclaim_reent+0x22>
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d14a      	bne.n	8012564 <_reclaim_reent+0xac>
 80124ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124d0:	6819      	ldr	r1, [r3, #0]
 80124d2:	b111      	cbz	r1, 80124da <_reclaim_reent+0x22>
 80124d4:	4620      	mov	r0, r4
 80124d6:	f002 ff8b 	bl	80153f0 <_free_r>
 80124da:	6961      	ldr	r1, [r4, #20]
 80124dc:	b111      	cbz	r1, 80124e4 <_reclaim_reent+0x2c>
 80124de:	4620      	mov	r0, r4
 80124e0:	f002 ff86 	bl	80153f0 <_free_r>
 80124e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80124e6:	b111      	cbz	r1, 80124ee <_reclaim_reent+0x36>
 80124e8:	4620      	mov	r0, r4
 80124ea:	f002 ff81 	bl	80153f0 <_free_r>
 80124ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80124f0:	b111      	cbz	r1, 80124f8 <_reclaim_reent+0x40>
 80124f2:	4620      	mov	r0, r4
 80124f4:	f002 ff7c 	bl	80153f0 <_free_r>
 80124f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80124fa:	b111      	cbz	r1, 8012502 <_reclaim_reent+0x4a>
 80124fc:	4620      	mov	r0, r4
 80124fe:	f002 ff77 	bl	80153f0 <_free_r>
 8012502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012504:	b111      	cbz	r1, 801250c <_reclaim_reent+0x54>
 8012506:	4620      	mov	r0, r4
 8012508:	f002 ff72 	bl	80153f0 <_free_r>
 801250c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801250e:	b111      	cbz	r1, 8012516 <_reclaim_reent+0x5e>
 8012510:	4620      	mov	r0, r4
 8012512:	f002 ff6d 	bl	80153f0 <_free_r>
 8012516:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012518:	b111      	cbz	r1, 8012520 <_reclaim_reent+0x68>
 801251a:	4620      	mov	r0, r4
 801251c:	f002 ff68 	bl	80153f0 <_free_r>
 8012520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012522:	b111      	cbz	r1, 801252a <_reclaim_reent+0x72>
 8012524:	4620      	mov	r0, r4
 8012526:	f002 ff63 	bl	80153f0 <_free_r>
 801252a:	69a3      	ldr	r3, [r4, #24]
 801252c:	b1e3      	cbz	r3, 8012568 <_reclaim_reent+0xb0>
 801252e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012530:	4620      	mov	r0, r4
 8012532:	4798      	blx	r3
 8012534:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012536:	b1b9      	cbz	r1, 8012568 <_reclaim_reent+0xb0>
 8012538:	4620      	mov	r0, r4
 801253a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801253e:	f7ff bfad 	b.w	801249c <cleanup_glue>
 8012542:	5949      	ldr	r1, [r1, r5]
 8012544:	b941      	cbnz	r1, 8012558 <_reclaim_reent+0xa0>
 8012546:	3504      	adds	r5, #4
 8012548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801254a:	2d80      	cmp	r5, #128	; 0x80
 801254c:	68d9      	ldr	r1, [r3, #12]
 801254e:	d1f8      	bne.n	8012542 <_reclaim_reent+0x8a>
 8012550:	4620      	mov	r0, r4
 8012552:	f002 ff4d 	bl	80153f0 <_free_r>
 8012556:	e7ba      	b.n	80124ce <_reclaim_reent+0x16>
 8012558:	680e      	ldr	r6, [r1, #0]
 801255a:	4620      	mov	r0, r4
 801255c:	f002 ff48 	bl	80153f0 <_free_r>
 8012560:	4631      	mov	r1, r6
 8012562:	e7ef      	b.n	8012544 <_reclaim_reent+0x8c>
 8012564:	2500      	movs	r5, #0
 8012566:	e7ef      	b.n	8012548 <_reclaim_reent+0x90>
 8012568:	bd70      	pop	{r4, r5, r6, pc}
 801256a:	bf00      	nop
 801256c:	20000010 	.word	0x20000010

08012570 <_sbrk_r>:
 8012570:	b538      	push	{r3, r4, r5, lr}
 8012572:	4d06      	ldr	r5, [pc, #24]	; (801258c <_sbrk_r+0x1c>)
 8012574:	2300      	movs	r3, #0
 8012576:	4604      	mov	r4, r0
 8012578:	4608      	mov	r0, r1
 801257a:	602b      	str	r3, [r5, #0]
 801257c:	f7ef fdca 	bl	8002114 <_sbrk>
 8012580:	1c43      	adds	r3, r0, #1
 8012582:	d102      	bne.n	801258a <_sbrk_r+0x1a>
 8012584:	682b      	ldr	r3, [r5, #0]
 8012586:	b103      	cbz	r3, 801258a <_sbrk_r+0x1a>
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	bd38      	pop	{r3, r4, r5, pc}
 801258c:	20002700 	.word	0x20002700

08012590 <nanf>:
 8012590:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012598 <nanf+0x8>
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	7fc00000 	.word	0x7fc00000

0801259c <sniprintf>:
 801259c:	b40c      	push	{r2, r3}
 801259e:	b530      	push	{r4, r5, lr}
 80125a0:	4b17      	ldr	r3, [pc, #92]	; (8012600 <sniprintf+0x64>)
 80125a2:	1e0c      	subs	r4, r1, #0
 80125a4:	681d      	ldr	r5, [r3, #0]
 80125a6:	b09d      	sub	sp, #116	; 0x74
 80125a8:	da08      	bge.n	80125bc <sniprintf+0x20>
 80125aa:	238b      	movs	r3, #139	; 0x8b
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125b2:	b01d      	add	sp, #116	; 0x74
 80125b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125b8:	b002      	add	sp, #8
 80125ba:	4770      	bx	lr
 80125bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80125c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80125c4:	bf14      	ite	ne
 80125c6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80125ca:	4623      	moveq	r3, r4
 80125cc:	9304      	str	r3, [sp, #16]
 80125ce:	9307      	str	r3, [sp, #28]
 80125d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125d4:	9002      	str	r0, [sp, #8]
 80125d6:	9006      	str	r0, [sp, #24]
 80125d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80125dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125de:	ab21      	add	r3, sp, #132	; 0x84
 80125e0:	a902      	add	r1, sp, #8
 80125e2:	4628      	mov	r0, r5
 80125e4:	9301      	str	r3, [sp, #4]
 80125e6:	f002 ffab 	bl	8015540 <_svfiprintf_r>
 80125ea:	1c43      	adds	r3, r0, #1
 80125ec:	bfbc      	itt	lt
 80125ee:	238b      	movlt	r3, #139	; 0x8b
 80125f0:	602b      	strlt	r3, [r5, #0]
 80125f2:	2c00      	cmp	r4, #0
 80125f4:	d0dd      	beq.n	80125b2 <sniprintf+0x16>
 80125f6:	9b02      	ldr	r3, [sp, #8]
 80125f8:	2200      	movs	r2, #0
 80125fa:	701a      	strb	r2, [r3, #0]
 80125fc:	e7d9      	b.n	80125b2 <sniprintf+0x16>
 80125fe:	bf00      	nop
 8012600:	20000010 	.word	0x20000010

08012604 <siprintf>:
 8012604:	b40e      	push	{r1, r2, r3}
 8012606:	b500      	push	{lr}
 8012608:	b09c      	sub	sp, #112	; 0x70
 801260a:	ab1d      	add	r3, sp, #116	; 0x74
 801260c:	9002      	str	r0, [sp, #8]
 801260e:	9006      	str	r0, [sp, #24]
 8012610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012614:	4809      	ldr	r0, [pc, #36]	; (801263c <siprintf+0x38>)
 8012616:	9107      	str	r1, [sp, #28]
 8012618:	9104      	str	r1, [sp, #16]
 801261a:	4909      	ldr	r1, [pc, #36]	; (8012640 <siprintf+0x3c>)
 801261c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012620:	9105      	str	r1, [sp, #20]
 8012622:	6800      	ldr	r0, [r0, #0]
 8012624:	9301      	str	r3, [sp, #4]
 8012626:	a902      	add	r1, sp, #8
 8012628:	f002 ff8a 	bl	8015540 <_svfiprintf_r>
 801262c:	9b02      	ldr	r3, [sp, #8]
 801262e:	2200      	movs	r2, #0
 8012630:	701a      	strb	r2, [r3, #0]
 8012632:	b01c      	add	sp, #112	; 0x70
 8012634:	f85d eb04 	ldr.w	lr, [sp], #4
 8012638:	b003      	add	sp, #12
 801263a:	4770      	bx	lr
 801263c:	20000010 	.word	0x20000010
 8012640:	ffff0208 	.word	0xffff0208

08012644 <__sread>:
 8012644:	b510      	push	{r4, lr}
 8012646:	460c      	mov	r4, r1
 8012648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801264c:	f003 f878 	bl	8015740 <_read_r>
 8012650:	2800      	cmp	r0, #0
 8012652:	bfab      	itete	ge
 8012654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012656:	89a3      	ldrhlt	r3, [r4, #12]
 8012658:	181b      	addge	r3, r3, r0
 801265a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801265e:	bfac      	ite	ge
 8012660:	6563      	strge	r3, [r4, #84]	; 0x54
 8012662:	81a3      	strhlt	r3, [r4, #12]
 8012664:	bd10      	pop	{r4, pc}

08012666 <__swrite>:
 8012666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266a:	461f      	mov	r7, r3
 801266c:	898b      	ldrh	r3, [r1, #12]
 801266e:	05db      	lsls	r3, r3, #23
 8012670:	4605      	mov	r5, r0
 8012672:	460c      	mov	r4, r1
 8012674:	4616      	mov	r6, r2
 8012676:	d505      	bpl.n	8012684 <__swrite+0x1e>
 8012678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801267c:	2302      	movs	r3, #2
 801267e:	2200      	movs	r2, #0
 8012680:	f002 f9a6 	bl	80149d0 <_lseek_r>
 8012684:	89a3      	ldrh	r3, [r4, #12]
 8012686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801268a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801268e:	81a3      	strh	r3, [r4, #12]
 8012690:	4632      	mov	r2, r6
 8012692:	463b      	mov	r3, r7
 8012694:	4628      	mov	r0, r5
 8012696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801269a:	f000 bec5 	b.w	8013428 <_write_r>

0801269e <__sseek>:
 801269e:	b510      	push	{r4, lr}
 80126a0:	460c      	mov	r4, r1
 80126a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a6:	f002 f993 	bl	80149d0 <_lseek_r>
 80126aa:	1c43      	adds	r3, r0, #1
 80126ac:	89a3      	ldrh	r3, [r4, #12]
 80126ae:	bf15      	itete	ne
 80126b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80126b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126ba:	81a3      	strheq	r3, [r4, #12]
 80126bc:	bf18      	it	ne
 80126be:	81a3      	strhne	r3, [r4, #12]
 80126c0:	bd10      	pop	{r4, pc}

080126c2 <__sclose>:
 80126c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126c6:	f000 bec1 	b.w	801344c <_close_r>

080126ca <sulp>:
 80126ca:	b570      	push	{r4, r5, r6, lr}
 80126cc:	4604      	mov	r4, r0
 80126ce:	460d      	mov	r5, r1
 80126d0:	ec45 4b10 	vmov	d0, r4, r5
 80126d4:	4616      	mov	r6, r2
 80126d6:	f002 fd25 	bl	8015124 <__ulp>
 80126da:	ec51 0b10 	vmov	r0, r1, d0
 80126de:	b17e      	cbz	r6, 8012700 <sulp+0x36>
 80126e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80126e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	dd09      	ble.n	8012700 <sulp+0x36>
 80126ec:	051b      	lsls	r3, r3, #20
 80126ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80126f2:	2400      	movs	r4, #0
 80126f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80126f8:	4622      	mov	r2, r4
 80126fa:	462b      	mov	r3, r5
 80126fc:	f7ed ff94 	bl	8000628 <__aeabi_dmul>
 8012700:	bd70      	pop	{r4, r5, r6, pc}
 8012702:	0000      	movs	r0, r0
 8012704:	0000      	movs	r0, r0
	...

08012708 <_strtod_l>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	ed2d 8b02 	vpush	{d8}
 8012710:	b09d      	sub	sp, #116	; 0x74
 8012712:	461f      	mov	r7, r3
 8012714:	2300      	movs	r3, #0
 8012716:	9318      	str	r3, [sp, #96]	; 0x60
 8012718:	4ba2      	ldr	r3, [pc, #648]	; (80129a4 <_strtod_l+0x29c>)
 801271a:	9213      	str	r2, [sp, #76]	; 0x4c
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	9305      	str	r3, [sp, #20]
 8012720:	4604      	mov	r4, r0
 8012722:	4618      	mov	r0, r3
 8012724:	4688      	mov	r8, r1
 8012726:	f7ed fd6b 	bl	8000200 <strlen>
 801272a:	f04f 0a00 	mov.w	sl, #0
 801272e:	4605      	mov	r5, r0
 8012730:	f04f 0b00 	mov.w	fp, #0
 8012734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801273a:	781a      	ldrb	r2, [r3, #0]
 801273c:	2a2b      	cmp	r2, #43	; 0x2b
 801273e:	d04e      	beq.n	80127de <_strtod_l+0xd6>
 8012740:	d83b      	bhi.n	80127ba <_strtod_l+0xb2>
 8012742:	2a0d      	cmp	r2, #13
 8012744:	d834      	bhi.n	80127b0 <_strtod_l+0xa8>
 8012746:	2a08      	cmp	r2, #8
 8012748:	d834      	bhi.n	80127b4 <_strtod_l+0xac>
 801274a:	2a00      	cmp	r2, #0
 801274c:	d03e      	beq.n	80127cc <_strtod_l+0xc4>
 801274e:	2300      	movs	r3, #0
 8012750:	930a      	str	r3, [sp, #40]	; 0x28
 8012752:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012754:	7833      	ldrb	r3, [r6, #0]
 8012756:	2b30      	cmp	r3, #48	; 0x30
 8012758:	f040 80b0 	bne.w	80128bc <_strtod_l+0x1b4>
 801275c:	7873      	ldrb	r3, [r6, #1]
 801275e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012762:	2b58      	cmp	r3, #88	; 0x58
 8012764:	d168      	bne.n	8012838 <_strtod_l+0x130>
 8012766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012768:	9301      	str	r3, [sp, #4]
 801276a:	ab18      	add	r3, sp, #96	; 0x60
 801276c:	9702      	str	r7, [sp, #8]
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	4a8d      	ldr	r2, [pc, #564]	; (80129a8 <_strtod_l+0x2a0>)
 8012772:	ab19      	add	r3, sp, #100	; 0x64
 8012774:	a917      	add	r1, sp, #92	; 0x5c
 8012776:	4620      	mov	r0, r4
 8012778:	f001 fe1e 	bl	80143b8 <__gethex>
 801277c:	f010 0707 	ands.w	r7, r0, #7
 8012780:	4605      	mov	r5, r0
 8012782:	d005      	beq.n	8012790 <_strtod_l+0x88>
 8012784:	2f06      	cmp	r7, #6
 8012786:	d12c      	bne.n	80127e2 <_strtod_l+0xda>
 8012788:	3601      	adds	r6, #1
 801278a:	2300      	movs	r3, #0
 801278c:	9617      	str	r6, [sp, #92]	; 0x5c
 801278e:	930a      	str	r3, [sp, #40]	; 0x28
 8012790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012792:	2b00      	cmp	r3, #0
 8012794:	f040 8590 	bne.w	80132b8 <_strtod_l+0xbb0>
 8012798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801279a:	b1eb      	cbz	r3, 80127d8 <_strtod_l+0xd0>
 801279c:	4652      	mov	r2, sl
 801279e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80127a2:	ec43 2b10 	vmov	d0, r2, r3
 80127a6:	b01d      	add	sp, #116	; 0x74
 80127a8:	ecbd 8b02 	vpop	{d8}
 80127ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b0:	2a20      	cmp	r2, #32
 80127b2:	d1cc      	bne.n	801274e <_strtod_l+0x46>
 80127b4:	3301      	adds	r3, #1
 80127b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80127b8:	e7be      	b.n	8012738 <_strtod_l+0x30>
 80127ba:	2a2d      	cmp	r2, #45	; 0x2d
 80127bc:	d1c7      	bne.n	801274e <_strtod_l+0x46>
 80127be:	2201      	movs	r2, #1
 80127c0:	920a      	str	r2, [sp, #40]	; 0x28
 80127c2:	1c5a      	adds	r2, r3, #1
 80127c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80127c6:	785b      	ldrb	r3, [r3, #1]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d1c2      	bne.n	8012752 <_strtod_l+0x4a>
 80127cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80127ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f040 856e 	bne.w	80132b4 <_strtod_l+0xbac>
 80127d8:	4652      	mov	r2, sl
 80127da:	465b      	mov	r3, fp
 80127dc:	e7e1      	b.n	80127a2 <_strtod_l+0x9a>
 80127de:	2200      	movs	r2, #0
 80127e0:	e7ee      	b.n	80127c0 <_strtod_l+0xb8>
 80127e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80127e4:	b13a      	cbz	r2, 80127f6 <_strtod_l+0xee>
 80127e6:	2135      	movs	r1, #53	; 0x35
 80127e8:	a81a      	add	r0, sp, #104	; 0x68
 80127ea:	f002 fda6 	bl	801533a <__copybits>
 80127ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80127f0:	4620      	mov	r0, r4
 80127f2:	f002 f965 	bl	8014ac0 <_Bfree>
 80127f6:	3f01      	subs	r7, #1
 80127f8:	2f04      	cmp	r7, #4
 80127fa:	d806      	bhi.n	801280a <_strtod_l+0x102>
 80127fc:	e8df f007 	tbb	[pc, r7]
 8012800:	1714030a 	.word	0x1714030a
 8012804:	0a          	.byte	0x0a
 8012805:	00          	.byte	0x00
 8012806:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801280a:	0728      	lsls	r0, r5, #28
 801280c:	d5c0      	bpl.n	8012790 <_strtod_l+0x88>
 801280e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012812:	e7bd      	b.n	8012790 <_strtod_l+0x88>
 8012814:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8012818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801281a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801281e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012826:	e7f0      	b.n	801280a <_strtod_l+0x102>
 8012828:	f8df b180 	ldr.w	fp, [pc, #384]	; 80129ac <_strtod_l+0x2a4>
 801282c:	e7ed      	b.n	801280a <_strtod_l+0x102>
 801282e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012832:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012836:	e7e8      	b.n	801280a <_strtod_l+0x102>
 8012838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801283a:	1c5a      	adds	r2, r3, #1
 801283c:	9217      	str	r2, [sp, #92]	; 0x5c
 801283e:	785b      	ldrb	r3, [r3, #1]
 8012840:	2b30      	cmp	r3, #48	; 0x30
 8012842:	d0f9      	beq.n	8012838 <_strtod_l+0x130>
 8012844:	2b00      	cmp	r3, #0
 8012846:	d0a3      	beq.n	8012790 <_strtod_l+0x88>
 8012848:	2301      	movs	r3, #1
 801284a:	f04f 0900 	mov.w	r9, #0
 801284e:	9304      	str	r3, [sp, #16]
 8012850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012852:	9308      	str	r3, [sp, #32]
 8012854:	f8cd 901c 	str.w	r9, [sp, #28]
 8012858:	464f      	mov	r7, r9
 801285a:	220a      	movs	r2, #10
 801285c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801285e:	7806      	ldrb	r6, [r0, #0]
 8012860:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012864:	b2d9      	uxtb	r1, r3
 8012866:	2909      	cmp	r1, #9
 8012868:	d92a      	bls.n	80128c0 <_strtod_l+0x1b8>
 801286a:	9905      	ldr	r1, [sp, #20]
 801286c:	462a      	mov	r2, r5
 801286e:	f002 ff83 	bl	8015778 <strncmp>
 8012872:	b398      	cbz	r0, 80128dc <_strtod_l+0x1d4>
 8012874:	2000      	movs	r0, #0
 8012876:	4632      	mov	r2, r6
 8012878:	463d      	mov	r5, r7
 801287a:	9005      	str	r0, [sp, #20]
 801287c:	4603      	mov	r3, r0
 801287e:	2a65      	cmp	r2, #101	; 0x65
 8012880:	d001      	beq.n	8012886 <_strtod_l+0x17e>
 8012882:	2a45      	cmp	r2, #69	; 0x45
 8012884:	d118      	bne.n	80128b8 <_strtod_l+0x1b0>
 8012886:	b91d      	cbnz	r5, 8012890 <_strtod_l+0x188>
 8012888:	9a04      	ldr	r2, [sp, #16]
 801288a:	4302      	orrs	r2, r0
 801288c:	d09e      	beq.n	80127cc <_strtod_l+0xc4>
 801288e:	2500      	movs	r5, #0
 8012890:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012894:	f108 0201 	add.w	r2, r8, #1
 8012898:	9217      	str	r2, [sp, #92]	; 0x5c
 801289a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801289e:	2a2b      	cmp	r2, #43	; 0x2b
 80128a0:	d075      	beq.n	801298e <_strtod_l+0x286>
 80128a2:	2a2d      	cmp	r2, #45	; 0x2d
 80128a4:	d07b      	beq.n	801299e <_strtod_l+0x296>
 80128a6:	f04f 0c00 	mov.w	ip, #0
 80128aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80128ae:	2909      	cmp	r1, #9
 80128b0:	f240 8082 	bls.w	80129b8 <_strtod_l+0x2b0>
 80128b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80128b8:	2600      	movs	r6, #0
 80128ba:	e09d      	b.n	80129f8 <_strtod_l+0x2f0>
 80128bc:	2300      	movs	r3, #0
 80128be:	e7c4      	b.n	801284a <_strtod_l+0x142>
 80128c0:	2f08      	cmp	r7, #8
 80128c2:	bfd8      	it	le
 80128c4:	9907      	ldrle	r1, [sp, #28]
 80128c6:	f100 0001 	add.w	r0, r0, #1
 80128ca:	bfda      	itte	le
 80128cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80128d0:	9307      	strle	r3, [sp, #28]
 80128d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80128d6:	3701      	adds	r7, #1
 80128d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80128da:	e7bf      	b.n	801285c <_strtod_l+0x154>
 80128dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80128de:	195a      	adds	r2, r3, r5
 80128e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80128e2:	5d5a      	ldrb	r2, [r3, r5]
 80128e4:	2f00      	cmp	r7, #0
 80128e6:	d037      	beq.n	8012958 <_strtod_l+0x250>
 80128e8:	9005      	str	r0, [sp, #20]
 80128ea:	463d      	mov	r5, r7
 80128ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80128f0:	2b09      	cmp	r3, #9
 80128f2:	d912      	bls.n	801291a <_strtod_l+0x212>
 80128f4:	2301      	movs	r3, #1
 80128f6:	e7c2      	b.n	801287e <_strtod_l+0x176>
 80128f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80128fe:	785a      	ldrb	r2, [r3, #1]
 8012900:	3001      	adds	r0, #1
 8012902:	2a30      	cmp	r2, #48	; 0x30
 8012904:	d0f8      	beq.n	80128f8 <_strtod_l+0x1f0>
 8012906:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801290a:	2b08      	cmp	r3, #8
 801290c:	f200 84d9 	bhi.w	80132c2 <_strtod_l+0xbba>
 8012910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012912:	9005      	str	r0, [sp, #20]
 8012914:	2000      	movs	r0, #0
 8012916:	9308      	str	r3, [sp, #32]
 8012918:	4605      	mov	r5, r0
 801291a:	3a30      	subs	r2, #48	; 0x30
 801291c:	f100 0301 	add.w	r3, r0, #1
 8012920:	d014      	beq.n	801294c <_strtod_l+0x244>
 8012922:	9905      	ldr	r1, [sp, #20]
 8012924:	4419      	add	r1, r3
 8012926:	9105      	str	r1, [sp, #20]
 8012928:	462b      	mov	r3, r5
 801292a:	eb00 0e05 	add.w	lr, r0, r5
 801292e:	210a      	movs	r1, #10
 8012930:	4573      	cmp	r3, lr
 8012932:	d113      	bne.n	801295c <_strtod_l+0x254>
 8012934:	182b      	adds	r3, r5, r0
 8012936:	2b08      	cmp	r3, #8
 8012938:	f105 0501 	add.w	r5, r5, #1
 801293c:	4405      	add	r5, r0
 801293e:	dc1c      	bgt.n	801297a <_strtod_l+0x272>
 8012940:	9907      	ldr	r1, [sp, #28]
 8012942:	230a      	movs	r3, #10
 8012944:	fb03 2301 	mla	r3, r3, r1, r2
 8012948:	9307      	str	r3, [sp, #28]
 801294a:	2300      	movs	r3, #0
 801294c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801294e:	1c51      	adds	r1, r2, #1
 8012950:	9117      	str	r1, [sp, #92]	; 0x5c
 8012952:	7852      	ldrb	r2, [r2, #1]
 8012954:	4618      	mov	r0, r3
 8012956:	e7c9      	b.n	80128ec <_strtod_l+0x1e4>
 8012958:	4638      	mov	r0, r7
 801295a:	e7d2      	b.n	8012902 <_strtod_l+0x1fa>
 801295c:	2b08      	cmp	r3, #8
 801295e:	dc04      	bgt.n	801296a <_strtod_l+0x262>
 8012960:	9e07      	ldr	r6, [sp, #28]
 8012962:	434e      	muls	r6, r1
 8012964:	9607      	str	r6, [sp, #28]
 8012966:	3301      	adds	r3, #1
 8012968:	e7e2      	b.n	8012930 <_strtod_l+0x228>
 801296a:	f103 0c01 	add.w	ip, r3, #1
 801296e:	f1bc 0f10 	cmp.w	ip, #16
 8012972:	bfd8      	it	le
 8012974:	fb01 f909 	mulle.w	r9, r1, r9
 8012978:	e7f5      	b.n	8012966 <_strtod_l+0x25e>
 801297a:	2d10      	cmp	r5, #16
 801297c:	bfdc      	itt	le
 801297e:	230a      	movle	r3, #10
 8012980:	fb03 2909 	mlale	r9, r3, r9, r2
 8012984:	e7e1      	b.n	801294a <_strtod_l+0x242>
 8012986:	2300      	movs	r3, #0
 8012988:	9305      	str	r3, [sp, #20]
 801298a:	2301      	movs	r3, #1
 801298c:	e77c      	b.n	8012888 <_strtod_l+0x180>
 801298e:	f04f 0c00 	mov.w	ip, #0
 8012992:	f108 0202 	add.w	r2, r8, #2
 8012996:	9217      	str	r2, [sp, #92]	; 0x5c
 8012998:	f898 2002 	ldrb.w	r2, [r8, #2]
 801299c:	e785      	b.n	80128aa <_strtod_l+0x1a2>
 801299e:	f04f 0c01 	mov.w	ip, #1
 80129a2:	e7f6      	b.n	8012992 <_strtod_l+0x28a>
 80129a4:	080163c0 	.word	0x080163c0
 80129a8:	08016178 	.word	0x08016178
 80129ac:	7ff00000 	.word	0x7ff00000
 80129b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80129b2:	1c51      	adds	r1, r2, #1
 80129b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80129b6:	7852      	ldrb	r2, [r2, #1]
 80129b8:	2a30      	cmp	r2, #48	; 0x30
 80129ba:	d0f9      	beq.n	80129b0 <_strtod_l+0x2a8>
 80129bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80129c0:	2908      	cmp	r1, #8
 80129c2:	f63f af79 	bhi.w	80128b8 <_strtod_l+0x1b0>
 80129c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80129ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80129cc:	9206      	str	r2, [sp, #24]
 80129ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80129d0:	1c51      	adds	r1, r2, #1
 80129d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80129d4:	7852      	ldrb	r2, [r2, #1]
 80129d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80129da:	2e09      	cmp	r6, #9
 80129dc:	d937      	bls.n	8012a4e <_strtod_l+0x346>
 80129de:	9e06      	ldr	r6, [sp, #24]
 80129e0:	1b89      	subs	r1, r1, r6
 80129e2:	2908      	cmp	r1, #8
 80129e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80129e8:	dc02      	bgt.n	80129f0 <_strtod_l+0x2e8>
 80129ea:	4576      	cmp	r6, lr
 80129ec:	bfa8      	it	ge
 80129ee:	4676      	movge	r6, lr
 80129f0:	f1bc 0f00 	cmp.w	ip, #0
 80129f4:	d000      	beq.n	80129f8 <_strtod_l+0x2f0>
 80129f6:	4276      	negs	r6, r6
 80129f8:	2d00      	cmp	r5, #0
 80129fa:	d14d      	bne.n	8012a98 <_strtod_l+0x390>
 80129fc:	9904      	ldr	r1, [sp, #16]
 80129fe:	4301      	orrs	r1, r0
 8012a00:	f47f aec6 	bne.w	8012790 <_strtod_l+0x88>
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f47f aee1 	bne.w	80127cc <_strtod_l+0xc4>
 8012a0a:	2a69      	cmp	r2, #105	; 0x69
 8012a0c:	d027      	beq.n	8012a5e <_strtod_l+0x356>
 8012a0e:	dc24      	bgt.n	8012a5a <_strtod_l+0x352>
 8012a10:	2a49      	cmp	r2, #73	; 0x49
 8012a12:	d024      	beq.n	8012a5e <_strtod_l+0x356>
 8012a14:	2a4e      	cmp	r2, #78	; 0x4e
 8012a16:	f47f aed9 	bne.w	80127cc <_strtod_l+0xc4>
 8012a1a:	499f      	ldr	r1, [pc, #636]	; (8012c98 <_strtod_l+0x590>)
 8012a1c:	a817      	add	r0, sp, #92	; 0x5c
 8012a1e:	f001 ff23 	bl	8014868 <__match>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	f43f aed2 	beq.w	80127cc <_strtod_l+0xc4>
 8012a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b28      	cmp	r3, #40	; 0x28
 8012a2e:	d12d      	bne.n	8012a8c <_strtod_l+0x384>
 8012a30:	499a      	ldr	r1, [pc, #616]	; (8012c9c <_strtod_l+0x594>)
 8012a32:	aa1a      	add	r2, sp, #104	; 0x68
 8012a34:	a817      	add	r0, sp, #92	; 0x5c
 8012a36:	f001 ff2b 	bl	8014890 <__hexnan>
 8012a3a:	2805      	cmp	r0, #5
 8012a3c:	d126      	bne.n	8012a8c <_strtod_l+0x384>
 8012a3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012a44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012a48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012a4c:	e6a0      	b.n	8012790 <_strtod_l+0x88>
 8012a4e:	210a      	movs	r1, #10
 8012a50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012a54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012a58:	e7b9      	b.n	80129ce <_strtod_l+0x2c6>
 8012a5a:	2a6e      	cmp	r2, #110	; 0x6e
 8012a5c:	e7db      	b.n	8012a16 <_strtod_l+0x30e>
 8012a5e:	4990      	ldr	r1, [pc, #576]	; (8012ca0 <_strtod_l+0x598>)
 8012a60:	a817      	add	r0, sp, #92	; 0x5c
 8012a62:	f001 ff01 	bl	8014868 <__match>
 8012a66:	2800      	cmp	r0, #0
 8012a68:	f43f aeb0 	beq.w	80127cc <_strtod_l+0xc4>
 8012a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a6e:	498d      	ldr	r1, [pc, #564]	; (8012ca4 <_strtod_l+0x59c>)
 8012a70:	3b01      	subs	r3, #1
 8012a72:	a817      	add	r0, sp, #92	; 0x5c
 8012a74:	9317      	str	r3, [sp, #92]	; 0x5c
 8012a76:	f001 fef7 	bl	8014868 <__match>
 8012a7a:	b910      	cbnz	r0, 8012a82 <_strtod_l+0x37a>
 8012a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a7e:	3301      	adds	r3, #1
 8012a80:	9317      	str	r3, [sp, #92]	; 0x5c
 8012a82:	f8df b230 	ldr.w	fp, [pc, #560]	; 8012cb4 <_strtod_l+0x5ac>
 8012a86:	f04f 0a00 	mov.w	sl, #0
 8012a8a:	e681      	b.n	8012790 <_strtod_l+0x88>
 8012a8c:	4886      	ldr	r0, [pc, #536]	; (8012ca8 <_strtod_l+0x5a0>)
 8012a8e:	f002 fe6b 	bl	8015768 <nan>
 8012a92:	ec5b ab10 	vmov	sl, fp, d0
 8012a96:	e67b      	b.n	8012790 <_strtod_l+0x88>
 8012a98:	9b05      	ldr	r3, [sp, #20]
 8012a9a:	9807      	ldr	r0, [sp, #28]
 8012a9c:	1af3      	subs	r3, r6, r3
 8012a9e:	2f00      	cmp	r7, #0
 8012aa0:	bf08      	it	eq
 8012aa2:	462f      	moveq	r7, r5
 8012aa4:	2d10      	cmp	r5, #16
 8012aa6:	9306      	str	r3, [sp, #24]
 8012aa8:	46a8      	mov	r8, r5
 8012aaa:	bfa8      	it	ge
 8012aac:	f04f 0810 	movge.w	r8, #16
 8012ab0:	f7ed fd40 	bl	8000534 <__aeabi_ui2d>
 8012ab4:	2d09      	cmp	r5, #9
 8012ab6:	4682      	mov	sl, r0
 8012ab8:	468b      	mov	fp, r1
 8012aba:	dd13      	ble.n	8012ae4 <_strtod_l+0x3dc>
 8012abc:	4b7b      	ldr	r3, [pc, #492]	; (8012cac <_strtod_l+0x5a4>)
 8012abe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012ac2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012ac6:	f7ed fdaf 	bl	8000628 <__aeabi_dmul>
 8012aca:	4682      	mov	sl, r0
 8012acc:	4648      	mov	r0, r9
 8012ace:	468b      	mov	fp, r1
 8012ad0:	f7ed fd30 	bl	8000534 <__aeabi_ui2d>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	4650      	mov	r0, sl
 8012ada:	4659      	mov	r1, fp
 8012adc:	f7ed fbee 	bl	80002bc <__adddf3>
 8012ae0:	4682      	mov	sl, r0
 8012ae2:	468b      	mov	fp, r1
 8012ae4:	2d0f      	cmp	r5, #15
 8012ae6:	dc38      	bgt.n	8012b5a <_strtod_l+0x452>
 8012ae8:	9b06      	ldr	r3, [sp, #24]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f43f ae50 	beq.w	8012790 <_strtod_l+0x88>
 8012af0:	dd24      	ble.n	8012b3c <_strtod_l+0x434>
 8012af2:	2b16      	cmp	r3, #22
 8012af4:	dc0b      	bgt.n	8012b0e <_strtod_l+0x406>
 8012af6:	496d      	ldr	r1, [pc, #436]	; (8012cac <_strtod_l+0x5a4>)
 8012af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b00:	4652      	mov	r2, sl
 8012b02:	465b      	mov	r3, fp
 8012b04:	f7ed fd90 	bl	8000628 <__aeabi_dmul>
 8012b08:	4682      	mov	sl, r0
 8012b0a:	468b      	mov	fp, r1
 8012b0c:	e640      	b.n	8012790 <_strtod_l+0x88>
 8012b0e:	9a06      	ldr	r2, [sp, #24]
 8012b10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012b14:	4293      	cmp	r3, r2
 8012b16:	db20      	blt.n	8012b5a <_strtod_l+0x452>
 8012b18:	4c64      	ldr	r4, [pc, #400]	; (8012cac <_strtod_l+0x5a4>)
 8012b1a:	f1c5 050f 	rsb	r5, r5, #15
 8012b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012b22:	4652      	mov	r2, sl
 8012b24:	465b      	mov	r3, fp
 8012b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b2a:	f7ed fd7d 	bl	8000628 <__aeabi_dmul>
 8012b2e:	9b06      	ldr	r3, [sp, #24]
 8012b30:	1b5d      	subs	r5, r3, r5
 8012b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b3a:	e7e3      	b.n	8012b04 <_strtod_l+0x3fc>
 8012b3c:	9b06      	ldr	r3, [sp, #24]
 8012b3e:	3316      	adds	r3, #22
 8012b40:	db0b      	blt.n	8012b5a <_strtod_l+0x452>
 8012b42:	9b05      	ldr	r3, [sp, #20]
 8012b44:	1b9e      	subs	r6, r3, r6
 8012b46:	4b59      	ldr	r3, [pc, #356]	; (8012cac <_strtod_l+0x5a4>)
 8012b48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012b50:	4650      	mov	r0, sl
 8012b52:	4659      	mov	r1, fp
 8012b54:	f7ed fe92 	bl	800087c <__aeabi_ddiv>
 8012b58:	e7d6      	b.n	8012b08 <_strtod_l+0x400>
 8012b5a:	9b06      	ldr	r3, [sp, #24]
 8012b5c:	eba5 0808 	sub.w	r8, r5, r8
 8012b60:	4498      	add	r8, r3
 8012b62:	f1b8 0f00 	cmp.w	r8, #0
 8012b66:	dd74      	ble.n	8012c52 <_strtod_l+0x54a>
 8012b68:	f018 030f 	ands.w	r3, r8, #15
 8012b6c:	d00a      	beq.n	8012b84 <_strtod_l+0x47c>
 8012b6e:	494f      	ldr	r1, [pc, #316]	; (8012cac <_strtod_l+0x5a4>)
 8012b70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012b74:	4652      	mov	r2, sl
 8012b76:	465b      	mov	r3, fp
 8012b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b7c:	f7ed fd54 	bl	8000628 <__aeabi_dmul>
 8012b80:	4682      	mov	sl, r0
 8012b82:	468b      	mov	fp, r1
 8012b84:	f038 080f 	bics.w	r8, r8, #15
 8012b88:	d04f      	beq.n	8012c2a <_strtod_l+0x522>
 8012b8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012b8e:	dd22      	ble.n	8012bd6 <_strtod_l+0x4ce>
 8012b90:	2500      	movs	r5, #0
 8012b92:	462e      	mov	r6, r5
 8012b94:	9507      	str	r5, [sp, #28]
 8012b96:	9505      	str	r5, [sp, #20]
 8012b98:	2322      	movs	r3, #34	; 0x22
 8012b9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8012cb4 <_strtod_l+0x5ac>
 8012b9e:	6023      	str	r3, [r4, #0]
 8012ba0:	f04f 0a00 	mov.w	sl, #0
 8012ba4:	9b07      	ldr	r3, [sp, #28]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f43f adf2 	beq.w	8012790 <_strtod_l+0x88>
 8012bac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f001 ff86 	bl	8014ac0 <_Bfree>
 8012bb4:	9905      	ldr	r1, [sp, #20]
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f001 ff82 	bl	8014ac0 <_Bfree>
 8012bbc:	4631      	mov	r1, r6
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	f001 ff7e 	bl	8014ac0 <_Bfree>
 8012bc4:	9907      	ldr	r1, [sp, #28]
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f001 ff7a 	bl	8014ac0 <_Bfree>
 8012bcc:	4629      	mov	r1, r5
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f001 ff76 	bl	8014ac0 <_Bfree>
 8012bd4:	e5dc      	b.n	8012790 <_strtod_l+0x88>
 8012bd6:	4b36      	ldr	r3, [pc, #216]	; (8012cb0 <_strtod_l+0x5a8>)
 8012bd8:	9304      	str	r3, [sp, #16]
 8012bda:	2300      	movs	r3, #0
 8012bdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012be0:	4650      	mov	r0, sl
 8012be2:	4659      	mov	r1, fp
 8012be4:	4699      	mov	r9, r3
 8012be6:	f1b8 0f01 	cmp.w	r8, #1
 8012bea:	dc21      	bgt.n	8012c30 <_strtod_l+0x528>
 8012bec:	b10b      	cbz	r3, 8012bf2 <_strtod_l+0x4ea>
 8012bee:	4682      	mov	sl, r0
 8012bf0:	468b      	mov	fp, r1
 8012bf2:	4b2f      	ldr	r3, [pc, #188]	; (8012cb0 <_strtod_l+0x5a8>)
 8012bf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012bf8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012bfc:	4652      	mov	r2, sl
 8012bfe:	465b      	mov	r3, fp
 8012c00:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012c04:	f7ed fd10 	bl	8000628 <__aeabi_dmul>
 8012c08:	4b2a      	ldr	r3, [pc, #168]	; (8012cb4 <_strtod_l+0x5ac>)
 8012c0a:	460a      	mov	r2, r1
 8012c0c:	400b      	ands	r3, r1
 8012c0e:	492a      	ldr	r1, [pc, #168]	; (8012cb8 <_strtod_l+0x5b0>)
 8012c10:	428b      	cmp	r3, r1
 8012c12:	4682      	mov	sl, r0
 8012c14:	d8bc      	bhi.n	8012b90 <_strtod_l+0x488>
 8012c16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012c1a:	428b      	cmp	r3, r1
 8012c1c:	bf86      	itte	hi
 8012c1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8012cbc <_strtod_l+0x5b4>
 8012c22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8012c26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	9304      	str	r3, [sp, #16]
 8012c2e:	e084      	b.n	8012d3a <_strtod_l+0x632>
 8012c30:	f018 0f01 	tst.w	r8, #1
 8012c34:	d005      	beq.n	8012c42 <_strtod_l+0x53a>
 8012c36:	9b04      	ldr	r3, [sp, #16]
 8012c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3c:	f7ed fcf4 	bl	8000628 <__aeabi_dmul>
 8012c40:	2301      	movs	r3, #1
 8012c42:	9a04      	ldr	r2, [sp, #16]
 8012c44:	3208      	adds	r2, #8
 8012c46:	f109 0901 	add.w	r9, r9, #1
 8012c4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012c4e:	9204      	str	r2, [sp, #16]
 8012c50:	e7c9      	b.n	8012be6 <_strtod_l+0x4de>
 8012c52:	d0ea      	beq.n	8012c2a <_strtod_l+0x522>
 8012c54:	f1c8 0800 	rsb	r8, r8, #0
 8012c58:	f018 020f 	ands.w	r2, r8, #15
 8012c5c:	d00a      	beq.n	8012c74 <_strtod_l+0x56c>
 8012c5e:	4b13      	ldr	r3, [pc, #76]	; (8012cac <_strtod_l+0x5a4>)
 8012c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c64:	4650      	mov	r0, sl
 8012c66:	4659      	mov	r1, fp
 8012c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6c:	f7ed fe06 	bl	800087c <__aeabi_ddiv>
 8012c70:	4682      	mov	sl, r0
 8012c72:	468b      	mov	fp, r1
 8012c74:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012c78:	d0d7      	beq.n	8012c2a <_strtod_l+0x522>
 8012c7a:	f1b8 0f1f 	cmp.w	r8, #31
 8012c7e:	dd1f      	ble.n	8012cc0 <_strtod_l+0x5b8>
 8012c80:	2500      	movs	r5, #0
 8012c82:	462e      	mov	r6, r5
 8012c84:	9507      	str	r5, [sp, #28]
 8012c86:	9505      	str	r5, [sp, #20]
 8012c88:	2322      	movs	r3, #34	; 0x22
 8012c8a:	f04f 0a00 	mov.w	sl, #0
 8012c8e:	f04f 0b00 	mov.w	fp, #0
 8012c92:	6023      	str	r3, [r4, #0]
 8012c94:	e786      	b.n	8012ba4 <_strtod_l+0x49c>
 8012c96:	bf00      	nop
 8012c98:	08016149 	.word	0x08016149
 8012c9c:	0801618c 	.word	0x0801618c
 8012ca0:	08016141 	.word	0x08016141
 8012ca4:	080162cc 	.word	0x080162cc
 8012ca8:	08016578 	.word	0x08016578
 8012cac:	08016458 	.word	0x08016458
 8012cb0:	08016430 	.word	0x08016430
 8012cb4:	7ff00000 	.word	0x7ff00000
 8012cb8:	7ca00000 	.word	0x7ca00000
 8012cbc:	7fefffff 	.word	0x7fefffff
 8012cc0:	f018 0310 	ands.w	r3, r8, #16
 8012cc4:	bf18      	it	ne
 8012cc6:	236a      	movne	r3, #106	; 0x6a
 8012cc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013078 <_strtod_l+0x970>
 8012ccc:	9304      	str	r3, [sp, #16]
 8012cce:	4650      	mov	r0, sl
 8012cd0:	4659      	mov	r1, fp
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f018 0f01 	tst.w	r8, #1
 8012cd8:	d004      	beq.n	8012ce4 <_strtod_l+0x5dc>
 8012cda:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012cde:	f7ed fca3 	bl	8000628 <__aeabi_dmul>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012ce8:	f109 0908 	add.w	r9, r9, #8
 8012cec:	d1f2      	bne.n	8012cd4 <_strtod_l+0x5cc>
 8012cee:	b10b      	cbz	r3, 8012cf4 <_strtod_l+0x5ec>
 8012cf0:	4682      	mov	sl, r0
 8012cf2:	468b      	mov	fp, r1
 8012cf4:	9b04      	ldr	r3, [sp, #16]
 8012cf6:	b1c3      	cbz	r3, 8012d2a <_strtod_l+0x622>
 8012cf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012cfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	4659      	mov	r1, fp
 8012d04:	dd11      	ble.n	8012d2a <_strtod_l+0x622>
 8012d06:	2b1f      	cmp	r3, #31
 8012d08:	f340 8124 	ble.w	8012f54 <_strtod_l+0x84c>
 8012d0c:	2b34      	cmp	r3, #52	; 0x34
 8012d0e:	bfde      	ittt	le
 8012d10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012d14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012d18:	fa03 f202 	lslle.w	r2, r3, r2
 8012d1c:	f04f 0a00 	mov.w	sl, #0
 8012d20:	bfcc      	ite	gt
 8012d22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012d26:	ea02 0b01 	andle.w	fp, r2, r1
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	4650      	mov	r0, sl
 8012d30:	4659      	mov	r1, fp
 8012d32:	f7ed fee1 	bl	8000af8 <__aeabi_dcmpeq>
 8012d36:	2800      	cmp	r0, #0
 8012d38:	d1a2      	bne.n	8012c80 <_strtod_l+0x578>
 8012d3a:	9b07      	ldr	r3, [sp, #28]
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	9908      	ldr	r1, [sp, #32]
 8012d40:	462b      	mov	r3, r5
 8012d42:	463a      	mov	r2, r7
 8012d44:	4620      	mov	r0, r4
 8012d46:	f001 ff23 	bl	8014b90 <__s2b>
 8012d4a:	9007      	str	r0, [sp, #28]
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	f43f af1f 	beq.w	8012b90 <_strtod_l+0x488>
 8012d52:	9b05      	ldr	r3, [sp, #20]
 8012d54:	1b9e      	subs	r6, r3, r6
 8012d56:	9b06      	ldr	r3, [sp, #24]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	bfb4      	ite	lt
 8012d5c:	4633      	movlt	r3, r6
 8012d5e:	2300      	movge	r3, #0
 8012d60:	930c      	str	r3, [sp, #48]	; 0x30
 8012d62:	9b06      	ldr	r3, [sp, #24]
 8012d64:	2500      	movs	r5, #0
 8012d66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8012d6c:	462e      	mov	r6, r5
 8012d6e:	9b07      	ldr	r3, [sp, #28]
 8012d70:	4620      	mov	r0, r4
 8012d72:	6859      	ldr	r1, [r3, #4]
 8012d74:	f001 fe64 	bl	8014a40 <_Balloc>
 8012d78:	9005      	str	r0, [sp, #20]
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	f43f af0c 	beq.w	8012b98 <_strtod_l+0x490>
 8012d80:	9b07      	ldr	r3, [sp, #28]
 8012d82:	691a      	ldr	r2, [r3, #16]
 8012d84:	3202      	adds	r2, #2
 8012d86:	f103 010c 	add.w	r1, r3, #12
 8012d8a:	0092      	lsls	r2, r2, #2
 8012d8c:	300c      	adds	r0, #12
 8012d8e:	f7fe fc60 	bl	8011652 <memcpy>
 8012d92:	ec4b ab10 	vmov	d0, sl, fp
 8012d96:	aa1a      	add	r2, sp, #104	; 0x68
 8012d98:	a919      	add	r1, sp, #100	; 0x64
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f002 fa3e 	bl	801521c <__d2b>
 8012da0:	ec4b ab18 	vmov	d8, sl, fp
 8012da4:	9018      	str	r0, [sp, #96]	; 0x60
 8012da6:	2800      	cmp	r0, #0
 8012da8:	f43f aef6 	beq.w	8012b98 <_strtod_l+0x490>
 8012dac:	2101      	movs	r1, #1
 8012dae:	4620      	mov	r0, r4
 8012db0:	f001 ff88 	bl	8014cc4 <__i2b>
 8012db4:	4606      	mov	r6, r0
 8012db6:	2800      	cmp	r0, #0
 8012db8:	f43f aeee 	beq.w	8012b98 <_strtod_l+0x490>
 8012dbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dbe:	9904      	ldr	r1, [sp, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	bfab      	itete	ge
 8012dc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8012dc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012dc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012dca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8012dce:	bfac      	ite	ge
 8012dd0:	eb03 0902 	addge.w	r9, r3, r2
 8012dd4:	1ad7      	sublt	r7, r2, r3
 8012dd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012dd8:	eba3 0801 	sub.w	r8, r3, r1
 8012ddc:	4490      	add	r8, r2
 8012dde:	4ba1      	ldr	r3, [pc, #644]	; (8013064 <_strtod_l+0x95c>)
 8012de0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012de4:	4598      	cmp	r8, r3
 8012de6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012dea:	f280 80c7 	bge.w	8012f7c <_strtod_l+0x874>
 8012dee:	eba3 0308 	sub.w	r3, r3, r8
 8012df2:	2b1f      	cmp	r3, #31
 8012df4:	eba2 0203 	sub.w	r2, r2, r3
 8012df8:	f04f 0101 	mov.w	r1, #1
 8012dfc:	f300 80b1 	bgt.w	8012f62 <_strtod_l+0x85a>
 8012e00:	fa01 f303 	lsl.w	r3, r1, r3
 8012e04:	930d      	str	r3, [sp, #52]	; 0x34
 8012e06:	2300      	movs	r3, #0
 8012e08:	9308      	str	r3, [sp, #32]
 8012e0a:	eb09 0802 	add.w	r8, r9, r2
 8012e0e:	9b04      	ldr	r3, [sp, #16]
 8012e10:	45c1      	cmp	r9, r8
 8012e12:	4417      	add	r7, r2
 8012e14:	441f      	add	r7, r3
 8012e16:	464b      	mov	r3, r9
 8012e18:	bfa8      	it	ge
 8012e1a:	4643      	movge	r3, r8
 8012e1c:	42bb      	cmp	r3, r7
 8012e1e:	bfa8      	it	ge
 8012e20:	463b      	movge	r3, r7
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	bfc2      	ittt	gt
 8012e26:	eba8 0803 	subgt.w	r8, r8, r3
 8012e2a:	1aff      	subgt	r7, r7, r3
 8012e2c:	eba9 0903 	subgt.w	r9, r9, r3
 8012e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	dd17      	ble.n	8012e66 <_strtod_l+0x75e>
 8012e36:	4631      	mov	r1, r6
 8012e38:	461a      	mov	r2, r3
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f002 f802 	bl	8014e44 <__pow5mult>
 8012e40:	4606      	mov	r6, r0
 8012e42:	2800      	cmp	r0, #0
 8012e44:	f43f aea8 	beq.w	8012b98 <_strtod_l+0x490>
 8012e48:	4601      	mov	r1, r0
 8012e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f001 ff4f 	bl	8014cf0 <__multiply>
 8012e52:	900b      	str	r0, [sp, #44]	; 0x2c
 8012e54:	2800      	cmp	r0, #0
 8012e56:	f43f ae9f 	beq.w	8012b98 <_strtod_l+0x490>
 8012e5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f001 fe2f 	bl	8014ac0 <_Bfree>
 8012e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e64:	9318      	str	r3, [sp, #96]	; 0x60
 8012e66:	f1b8 0f00 	cmp.w	r8, #0
 8012e6a:	f300 808c 	bgt.w	8012f86 <_strtod_l+0x87e>
 8012e6e:	9b06      	ldr	r3, [sp, #24]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	dd08      	ble.n	8012e86 <_strtod_l+0x77e>
 8012e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e76:	9905      	ldr	r1, [sp, #20]
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f001 ffe3 	bl	8014e44 <__pow5mult>
 8012e7e:	9005      	str	r0, [sp, #20]
 8012e80:	2800      	cmp	r0, #0
 8012e82:	f43f ae89 	beq.w	8012b98 <_strtod_l+0x490>
 8012e86:	2f00      	cmp	r7, #0
 8012e88:	dd08      	ble.n	8012e9c <_strtod_l+0x794>
 8012e8a:	9905      	ldr	r1, [sp, #20]
 8012e8c:	463a      	mov	r2, r7
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f002 f832 	bl	8014ef8 <__lshift>
 8012e94:	9005      	str	r0, [sp, #20]
 8012e96:	2800      	cmp	r0, #0
 8012e98:	f43f ae7e 	beq.w	8012b98 <_strtod_l+0x490>
 8012e9c:	f1b9 0f00 	cmp.w	r9, #0
 8012ea0:	dd08      	ble.n	8012eb4 <_strtod_l+0x7ac>
 8012ea2:	4631      	mov	r1, r6
 8012ea4:	464a      	mov	r2, r9
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f002 f826 	bl	8014ef8 <__lshift>
 8012eac:	4606      	mov	r6, r0
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	f43f ae72 	beq.w	8012b98 <_strtod_l+0x490>
 8012eb4:	9a05      	ldr	r2, [sp, #20]
 8012eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f002 f8a9 	bl	8015010 <__mdiff>
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	f43f ae69 	beq.w	8012b98 <_strtod_l+0x490>
 8012ec6:	68c3      	ldr	r3, [r0, #12]
 8012ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012eca:	2300      	movs	r3, #0
 8012ecc:	60c3      	str	r3, [r0, #12]
 8012ece:	4631      	mov	r1, r6
 8012ed0:	f002 f882 	bl	8014fd8 <__mcmp>
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	da60      	bge.n	8012f9a <_strtod_l+0x892>
 8012ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012eda:	ea53 030a 	orrs.w	r3, r3, sl
 8012ede:	f040 8082 	bne.w	8012fe6 <_strtod_l+0x8de>
 8012ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d17d      	bne.n	8012fe6 <_strtod_l+0x8de>
 8012eea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012eee:	0d1b      	lsrs	r3, r3, #20
 8012ef0:	051b      	lsls	r3, r3, #20
 8012ef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012ef6:	d976      	bls.n	8012fe6 <_strtod_l+0x8de>
 8012ef8:	696b      	ldr	r3, [r5, #20]
 8012efa:	b913      	cbnz	r3, 8012f02 <_strtod_l+0x7fa>
 8012efc:	692b      	ldr	r3, [r5, #16]
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	dd71      	ble.n	8012fe6 <_strtod_l+0x8de>
 8012f02:	4629      	mov	r1, r5
 8012f04:	2201      	movs	r2, #1
 8012f06:	4620      	mov	r0, r4
 8012f08:	f001 fff6 	bl	8014ef8 <__lshift>
 8012f0c:	4631      	mov	r1, r6
 8012f0e:	4605      	mov	r5, r0
 8012f10:	f002 f862 	bl	8014fd8 <__mcmp>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	dd66      	ble.n	8012fe6 <_strtod_l+0x8de>
 8012f18:	9904      	ldr	r1, [sp, #16]
 8012f1a:	4a53      	ldr	r2, [pc, #332]	; (8013068 <_strtod_l+0x960>)
 8012f1c:	465b      	mov	r3, fp
 8012f1e:	2900      	cmp	r1, #0
 8012f20:	f000 8081 	beq.w	8013026 <_strtod_l+0x91e>
 8012f24:	ea02 010b 	and.w	r1, r2, fp
 8012f28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012f2c:	dc7b      	bgt.n	8013026 <_strtod_l+0x91e>
 8012f2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012f32:	f77f aea9 	ble.w	8012c88 <_strtod_l+0x580>
 8012f36:	4b4d      	ldr	r3, [pc, #308]	; (801306c <_strtod_l+0x964>)
 8012f38:	4650      	mov	r0, sl
 8012f3a:	4659      	mov	r1, fp
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	f7ed fb73 	bl	8000628 <__aeabi_dmul>
 8012f42:	460b      	mov	r3, r1
 8012f44:	4303      	orrs	r3, r0
 8012f46:	bf08      	it	eq
 8012f48:	2322      	moveq	r3, #34	; 0x22
 8012f4a:	4682      	mov	sl, r0
 8012f4c:	468b      	mov	fp, r1
 8012f4e:	bf08      	it	eq
 8012f50:	6023      	streq	r3, [r4, #0]
 8012f52:	e62b      	b.n	8012bac <_strtod_l+0x4a4>
 8012f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f58:	fa02 f303 	lsl.w	r3, r2, r3
 8012f5c:	ea03 0a0a 	and.w	sl, r3, sl
 8012f60:	e6e3      	b.n	8012d2a <_strtod_l+0x622>
 8012f62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012f66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012f6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012f6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012f72:	fa01 f308 	lsl.w	r3, r1, r8
 8012f76:	9308      	str	r3, [sp, #32]
 8012f78:	910d      	str	r1, [sp, #52]	; 0x34
 8012f7a:	e746      	b.n	8012e0a <_strtod_l+0x702>
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	9308      	str	r3, [sp, #32]
 8012f80:	2301      	movs	r3, #1
 8012f82:	930d      	str	r3, [sp, #52]	; 0x34
 8012f84:	e741      	b.n	8012e0a <_strtod_l+0x702>
 8012f86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012f88:	4642      	mov	r2, r8
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	f001 ffb4 	bl	8014ef8 <__lshift>
 8012f90:	9018      	str	r0, [sp, #96]	; 0x60
 8012f92:	2800      	cmp	r0, #0
 8012f94:	f47f af6b 	bne.w	8012e6e <_strtod_l+0x766>
 8012f98:	e5fe      	b.n	8012b98 <_strtod_l+0x490>
 8012f9a:	465f      	mov	r7, fp
 8012f9c:	d16e      	bne.n	801307c <_strtod_l+0x974>
 8012f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012fa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fa4:	b342      	cbz	r2, 8012ff8 <_strtod_l+0x8f0>
 8012fa6:	4a32      	ldr	r2, [pc, #200]	; (8013070 <_strtod_l+0x968>)
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d128      	bne.n	8012ffe <_strtod_l+0x8f6>
 8012fac:	9b04      	ldr	r3, [sp, #16]
 8012fae:	4651      	mov	r1, sl
 8012fb0:	b1eb      	cbz	r3, 8012fee <_strtod_l+0x8e6>
 8012fb2:	4b2d      	ldr	r3, [pc, #180]	; (8013068 <_strtod_l+0x960>)
 8012fb4:	403b      	ands	r3, r7
 8012fb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fbe:	d819      	bhi.n	8012ff4 <_strtod_l+0x8ec>
 8012fc0:	0d1b      	lsrs	r3, r3, #20
 8012fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fca:	4299      	cmp	r1, r3
 8012fcc:	d117      	bne.n	8012ffe <_strtod_l+0x8f6>
 8012fce:	4b29      	ldr	r3, [pc, #164]	; (8013074 <_strtod_l+0x96c>)
 8012fd0:	429f      	cmp	r7, r3
 8012fd2:	d102      	bne.n	8012fda <_strtod_l+0x8d2>
 8012fd4:	3101      	adds	r1, #1
 8012fd6:	f43f addf 	beq.w	8012b98 <_strtod_l+0x490>
 8012fda:	4b23      	ldr	r3, [pc, #140]	; (8013068 <_strtod_l+0x960>)
 8012fdc:	403b      	ands	r3, r7
 8012fde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012fe2:	f04f 0a00 	mov.w	sl, #0
 8012fe6:	9b04      	ldr	r3, [sp, #16]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1a4      	bne.n	8012f36 <_strtod_l+0x82e>
 8012fec:	e5de      	b.n	8012bac <_strtod_l+0x4a4>
 8012fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ff2:	e7ea      	b.n	8012fca <_strtod_l+0x8c2>
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	e7e8      	b.n	8012fca <_strtod_l+0x8c2>
 8012ff8:	ea53 030a 	orrs.w	r3, r3, sl
 8012ffc:	d08c      	beq.n	8012f18 <_strtod_l+0x810>
 8012ffe:	9b08      	ldr	r3, [sp, #32]
 8013000:	b1db      	cbz	r3, 801303a <_strtod_l+0x932>
 8013002:	423b      	tst	r3, r7
 8013004:	d0ef      	beq.n	8012fe6 <_strtod_l+0x8de>
 8013006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013008:	9a04      	ldr	r2, [sp, #16]
 801300a:	4650      	mov	r0, sl
 801300c:	4659      	mov	r1, fp
 801300e:	b1c3      	cbz	r3, 8013042 <_strtod_l+0x93a>
 8013010:	f7ff fb5b 	bl	80126ca <sulp>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	ec51 0b18 	vmov	r0, r1, d8
 801301c:	f7ed f94e 	bl	80002bc <__adddf3>
 8013020:	4682      	mov	sl, r0
 8013022:	468b      	mov	fp, r1
 8013024:	e7df      	b.n	8012fe6 <_strtod_l+0x8de>
 8013026:	4013      	ands	r3, r2
 8013028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801302c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013034:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013038:	e7d5      	b.n	8012fe6 <_strtod_l+0x8de>
 801303a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801303c:	ea13 0f0a 	tst.w	r3, sl
 8013040:	e7e0      	b.n	8013004 <_strtod_l+0x8fc>
 8013042:	f7ff fb42 	bl	80126ca <sulp>
 8013046:	4602      	mov	r2, r0
 8013048:	460b      	mov	r3, r1
 801304a:	ec51 0b18 	vmov	r0, r1, d8
 801304e:	f7ed f933 	bl	80002b8 <__aeabi_dsub>
 8013052:	2200      	movs	r2, #0
 8013054:	2300      	movs	r3, #0
 8013056:	4682      	mov	sl, r0
 8013058:	468b      	mov	fp, r1
 801305a:	f7ed fd4d 	bl	8000af8 <__aeabi_dcmpeq>
 801305e:	2800      	cmp	r0, #0
 8013060:	d0c1      	beq.n	8012fe6 <_strtod_l+0x8de>
 8013062:	e611      	b.n	8012c88 <_strtod_l+0x580>
 8013064:	fffffc02 	.word	0xfffffc02
 8013068:	7ff00000 	.word	0x7ff00000
 801306c:	39500000 	.word	0x39500000
 8013070:	000fffff 	.word	0x000fffff
 8013074:	7fefffff 	.word	0x7fefffff
 8013078:	080161a0 	.word	0x080161a0
 801307c:	4631      	mov	r1, r6
 801307e:	4628      	mov	r0, r5
 8013080:	f002 f928 	bl	80152d4 <__ratio>
 8013084:	ec59 8b10 	vmov	r8, r9, d0
 8013088:	ee10 0a10 	vmov	r0, s0
 801308c:	2200      	movs	r2, #0
 801308e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013092:	4649      	mov	r1, r9
 8013094:	f7ed fd44 	bl	8000b20 <__aeabi_dcmple>
 8013098:	2800      	cmp	r0, #0
 801309a:	d07a      	beq.n	8013192 <_strtod_l+0xa8a>
 801309c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d04a      	beq.n	8013138 <_strtod_l+0xa30>
 80130a2:	4b95      	ldr	r3, [pc, #596]	; (80132f8 <_strtod_l+0xbf0>)
 80130a4:	2200      	movs	r2, #0
 80130a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80132f8 <_strtod_l+0xbf0>
 80130ae:	f04f 0800 	mov.w	r8, #0
 80130b2:	4b92      	ldr	r3, [pc, #584]	; (80132fc <_strtod_l+0xbf4>)
 80130b4:	403b      	ands	r3, r7
 80130b6:	930d      	str	r3, [sp, #52]	; 0x34
 80130b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130ba:	4b91      	ldr	r3, [pc, #580]	; (8013300 <_strtod_l+0xbf8>)
 80130bc:	429a      	cmp	r2, r3
 80130be:	f040 80b0 	bne.w	8013222 <_strtod_l+0xb1a>
 80130c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80130c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80130ca:	ec4b ab10 	vmov	d0, sl, fp
 80130ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80130d2:	f002 f827 	bl	8015124 <__ulp>
 80130d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80130da:	ec53 2b10 	vmov	r2, r3, d0
 80130de:	f7ed faa3 	bl	8000628 <__aeabi_dmul>
 80130e2:	4652      	mov	r2, sl
 80130e4:	465b      	mov	r3, fp
 80130e6:	f7ed f8e9 	bl	80002bc <__adddf3>
 80130ea:	460b      	mov	r3, r1
 80130ec:	4983      	ldr	r1, [pc, #524]	; (80132fc <_strtod_l+0xbf4>)
 80130ee:	4a85      	ldr	r2, [pc, #532]	; (8013304 <_strtod_l+0xbfc>)
 80130f0:	4019      	ands	r1, r3
 80130f2:	4291      	cmp	r1, r2
 80130f4:	4682      	mov	sl, r0
 80130f6:	d960      	bls.n	80131ba <_strtod_l+0xab2>
 80130f8:	ee18 3a90 	vmov	r3, s17
 80130fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013100:	4293      	cmp	r3, r2
 8013102:	d104      	bne.n	801310e <_strtod_l+0xa06>
 8013104:	ee18 3a10 	vmov	r3, s16
 8013108:	3301      	adds	r3, #1
 801310a:	f43f ad45 	beq.w	8012b98 <_strtod_l+0x490>
 801310e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8013310 <_strtod_l+0xc08>
 8013112:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013116:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013118:	4620      	mov	r0, r4
 801311a:	f001 fcd1 	bl	8014ac0 <_Bfree>
 801311e:	9905      	ldr	r1, [sp, #20]
 8013120:	4620      	mov	r0, r4
 8013122:	f001 fccd 	bl	8014ac0 <_Bfree>
 8013126:	4631      	mov	r1, r6
 8013128:	4620      	mov	r0, r4
 801312a:	f001 fcc9 	bl	8014ac0 <_Bfree>
 801312e:	4629      	mov	r1, r5
 8013130:	4620      	mov	r0, r4
 8013132:	f001 fcc5 	bl	8014ac0 <_Bfree>
 8013136:	e61a      	b.n	8012d6e <_strtod_l+0x666>
 8013138:	f1ba 0f00 	cmp.w	sl, #0
 801313c:	d11b      	bne.n	8013176 <_strtod_l+0xa6e>
 801313e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013142:	b9f3      	cbnz	r3, 8013182 <_strtod_l+0xa7a>
 8013144:	4b6c      	ldr	r3, [pc, #432]	; (80132f8 <_strtod_l+0xbf0>)
 8013146:	2200      	movs	r2, #0
 8013148:	4640      	mov	r0, r8
 801314a:	4649      	mov	r1, r9
 801314c:	f7ed fcde 	bl	8000b0c <__aeabi_dcmplt>
 8013150:	b9d0      	cbnz	r0, 8013188 <_strtod_l+0xa80>
 8013152:	4640      	mov	r0, r8
 8013154:	4649      	mov	r1, r9
 8013156:	4b6c      	ldr	r3, [pc, #432]	; (8013308 <_strtod_l+0xc00>)
 8013158:	2200      	movs	r2, #0
 801315a:	f7ed fa65 	bl	8000628 <__aeabi_dmul>
 801315e:	4680      	mov	r8, r0
 8013160:	4689      	mov	r9, r1
 8013162:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801316a:	9315      	str	r3, [sp, #84]	; 0x54
 801316c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013174:	e79d      	b.n	80130b2 <_strtod_l+0x9aa>
 8013176:	f1ba 0f01 	cmp.w	sl, #1
 801317a:	d102      	bne.n	8013182 <_strtod_l+0xa7a>
 801317c:	2f00      	cmp	r7, #0
 801317e:	f43f ad83 	beq.w	8012c88 <_strtod_l+0x580>
 8013182:	4b62      	ldr	r3, [pc, #392]	; (801330c <_strtod_l+0xc04>)
 8013184:	2200      	movs	r2, #0
 8013186:	e78e      	b.n	80130a6 <_strtod_l+0x99e>
 8013188:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8013308 <_strtod_l+0xc00>
 801318c:	f04f 0800 	mov.w	r8, #0
 8013190:	e7e7      	b.n	8013162 <_strtod_l+0xa5a>
 8013192:	4b5d      	ldr	r3, [pc, #372]	; (8013308 <_strtod_l+0xc00>)
 8013194:	4640      	mov	r0, r8
 8013196:	4649      	mov	r1, r9
 8013198:	2200      	movs	r2, #0
 801319a:	f7ed fa45 	bl	8000628 <__aeabi_dmul>
 801319e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a0:	4680      	mov	r8, r0
 80131a2:	4689      	mov	r9, r1
 80131a4:	b933      	cbnz	r3, 80131b4 <_strtod_l+0xaac>
 80131a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131aa:	900e      	str	r0, [sp, #56]	; 0x38
 80131ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80131ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80131b2:	e7dd      	b.n	8013170 <_strtod_l+0xa68>
 80131b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80131b8:	e7f9      	b.n	80131ae <_strtod_l+0xaa6>
 80131ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80131be:	9b04      	ldr	r3, [sp, #16]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d1a8      	bne.n	8013116 <_strtod_l+0xa0e>
 80131c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80131c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131ca:	0d1b      	lsrs	r3, r3, #20
 80131cc:	051b      	lsls	r3, r3, #20
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d1a1      	bne.n	8013116 <_strtod_l+0xa0e>
 80131d2:	4640      	mov	r0, r8
 80131d4:	4649      	mov	r1, r9
 80131d6:	f7ed fd6f 	bl	8000cb8 <__aeabi_d2lz>
 80131da:	f7ed f9f7 	bl	80005cc <__aeabi_l2d>
 80131de:	4602      	mov	r2, r0
 80131e0:	460b      	mov	r3, r1
 80131e2:	4640      	mov	r0, r8
 80131e4:	4649      	mov	r1, r9
 80131e6:	f7ed f867 	bl	80002b8 <__aeabi_dsub>
 80131ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80131f0:	ea43 030a 	orr.w	r3, r3, sl
 80131f4:	4313      	orrs	r3, r2
 80131f6:	4680      	mov	r8, r0
 80131f8:	4689      	mov	r9, r1
 80131fa:	d055      	beq.n	80132a8 <_strtod_l+0xba0>
 80131fc:	a336      	add	r3, pc, #216	; (adr r3, 80132d8 <_strtod_l+0xbd0>)
 80131fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013202:	f7ed fc83 	bl	8000b0c <__aeabi_dcmplt>
 8013206:	2800      	cmp	r0, #0
 8013208:	f47f acd0 	bne.w	8012bac <_strtod_l+0x4a4>
 801320c:	a334      	add	r3, pc, #208	; (adr r3, 80132e0 <_strtod_l+0xbd8>)
 801320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013212:	4640      	mov	r0, r8
 8013214:	4649      	mov	r1, r9
 8013216:	f7ed fc97 	bl	8000b48 <__aeabi_dcmpgt>
 801321a:	2800      	cmp	r0, #0
 801321c:	f43f af7b 	beq.w	8013116 <_strtod_l+0xa0e>
 8013220:	e4c4      	b.n	8012bac <_strtod_l+0x4a4>
 8013222:	9b04      	ldr	r3, [sp, #16]
 8013224:	b333      	cbz	r3, 8013274 <_strtod_l+0xb6c>
 8013226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013228:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801322c:	d822      	bhi.n	8013274 <_strtod_l+0xb6c>
 801322e:	a32e      	add	r3, pc, #184	; (adr r3, 80132e8 <_strtod_l+0xbe0>)
 8013230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013234:	4640      	mov	r0, r8
 8013236:	4649      	mov	r1, r9
 8013238:	f7ed fc72 	bl	8000b20 <__aeabi_dcmple>
 801323c:	b1a0      	cbz	r0, 8013268 <_strtod_l+0xb60>
 801323e:	4649      	mov	r1, r9
 8013240:	4640      	mov	r0, r8
 8013242:	f7ed fcc9 	bl	8000bd8 <__aeabi_d2uiz>
 8013246:	2801      	cmp	r0, #1
 8013248:	bf38      	it	cc
 801324a:	2001      	movcc	r0, #1
 801324c:	f7ed f972 	bl	8000534 <__aeabi_ui2d>
 8013250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013252:	4680      	mov	r8, r0
 8013254:	4689      	mov	r9, r1
 8013256:	bb23      	cbnz	r3, 80132a2 <_strtod_l+0xb9a>
 8013258:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801325c:	9010      	str	r0, [sp, #64]	; 0x40
 801325e:	9311      	str	r3, [sp, #68]	; 0x44
 8013260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013264:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801326a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801326c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013270:	1a9b      	subs	r3, r3, r2
 8013272:	9309      	str	r3, [sp, #36]	; 0x24
 8013274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013278:	eeb0 0a48 	vmov.f32	s0, s16
 801327c:	eef0 0a68 	vmov.f32	s1, s17
 8013280:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013284:	f001 ff4e 	bl	8015124 <__ulp>
 8013288:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801328c:	ec53 2b10 	vmov	r2, r3, d0
 8013290:	f7ed f9ca 	bl	8000628 <__aeabi_dmul>
 8013294:	ec53 2b18 	vmov	r2, r3, d8
 8013298:	f7ed f810 	bl	80002bc <__adddf3>
 801329c:	4682      	mov	sl, r0
 801329e:	468b      	mov	fp, r1
 80132a0:	e78d      	b.n	80131be <_strtod_l+0xab6>
 80132a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80132a6:	e7db      	b.n	8013260 <_strtod_l+0xb58>
 80132a8:	a311      	add	r3, pc, #68	; (adr r3, 80132f0 <_strtod_l+0xbe8>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ed fc2d 	bl	8000b0c <__aeabi_dcmplt>
 80132b2:	e7b2      	b.n	801321a <_strtod_l+0xb12>
 80132b4:	2300      	movs	r3, #0
 80132b6:	930a      	str	r3, [sp, #40]	; 0x28
 80132b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80132ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80132bc:	6013      	str	r3, [r2, #0]
 80132be:	f7ff ba6b 	b.w	8012798 <_strtod_l+0x90>
 80132c2:	2a65      	cmp	r2, #101	; 0x65
 80132c4:	f43f ab5f 	beq.w	8012986 <_strtod_l+0x27e>
 80132c8:	2a45      	cmp	r2, #69	; 0x45
 80132ca:	f43f ab5c 	beq.w	8012986 <_strtod_l+0x27e>
 80132ce:	2301      	movs	r3, #1
 80132d0:	f7ff bb94 	b.w	80129fc <_strtod_l+0x2f4>
 80132d4:	f3af 8000 	nop.w
 80132d8:	94a03595 	.word	0x94a03595
 80132dc:	3fdfffff 	.word	0x3fdfffff
 80132e0:	35afe535 	.word	0x35afe535
 80132e4:	3fe00000 	.word	0x3fe00000
 80132e8:	ffc00000 	.word	0xffc00000
 80132ec:	41dfffff 	.word	0x41dfffff
 80132f0:	94a03595 	.word	0x94a03595
 80132f4:	3fcfffff 	.word	0x3fcfffff
 80132f8:	3ff00000 	.word	0x3ff00000
 80132fc:	7ff00000 	.word	0x7ff00000
 8013300:	7fe00000 	.word	0x7fe00000
 8013304:	7c9fffff 	.word	0x7c9fffff
 8013308:	3fe00000 	.word	0x3fe00000
 801330c:	bff00000 	.word	0xbff00000
 8013310:	7fefffff 	.word	0x7fefffff

08013314 <_strtod_r>:
 8013314:	4b01      	ldr	r3, [pc, #4]	; (801331c <_strtod_r+0x8>)
 8013316:	f7ff b9f7 	b.w	8012708 <_strtod_l>
 801331a:	bf00      	nop
 801331c:	20000078 	.word	0x20000078

08013320 <_strtol_l.constprop.0>:
 8013320:	2b01      	cmp	r3, #1
 8013322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013326:	d001      	beq.n	801332c <_strtol_l.constprop.0+0xc>
 8013328:	2b24      	cmp	r3, #36	; 0x24
 801332a:	d906      	bls.n	801333a <_strtol_l.constprop.0+0x1a>
 801332c:	f7fe f86e 	bl	801140c <__errno>
 8013330:	2316      	movs	r3, #22
 8013332:	6003      	str	r3, [r0, #0]
 8013334:	2000      	movs	r0, #0
 8013336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801333a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013420 <_strtol_l.constprop.0+0x100>
 801333e:	460d      	mov	r5, r1
 8013340:	462e      	mov	r6, r5
 8013342:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013346:	f814 700c 	ldrb.w	r7, [r4, ip]
 801334a:	f017 0708 	ands.w	r7, r7, #8
 801334e:	d1f7      	bne.n	8013340 <_strtol_l.constprop.0+0x20>
 8013350:	2c2d      	cmp	r4, #45	; 0x2d
 8013352:	d132      	bne.n	80133ba <_strtol_l.constprop.0+0x9a>
 8013354:	782c      	ldrb	r4, [r5, #0]
 8013356:	2701      	movs	r7, #1
 8013358:	1cb5      	adds	r5, r6, #2
 801335a:	2b00      	cmp	r3, #0
 801335c:	d05b      	beq.n	8013416 <_strtol_l.constprop.0+0xf6>
 801335e:	2b10      	cmp	r3, #16
 8013360:	d109      	bne.n	8013376 <_strtol_l.constprop.0+0x56>
 8013362:	2c30      	cmp	r4, #48	; 0x30
 8013364:	d107      	bne.n	8013376 <_strtol_l.constprop.0+0x56>
 8013366:	782c      	ldrb	r4, [r5, #0]
 8013368:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801336c:	2c58      	cmp	r4, #88	; 0x58
 801336e:	d14d      	bne.n	801340c <_strtol_l.constprop.0+0xec>
 8013370:	786c      	ldrb	r4, [r5, #1]
 8013372:	2310      	movs	r3, #16
 8013374:	3502      	adds	r5, #2
 8013376:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801337a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801337e:	f04f 0c00 	mov.w	ip, #0
 8013382:	fbb8 f9f3 	udiv	r9, r8, r3
 8013386:	4666      	mov	r6, ip
 8013388:	fb03 8a19 	mls	sl, r3, r9, r8
 801338c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013390:	f1be 0f09 	cmp.w	lr, #9
 8013394:	d816      	bhi.n	80133c4 <_strtol_l.constprop.0+0xa4>
 8013396:	4674      	mov	r4, lr
 8013398:	42a3      	cmp	r3, r4
 801339a:	dd24      	ble.n	80133e6 <_strtol_l.constprop.0+0xc6>
 801339c:	f1bc 0f00 	cmp.w	ip, #0
 80133a0:	db1e      	blt.n	80133e0 <_strtol_l.constprop.0+0xc0>
 80133a2:	45b1      	cmp	r9, r6
 80133a4:	d31c      	bcc.n	80133e0 <_strtol_l.constprop.0+0xc0>
 80133a6:	d101      	bne.n	80133ac <_strtol_l.constprop.0+0x8c>
 80133a8:	45a2      	cmp	sl, r4
 80133aa:	db19      	blt.n	80133e0 <_strtol_l.constprop.0+0xc0>
 80133ac:	fb06 4603 	mla	r6, r6, r3, r4
 80133b0:	f04f 0c01 	mov.w	ip, #1
 80133b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133b8:	e7e8      	b.n	801338c <_strtol_l.constprop.0+0x6c>
 80133ba:	2c2b      	cmp	r4, #43	; 0x2b
 80133bc:	bf04      	itt	eq
 80133be:	782c      	ldrbeq	r4, [r5, #0]
 80133c0:	1cb5      	addeq	r5, r6, #2
 80133c2:	e7ca      	b.n	801335a <_strtol_l.constprop.0+0x3a>
 80133c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80133c8:	f1be 0f19 	cmp.w	lr, #25
 80133cc:	d801      	bhi.n	80133d2 <_strtol_l.constprop.0+0xb2>
 80133ce:	3c37      	subs	r4, #55	; 0x37
 80133d0:	e7e2      	b.n	8013398 <_strtol_l.constprop.0+0x78>
 80133d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80133d6:	f1be 0f19 	cmp.w	lr, #25
 80133da:	d804      	bhi.n	80133e6 <_strtol_l.constprop.0+0xc6>
 80133dc:	3c57      	subs	r4, #87	; 0x57
 80133de:	e7db      	b.n	8013398 <_strtol_l.constprop.0+0x78>
 80133e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80133e4:	e7e6      	b.n	80133b4 <_strtol_l.constprop.0+0x94>
 80133e6:	f1bc 0f00 	cmp.w	ip, #0
 80133ea:	da05      	bge.n	80133f8 <_strtol_l.constprop.0+0xd8>
 80133ec:	2322      	movs	r3, #34	; 0x22
 80133ee:	6003      	str	r3, [r0, #0]
 80133f0:	4646      	mov	r6, r8
 80133f2:	b942      	cbnz	r2, 8013406 <_strtol_l.constprop.0+0xe6>
 80133f4:	4630      	mov	r0, r6
 80133f6:	e79e      	b.n	8013336 <_strtol_l.constprop.0+0x16>
 80133f8:	b107      	cbz	r7, 80133fc <_strtol_l.constprop.0+0xdc>
 80133fa:	4276      	negs	r6, r6
 80133fc:	2a00      	cmp	r2, #0
 80133fe:	d0f9      	beq.n	80133f4 <_strtol_l.constprop.0+0xd4>
 8013400:	f1bc 0f00 	cmp.w	ip, #0
 8013404:	d000      	beq.n	8013408 <_strtol_l.constprop.0+0xe8>
 8013406:	1e69      	subs	r1, r5, #1
 8013408:	6011      	str	r1, [r2, #0]
 801340a:	e7f3      	b.n	80133f4 <_strtol_l.constprop.0+0xd4>
 801340c:	2430      	movs	r4, #48	; 0x30
 801340e:	2b00      	cmp	r3, #0
 8013410:	d1b1      	bne.n	8013376 <_strtol_l.constprop.0+0x56>
 8013412:	2308      	movs	r3, #8
 8013414:	e7af      	b.n	8013376 <_strtol_l.constprop.0+0x56>
 8013416:	2c30      	cmp	r4, #48	; 0x30
 8013418:	d0a5      	beq.n	8013366 <_strtol_l.constprop.0+0x46>
 801341a:	230a      	movs	r3, #10
 801341c:	e7ab      	b.n	8013376 <_strtol_l.constprop.0+0x56>
 801341e:	bf00      	nop
 8013420:	080161c9 	.word	0x080161c9

08013424 <_strtol_r>:
 8013424:	f7ff bf7c 	b.w	8013320 <_strtol_l.constprop.0>

08013428 <_write_r>:
 8013428:	b538      	push	{r3, r4, r5, lr}
 801342a:	4d07      	ldr	r5, [pc, #28]	; (8013448 <_write_r+0x20>)
 801342c:	4604      	mov	r4, r0
 801342e:	4608      	mov	r0, r1
 8013430:	4611      	mov	r1, r2
 8013432:	2200      	movs	r2, #0
 8013434:	602a      	str	r2, [r5, #0]
 8013436:	461a      	mov	r2, r3
 8013438:	f7ee fe1b 	bl	8002072 <_write>
 801343c:	1c43      	adds	r3, r0, #1
 801343e:	d102      	bne.n	8013446 <_write_r+0x1e>
 8013440:	682b      	ldr	r3, [r5, #0]
 8013442:	b103      	cbz	r3, 8013446 <_write_r+0x1e>
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	bd38      	pop	{r3, r4, r5, pc}
 8013448:	20002700 	.word	0x20002700

0801344c <_close_r>:
 801344c:	b538      	push	{r3, r4, r5, lr}
 801344e:	4d06      	ldr	r5, [pc, #24]	; (8013468 <_close_r+0x1c>)
 8013450:	2300      	movs	r3, #0
 8013452:	4604      	mov	r4, r0
 8013454:	4608      	mov	r0, r1
 8013456:	602b      	str	r3, [r5, #0]
 8013458:	f7ee fe27 	bl	80020aa <_close>
 801345c:	1c43      	adds	r3, r0, #1
 801345e:	d102      	bne.n	8013466 <_close_r+0x1a>
 8013460:	682b      	ldr	r3, [r5, #0]
 8013462:	b103      	cbz	r3, 8013466 <_close_r+0x1a>
 8013464:	6023      	str	r3, [r4, #0]
 8013466:	bd38      	pop	{r3, r4, r5, pc}
 8013468:	20002700 	.word	0x20002700

0801346c <quorem>:
 801346c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013470:	6903      	ldr	r3, [r0, #16]
 8013472:	690c      	ldr	r4, [r1, #16]
 8013474:	42a3      	cmp	r3, r4
 8013476:	4607      	mov	r7, r0
 8013478:	f2c0 8081 	blt.w	801357e <quorem+0x112>
 801347c:	3c01      	subs	r4, #1
 801347e:	f101 0814 	add.w	r8, r1, #20
 8013482:	f100 0514 	add.w	r5, r0, #20
 8013486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013494:	3301      	adds	r3, #1
 8013496:	429a      	cmp	r2, r3
 8013498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801349c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80134a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80134a4:	d331      	bcc.n	801350a <quorem+0x9e>
 80134a6:	f04f 0e00 	mov.w	lr, #0
 80134aa:	4640      	mov	r0, r8
 80134ac:	46ac      	mov	ip, r5
 80134ae:	46f2      	mov	sl, lr
 80134b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80134b4:	b293      	uxth	r3, r2
 80134b6:	fb06 e303 	mla	r3, r6, r3, lr
 80134ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80134be:	b29b      	uxth	r3, r3
 80134c0:	ebaa 0303 	sub.w	r3, sl, r3
 80134c4:	f8dc a000 	ldr.w	sl, [ip]
 80134c8:	0c12      	lsrs	r2, r2, #16
 80134ca:	fa13 f38a 	uxtah	r3, r3, sl
 80134ce:	fb06 e202 	mla	r2, r6, r2, lr
 80134d2:	9300      	str	r3, [sp, #0]
 80134d4:	9b00      	ldr	r3, [sp, #0]
 80134d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80134da:	b292      	uxth	r2, r2
 80134dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80134e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80134e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80134e8:	4581      	cmp	r9, r0
 80134ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134ee:	f84c 3b04 	str.w	r3, [ip], #4
 80134f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80134f6:	d2db      	bcs.n	80134b0 <quorem+0x44>
 80134f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80134fc:	b92b      	cbnz	r3, 801350a <quorem+0x9e>
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	3b04      	subs	r3, #4
 8013502:	429d      	cmp	r5, r3
 8013504:	461a      	mov	r2, r3
 8013506:	d32e      	bcc.n	8013566 <quorem+0xfa>
 8013508:	613c      	str	r4, [r7, #16]
 801350a:	4638      	mov	r0, r7
 801350c:	f001 fd64 	bl	8014fd8 <__mcmp>
 8013510:	2800      	cmp	r0, #0
 8013512:	db24      	blt.n	801355e <quorem+0xf2>
 8013514:	3601      	adds	r6, #1
 8013516:	4628      	mov	r0, r5
 8013518:	f04f 0c00 	mov.w	ip, #0
 801351c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013520:	f8d0 e000 	ldr.w	lr, [r0]
 8013524:	b293      	uxth	r3, r2
 8013526:	ebac 0303 	sub.w	r3, ip, r3
 801352a:	0c12      	lsrs	r2, r2, #16
 801352c:	fa13 f38e 	uxtah	r3, r3, lr
 8013530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013538:	b29b      	uxth	r3, r3
 801353a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801353e:	45c1      	cmp	r9, r8
 8013540:	f840 3b04 	str.w	r3, [r0], #4
 8013544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013548:	d2e8      	bcs.n	801351c <quorem+0xb0>
 801354a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801354e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013552:	b922      	cbnz	r2, 801355e <quorem+0xf2>
 8013554:	3b04      	subs	r3, #4
 8013556:	429d      	cmp	r5, r3
 8013558:	461a      	mov	r2, r3
 801355a:	d30a      	bcc.n	8013572 <quorem+0x106>
 801355c:	613c      	str	r4, [r7, #16]
 801355e:	4630      	mov	r0, r6
 8013560:	b003      	add	sp, #12
 8013562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013566:	6812      	ldr	r2, [r2, #0]
 8013568:	3b04      	subs	r3, #4
 801356a:	2a00      	cmp	r2, #0
 801356c:	d1cc      	bne.n	8013508 <quorem+0x9c>
 801356e:	3c01      	subs	r4, #1
 8013570:	e7c7      	b.n	8013502 <quorem+0x96>
 8013572:	6812      	ldr	r2, [r2, #0]
 8013574:	3b04      	subs	r3, #4
 8013576:	2a00      	cmp	r2, #0
 8013578:	d1f0      	bne.n	801355c <quorem+0xf0>
 801357a:	3c01      	subs	r4, #1
 801357c:	e7eb      	b.n	8013556 <quorem+0xea>
 801357e:	2000      	movs	r0, #0
 8013580:	e7ee      	b.n	8013560 <quorem+0xf4>
 8013582:	0000      	movs	r0, r0
 8013584:	0000      	movs	r0, r0
	...

08013588 <_dtoa_r>:
 8013588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358c:	ed2d 8b04 	vpush	{d8-d9}
 8013590:	ec57 6b10 	vmov	r6, r7, d0
 8013594:	b093      	sub	sp, #76	; 0x4c
 8013596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801359c:	9106      	str	r1, [sp, #24]
 801359e:	ee10 aa10 	vmov	sl, s0
 80135a2:	4604      	mov	r4, r0
 80135a4:	9209      	str	r2, [sp, #36]	; 0x24
 80135a6:	930c      	str	r3, [sp, #48]	; 0x30
 80135a8:	46bb      	mov	fp, r7
 80135aa:	b975      	cbnz	r5, 80135ca <_dtoa_r+0x42>
 80135ac:	2010      	movs	r0, #16
 80135ae:	f001 fa21 	bl	80149f4 <malloc>
 80135b2:	4602      	mov	r2, r0
 80135b4:	6260      	str	r0, [r4, #36]	; 0x24
 80135b6:	b920      	cbnz	r0, 80135c2 <_dtoa_r+0x3a>
 80135b8:	4ba7      	ldr	r3, [pc, #668]	; (8013858 <_dtoa_r+0x2d0>)
 80135ba:	21ea      	movs	r1, #234	; 0xea
 80135bc:	48a7      	ldr	r0, [pc, #668]	; (801385c <_dtoa_r+0x2d4>)
 80135be:	f002 f8fd 	bl	80157bc <__assert_func>
 80135c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80135c6:	6005      	str	r5, [r0, #0]
 80135c8:	60c5      	str	r5, [r0, #12]
 80135ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135cc:	6819      	ldr	r1, [r3, #0]
 80135ce:	b151      	cbz	r1, 80135e6 <_dtoa_r+0x5e>
 80135d0:	685a      	ldr	r2, [r3, #4]
 80135d2:	604a      	str	r2, [r1, #4]
 80135d4:	2301      	movs	r3, #1
 80135d6:	4093      	lsls	r3, r2
 80135d8:	608b      	str	r3, [r1, #8]
 80135da:	4620      	mov	r0, r4
 80135dc:	f001 fa70 	bl	8014ac0 <_Bfree>
 80135e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135e2:	2200      	movs	r2, #0
 80135e4:	601a      	str	r2, [r3, #0]
 80135e6:	1e3b      	subs	r3, r7, #0
 80135e8:	bfaa      	itet	ge
 80135ea:	2300      	movge	r3, #0
 80135ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80135f0:	f8c8 3000 	strge.w	r3, [r8]
 80135f4:	4b9a      	ldr	r3, [pc, #616]	; (8013860 <_dtoa_r+0x2d8>)
 80135f6:	bfbc      	itt	lt
 80135f8:	2201      	movlt	r2, #1
 80135fa:	f8c8 2000 	strlt.w	r2, [r8]
 80135fe:	ea33 030b 	bics.w	r3, r3, fp
 8013602:	d11b      	bne.n	801363c <_dtoa_r+0xb4>
 8013604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013606:	f242 730f 	movw	r3, #9999	; 0x270f
 801360a:	6013      	str	r3, [r2, #0]
 801360c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013610:	4333      	orrs	r3, r6
 8013612:	f000 8592 	beq.w	801413a <_dtoa_r+0xbb2>
 8013616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013618:	b963      	cbnz	r3, 8013634 <_dtoa_r+0xac>
 801361a:	4b92      	ldr	r3, [pc, #584]	; (8013864 <_dtoa_r+0x2dc>)
 801361c:	e022      	b.n	8013664 <_dtoa_r+0xdc>
 801361e:	4b92      	ldr	r3, [pc, #584]	; (8013868 <_dtoa_r+0x2e0>)
 8013620:	9301      	str	r3, [sp, #4]
 8013622:	3308      	adds	r3, #8
 8013624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013626:	6013      	str	r3, [r2, #0]
 8013628:	9801      	ldr	r0, [sp, #4]
 801362a:	b013      	add	sp, #76	; 0x4c
 801362c:	ecbd 8b04 	vpop	{d8-d9}
 8013630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013634:	4b8b      	ldr	r3, [pc, #556]	; (8013864 <_dtoa_r+0x2dc>)
 8013636:	9301      	str	r3, [sp, #4]
 8013638:	3303      	adds	r3, #3
 801363a:	e7f3      	b.n	8013624 <_dtoa_r+0x9c>
 801363c:	2200      	movs	r2, #0
 801363e:	2300      	movs	r3, #0
 8013640:	4650      	mov	r0, sl
 8013642:	4659      	mov	r1, fp
 8013644:	f7ed fa58 	bl	8000af8 <__aeabi_dcmpeq>
 8013648:	ec4b ab19 	vmov	d9, sl, fp
 801364c:	4680      	mov	r8, r0
 801364e:	b158      	cbz	r0, 8013668 <_dtoa_r+0xe0>
 8013650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013652:	2301      	movs	r3, #1
 8013654:	6013      	str	r3, [r2, #0]
 8013656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013658:	2b00      	cmp	r3, #0
 801365a:	f000 856b 	beq.w	8014134 <_dtoa_r+0xbac>
 801365e:	4883      	ldr	r0, [pc, #524]	; (801386c <_dtoa_r+0x2e4>)
 8013660:	6018      	str	r0, [r3, #0]
 8013662:	1e43      	subs	r3, r0, #1
 8013664:	9301      	str	r3, [sp, #4]
 8013666:	e7df      	b.n	8013628 <_dtoa_r+0xa0>
 8013668:	ec4b ab10 	vmov	d0, sl, fp
 801366c:	aa10      	add	r2, sp, #64	; 0x40
 801366e:	a911      	add	r1, sp, #68	; 0x44
 8013670:	4620      	mov	r0, r4
 8013672:	f001 fdd3 	bl	801521c <__d2b>
 8013676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801367a:	ee08 0a10 	vmov	s16, r0
 801367e:	2d00      	cmp	r5, #0
 8013680:	f000 8084 	beq.w	801378c <_dtoa_r+0x204>
 8013684:	ee19 3a90 	vmov	r3, s19
 8013688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801368c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013690:	4656      	mov	r6, sl
 8013692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801369a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801369e:	4b74      	ldr	r3, [pc, #464]	; (8013870 <_dtoa_r+0x2e8>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	4630      	mov	r0, r6
 80136a4:	4639      	mov	r1, r7
 80136a6:	f7ec fe07 	bl	80002b8 <__aeabi_dsub>
 80136aa:	a365      	add	r3, pc, #404	; (adr r3, 8013840 <_dtoa_r+0x2b8>)
 80136ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b0:	f7ec ffba 	bl	8000628 <__aeabi_dmul>
 80136b4:	a364      	add	r3, pc, #400	; (adr r3, 8013848 <_dtoa_r+0x2c0>)
 80136b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ba:	f7ec fdff 	bl	80002bc <__adddf3>
 80136be:	4606      	mov	r6, r0
 80136c0:	4628      	mov	r0, r5
 80136c2:	460f      	mov	r7, r1
 80136c4:	f7ec ff46 	bl	8000554 <__aeabi_i2d>
 80136c8:	a361      	add	r3, pc, #388	; (adr r3, 8013850 <_dtoa_r+0x2c8>)
 80136ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ce:	f7ec ffab 	bl	8000628 <__aeabi_dmul>
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	4630      	mov	r0, r6
 80136d8:	4639      	mov	r1, r7
 80136da:	f7ec fdef 	bl	80002bc <__adddf3>
 80136de:	4606      	mov	r6, r0
 80136e0:	460f      	mov	r7, r1
 80136e2:	f7ed fa51 	bl	8000b88 <__aeabi_d2iz>
 80136e6:	2200      	movs	r2, #0
 80136e8:	9000      	str	r0, [sp, #0]
 80136ea:	2300      	movs	r3, #0
 80136ec:	4630      	mov	r0, r6
 80136ee:	4639      	mov	r1, r7
 80136f0:	f7ed fa0c 	bl	8000b0c <__aeabi_dcmplt>
 80136f4:	b150      	cbz	r0, 801370c <_dtoa_r+0x184>
 80136f6:	9800      	ldr	r0, [sp, #0]
 80136f8:	f7ec ff2c 	bl	8000554 <__aeabi_i2d>
 80136fc:	4632      	mov	r2, r6
 80136fe:	463b      	mov	r3, r7
 8013700:	f7ed f9fa 	bl	8000af8 <__aeabi_dcmpeq>
 8013704:	b910      	cbnz	r0, 801370c <_dtoa_r+0x184>
 8013706:	9b00      	ldr	r3, [sp, #0]
 8013708:	3b01      	subs	r3, #1
 801370a:	9300      	str	r3, [sp, #0]
 801370c:	9b00      	ldr	r3, [sp, #0]
 801370e:	2b16      	cmp	r3, #22
 8013710:	d85a      	bhi.n	80137c8 <_dtoa_r+0x240>
 8013712:	9a00      	ldr	r2, [sp, #0]
 8013714:	4b57      	ldr	r3, [pc, #348]	; (8013874 <_dtoa_r+0x2ec>)
 8013716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371e:	ec51 0b19 	vmov	r0, r1, d9
 8013722:	f7ed f9f3 	bl	8000b0c <__aeabi_dcmplt>
 8013726:	2800      	cmp	r0, #0
 8013728:	d050      	beq.n	80137cc <_dtoa_r+0x244>
 801372a:	9b00      	ldr	r3, [sp, #0]
 801372c:	3b01      	subs	r3, #1
 801372e:	9300      	str	r3, [sp, #0]
 8013730:	2300      	movs	r3, #0
 8013732:	930b      	str	r3, [sp, #44]	; 0x2c
 8013734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013736:	1b5d      	subs	r5, r3, r5
 8013738:	1e6b      	subs	r3, r5, #1
 801373a:	9305      	str	r3, [sp, #20]
 801373c:	bf45      	ittet	mi
 801373e:	f1c5 0301 	rsbmi	r3, r5, #1
 8013742:	9304      	strmi	r3, [sp, #16]
 8013744:	2300      	movpl	r3, #0
 8013746:	2300      	movmi	r3, #0
 8013748:	bf4c      	ite	mi
 801374a:	9305      	strmi	r3, [sp, #20]
 801374c:	9304      	strpl	r3, [sp, #16]
 801374e:	9b00      	ldr	r3, [sp, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	db3d      	blt.n	80137d0 <_dtoa_r+0x248>
 8013754:	9b05      	ldr	r3, [sp, #20]
 8013756:	9a00      	ldr	r2, [sp, #0]
 8013758:	920a      	str	r2, [sp, #40]	; 0x28
 801375a:	4413      	add	r3, r2
 801375c:	9305      	str	r3, [sp, #20]
 801375e:	2300      	movs	r3, #0
 8013760:	9307      	str	r3, [sp, #28]
 8013762:	9b06      	ldr	r3, [sp, #24]
 8013764:	2b09      	cmp	r3, #9
 8013766:	f200 8089 	bhi.w	801387c <_dtoa_r+0x2f4>
 801376a:	2b05      	cmp	r3, #5
 801376c:	bfc4      	itt	gt
 801376e:	3b04      	subgt	r3, #4
 8013770:	9306      	strgt	r3, [sp, #24]
 8013772:	9b06      	ldr	r3, [sp, #24]
 8013774:	f1a3 0302 	sub.w	r3, r3, #2
 8013778:	bfcc      	ite	gt
 801377a:	2500      	movgt	r5, #0
 801377c:	2501      	movle	r5, #1
 801377e:	2b03      	cmp	r3, #3
 8013780:	f200 8087 	bhi.w	8013892 <_dtoa_r+0x30a>
 8013784:	e8df f003 	tbb	[pc, r3]
 8013788:	59383a2d 	.word	0x59383a2d
 801378c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013790:	441d      	add	r5, r3
 8013792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013796:	2b20      	cmp	r3, #32
 8013798:	bfc1      	itttt	gt
 801379a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801379e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80137a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80137a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80137aa:	bfda      	itte	le
 80137ac:	f1c3 0320 	rsble	r3, r3, #32
 80137b0:	fa06 f003 	lslle.w	r0, r6, r3
 80137b4:	4318      	orrgt	r0, r3
 80137b6:	f7ec febd 	bl	8000534 <__aeabi_ui2d>
 80137ba:	2301      	movs	r3, #1
 80137bc:	4606      	mov	r6, r0
 80137be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80137c2:	3d01      	subs	r5, #1
 80137c4:	930e      	str	r3, [sp, #56]	; 0x38
 80137c6:	e76a      	b.n	801369e <_dtoa_r+0x116>
 80137c8:	2301      	movs	r3, #1
 80137ca:	e7b2      	b.n	8013732 <_dtoa_r+0x1aa>
 80137cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80137ce:	e7b1      	b.n	8013734 <_dtoa_r+0x1ac>
 80137d0:	9b04      	ldr	r3, [sp, #16]
 80137d2:	9a00      	ldr	r2, [sp, #0]
 80137d4:	1a9b      	subs	r3, r3, r2
 80137d6:	9304      	str	r3, [sp, #16]
 80137d8:	4253      	negs	r3, r2
 80137da:	9307      	str	r3, [sp, #28]
 80137dc:	2300      	movs	r3, #0
 80137de:	930a      	str	r3, [sp, #40]	; 0x28
 80137e0:	e7bf      	b.n	8013762 <_dtoa_r+0x1da>
 80137e2:	2300      	movs	r3, #0
 80137e4:	9308      	str	r3, [sp, #32]
 80137e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	dc55      	bgt.n	8013898 <_dtoa_r+0x310>
 80137ec:	2301      	movs	r3, #1
 80137ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80137f2:	461a      	mov	r2, r3
 80137f4:	9209      	str	r2, [sp, #36]	; 0x24
 80137f6:	e00c      	b.n	8013812 <_dtoa_r+0x28a>
 80137f8:	2301      	movs	r3, #1
 80137fa:	e7f3      	b.n	80137e4 <_dtoa_r+0x25c>
 80137fc:	2300      	movs	r3, #0
 80137fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013800:	9308      	str	r3, [sp, #32]
 8013802:	9b00      	ldr	r3, [sp, #0]
 8013804:	4413      	add	r3, r2
 8013806:	9302      	str	r3, [sp, #8]
 8013808:	3301      	adds	r3, #1
 801380a:	2b01      	cmp	r3, #1
 801380c:	9303      	str	r3, [sp, #12]
 801380e:	bfb8      	it	lt
 8013810:	2301      	movlt	r3, #1
 8013812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013814:	2200      	movs	r2, #0
 8013816:	6042      	str	r2, [r0, #4]
 8013818:	2204      	movs	r2, #4
 801381a:	f102 0614 	add.w	r6, r2, #20
 801381e:	429e      	cmp	r6, r3
 8013820:	6841      	ldr	r1, [r0, #4]
 8013822:	d93d      	bls.n	80138a0 <_dtoa_r+0x318>
 8013824:	4620      	mov	r0, r4
 8013826:	f001 f90b 	bl	8014a40 <_Balloc>
 801382a:	9001      	str	r0, [sp, #4]
 801382c:	2800      	cmp	r0, #0
 801382e:	d13b      	bne.n	80138a8 <_dtoa_r+0x320>
 8013830:	4b11      	ldr	r3, [pc, #68]	; (8013878 <_dtoa_r+0x2f0>)
 8013832:	4602      	mov	r2, r0
 8013834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013838:	e6c0      	b.n	80135bc <_dtoa_r+0x34>
 801383a:	2301      	movs	r3, #1
 801383c:	e7df      	b.n	80137fe <_dtoa_r+0x276>
 801383e:	bf00      	nop
 8013840:	636f4361 	.word	0x636f4361
 8013844:	3fd287a7 	.word	0x3fd287a7
 8013848:	8b60c8b3 	.word	0x8b60c8b3
 801384c:	3fc68a28 	.word	0x3fc68a28
 8013850:	509f79fb 	.word	0x509f79fb
 8013854:	3fd34413 	.word	0x3fd34413
 8013858:	080162d6 	.word	0x080162d6
 801385c:	080162ed 	.word	0x080162ed
 8013860:	7ff00000 	.word	0x7ff00000
 8013864:	080162d2 	.word	0x080162d2
 8013868:	080162c9 	.word	0x080162c9
 801386c:	0801614d 	.word	0x0801614d
 8013870:	3ff80000 	.word	0x3ff80000
 8013874:	08016458 	.word	0x08016458
 8013878:	08016348 	.word	0x08016348
 801387c:	2501      	movs	r5, #1
 801387e:	2300      	movs	r3, #0
 8013880:	9306      	str	r3, [sp, #24]
 8013882:	9508      	str	r5, [sp, #32]
 8013884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801388c:	2200      	movs	r2, #0
 801388e:	2312      	movs	r3, #18
 8013890:	e7b0      	b.n	80137f4 <_dtoa_r+0x26c>
 8013892:	2301      	movs	r3, #1
 8013894:	9308      	str	r3, [sp, #32]
 8013896:	e7f5      	b.n	8013884 <_dtoa_r+0x2fc>
 8013898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801389a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801389e:	e7b8      	b.n	8013812 <_dtoa_r+0x28a>
 80138a0:	3101      	adds	r1, #1
 80138a2:	6041      	str	r1, [r0, #4]
 80138a4:	0052      	lsls	r2, r2, #1
 80138a6:	e7b8      	b.n	801381a <_dtoa_r+0x292>
 80138a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138aa:	9a01      	ldr	r2, [sp, #4]
 80138ac:	601a      	str	r2, [r3, #0]
 80138ae:	9b03      	ldr	r3, [sp, #12]
 80138b0:	2b0e      	cmp	r3, #14
 80138b2:	f200 809d 	bhi.w	80139f0 <_dtoa_r+0x468>
 80138b6:	2d00      	cmp	r5, #0
 80138b8:	f000 809a 	beq.w	80139f0 <_dtoa_r+0x468>
 80138bc:	9b00      	ldr	r3, [sp, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	dd32      	ble.n	8013928 <_dtoa_r+0x3a0>
 80138c2:	4ab7      	ldr	r2, [pc, #732]	; (8013ba0 <_dtoa_r+0x618>)
 80138c4:	f003 030f 	and.w	r3, r3, #15
 80138c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80138cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80138d0:	9b00      	ldr	r3, [sp, #0]
 80138d2:	05d8      	lsls	r0, r3, #23
 80138d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80138d8:	d516      	bpl.n	8013908 <_dtoa_r+0x380>
 80138da:	4bb2      	ldr	r3, [pc, #712]	; (8013ba4 <_dtoa_r+0x61c>)
 80138dc:	ec51 0b19 	vmov	r0, r1, d9
 80138e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80138e4:	f7ec ffca 	bl	800087c <__aeabi_ddiv>
 80138e8:	f007 070f 	and.w	r7, r7, #15
 80138ec:	4682      	mov	sl, r0
 80138ee:	468b      	mov	fp, r1
 80138f0:	2503      	movs	r5, #3
 80138f2:	4eac      	ldr	r6, [pc, #688]	; (8013ba4 <_dtoa_r+0x61c>)
 80138f4:	b957      	cbnz	r7, 801390c <_dtoa_r+0x384>
 80138f6:	4642      	mov	r2, r8
 80138f8:	464b      	mov	r3, r9
 80138fa:	4650      	mov	r0, sl
 80138fc:	4659      	mov	r1, fp
 80138fe:	f7ec ffbd 	bl	800087c <__aeabi_ddiv>
 8013902:	4682      	mov	sl, r0
 8013904:	468b      	mov	fp, r1
 8013906:	e028      	b.n	801395a <_dtoa_r+0x3d2>
 8013908:	2502      	movs	r5, #2
 801390a:	e7f2      	b.n	80138f2 <_dtoa_r+0x36a>
 801390c:	07f9      	lsls	r1, r7, #31
 801390e:	d508      	bpl.n	8013922 <_dtoa_r+0x39a>
 8013910:	4640      	mov	r0, r8
 8013912:	4649      	mov	r1, r9
 8013914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013918:	f7ec fe86 	bl	8000628 <__aeabi_dmul>
 801391c:	3501      	adds	r5, #1
 801391e:	4680      	mov	r8, r0
 8013920:	4689      	mov	r9, r1
 8013922:	107f      	asrs	r7, r7, #1
 8013924:	3608      	adds	r6, #8
 8013926:	e7e5      	b.n	80138f4 <_dtoa_r+0x36c>
 8013928:	f000 809b 	beq.w	8013a62 <_dtoa_r+0x4da>
 801392c:	9b00      	ldr	r3, [sp, #0]
 801392e:	4f9d      	ldr	r7, [pc, #628]	; (8013ba4 <_dtoa_r+0x61c>)
 8013930:	425e      	negs	r6, r3
 8013932:	4b9b      	ldr	r3, [pc, #620]	; (8013ba0 <_dtoa_r+0x618>)
 8013934:	f006 020f 	and.w	r2, r6, #15
 8013938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013940:	ec51 0b19 	vmov	r0, r1, d9
 8013944:	f7ec fe70 	bl	8000628 <__aeabi_dmul>
 8013948:	1136      	asrs	r6, r6, #4
 801394a:	4682      	mov	sl, r0
 801394c:	468b      	mov	fp, r1
 801394e:	2300      	movs	r3, #0
 8013950:	2502      	movs	r5, #2
 8013952:	2e00      	cmp	r6, #0
 8013954:	d17a      	bne.n	8013a4c <_dtoa_r+0x4c4>
 8013956:	2b00      	cmp	r3, #0
 8013958:	d1d3      	bne.n	8013902 <_dtoa_r+0x37a>
 801395a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801395c:	2b00      	cmp	r3, #0
 801395e:	f000 8082 	beq.w	8013a66 <_dtoa_r+0x4de>
 8013962:	4b91      	ldr	r3, [pc, #580]	; (8013ba8 <_dtoa_r+0x620>)
 8013964:	2200      	movs	r2, #0
 8013966:	4650      	mov	r0, sl
 8013968:	4659      	mov	r1, fp
 801396a:	f7ed f8cf 	bl	8000b0c <__aeabi_dcmplt>
 801396e:	2800      	cmp	r0, #0
 8013970:	d079      	beq.n	8013a66 <_dtoa_r+0x4de>
 8013972:	9b03      	ldr	r3, [sp, #12]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d076      	beq.n	8013a66 <_dtoa_r+0x4de>
 8013978:	9b02      	ldr	r3, [sp, #8]
 801397a:	2b00      	cmp	r3, #0
 801397c:	dd36      	ble.n	80139ec <_dtoa_r+0x464>
 801397e:	9b00      	ldr	r3, [sp, #0]
 8013980:	4650      	mov	r0, sl
 8013982:	4659      	mov	r1, fp
 8013984:	1e5f      	subs	r7, r3, #1
 8013986:	2200      	movs	r2, #0
 8013988:	4b88      	ldr	r3, [pc, #544]	; (8013bac <_dtoa_r+0x624>)
 801398a:	f7ec fe4d 	bl	8000628 <__aeabi_dmul>
 801398e:	9e02      	ldr	r6, [sp, #8]
 8013990:	4682      	mov	sl, r0
 8013992:	468b      	mov	fp, r1
 8013994:	3501      	adds	r5, #1
 8013996:	4628      	mov	r0, r5
 8013998:	f7ec fddc 	bl	8000554 <__aeabi_i2d>
 801399c:	4652      	mov	r2, sl
 801399e:	465b      	mov	r3, fp
 80139a0:	f7ec fe42 	bl	8000628 <__aeabi_dmul>
 80139a4:	4b82      	ldr	r3, [pc, #520]	; (8013bb0 <_dtoa_r+0x628>)
 80139a6:	2200      	movs	r2, #0
 80139a8:	f7ec fc88 	bl	80002bc <__adddf3>
 80139ac:	46d0      	mov	r8, sl
 80139ae:	46d9      	mov	r9, fp
 80139b0:	4682      	mov	sl, r0
 80139b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80139b6:	2e00      	cmp	r6, #0
 80139b8:	d158      	bne.n	8013a6c <_dtoa_r+0x4e4>
 80139ba:	4b7e      	ldr	r3, [pc, #504]	; (8013bb4 <_dtoa_r+0x62c>)
 80139bc:	2200      	movs	r2, #0
 80139be:	4640      	mov	r0, r8
 80139c0:	4649      	mov	r1, r9
 80139c2:	f7ec fc79 	bl	80002b8 <__aeabi_dsub>
 80139c6:	4652      	mov	r2, sl
 80139c8:	465b      	mov	r3, fp
 80139ca:	4680      	mov	r8, r0
 80139cc:	4689      	mov	r9, r1
 80139ce:	f7ed f8bb 	bl	8000b48 <__aeabi_dcmpgt>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	f040 8295 	bne.w	8013f02 <_dtoa_r+0x97a>
 80139d8:	4652      	mov	r2, sl
 80139da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80139de:	4640      	mov	r0, r8
 80139e0:	4649      	mov	r1, r9
 80139e2:	f7ed f893 	bl	8000b0c <__aeabi_dcmplt>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	f040 8289 	bne.w	8013efe <_dtoa_r+0x976>
 80139ec:	ec5b ab19 	vmov	sl, fp, d9
 80139f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f2c0 8148 	blt.w	8013c88 <_dtoa_r+0x700>
 80139f8:	9a00      	ldr	r2, [sp, #0]
 80139fa:	2a0e      	cmp	r2, #14
 80139fc:	f300 8144 	bgt.w	8013c88 <_dtoa_r+0x700>
 8013a00:	4b67      	ldr	r3, [pc, #412]	; (8013ba0 <_dtoa_r+0x618>)
 8013a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	f280 80d5 	bge.w	8013bbc <_dtoa_r+0x634>
 8013a12:	9b03      	ldr	r3, [sp, #12]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	f300 80d1 	bgt.w	8013bbc <_dtoa_r+0x634>
 8013a1a:	f040 826f 	bne.w	8013efc <_dtoa_r+0x974>
 8013a1e:	4b65      	ldr	r3, [pc, #404]	; (8013bb4 <_dtoa_r+0x62c>)
 8013a20:	2200      	movs	r2, #0
 8013a22:	4640      	mov	r0, r8
 8013a24:	4649      	mov	r1, r9
 8013a26:	f7ec fdff 	bl	8000628 <__aeabi_dmul>
 8013a2a:	4652      	mov	r2, sl
 8013a2c:	465b      	mov	r3, fp
 8013a2e:	f7ed f881 	bl	8000b34 <__aeabi_dcmpge>
 8013a32:	9e03      	ldr	r6, [sp, #12]
 8013a34:	4637      	mov	r7, r6
 8013a36:	2800      	cmp	r0, #0
 8013a38:	f040 8245 	bne.w	8013ec6 <_dtoa_r+0x93e>
 8013a3c:	9d01      	ldr	r5, [sp, #4]
 8013a3e:	2331      	movs	r3, #49	; 0x31
 8013a40:	f805 3b01 	strb.w	r3, [r5], #1
 8013a44:	9b00      	ldr	r3, [sp, #0]
 8013a46:	3301      	adds	r3, #1
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	e240      	b.n	8013ece <_dtoa_r+0x946>
 8013a4c:	07f2      	lsls	r2, r6, #31
 8013a4e:	d505      	bpl.n	8013a5c <_dtoa_r+0x4d4>
 8013a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a54:	f7ec fde8 	bl	8000628 <__aeabi_dmul>
 8013a58:	3501      	adds	r5, #1
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	1076      	asrs	r6, r6, #1
 8013a5e:	3708      	adds	r7, #8
 8013a60:	e777      	b.n	8013952 <_dtoa_r+0x3ca>
 8013a62:	2502      	movs	r5, #2
 8013a64:	e779      	b.n	801395a <_dtoa_r+0x3d2>
 8013a66:	9f00      	ldr	r7, [sp, #0]
 8013a68:	9e03      	ldr	r6, [sp, #12]
 8013a6a:	e794      	b.n	8013996 <_dtoa_r+0x40e>
 8013a6c:	9901      	ldr	r1, [sp, #4]
 8013a6e:	4b4c      	ldr	r3, [pc, #304]	; (8013ba0 <_dtoa_r+0x618>)
 8013a70:	4431      	add	r1, r6
 8013a72:	910d      	str	r1, [sp, #52]	; 0x34
 8013a74:	9908      	ldr	r1, [sp, #32]
 8013a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013a7e:	2900      	cmp	r1, #0
 8013a80:	d043      	beq.n	8013b0a <_dtoa_r+0x582>
 8013a82:	494d      	ldr	r1, [pc, #308]	; (8013bb8 <_dtoa_r+0x630>)
 8013a84:	2000      	movs	r0, #0
 8013a86:	f7ec fef9 	bl	800087c <__aeabi_ddiv>
 8013a8a:	4652      	mov	r2, sl
 8013a8c:	465b      	mov	r3, fp
 8013a8e:	f7ec fc13 	bl	80002b8 <__aeabi_dsub>
 8013a92:	9d01      	ldr	r5, [sp, #4]
 8013a94:	4682      	mov	sl, r0
 8013a96:	468b      	mov	fp, r1
 8013a98:	4649      	mov	r1, r9
 8013a9a:	4640      	mov	r0, r8
 8013a9c:	f7ed f874 	bl	8000b88 <__aeabi_d2iz>
 8013aa0:	4606      	mov	r6, r0
 8013aa2:	f7ec fd57 	bl	8000554 <__aeabi_i2d>
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	4640      	mov	r0, r8
 8013aac:	4649      	mov	r1, r9
 8013aae:	f7ec fc03 	bl	80002b8 <__aeabi_dsub>
 8013ab2:	3630      	adds	r6, #48	; 0x30
 8013ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8013ab8:	4652      	mov	r2, sl
 8013aba:	465b      	mov	r3, fp
 8013abc:	4680      	mov	r8, r0
 8013abe:	4689      	mov	r9, r1
 8013ac0:	f7ed f824 	bl	8000b0c <__aeabi_dcmplt>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	d163      	bne.n	8013b90 <_dtoa_r+0x608>
 8013ac8:	4642      	mov	r2, r8
 8013aca:	464b      	mov	r3, r9
 8013acc:	4936      	ldr	r1, [pc, #216]	; (8013ba8 <_dtoa_r+0x620>)
 8013ace:	2000      	movs	r0, #0
 8013ad0:	f7ec fbf2 	bl	80002b8 <__aeabi_dsub>
 8013ad4:	4652      	mov	r2, sl
 8013ad6:	465b      	mov	r3, fp
 8013ad8:	f7ed f818 	bl	8000b0c <__aeabi_dcmplt>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	f040 80b5 	bne.w	8013c4c <_dtoa_r+0x6c4>
 8013ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ae4:	429d      	cmp	r5, r3
 8013ae6:	d081      	beq.n	80139ec <_dtoa_r+0x464>
 8013ae8:	4b30      	ldr	r3, [pc, #192]	; (8013bac <_dtoa_r+0x624>)
 8013aea:	2200      	movs	r2, #0
 8013aec:	4650      	mov	r0, sl
 8013aee:	4659      	mov	r1, fp
 8013af0:	f7ec fd9a 	bl	8000628 <__aeabi_dmul>
 8013af4:	4b2d      	ldr	r3, [pc, #180]	; (8013bac <_dtoa_r+0x624>)
 8013af6:	4682      	mov	sl, r0
 8013af8:	468b      	mov	fp, r1
 8013afa:	4640      	mov	r0, r8
 8013afc:	4649      	mov	r1, r9
 8013afe:	2200      	movs	r2, #0
 8013b00:	f7ec fd92 	bl	8000628 <__aeabi_dmul>
 8013b04:	4680      	mov	r8, r0
 8013b06:	4689      	mov	r9, r1
 8013b08:	e7c6      	b.n	8013a98 <_dtoa_r+0x510>
 8013b0a:	4650      	mov	r0, sl
 8013b0c:	4659      	mov	r1, fp
 8013b0e:	f7ec fd8b 	bl	8000628 <__aeabi_dmul>
 8013b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b14:	9d01      	ldr	r5, [sp, #4]
 8013b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b18:	4682      	mov	sl, r0
 8013b1a:	468b      	mov	fp, r1
 8013b1c:	4649      	mov	r1, r9
 8013b1e:	4640      	mov	r0, r8
 8013b20:	f7ed f832 	bl	8000b88 <__aeabi_d2iz>
 8013b24:	4606      	mov	r6, r0
 8013b26:	f7ec fd15 	bl	8000554 <__aeabi_i2d>
 8013b2a:	3630      	adds	r6, #48	; 0x30
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4640      	mov	r0, r8
 8013b32:	4649      	mov	r1, r9
 8013b34:	f7ec fbc0 	bl	80002b8 <__aeabi_dsub>
 8013b38:	f805 6b01 	strb.w	r6, [r5], #1
 8013b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b3e:	429d      	cmp	r5, r3
 8013b40:	4680      	mov	r8, r0
 8013b42:	4689      	mov	r9, r1
 8013b44:	f04f 0200 	mov.w	r2, #0
 8013b48:	d124      	bne.n	8013b94 <_dtoa_r+0x60c>
 8013b4a:	4b1b      	ldr	r3, [pc, #108]	; (8013bb8 <_dtoa_r+0x630>)
 8013b4c:	4650      	mov	r0, sl
 8013b4e:	4659      	mov	r1, fp
 8013b50:	f7ec fbb4 	bl	80002bc <__adddf3>
 8013b54:	4602      	mov	r2, r0
 8013b56:	460b      	mov	r3, r1
 8013b58:	4640      	mov	r0, r8
 8013b5a:	4649      	mov	r1, r9
 8013b5c:	f7ec fff4 	bl	8000b48 <__aeabi_dcmpgt>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	d173      	bne.n	8013c4c <_dtoa_r+0x6c4>
 8013b64:	4652      	mov	r2, sl
 8013b66:	465b      	mov	r3, fp
 8013b68:	4913      	ldr	r1, [pc, #76]	; (8013bb8 <_dtoa_r+0x630>)
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	f7ec fba4 	bl	80002b8 <__aeabi_dsub>
 8013b70:	4602      	mov	r2, r0
 8013b72:	460b      	mov	r3, r1
 8013b74:	4640      	mov	r0, r8
 8013b76:	4649      	mov	r1, r9
 8013b78:	f7ec ffc8 	bl	8000b0c <__aeabi_dcmplt>
 8013b7c:	2800      	cmp	r0, #0
 8013b7e:	f43f af35 	beq.w	80139ec <_dtoa_r+0x464>
 8013b82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013b84:	1e6b      	subs	r3, r5, #1
 8013b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013b8c:	2b30      	cmp	r3, #48	; 0x30
 8013b8e:	d0f8      	beq.n	8013b82 <_dtoa_r+0x5fa>
 8013b90:	9700      	str	r7, [sp, #0]
 8013b92:	e049      	b.n	8013c28 <_dtoa_r+0x6a0>
 8013b94:	4b05      	ldr	r3, [pc, #20]	; (8013bac <_dtoa_r+0x624>)
 8013b96:	f7ec fd47 	bl	8000628 <__aeabi_dmul>
 8013b9a:	4680      	mov	r8, r0
 8013b9c:	4689      	mov	r9, r1
 8013b9e:	e7bd      	b.n	8013b1c <_dtoa_r+0x594>
 8013ba0:	08016458 	.word	0x08016458
 8013ba4:	08016430 	.word	0x08016430
 8013ba8:	3ff00000 	.word	0x3ff00000
 8013bac:	40240000 	.word	0x40240000
 8013bb0:	401c0000 	.word	0x401c0000
 8013bb4:	40140000 	.word	0x40140000
 8013bb8:	3fe00000 	.word	0x3fe00000
 8013bbc:	9d01      	ldr	r5, [sp, #4]
 8013bbe:	4656      	mov	r6, sl
 8013bc0:	465f      	mov	r7, fp
 8013bc2:	4642      	mov	r2, r8
 8013bc4:	464b      	mov	r3, r9
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	4639      	mov	r1, r7
 8013bca:	f7ec fe57 	bl	800087c <__aeabi_ddiv>
 8013bce:	f7ec ffdb 	bl	8000b88 <__aeabi_d2iz>
 8013bd2:	4682      	mov	sl, r0
 8013bd4:	f7ec fcbe 	bl	8000554 <__aeabi_i2d>
 8013bd8:	4642      	mov	r2, r8
 8013bda:	464b      	mov	r3, r9
 8013bdc:	f7ec fd24 	bl	8000628 <__aeabi_dmul>
 8013be0:	4602      	mov	r2, r0
 8013be2:	460b      	mov	r3, r1
 8013be4:	4630      	mov	r0, r6
 8013be6:	4639      	mov	r1, r7
 8013be8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013bec:	f7ec fb64 	bl	80002b8 <__aeabi_dsub>
 8013bf0:	f805 6b01 	strb.w	r6, [r5], #1
 8013bf4:	9e01      	ldr	r6, [sp, #4]
 8013bf6:	9f03      	ldr	r7, [sp, #12]
 8013bf8:	1bae      	subs	r6, r5, r6
 8013bfa:	42b7      	cmp	r7, r6
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	460b      	mov	r3, r1
 8013c00:	d135      	bne.n	8013c6e <_dtoa_r+0x6e6>
 8013c02:	f7ec fb5b 	bl	80002bc <__adddf3>
 8013c06:	4642      	mov	r2, r8
 8013c08:	464b      	mov	r3, r9
 8013c0a:	4606      	mov	r6, r0
 8013c0c:	460f      	mov	r7, r1
 8013c0e:	f7ec ff9b 	bl	8000b48 <__aeabi_dcmpgt>
 8013c12:	b9d0      	cbnz	r0, 8013c4a <_dtoa_r+0x6c2>
 8013c14:	4642      	mov	r2, r8
 8013c16:	464b      	mov	r3, r9
 8013c18:	4630      	mov	r0, r6
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	f7ec ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 8013c20:	b110      	cbz	r0, 8013c28 <_dtoa_r+0x6a0>
 8013c22:	f01a 0f01 	tst.w	sl, #1
 8013c26:	d110      	bne.n	8013c4a <_dtoa_r+0x6c2>
 8013c28:	4620      	mov	r0, r4
 8013c2a:	ee18 1a10 	vmov	r1, s16
 8013c2e:	f000 ff47 	bl	8014ac0 <_Bfree>
 8013c32:	2300      	movs	r3, #0
 8013c34:	9800      	ldr	r0, [sp, #0]
 8013c36:	702b      	strb	r3, [r5, #0]
 8013c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c3a:	3001      	adds	r0, #1
 8013c3c:	6018      	str	r0, [r3, #0]
 8013c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f43f acf1 	beq.w	8013628 <_dtoa_r+0xa0>
 8013c46:	601d      	str	r5, [r3, #0]
 8013c48:	e4ee      	b.n	8013628 <_dtoa_r+0xa0>
 8013c4a:	9f00      	ldr	r7, [sp, #0]
 8013c4c:	462b      	mov	r3, r5
 8013c4e:	461d      	mov	r5, r3
 8013c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c54:	2a39      	cmp	r2, #57	; 0x39
 8013c56:	d106      	bne.n	8013c66 <_dtoa_r+0x6de>
 8013c58:	9a01      	ldr	r2, [sp, #4]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d1f7      	bne.n	8013c4e <_dtoa_r+0x6c6>
 8013c5e:	9901      	ldr	r1, [sp, #4]
 8013c60:	2230      	movs	r2, #48	; 0x30
 8013c62:	3701      	adds	r7, #1
 8013c64:	700a      	strb	r2, [r1, #0]
 8013c66:	781a      	ldrb	r2, [r3, #0]
 8013c68:	3201      	adds	r2, #1
 8013c6a:	701a      	strb	r2, [r3, #0]
 8013c6c:	e790      	b.n	8013b90 <_dtoa_r+0x608>
 8013c6e:	4ba6      	ldr	r3, [pc, #664]	; (8013f08 <_dtoa_r+0x980>)
 8013c70:	2200      	movs	r2, #0
 8013c72:	f7ec fcd9 	bl	8000628 <__aeabi_dmul>
 8013c76:	2200      	movs	r2, #0
 8013c78:	2300      	movs	r3, #0
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	460f      	mov	r7, r1
 8013c7e:	f7ec ff3b 	bl	8000af8 <__aeabi_dcmpeq>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	d09d      	beq.n	8013bc2 <_dtoa_r+0x63a>
 8013c86:	e7cf      	b.n	8013c28 <_dtoa_r+0x6a0>
 8013c88:	9a08      	ldr	r2, [sp, #32]
 8013c8a:	2a00      	cmp	r2, #0
 8013c8c:	f000 80d7 	beq.w	8013e3e <_dtoa_r+0x8b6>
 8013c90:	9a06      	ldr	r2, [sp, #24]
 8013c92:	2a01      	cmp	r2, #1
 8013c94:	f300 80ba 	bgt.w	8013e0c <_dtoa_r+0x884>
 8013c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c9a:	2a00      	cmp	r2, #0
 8013c9c:	f000 80b2 	beq.w	8013e04 <_dtoa_r+0x87c>
 8013ca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ca4:	9e07      	ldr	r6, [sp, #28]
 8013ca6:	9d04      	ldr	r5, [sp, #16]
 8013ca8:	9a04      	ldr	r2, [sp, #16]
 8013caa:	441a      	add	r2, r3
 8013cac:	9204      	str	r2, [sp, #16]
 8013cae:	9a05      	ldr	r2, [sp, #20]
 8013cb0:	2101      	movs	r1, #1
 8013cb2:	441a      	add	r2, r3
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	9205      	str	r2, [sp, #20]
 8013cb8:	f001 f804 	bl	8014cc4 <__i2b>
 8013cbc:	4607      	mov	r7, r0
 8013cbe:	2d00      	cmp	r5, #0
 8013cc0:	dd0c      	ble.n	8013cdc <_dtoa_r+0x754>
 8013cc2:	9b05      	ldr	r3, [sp, #20]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	dd09      	ble.n	8013cdc <_dtoa_r+0x754>
 8013cc8:	42ab      	cmp	r3, r5
 8013cca:	9a04      	ldr	r2, [sp, #16]
 8013ccc:	bfa8      	it	ge
 8013cce:	462b      	movge	r3, r5
 8013cd0:	1ad2      	subs	r2, r2, r3
 8013cd2:	9204      	str	r2, [sp, #16]
 8013cd4:	9a05      	ldr	r2, [sp, #20]
 8013cd6:	1aed      	subs	r5, r5, r3
 8013cd8:	1ad3      	subs	r3, r2, r3
 8013cda:	9305      	str	r3, [sp, #20]
 8013cdc:	9b07      	ldr	r3, [sp, #28]
 8013cde:	b31b      	cbz	r3, 8013d28 <_dtoa_r+0x7a0>
 8013ce0:	9b08      	ldr	r3, [sp, #32]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	f000 80af 	beq.w	8013e46 <_dtoa_r+0x8be>
 8013ce8:	2e00      	cmp	r6, #0
 8013cea:	dd13      	ble.n	8013d14 <_dtoa_r+0x78c>
 8013cec:	4639      	mov	r1, r7
 8013cee:	4632      	mov	r2, r6
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	f001 f8a7 	bl	8014e44 <__pow5mult>
 8013cf6:	ee18 2a10 	vmov	r2, s16
 8013cfa:	4601      	mov	r1, r0
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f000 fff6 	bl	8014cf0 <__multiply>
 8013d04:	ee18 1a10 	vmov	r1, s16
 8013d08:	4680      	mov	r8, r0
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f000 fed8 	bl	8014ac0 <_Bfree>
 8013d10:	ee08 8a10 	vmov	s16, r8
 8013d14:	9b07      	ldr	r3, [sp, #28]
 8013d16:	1b9a      	subs	r2, r3, r6
 8013d18:	d006      	beq.n	8013d28 <_dtoa_r+0x7a0>
 8013d1a:	ee18 1a10 	vmov	r1, s16
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f001 f890 	bl	8014e44 <__pow5mult>
 8013d24:	ee08 0a10 	vmov	s16, r0
 8013d28:	2101      	movs	r1, #1
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f000 ffca 	bl	8014cc4 <__i2b>
 8013d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	4606      	mov	r6, r0
 8013d36:	f340 8088 	ble.w	8013e4a <_dtoa_r+0x8c2>
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	4601      	mov	r1, r0
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f001 f880 	bl	8014e44 <__pow5mult>
 8013d44:	9b06      	ldr	r3, [sp, #24]
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	4606      	mov	r6, r0
 8013d4a:	f340 8081 	ble.w	8013e50 <_dtoa_r+0x8c8>
 8013d4e:	f04f 0800 	mov.w	r8, #0
 8013d52:	6933      	ldr	r3, [r6, #16]
 8013d54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013d58:	6918      	ldr	r0, [r3, #16]
 8013d5a:	f000 ff63 	bl	8014c24 <__hi0bits>
 8013d5e:	f1c0 0020 	rsb	r0, r0, #32
 8013d62:	9b05      	ldr	r3, [sp, #20]
 8013d64:	4418      	add	r0, r3
 8013d66:	f010 001f 	ands.w	r0, r0, #31
 8013d6a:	f000 8092 	beq.w	8013e92 <_dtoa_r+0x90a>
 8013d6e:	f1c0 0320 	rsb	r3, r0, #32
 8013d72:	2b04      	cmp	r3, #4
 8013d74:	f340 808a 	ble.w	8013e8c <_dtoa_r+0x904>
 8013d78:	f1c0 001c 	rsb	r0, r0, #28
 8013d7c:	9b04      	ldr	r3, [sp, #16]
 8013d7e:	4403      	add	r3, r0
 8013d80:	9304      	str	r3, [sp, #16]
 8013d82:	9b05      	ldr	r3, [sp, #20]
 8013d84:	4403      	add	r3, r0
 8013d86:	4405      	add	r5, r0
 8013d88:	9305      	str	r3, [sp, #20]
 8013d8a:	9b04      	ldr	r3, [sp, #16]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	dd07      	ble.n	8013da0 <_dtoa_r+0x818>
 8013d90:	ee18 1a10 	vmov	r1, s16
 8013d94:	461a      	mov	r2, r3
 8013d96:	4620      	mov	r0, r4
 8013d98:	f001 f8ae 	bl	8014ef8 <__lshift>
 8013d9c:	ee08 0a10 	vmov	s16, r0
 8013da0:	9b05      	ldr	r3, [sp, #20]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	dd05      	ble.n	8013db2 <_dtoa_r+0x82a>
 8013da6:	4631      	mov	r1, r6
 8013da8:	461a      	mov	r2, r3
 8013daa:	4620      	mov	r0, r4
 8013dac:	f001 f8a4 	bl	8014ef8 <__lshift>
 8013db0:	4606      	mov	r6, r0
 8013db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d06e      	beq.n	8013e96 <_dtoa_r+0x90e>
 8013db8:	ee18 0a10 	vmov	r0, s16
 8013dbc:	4631      	mov	r1, r6
 8013dbe:	f001 f90b 	bl	8014fd8 <__mcmp>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	da67      	bge.n	8013e96 <_dtoa_r+0x90e>
 8013dc6:	9b00      	ldr	r3, [sp, #0]
 8013dc8:	3b01      	subs	r3, #1
 8013dca:	ee18 1a10 	vmov	r1, s16
 8013dce:	9300      	str	r3, [sp, #0]
 8013dd0:	220a      	movs	r2, #10
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f000 fe95 	bl	8014b04 <__multadd>
 8013dda:	9b08      	ldr	r3, [sp, #32]
 8013ddc:	ee08 0a10 	vmov	s16, r0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f000 81b1 	beq.w	8014148 <_dtoa_r+0xbc0>
 8013de6:	2300      	movs	r3, #0
 8013de8:	4639      	mov	r1, r7
 8013dea:	220a      	movs	r2, #10
 8013dec:	4620      	mov	r0, r4
 8013dee:	f000 fe89 	bl	8014b04 <__multadd>
 8013df2:	9b02      	ldr	r3, [sp, #8]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	4607      	mov	r7, r0
 8013df8:	f300 808e 	bgt.w	8013f18 <_dtoa_r+0x990>
 8013dfc:	9b06      	ldr	r3, [sp, #24]
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	dc51      	bgt.n	8013ea6 <_dtoa_r+0x91e>
 8013e02:	e089      	b.n	8013f18 <_dtoa_r+0x990>
 8013e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013e0a:	e74b      	b.n	8013ca4 <_dtoa_r+0x71c>
 8013e0c:	9b03      	ldr	r3, [sp, #12]
 8013e0e:	1e5e      	subs	r6, r3, #1
 8013e10:	9b07      	ldr	r3, [sp, #28]
 8013e12:	42b3      	cmp	r3, r6
 8013e14:	bfbf      	itttt	lt
 8013e16:	9b07      	ldrlt	r3, [sp, #28]
 8013e18:	9607      	strlt	r6, [sp, #28]
 8013e1a:	1af2      	sublt	r2, r6, r3
 8013e1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013e1e:	bfb6      	itet	lt
 8013e20:	189b      	addlt	r3, r3, r2
 8013e22:	1b9e      	subge	r6, r3, r6
 8013e24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013e26:	9b03      	ldr	r3, [sp, #12]
 8013e28:	bfb8      	it	lt
 8013e2a:	2600      	movlt	r6, #0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	bfb7      	itett	lt
 8013e30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013e34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013e38:	1a9d      	sublt	r5, r3, r2
 8013e3a:	2300      	movlt	r3, #0
 8013e3c:	e734      	b.n	8013ca8 <_dtoa_r+0x720>
 8013e3e:	9e07      	ldr	r6, [sp, #28]
 8013e40:	9d04      	ldr	r5, [sp, #16]
 8013e42:	9f08      	ldr	r7, [sp, #32]
 8013e44:	e73b      	b.n	8013cbe <_dtoa_r+0x736>
 8013e46:	9a07      	ldr	r2, [sp, #28]
 8013e48:	e767      	b.n	8013d1a <_dtoa_r+0x792>
 8013e4a:	9b06      	ldr	r3, [sp, #24]
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	dc18      	bgt.n	8013e82 <_dtoa_r+0x8fa>
 8013e50:	f1ba 0f00 	cmp.w	sl, #0
 8013e54:	d115      	bne.n	8013e82 <_dtoa_r+0x8fa>
 8013e56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e5a:	b993      	cbnz	r3, 8013e82 <_dtoa_r+0x8fa>
 8013e5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e60:	0d1b      	lsrs	r3, r3, #20
 8013e62:	051b      	lsls	r3, r3, #20
 8013e64:	b183      	cbz	r3, 8013e88 <_dtoa_r+0x900>
 8013e66:	9b04      	ldr	r3, [sp, #16]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	9304      	str	r3, [sp, #16]
 8013e6c:	9b05      	ldr	r3, [sp, #20]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	9305      	str	r3, [sp, #20]
 8013e72:	f04f 0801 	mov.w	r8, #1
 8013e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f47f af6a 	bne.w	8013d52 <_dtoa_r+0x7ca>
 8013e7e:	2001      	movs	r0, #1
 8013e80:	e76f      	b.n	8013d62 <_dtoa_r+0x7da>
 8013e82:	f04f 0800 	mov.w	r8, #0
 8013e86:	e7f6      	b.n	8013e76 <_dtoa_r+0x8ee>
 8013e88:	4698      	mov	r8, r3
 8013e8a:	e7f4      	b.n	8013e76 <_dtoa_r+0x8ee>
 8013e8c:	f43f af7d 	beq.w	8013d8a <_dtoa_r+0x802>
 8013e90:	4618      	mov	r0, r3
 8013e92:	301c      	adds	r0, #28
 8013e94:	e772      	b.n	8013d7c <_dtoa_r+0x7f4>
 8013e96:	9b03      	ldr	r3, [sp, #12]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	dc37      	bgt.n	8013f0c <_dtoa_r+0x984>
 8013e9c:	9b06      	ldr	r3, [sp, #24]
 8013e9e:	2b02      	cmp	r3, #2
 8013ea0:	dd34      	ble.n	8013f0c <_dtoa_r+0x984>
 8013ea2:	9b03      	ldr	r3, [sp, #12]
 8013ea4:	9302      	str	r3, [sp, #8]
 8013ea6:	9b02      	ldr	r3, [sp, #8]
 8013ea8:	b96b      	cbnz	r3, 8013ec6 <_dtoa_r+0x93e>
 8013eaa:	4631      	mov	r1, r6
 8013eac:	2205      	movs	r2, #5
 8013eae:	4620      	mov	r0, r4
 8013eb0:	f000 fe28 	bl	8014b04 <__multadd>
 8013eb4:	4601      	mov	r1, r0
 8013eb6:	4606      	mov	r6, r0
 8013eb8:	ee18 0a10 	vmov	r0, s16
 8013ebc:	f001 f88c 	bl	8014fd8 <__mcmp>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	f73f adbb 	bgt.w	8013a3c <_dtoa_r+0x4b4>
 8013ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ec8:	9d01      	ldr	r5, [sp, #4]
 8013eca:	43db      	mvns	r3, r3
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	f04f 0800 	mov.w	r8, #0
 8013ed2:	4631      	mov	r1, r6
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f000 fdf3 	bl	8014ac0 <_Bfree>
 8013eda:	2f00      	cmp	r7, #0
 8013edc:	f43f aea4 	beq.w	8013c28 <_dtoa_r+0x6a0>
 8013ee0:	f1b8 0f00 	cmp.w	r8, #0
 8013ee4:	d005      	beq.n	8013ef2 <_dtoa_r+0x96a>
 8013ee6:	45b8      	cmp	r8, r7
 8013ee8:	d003      	beq.n	8013ef2 <_dtoa_r+0x96a>
 8013eea:	4641      	mov	r1, r8
 8013eec:	4620      	mov	r0, r4
 8013eee:	f000 fde7 	bl	8014ac0 <_Bfree>
 8013ef2:	4639      	mov	r1, r7
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	f000 fde3 	bl	8014ac0 <_Bfree>
 8013efa:	e695      	b.n	8013c28 <_dtoa_r+0x6a0>
 8013efc:	2600      	movs	r6, #0
 8013efe:	4637      	mov	r7, r6
 8013f00:	e7e1      	b.n	8013ec6 <_dtoa_r+0x93e>
 8013f02:	9700      	str	r7, [sp, #0]
 8013f04:	4637      	mov	r7, r6
 8013f06:	e599      	b.n	8013a3c <_dtoa_r+0x4b4>
 8013f08:	40240000 	.word	0x40240000
 8013f0c:	9b08      	ldr	r3, [sp, #32]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f000 80ca 	beq.w	80140a8 <_dtoa_r+0xb20>
 8013f14:	9b03      	ldr	r3, [sp, #12]
 8013f16:	9302      	str	r3, [sp, #8]
 8013f18:	2d00      	cmp	r5, #0
 8013f1a:	dd05      	ble.n	8013f28 <_dtoa_r+0x9a0>
 8013f1c:	4639      	mov	r1, r7
 8013f1e:	462a      	mov	r2, r5
 8013f20:	4620      	mov	r0, r4
 8013f22:	f000 ffe9 	bl	8014ef8 <__lshift>
 8013f26:	4607      	mov	r7, r0
 8013f28:	f1b8 0f00 	cmp.w	r8, #0
 8013f2c:	d05b      	beq.n	8013fe6 <_dtoa_r+0xa5e>
 8013f2e:	6879      	ldr	r1, [r7, #4]
 8013f30:	4620      	mov	r0, r4
 8013f32:	f000 fd85 	bl	8014a40 <_Balloc>
 8013f36:	4605      	mov	r5, r0
 8013f38:	b928      	cbnz	r0, 8013f46 <_dtoa_r+0x9be>
 8013f3a:	4b87      	ldr	r3, [pc, #540]	; (8014158 <_dtoa_r+0xbd0>)
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013f42:	f7ff bb3b 	b.w	80135bc <_dtoa_r+0x34>
 8013f46:	693a      	ldr	r2, [r7, #16]
 8013f48:	3202      	adds	r2, #2
 8013f4a:	0092      	lsls	r2, r2, #2
 8013f4c:	f107 010c 	add.w	r1, r7, #12
 8013f50:	300c      	adds	r0, #12
 8013f52:	f7fd fb7e 	bl	8011652 <memcpy>
 8013f56:	2201      	movs	r2, #1
 8013f58:	4629      	mov	r1, r5
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f000 ffcc 	bl	8014ef8 <__lshift>
 8013f60:	9b01      	ldr	r3, [sp, #4]
 8013f62:	f103 0901 	add.w	r9, r3, #1
 8013f66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	9305      	str	r3, [sp, #20]
 8013f6e:	f00a 0301 	and.w	r3, sl, #1
 8013f72:	46b8      	mov	r8, r7
 8013f74:	9304      	str	r3, [sp, #16]
 8013f76:	4607      	mov	r7, r0
 8013f78:	4631      	mov	r1, r6
 8013f7a:	ee18 0a10 	vmov	r0, s16
 8013f7e:	f7ff fa75 	bl	801346c <quorem>
 8013f82:	4641      	mov	r1, r8
 8013f84:	9002      	str	r0, [sp, #8]
 8013f86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013f8a:	ee18 0a10 	vmov	r0, s16
 8013f8e:	f001 f823 	bl	8014fd8 <__mcmp>
 8013f92:	463a      	mov	r2, r7
 8013f94:	9003      	str	r0, [sp, #12]
 8013f96:	4631      	mov	r1, r6
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f001 f839 	bl	8015010 <__mdiff>
 8013f9e:	68c2      	ldr	r2, [r0, #12]
 8013fa0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013fa4:	4605      	mov	r5, r0
 8013fa6:	bb02      	cbnz	r2, 8013fea <_dtoa_r+0xa62>
 8013fa8:	4601      	mov	r1, r0
 8013faa:	ee18 0a10 	vmov	r0, s16
 8013fae:	f001 f813 	bl	8014fd8 <__mcmp>
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	4629      	mov	r1, r5
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	9207      	str	r2, [sp, #28]
 8013fba:	f000 fd81 	bl	8014ac0 <_Bfree>
 8013fbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013fc2:	ea43 0102 	orr.w	r1, r3, r2
 8013fc6:	9b04      	ldr	r3, [sp, #16]
 8013fc8:	430b      	orrs	r3, r1
 8013fca:	464d      	mov	r5, r9
 8013fcc:	d10f      	bne.n	8013fee <_dtoa_r+0xa66>
 8013fce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013fd2:	d02a      	beq.n	801402a <_dtoa_r+0xaa2>
 8013fd4:	9b03      	ldr	r3, [sp, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	dd02      	ble.n	8013fe0 <_dtoa_r+0xa58>
 8013fda:	9b02      	ldr	r3, [sp, #8]
 8013fdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013fe0:	f88b a000 	strb.w	sl, [fp]
 8013fe4:	e775      	b.n	8013ed2 <_dtoa_r+0x94a>
 8013fe6:	4638      	mov	r0, r7
 8013fe8:	e7ba      	b.n	8013f60 <_dtoa_r+0x9d8>
 8013fea:	2201      	movs	r2, #1
 8013fec:	e7e2      	b.n	8013fb4 <_dtoa_r+0xa2c>
 8013fee:	9b03      	ldr	r3, [sp, #12]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	db04      	blt.n	8013ffe <_dtoa_r+0xa76>
 8013ff4:	9906      	ldr	r1, [sp, #24]
 8013ff6:	430b      	orrs	r3, r1
 8013ff8:	9904      	ldr	r1, [sp, #16]
 8013ffa:	430b      	orrs	r3, r1
 8013ffc:	d122      	bne.n	8014044 <_dtoa_r+0xabc>
 8013ffe:	2a00      	cmp	r2, #0
 8014000:	ddee      	ble.n	8013fe0 <_dtoa_r+0xa58>
 8014002:	ee18 1a10 	vmov	r1, s16
 8014006:	2201      	movs	r2, #1
 8014008:	4620      	mov	r0, r4
 801400a:	f000 ff75 	bl	8014ef8 <__lshift>
 801400e:	4631      	mov	r1, r6
 8014010:	ee08 0a10 	vmov	s16, r0
 8014014:	f000 ffe0 	bl	8014fd8 <__mcmp>
 8014018:	2800      	cmp	r0, #0
 801401a:	dc03      	bgt.n	8014024 <_dtoa_r+0xa9c>
 801401c:	d1e0      	bne.n	8013fe0 <_dtoa_r+0xa58>
 801401e:	f01a 0f01 	tst.w	sl, #1
 8014022:	d0dd      	beq.n	8013fe0 <_dtoa_r+0xa58>
 8014024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014028:	d1d7      	bne.n	8013fda <_dtoa_r+0xa52>
 801402a:	2339      	movs	r3, #57	; 0x39
 801402c:	f88b 3000 	strb.w	r3, [fp]
 8014030:	462b      	mov	r3, r5
 8014032:	461d      	mov	r5, r3
 8014034:	3b01      	subs	r3, #1
 8014036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801403a:	2a39      	cmp	r2, #57	; 0x39
 801403c:	d071      	beq.n	8014122 <_dtoa_r+0xb9a>
 801403e:	3201      	adds	r2, #1
 8014040:	701a      	strb	r2, [r3, #0]
 8014042:	e746      	b.n	8013ed2 <_dtoa_r+0x94a>
 8014044:	2a00      	cmp	r2, #0
 8014046:	dd07      	ble.n	8014058 <_dtoa_r+0xad0>
 8014048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801404c:	d0ed      	beq.n	801402a <_dtoa_r+0xaa2>
 801404e:	f10a 0301 	add.w	r3, sl, #1
 8014052:	f88b 3000 	strb.w	r3, [fp]
 8014056:	e73c      	b.n	8013ed2 <_dtoa_r+0x94a>
 8014058:	9b05      	ldr	r3, [sp, #20]
 801405a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801405e:	4599      	cmp	r9, r3
 8014060:	d047      	beq.n	80140f2 <_dtoa_r+0xb6a>
 8014062:	ee18 1a10 	vmov	r1, s16
 8014066:	2300      	movs	r3, #0
 8014068:	220a      	movs	r2, #10
 801406a:	4620      	mov	r0, r4
 801406c:	f000 fd4a 	bl	8014b04 <__multadd>
 8014070:	45b8      	cmp	r8, r7
 8014072:	ee08 0a10 	vmov	s16, r0
 8014076:	f04f 0300 	mov.w	r3, #0
 801407a:	f04f 020a 	mov.w	r2, #10
 801407e:	4641      	mov	r1, r8
 8014080:	4620      	mov	r0, r4
 8014082:	d106      	bne.n	8014092 <_dtoa_r+0xb0a>
 8014084:	f000 fd3e 	bl	8014b04 <__multadd>
 8014088:	4680      	mov	r8, r0
 801408a:	4607      	mov	r7, r0
 801408c:	f109 0901 	add.w	r9, r9, #1
 8014090:	e772      	b.n	8013f78 <_dtoa_r+0x9f0>
 8014092:	f000 fd37 	bl	8014b04 <__multadd>
 8014096:	4639      	mov	r1, r7
 8014098:	4680      	mov	r8, r0
 801409a:	2300      	movs	r3, #0
 801409c:	220a      	movs	r2, #10
 801409e:	4620      	mov	r0, r4
 80140a0:	f000 fd30 	bl	8014b04 <__multadd>
 80140a4:	4607      	mov	r7, r0
 80140a6:	e7f1      	b.n	801408c <_dtoa_r+0xb04>
 80140a8:	9b03      	ldr	r3, [sp, #12]
 80140aa:	9302      	str	r3, [sp, #8]
 80140ac:	9d01      	ldr	r5, [sp, #4]
 80140ae:	ee18 0a10 	vmov	r0, s16
 80140b2:	4631      	mov	r1, r6
 80140b4:	f7ff f9da 	bl	801346c <quorem>
 80140b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80140bc:	9b01      	ldr	r3, [sp, #4]
 80140be:	f805 ab01 	strb.w	sl, [r5], #1
 80140c2:	1aea      	subs	r2, r5, r3
 80140c4:	9b02      	ldr	r3, [sp, #8]
 80140c6:	4293      	cmp	r3, r2
 80140c8:	dd09      	ble.n	80140de <_dtoa_r+0xb56>
 80140ca:	ee18 1a10 	vmov	r1, s16
 80140ce:	2300      	movs	r3, #0
 80140d0:	220a      	movs	r2, #10
 80140d2:	4620      	mov	r0, r4
 80140d4:	f000 fd16 	bl	8014b04 <__multadd>
 80140d8:	ee08 0a10 	vmov	s16, r0
 80140dc:	e7e7      	b.n	80140ae <_dtoa_r+0xb26>
 80140de:	9b02      	ldr	r3, [sp, #8]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	bfc8      	it	gt
 80140e4:	461d      	movgt	r5, r3
 80140e6:	9b01      	ldr	r3, [sp, #4]
 80140e8:	bfd8      	it	le
 80140ea:	2501      	movle	r5, #1
 80140ec:	441d      	add	r5, r3
 80140ee:	f04f 0800 	mov.w	r8, #0
 80140f2:	ee18 1a10 	vmov	r1, s16
 80140f6:	2201      	movs	r2, #1
 80140f8:	4620      	mov	r0, r4
 80140fa:	f000 fefd 	bl	8014ef8 <__lshift>
 80140fe:	4631      	mov	r1, r6
 8014100:	ee08 0a10 	vmov	s16, r0
 8014104:	f000 ff68 	bl	8014fd8 <__mcmp>
 8014108:	2800      	cmp	r0, #0
 801410a:	dc91      	bgt.n	8014030 <_dtoa_r+0xaa8>
 801410c:	d102      	bne.n	8014114 <_dtoa_r+0xb8c>
 801410e:	f01a 0f01 	tst.w	sl, #1
 8014112:	d18d      	bne.n	8014030 <_dtoa_r+0xaa8>
 8014114:	462b      	mov	r3, r5
 8014116:	461d      	mov	r5, r3
 8014118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801411c:	2a30      	cmp	r2, #48	; 0x30
 801411e:	d0fa      	beq.n	8014116 <_dtoa_r+0xb8e>
 8014120:	e6d7      	b.n	8013ed2 <_dtoa_r+0x94a>
 8014122:	9a01      	ldr	r2, [sp, #4]
 8014124:	429a      	cmp	r2, r3
 8014126:	d184      	bne.n	8014032 <_dtoa_r+0xaaa>
 8014128:	9b00      	ldr	r3, [sp, #0]
 801412a:	3301      	adds	r3, #1
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	2331      	movs	r3, #49	; 0x31
 8014130:	7013      	strb	r3, [r2, #0]
 8014132:	e6ce      	b.n	8013ed2 <_dtoa_r+0x94a>
 8014134:	4b09      	ldr	r3, [pc, #36]	; (801415c <_dtoa_r+0xbd4>)
 8014136:	f7ff ba95 	b.w	8013664 <_dtoa_r+0xdc>
 801413a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801413c:	2b00      	cmp	r3, #0
 801413e:	f47f aa6e 	bne.w	801361e <_dtoa_r+0x96>
 8014142:	4b07      	ldr	r3, [pc, #28]	; (8014160 <_dtoa_r+0xbd8>)
 8014144:	f7ff ba8e 	b.w	8013664 <_dtoa_r+0xdc>
 8014148:	9b02      	ldr	r3, [sp, #8]
 801414a:	2b00      	cmp	r3, #0
 801414c:	dcae      	bgt.n	80140ac <_dtoa_r+0xb24>
 801414e:	9b06      	ldr	r3, [sp, #24]
 8014150:	2b02      	cmp	r3, #2
 8014152:	f73f aea8 	bgt.w	8013ea6 <_dtoa_r+0x91e>
 8014156:	e7a9      	b.n	80140ac <_dtoa_r+0xb24>
 8014158:	08016348 	.word	0x08016348
 801415c:	0801614c 	.word	0x0801614c
 8014160:	080162c9 	.word	0x080162c9

08014164 <__sflush_r>:
 8014164:	898a      	ldrh	r2, [r1, #12]
 8014166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801416a:	4605      	mov	r5, r0
 801416c:	0710      	lsls	r0, r2, #28
 801416e:	460c      	mov	r4, r1
 8014170:	d458      	bmi.n	8014224 <__sflush_r+0xc0>
 8014172:	684b      	ldr	r3, [r1, #4]
 8014174:	2b00      	cmp	r3, #0
 8014176:	dc05      	bgt.n	8014184 <__sflush_r+0x20>
 8014178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801417a:	2b00      	cmp	r3, #0
 801417c:	dc02      	bgt.n	8014184 <__sflush_r+0x20>
 801417e:	2000      	movs	r0, #0
 8014180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014186:	2e00      	cmp	r6, #0
 8014188:	d0f9      	beq.n	801417e <__sflush_r+0x1a>
 801418a:	2300      	movs	r3, #0
 801418c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014190:	682f      	ldr	r7, [r5, #0]
 8014192:	602b      	str	r3, [r5, #0]
 8014194:	d032      	beq.n	80141fc <__sflush_r+0x98>
 8014196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014198:	89a3      	ldrh	r3, [r4, #12]
 801419a:	075a      	lsls	r2, r3, #29
 801419c:	d505      	bpl.n	80141aa <__sflush_r+0x46>
 801419e:	6863      	ldr	r3, [r4, #4]
 80141a0:	1ac0      	subs	r0, r0, r3
 80141a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141a4:	b10b      	cbz	r3, 80141aa <__sflush_r+0x46>
 80141a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80141a8:	1ac0      	subs	r0, r0, r3
 80141aa:	2300      	movs	r3, #0
 80141ac:	4602      	mov	r2, r0
 80141ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141b0:	6a21      	ldr	r1, [r4, #32]
 80141b2:	4628      	mov	r0, r5
 80141b4:	47b0      	blx	r6
 80141b6:	1c43      	adds	r3, r0, #1
 80141b8:	89a3      	ldrh	r3, [r4, #12]
 80141ba:	d106      	bne.n	80141ca <__sflush_r+0x66>
 80141bc:	6829      	ldr	r1, [r5, #0]
 80141be:	291d      	cmp	r1, #29
 80141c0:	d82c      	bhi.n	801421c <__sflush_r+0xb8>
 80141c2:	4a2a      	ldr	r2, [pc, #168]	; (801426c <__sflush_r+0x108>)
 80141c4:	40ca      	lsrs	r2, r1
 80141c6:	07d6      	lsls	r6, r2, #31
 80141c8:	d528      	bpl.n	801421c <__sflush_r+0xb8>
 80141ca:	2200      	movs	r2, #0
 80141cc:	6062      	str	r2, [r4, #4]
 80141ce:	04d9      	lsls	r1, r3, #19
 80141d0:	6922      	ldr	r2, [r4, #16]
 80141d2:	6022      	str	r2, [r4, #0]
 80141d4:	d504      	bpl.n	80141e0 <__sflush_r+0x7c>
 80141d6:	1c42      	adds	r2, r0, #1
 80141d8:	d101      	bne.n	80141de <__sflush_r+0x7a>
 80141da:	682b      	ldr	r3, [r5, #0]
 80141dc:	b903      	cbnz	r3, 80141e0 <__sflush_r+0x7c>
 80141de:	6560      	str	r0, [r4, #84]	; 0x54
 80141e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141e2:	602f      	str	r7, [r5, #0]
 80141e4:	2900      	cmp	r1, #0
 80141e6:	d0ca      	beq.n	801417e <__sflush_r+0x1a>
 80141e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141ec:	4299      	cmp	r1, r3
 80141ee:	d002      	beq.n	80141f6 <__sflush_r+0x92>
 80141f0:	4628      	mov	r0, r5
 80141f2:	f001 f8fd 	bl	80153f0 <_free_r>
 80141f6:	2000      	movs	r0, #0
 80141f8:	6360      	str	r0, [r4, #52]	; 0x34
 80141fa:	e7c1      	b.n	8014180 <__sflush_r+0x1c>
 80141fc:	6a21      	ldr	r1, [r4, #32]
 80141fe:	2301      	movs	r3, #1
 8014200:	4628      	mov	r0, r5
 8014202:	47b0      	blx	r6
 8014204:	1c41      	adds	r1, r0, #1
 8014206:	d1c7      	bne.n	8014198 <__sflush_r+0x34>
 8014208:	682b      	ldr	r3, [r5, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d0c4      	beq.n	8014198 <__sflush_r+0x34>
 801420e:	2b1d      	cmp	r3, #29
 8014210:	d001      	beq.n	8014216 <__sflush_r+0xb2>
 8014212:	2b16      	cmp	r3, #22
 8014214:	d101      	bne.n	801421a <__sflush_r+0xb6>
 8014216:	602f      	str	r7, [r5, #0]
 8014218:	e7b1      	b.n	801417e <__sflush_r+0x1a>
 801421a:	89a3      	ldrh	r3, [r4, #12]
 801421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014220:	81a3      	strh	r3, [r4, #12]
 8014222:	e7ad      	b.n	8014180 <__sflush_r+0x1c>
 8014224:	690f      	ldr	r7, [r1, #16]
 8014226:	2f00      	cmp	r7, #0
 8014228:	d0a9      	beq.n	801417e <__sflush_r+0x1a>
 801422a:	0793      	lsls	r3, r2, #30
 801422c:	680e      	ldr	r6, [r1, #0]
 801422e:	bf08      	it	eq
 8014230:	694b      	ldreq	r3, [r1, #20]
 8014232:	600f      	str	r7, [r1, #0]
 8014234:	bf18      	it	ne
 8014236:	2300      	movne	r3, #0
 8014238:	eba6 0807 	sub.w	r8, r6, r7
 801423c:	608b      	str	r3, [r1, #8]
 801423e:	f1b8 0f00 	cmp.w	r8, #0
 8014242:	dd9c      	ble.n	801417e <__sflush_r+0x1a>
 8014244:	6a21      	ldr	r1, [r4, #32]
 8014246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014248:	4643      	mov	r3, r8
 801424a:	463a      	mov	r2, r7
 801424c:	4628      	mov	r0, r5
 801424e:	47b0      	blx	r6
 8014250:	2800      	cmp	r0, #0
 8014252:	dc06      	bgt.n	8014262 <__sflush_r+0xfe>
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801425a:	81a3      	strh	r3, [r4, #12]
 801425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014260:	e78e      	b.n	8014180 <__sflush_r+0x1c>
 8014262:	4407      	add	r7, r0
 8014264:	eba8 0800 	sub.w	r8, r8, r0
 8014268:	e7e9      	b.n	801423e <__sflush_r+0xda>
 801426a:	bf00      	nop
 801426c:	20400001 	.word	0x20400001

08014270 <_fflush_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	690b      	ldr	r3, [r1, #16]
 8014274:	4605      	mov	r5, r0
 8014276:	460c      	mov	r4, r1
 8014278:	b913      	cbnz	r3, 8014280 <_fflush_r+0x10>
 801427a:	2500      	movs	r5, #0
 801427c:	4628      	mov	r0, r5
 801427e:	bd38      	pop	{r3, r4, r5, pc}
 8014280:	b118      	cbz	r0, 801428a <_fflush_r+0x1a>
 8014282:	6983      	ldr	r3, [r0, #24]
 8014284:	b90b      	cbnz	r3, 801428a <_fflush_r+0x1a>
 8014286:	f7fd f91f 	bl	80114c8 <__sinit>
 801428a:	4b14      	ldr	r3, [pc, #80]	; (80142dc <_fflush_r+0x6c>)
 801428c:	429c      	cmp	r4, r3
 801428e:	d11b      	bne.n	80142c8 <_fflush_r+0x58>
 8014290:	686c      	ldr	r4, [r5, #4]
 8014292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d0ef      	beq.n	801427a <_fflush_r+0xa>
 801429a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801429c:	07d0      	lsls	r0, r2, #31
 801429e:	d404      	bmi.n	80142aa <_fflush_r+0x3a>
 80142a0:	0599      	lsls	r1, r3, #22
 80142a2:	d402      	bmi.n	80142aa <_fflush_r+0x3a>
 80142a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142a6:	f7fd f9d2 	bl	801164e <__retarget_lock_acquire_recursive>
 80142aa:	4628      	mov	r0, r5
 80142ac:	4621      	mov	r1, r4
 80142ae:	f7ff ff59 	bl	8014164 <__sflush_r>
 80142b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142b4:	07da      	lsls	r2, r3, #31
 80142b6:	4605      	mov	r5, r0
 80142b8:	d4e0      	bmi.n	801427c <_fflush_r+0xc>
 80142ba:	89a3      	ldrh	r3, [r4, #12]
 80142bc:	059b      	lsls	r3, r3, #22
 80142be:	d4dd      	bmi.n	801427c <_fflush_r+0xc>
 80142c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142c2:	f7fd f9c5 	bl	8011650 <__retarget_lock_release_recursive>
 80142c6:	e7d9      	b.n	801427c <_fflush_r+0xc>
 80142c8:	4b05      	ldr	r3, [pc, #20]	; (80142e0 <_fflush_r+0x70>)
 80142ca:	429c      	cmp	r4, r3
 80142cc:	d101      	bne.n	80142d2 <_fflush_r+0x62>
 80142ce:	68ac      	ldr	r4, [r5, #8]
 80142d0:	e7df      	b.n	8014292 <_fflush_r+0x22>
 80142d2:	4b04      	ldr	r3, [pc, #16]	; (80142e4 <_fflush_r+0x74>)
 80142d4:	429c      	cmp	r4, r3
 80142d6:	bf08      	it	eq
 80142d8:	68ec      	ldreq	r4, [r5, #12]
 80142da:	e7da      	b.n	8014292 <_fflush_r+0x22>
 80142dc:	080160f8 	.word	0x080160f8
 80142e0:	08016118 	.word	0x08016118
 80142e4:	080160d8 	.word	0x080160d8

080142e8 <rshift>:
 80142e8:	6903      	ldr	r3, [r0, #16]
 80142ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80142ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80142f6:	f100 0414 	add.w	r4, r0, #20
 80142fa:	dd45      	ble.n	8014388 <rshift+0xa0>
 80142fc:	f011 011f 	ands.w	r1, r1, #31
 8014300:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014304:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014308:	d10c      	bne.n	8014324 <rshift+0x3c>
 801430a:	f100 0710 	add.w	r7, r0, #16
 801430e:	4629      	mov	r1, r5
 8014310:	42b1      	cmp	r1, r6
 8014312:	d334      	bcc.n	801437e <rshift+0x96>
 8014314:	1a9b      	subs	r3, r3, r2
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	1eea      	subs	r2, r5, #3
 801431a:	4296      	cmp	r6, r2
 801431c:	bf38      	it	cc
 801431e:	2300      	movcc	r3, #0
 8014320:	4423      	add	r3, r4
 8014322:	e015      	b.n	8014350 <rshift+0x68>
 8014324:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014328:	f1c1 0820 	rsb	r8, r1, #32
 801432c:	40cf      	lsrs	r7, r1
 801432e:	f105 0e04 	add.w	lr, r5, #4
 8014332:	46a1      	mov	r9, r4
 8014334:	4576      	cmp	r6, lr
 8014336:	46f4      	mov	ip, lr
 8014338:	d815      	bhi.n	8014366 <rshift+0x7e>
 801433a:	1a9a      	subs	r2, r3, r2
 801433c:	0092      	lsls	r2, r2, #2
 801433e:	3a04      	subs	r2, #4
 8014340:	3501      	adds	r5, #1
 8014342:	42ae      	cmp	r6, r5
 8014344:	bf38      	it	cc
 8014346:	2200      	movcc	r2, #0
 8014348:	18a3      	adds	r3, r4, r2
 801434a:	50a7      	str	r7, [r4, r2]
 801434c:	b107      	cbz	r7, 8014350 <rshift+0x68>
 801434e:	3304      	adds	r3, #4
 8014350:	1b1a      	subs	r2, r3, r4
 8014352:	42a3      	cmp	r3, r4
 8014354:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014358:	bf08      	it	eq
 801435a:	2300      	moveq	r3, #0
 801435c:	6102      	str	r2, [r0, #16]
 801435e:	bf08      	it	eq
 8014360:	6143      	streq	r3, [r0, #20]
 8014362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014366:	f8dc c000 	ldr.w	ip, [ip]
 801436a:	fa0c fc08 	lsl.w	ip, ip, r8
 801436e:	ea4c 0707 	orr.w	r7, ip, r7
 8014372:	f849 7b04 	str.w	r7, [r9], #4
 8014376:	f85e 7b04 	ldr.w	r7, [lr], #4
 801437a:	40cf      	lsrs	r7, r1
 801437c:	e7da      	b.n	8014334 <rshift+0x4c>
 801437e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014382:	f847 cf04 	str.w	ip, [r7, #4]!
 8014386:	e7c3      	b.n	8014310 <rshift+0x28>
 8014388:	4623      	mov	r3, r4
 801438a:	e7e1      	b.n	8014350 <rshift+0x68>

0801438c <__hexdig_fun>:
 801438c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014390:	2b09      	cmp	r3, #9
 8014392:	d802      	bhi.n	801439a <__hexdig_fun+0xe>
 8014394:	3820      	subs	r0, #32
 8014396:	b2c0      	uxtb	r0, r0
 8014398:	4770      	bx	lr
 801439a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801439e:	2b05      	cmp	r3, #5
 80143a0:	d801      	bhi.n	80143a6 <__hexdig_fun+0x1a>
 80143a2:	3847      	subs	r0, #71	; 0x47
 80143a4:	e7f7      	b.n	8014396 <__hexdig_fun+0xa>
 80143a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80143aa:	2b05      	cmp	r3, #5
 80143ac:	d801      	bhi.n	80143b2 <__hexdig_fun+0x26>
 80143ae:	3827      	subs	r0, #39	; 0x27
 80143b0:	e7f1      	b.n	8014396 <__hexdig_fun+0xa>
 80143b2:	2000      	movs	r0, #0
 80143b4:	4770      	bx	lr
	...

080143b8 <__gethex>:
 80143b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143bc:	ed2d 8b02 	vpush	{d8}
 80143c0:	b089      	sub	sp, #36	; 0x24
 80143c2:	ee08 0a10 	vmov	s16, r0
 80143c6:	9304      	str	r3, [sp, #16]
 80143c8:	4bb4      	ldr	r3, [pc, #720]	; (801469c <__gethex+0x2e4>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	9301      	str	r3, [sp, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	468b      	mov	fp, r1
 80143d2:	4690      	mov	r8, r2
 80143d4:	f7eb ff14 	bl	8000200 <strlen>
 80143d8:	9b01      	ldr	r3, [sp, #4]
 80143da:	f8db 2000 	ldr.w	r2, [fp]
 80143de:	4403      	add	r3, r0
 80143e0:	4682      	mov	sl, r0
 80143e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80143e6:	9305      	str	r3, [sp, #20]
 80143e8:	1c93      	adds	r3, r2, #2
 80143ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80143ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80143f2:	32fe      	adds	r2, #254	; 0xfe
 80143f4:	18d1      	adds	r1, r2, r3
 80143f6:	461f      	mov	r7, r3
 80143f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80143fc:	9100      	str	r1, [sp, #0]
 80143fe:	2830      	cmp	r0, #48	; 0x30
 8014400:	d0f8      	beq.n	80143f4 <__gethex+0x3c>
 8014402:	f7ff ffc3 	bl	801438c <__hexdig_fun>
 8014406:	4604      	mov	r4, r0
 8014408:	2800      	cmp	r0, #0
 801440a:	d13a      	bne.n	8014482 <__gethex+0xca>
 801440c:	9901      	ldr	r1, [sp, #4]
 801440e:	4652      	mov	r2, sl
 8014410:	4638      	mov	r0, r7
 8014412:	f001 f9b1 	bl	8015778 <strncmp>
 8014416:	4605      	mov	r5, r0
 8014418:	2800      	cmp	r0, #0
 801441a:	d168      	bne.n	80144ee <__gethex+0x136>
 801441c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014420:	eb07 060a 	add.w	r6, r7, sl
 8014424:	f7ff ffb2 	bl	801438c <__hexdig_fun>
 8014428:	2800      	cmp	r0, #0
 801442a:	d062      	beq.n	80144f2 <__gethex+0x13a>
 801442c:	4633      	mov	r3, r6
 801442e:	7818      	ldrb	r0, [r3, #0]
 8014430:	2830      	cmp	r0, #48	; 0x30
 8014432:	461f      	mov	r7, r3
 8014434:	f103 0301 	add.w	r3, r3, #1
 8014438:	d0f9      	beq.n	801442e <__gethex+0x76>
 801443a:	f7ff ffa7 	bl	801438c <__hexdig_fun>
 801443e:	2301      	movs	r3, #1
 8014440:	fab0 f480 	clz	r4, r0
 8014444:	0964      	lsrs	r4, r4, #5
 8014446:	4635      	mov	r5, r6
 8014448:	9300      	str	r3, [sp, #0]
 801444a:	463a      	mov	r2, r7
 801444c:	4616      	mov	r6, r2
 801444e:	3201      	adds	r2, #1
 8014450:	7830      	ldrb	r0, [r6, #0]
 8014452:	f7ff ff9b 	bl	801438c <__hexdig_fun>
 8014456:	2800      	cmp	r0, #0
 8014458:	d1f8      	bne.n	801444c <__gethex+0x94>
 801445a:	9901      	ldr	r1, [sp, #4]
 801445c:	4652      	mov	r2, sl
 801445e:	4630      	mov	r0, r6
 8014460:	f001 f98a 	bl	8015778 <strncmp>
 8014464:	b980      	cbnz	r0, 8014488 <__gethex+0xd0>
 8014466:	b94d      	cbnz	r5, 801447c <__gethex+0xc4>
 8014468:	eb06 050a 	add.w	r5, r6, sl
 801446c:	462a      	mov	r2, r5
 801446e:	4616      	mov	r6, r2
 8014470:	3201      	adds	r2, #1
 8014472:	7830      	ldrb	r0, [r6, #0]
 8014474:	f7ff ff8a 	bl	801438c <__hexdig_fun>
 8014478:	2800      	cmp	r0, #0
 801447a:	d1f8      	bne.n	801446e <__gethex+0xb6>
 801447c:	1bad      	subs	r5, r5, r6
 801447e:	00ad      	lsls	r5, r5, #2
 8014480:	e004      	b.n	801448c <__gethex+0xd4>
 8014482:	2400      	movs	r4, #0
 8014484:	4625      	mov	r5, r4
 8014486:	e7e0      	b.n	801444a <__gethex+0x92>
 8014488:	2d00      	cmp	r5, #0
 801448a:	d1f7      	bne.n	801447c <__gethex+0xc4>
 801448c:	7833      	ldrb	r3, [r6, #0]
 801448e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014492:	2b50      	cmp	r3, #80	; 0x50
 8014494:	d13b      	bne.n	801450e <__gethex+0x156>
 8014496:	7873      	ldrb	r3, [r6, #1]
 8014498:	2b2b      	cmp	r3, #43	; 0x2b
 801449a:	d02c      	beq.n	80144f6 <__gethex+0x13e>
 801449c:	2b2d      	cmp	r3, #45	; 0x2d
 801449e:	d02e      	beq.n	80144fe <__gethex+0x146>
 80144a0:	1c71      	adds	r1, r6, #1
 80144a2:	f04f 0900 	mov.w	r9, #0
 80144a6:	7808      	ldrb	r0, [r1, #0]
 80144a8:	f7ff ff70 	bl	801438c <__hexdig_fun>
 80144ac:	1e43      	subs	r3, r0, #1
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	2b18      	cmp	r3, #24
 80144b2:	d82c      	bhi.n	801450e <__gethex+0x156>
 80144b4:	f1a0 0210 	sub.w	r2, r0, #16
 80144b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80144bc:	f7ff ff66 	bl	801438c <__hexdig_fun>
 80144c0:	1e43      	subs	r3, r0, #1
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b18      	cmp	r3, #24
 80144c6:	d91d      	bls.n	8014504 <__gethex+0x14c>
 80144c8:	f1b9 0f00 	cmp.w	r9, #0
 80144cc:	d000      	beq.n	80144d0 <__gethex+0x118>
 80144ce:	4252      	negs	r2, r2
 80144d0:	4415      	add	r5, r2
 80144d2:	f8cb 1000 	str.w	r1, [fp]
 80144d6:	b1e4      	cbz	r4, 8014512 <__gethex+0x15a>
 80144d8:	9b00      	ldr	r3, [sp, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	bf14      	ite	ne
 80144de:	2700      	movne	r7, #0
 80144e0:	2706      	moveq	r7, #6
 80144e2:	4638      	mov	r0, r7
 80144e4:	b009      	add	sp, #36	; 0x24
 80144e6:	ecbd 8b02 	vpop	{d8}
 80144ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ee:	463e      	mov	r6, r7
 80144f0:	4625      	mov	r5, r4
 80144f2:	2401      	movs	r4, #1
 80144f4:	e7ca      	b.n	801448c <__gethex+0xd4>
 80144f6:	f04f 0900 	mov.w	r9, #0
 80144fa:	1cb1      	adds	r1, r6, #2
 80144fc:	e7d3      	b.n	80144a6 <__gethex+0xee>
 80144fe:	f04f 0901 	mov.w	r9, #1
 8014502:	e7fa      	b.n	80144fa <__gethex+0x142>
 8014504:	230a      	movs	r3, #10
 8014506:	fb03 0202 	mla	r2, r3, r2, r0
 801450a:	3a10      	subs	r2, #16
 801450c:	e7d4      	b.n	80144b8 <__gethex+0x100>
 801450e:	4631      	mov	r1, r6
 8014510:	e7df      	b.n	80144d2 <__gethex+0x11a>
 8014512:	1bf3      	subs	r3, r6, r7
 8014514:	3b01      	subs	r3, #1
 8014516:	4621      	mov	r1, r4
 8014518:	2b07      	cmp	r3, #7
 801451a:	dc0b      	bgt.n	8014534 <__gethex+0x17c>
 801451c:	ee18 0a10 	vmov	r0, s16
 8014520:	f000 fa8e 	bl	8014a40 <_Balloc>
 8014524:	4604      	mov	r4, r0
 8014526:	b940      	cbnz	r0, 801453a <__gethex+0x182>
 8014528:	4b5d      	ldr	r3, [pc, #372]	; (80146a0 <__gethex+0x2e8>)
 801452a:	4602      	mov	r2, r0
 801452c:	21de      	movs	r1, #222	; 0xde
 801452e:	485d      	ldr	r0, [pc, #372]	; (80146a4 <__gethex+0x2ec>)
 8014530:	f001 f944 	bl	80157bc <__assert_func>
 8014534:	3101      	adds	r1, #1
 8014536:	105b      	asrs	r3, r3, #1
 8014538:	e7ee      	b.n	8014518 <__gethex+0x160>
 801453a:	f100 0914 	add.w	r9, r0, #20
 801453e:	f04f 0b00 	mov.w	fp, #0
 8014542:	f1ca 0301 	rsb	r3, sl, #1
 8014546:	f8cd 9008 	str.w	r9, [sp, #8]
 801454a:	f8cd b000 	str.w	fp, [sp]
 801454e:	9306      	str	r3, [sp, #24]
 8014550:	42b7      	cmp	r7, r6
 8014552:	d340      	bcc.n	80145d6 <__gethex+0x21e>
 8014554:	9802      	ldr	r0, [sp, #8]
 8014556:	9b00      	ldr	r3, [sp, #0]
 8014558:	f840 3b04 	str.w	r3, [r0], #4
 801455c:	eba0 0009 	sub.w	r0, r0, r9
 8014560:	1080      	asrs	r0, r0, #2
 8014562:	0146      	lsls	r6, r0, #5
 8014564:	6120      	str	r0, [r4, #16]
 8014566:	4618      	mov	r0, r3
 8014568:	f000 fb5c 	bl	8014c24 <__hi0bits>
 801456c:	1a30      	subs	r0, r6, r0
 801456e:	f8d8 6000 	ldr.w	r6, [r8]
 8014572:	42b0      	cmp	r0, r6
 8014574:	dd63      	ble.n	801463e <__gethex+0x286>
 8014576:	1b87      	subs	r7, r0, r6
 8014578:	4639      	mov	r1, r7
 801457a:	4620      	mov	r0, r4
 801457c:	f000 ff00 	bl	8015380 <__any_on>
 8014580:	4682      	mov	sl, r0
 8014582:	b1a8      	cbz	r0, 80145b0 <__gethex+0x1f8>
 8014584:	1e7b      	subs	r3, r7, #1
 8014586:	1159      	asrs	r1, r3, #5
 8014588:	f003 021f 	and.w	r2, r3, #31
 801458c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014590:	f04f 0a01 	mov.w	sl, #1
 8014594:	fa0a f202 	lsl.w	r2, sl, r2
 8014598:	420a      	tst	r2, r1
 801459a:	d009      	beq.n	80145b0 <__gethex+0x1f8>
 801459c:	4553      	cmp	r3, sl
 801459e:	dd05      	ble.n	80145ac <__gethex+0x1f4>
 80145a0:	1eb9      	subs	r1, r7, #2
 80145a2:	4620      	mov	r0, r4
 80145a4:	f000 feec 	bl	8015380 <__any_on>
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d145      	bne.n	8014638 <__gethex+0x280>
 80145ac:	f04f 0a02 	mov.w	sl, #2
 80145b0:	4639      	mov	r1, r7
 80145b2:	4620      	mov	r0, r4
 80145b4:	f7ff fe98 	bl	80142e8 <rshift>
 80145b8:	443d      	add	r5, r7
 80145ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80145be:	42ab      	cmp	r3, r5
 80145c0:	da4c      	bge.n	801465c <__gethex+0x2a4>
 80145c2:	ee18 0a10 	vmov	r0, s16
 80145c6:	4621      	mov	r1, r4
 80145c8:	f000 fa7a 	bl	8014ac0 <_Bfree>
 80145cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80145ce:	2300      	movs	r3, #0
 80145d0:	6013      	str	r3, [r2, #0]
 80145d2:	27a3      	movs	r7, #163	; 0xa3
 80145d4:	e785      	b.n	80144e2 <__gethex+0x12a>
 80145d6:	1e73      	subs	r3, r6, #1
 80145d8:	9a05      	ldr	r2, [sp, #20]
 80145da:	9303      	str	r3, [sp, #12]
 80145dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d019      	beq.n	8014618 <__gethex+0x260>
 80145e4:	f1bb 0f20 	cmp.w	fp, #32
 80145e8:	d107      	bne.n	80145fa <__gethex+0x242>
 80145ea:	9b02      	ldr	r3, [sp, #8]
 80145ec:	9a00      	ldr	r2, [sp, #0]
 80145ee:	f843 2b04 	str.w	r2, [r3], #4
 80145f2:	9302      	str	r3, [sp, #8]
 80145f4:	2300      	movs	r3, #0
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	469b      	mov	fp, r3
 80145fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80145fe:	f7ff fec5 	bl	801438c <__hexdig_fun>
 8014602:	9b00      	ldr	r3, [sp, #0]
 8014604:	f000 000f 	and.w	r0, r0, #15
 8014608:	fa00 f00b 	lsl.w	r0, r0, fp
 801460c:	4303      	orrs	r3, r0
 801460e:	9300      	str	r3, [sp, #0]
 8014610:	f10b 0b04 	add.w	fp, fp, #4
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	e00d      	b.n	8014634 <__gethex+0x27c>
 8014618:	9b03      	ldr	r3, [sp, #12]
 801461a:	9a06      	ldr	r2, [sp, #24]
 801461c:	4413      	add	r3, r2
 801461e:	42bb      	cmp	r3, r7
 8014620:	d3e0      	bcc.n	80145e4 <__gethex+0x22c>
 8014622:	4618      	mov	r0, r3
 8014624:	9901      	ldr	r1, [sp, #4]
 8014626:	9307      	str	r3, [sp, #28]
 8014628:	4652      	mov	r2, sl
 801462a:	f001 f8a5 	bl	8015778 <strncmp>
 801462e:	9b07      	ldr	r3, [sp, #28]
 8014630:	2800      	cmp	r0, #0
 8014632:	d1d7      	bne.n	80145e4 <__gethex+0x22c>
 8014634:	461e      	mov	r6, r3
 8014636:	e78b      	b.n	8014550 <__gethex+0x198>
 8014638:	f04f 0a03 	mov.w	sl, #3
 801463c:	e7b8      	b.n	80145b0 <__gethex+0x1f8>
 801463e:	da0a      	bge.n	8014656 <__gethex+0x29e>
 8014640:	1a37      	subs	r7, r6, r0
 8014642:	4621      	mov	r1, r4
 8014644:	ee18 0a10 	vmov	r0, s16
 8014648:	463a      	mov	r2, r7
 801464a:	f000 fc55 	bl	8014ef8 <__lshift>
 801464e:	1bed      	subs	r5, r5, r7
 8014650:	4604      	mov	r4, r0
 8014652:	f100 0914 	add.w	r9, r0, #20
 8014656:	f04f 0a00 	mov.w	sl, #0
 801465a:	e7ae      	b.n	80145ba <__gethex+0x202>
 801465c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014660:	42a8      	cmp	r0, r5
 8014662:	dd72      	ble.n	801474a <__gethex+0x392>
 8014664:	1b45      	subs	r5, r0, r5
 8014666:	42ae      	cmp	r6, r5
 8014668:	dc36      	bgt.n	80146d8 <__gethex+0x320>
 801466a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801466e:	2b02      	cmp	r3, #2
 8014670:	d02a      	beq.n	80146c8 <__gethex+0x310>
 8014672:	2b03      	cmp	r3, #3
 8014674:	d02c      	beq.n	80146d0 <__gethex+0x318>
 8014676:	2b01      	cmp	r3, #1
 8014678:	d11c      	bne.n	80146b4 <__gethex+0x2fc>
 801467a:	42ae      	cmp	r6, r5
 801467c:	d11a      	bne.n	80146b4 <__gethex+0x2fc>
 801467e:	2e01      	cmp	r6, #1
 8014680:	d112      	bne.n	80146a8 <__gethex+0x2f0>
 8014682:	9a04      	ldr	r2, [sp, #16]
 8014684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014688:	6013      	str	r3, [r2, #0]
 801468a:	2301      	movs	r3, #1
 801468c:	6123      	str	r3, [r4, #16]
 801468e:	f8c9 3000 	str.w	r3, [r9]
 8014692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014694:	2762      	movs	r7, #98	; 0x62
 8014696:	601c      	str	r4, [r3, #0]
 8014698:	e723      	b.n	80144e2 <__gethex+0x12a>
 801469a:	bf00      	nop
 801469c:	080163c0 	.word	0x080163c0
 80146a0:	08016348 	.word	0x08016348
 80146a4:	08016359 	.word	0x08016359
 80146a8:	1e71      	subs	r1, r6, #1
 80146aa:	4620      	mov	r0, r4
 80146ac:	f000 fe68 	bl	8015380 <__any_on>
 80146b0:	2800      	cmp	r0, #0
 80146b2:	d1e6      	bne.n	8014682 <__gethex+0x2ca>
 80146b4:	ee18 0a10 	vmov	r0, s16
 80146b8:	4621      	mov	r1, r4
 80146ba:	f000 fa01 	bl	8014ac0 <_Bfree>
 80146be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146c0:	2300      	movs	r3, #0
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	2750      	movs	r7, #80	; 0x50
 80146c6:	e70c      	b.n	80144e2 <__gethex+0x12a>
 80146c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d1f2      	bne.n	80146b4 <__gethex+0x2fc>
 80146ce:	e7d8      	b.n	8014682 <__gethex+0x2ca>
 80146d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d1d5      	bne.n	8014682 <__gethex+0x2ca>
 80146d6:	e7ed      	b.n	80146b4 <__gethex+0x2fc>
 80146d8:	1e6f      	subs	r7, r5, #1
 80146da:	f1ba 0f00 	cmp.w	sl, #0
 80146de:	d131      	bne.n	8014744 <__gethex+0x38c>
 80146e0:	b127      	cbz	r7, 80146ec <__gethex+0x334>
 80146e2:	4639      	mov	r1, r7
 80146e4:	4620      	mov	r0, r4
 80146e6:	f000 fe4b 	bl	8015380 <__any_on>
 80146ea:	4682      	mov	sl, r0
 80146ec:	117b      	asrs	r3, r7, #5
 80146ee:	2101      	movs	r1, #1
 80146f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80146f4:	f007 071f 	and.w	r7, r7, #31
 80146f8:	fa01 f707 	lsl.w	r7, r1, r7
 80146fc:	421f      	tst	r7, r3
 80146fe:	4629      	mov	r1, r5
 8014700:	4620      	mov	r0, r4
 8014702:	bf18      	it	ne
 8014704:	f04a 0a02 	orrne.w	sl, sl, #2
 8014708:	1b76      	subs	r6, r6, r5
 801470a:	f7ff fded 	bl	80142e8 <rshift>
 801470e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014712:	2702      	movs	r7, #2
 8014714:	f1ba 0f00 	cmp.w	sl, #0
 8014718:	d048      	beq.n	80147ac <__gethex+0x3f4>
 801471a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801471e:	2b02      	cmp	r3, #2
 8014720:	d015      	beq.n	801474e <__gethex+0x396>
 8014722:	2b03      	cmp	r3, #3
 8014724:	d017      	beq.n	8014756 <__gethex+0x39e>
 8014726:	2b01      	cmp	r3, #1
 8014728:	d109      	bne.n	801473e <__gethex+0x386>
 801472a:	f01a 0f02 	tst.w	sl, #2
 801472e:	d006      	beq.n	801473e <__gethex+0x386>
 8014730:	f8d9 0000 	ldr.w	r0, [r9]
 8014734:	ea4a 0a00 	orr.w	sl, sl, r0
 8014738:	f01a 0f01 	tst.w	sl, #1
 801473c:	d10e      	bne.n	801475c <__gethex+0x3a4>
 801473e:	f047 0710 	orr.w	r7, r7, #16
 8014742:	e033      	b.n	80147ac <__gethex+0x3f4>
 8014744:	f04f 0a01 	mov.w	sl, #1
 8014748:	e7d0      	b.n	80146ec <__gethex+0x334>
 801474a:	2701      	movs	r7, #1
 801474c:	e7e2      	b.n	8014714 <__gethex+0x35c>
 801474e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014750:	f1c3 0301 	rsb	r3, r3, #1
 8014754:	9315      	str	r3, [sp, #84]	; 0x54
 8014756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014758:	2b00      	cmp	r3, #0
 801475a:	d0f0      	beq.n	801473e <__gethex+0x386>
 801475c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014760:	f104 0314 	add.w	r3, r4, #20
 8014764:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014768:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801476c:	f04f 0c00 	mov.w	ip, #0
 8014770:	4618      	mov	r0, r3
 8014772:	f853 2b04 	ldr.w	r2, [r3], #4
 8014776:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801477a:	d01c      	beq.n	80147b6 <__gethex+0x3fe>
 801477c:	3201      	adds	r2, #1
 801477e:	6002      	str	r2, [r0, #0]
 8014780:	2f02      	cmp	r7, #2
 8014782:	f104 0314 	add.w	r3, r4, #20
 8014786:	d13f      	bne.n	8014808 <__gethex+0x450>
 8014788:	f8d8 2000 	ldr.w	r2, [r8]
 801478c:	3a01      	subs	r2, #1
 801478e:	42b2      	cmp	r2, r6
 8014790:	d10a      	bne.n	80147a8 <__gethex+0x3f0>
 8014792:	1171      	asrs	r1, r6, #5
 8014794:	2201      	movs	r2, #1
 8014796:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801479a:	f006 061f 	and.w	r6, r6, #31
 801479e:	fa02 f606 	lsl.w	r6, r2, r6
 80147a2:	421e      	tst	r6, r3
 80147a4:	bf18      	it	ne
 80147a6:	4617      	movne	r7, r2
 80147a8:	f047 0720 	orr.w	r7, r7, #32
 80147ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80147ae:	601c      	str	r4, [r3, #0]
 80147b0:	9b04      	ldr	r3, [sp, #16]
 80147b2:	601d      	str	r5, [r3, #0]
 80147b4:	e695      	b.n	80144e2 <__gethex+0x12a>
 80147b6:	4299      	cmp	r1, r3
 80147b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80147bc:	d8d8      	bhi.n	8014770 <__gethex+0x3b8>
 80147be:	68a3      	ldr	r3, [r4, #8]
 80147c0:	459b      	cmp	fp, r3
 80147c2:	db19      	blt.n	80147f8 <__gethex+0x440>
 80147c4:	6861      	ldr	r1, [r4, #4]
 80147c6:	ee18 0a10 	vmov	r0, s16
 80147ca:	3101      	adds	r1, #1
 80147cc:	f000 f938 	bl	8014a40 <_Balloc>
 80147d0:	4681      	mov	r9, r0
 80147d2:	b918      	cbnz	r0, 80147dc <__gethex+0x424>
 80147d4:	4b1a      	ldr	r3, [pc, #104]	; (8014840 <__gethex+0x488>)
 80147d6:	4602      	mov	r2, r0
 80147d8:	2184      	movs	r1, #132	; 0x84
 80147da:	e6a8      	b.n	801452e <__gethex+0x176>
 80147dc:	6922      	ldr	r2, [r4, #16]
 80147de:	3202      	adds	r2, #2
 80147e0:	f104 010c 	add.w	r1, r4, #12
 80147e4:	0092      	lsls	r2, r2, #2
 80147e6:	300c      	adds	r0, #12
 80147e8:	f7fc ff33 	bl	8011652 <memcpy>
 80147ec:	4621      	mov	r1, r4
 80147ee:	ee18 0a10 	vmov	r0, s16
 80147f2:	f000 f965 	bl	8014ac0 <_Bfree>
 80147f6:	464c      	mov	r4, r9
 80147f8:	6923      	ldr	r3, [r4, #16]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014800:	6122      	str	r2, [r4, #16]
 8014802:	2201      	movs	r2, #1
 8014804:	615a      	str	r2, [r3, #20]
 8014806:	e7bb      	b.n	8014780 <__gethex+0x3c8>
 8014808:	6922      	ldr	r2, [r4, #16]
 801480a:	455a      	cmp	r2, fp
 801480c:	dd0b      	ble.n	8014826 <__gethex+0x46e>
 801480e:	2101      	movs	r1, #1
 8014810:	4620      	mov	r0, r4
 8014812:	f7ff fd69 	bl	80142e8 <rshift>
 8014816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801481a:	3501      	adds	r5, #1
 801481c:	42ab      	cmp	r3, r5
 801481e:	f6ff aed0 	blt.w	80145c2 <__gethex+0x20a>
 8014822:	2701      	movs	r7, #1
 8014824:	e7c0      	b.n	80147a8 <__gethex+0x3f0>
 8014826:	f016 061f 	ands.w	r6, r6, #31
 801482a:	d0fa      	beq.n	8014822 <__gethex+0x46a>
 801482c:	4453      	add	r3, sl
 801482e:	f1c6 0620 	rsb	r6, r6, #32
 8014832:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014836:	f000 f9f5 	bl	8014c24 <__hi0bits>
 801483a:	42b0      	cmp	r0, r6
 801483c:	dbe7      	blt.n	801480e <__gethex+0x456>
 801483e:	e7f0      	b.n	8014822 <__gethex+0x46a>
 8014840:	08016348 	.word	0x08016348

08014844 <L_shift>:
 8014844:	f1c2 0208 	rsb	r2, r2, #8
 8014848:	0092      	lsls	r2, r2, #2
 801484a:	b570      	push	{r4, r5, r6, lr}
 801484c:	f1c2 0620 	rsb	r6, r2, #32
 8014850:	6843      	ldr	r3, [r0, #4]
 8014852:	6804      	ldr	r4, [r0, #0]
 8014854:	fa03 f506 	lsl.w	r5, r3, r6
 8014858:	432c      	orrs	r4, r5
 801485a:	40d3      	lsrs	r3, r2
 801485c:	6004      	str	r4, [r0, #0]
 801485e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014862:	4288      	cmp	r0, r1
 8014864:	d3f4      	bcc.n	8014850 <L_shift+0xc>
 8014866:	bd70      	pop	{r4, r5, r6, pc}

08014868 <__match>:
 8014868:	b530      	push	{r4, r5, lr}
 801486a:	6803      	ldr	r3, [r0, #0]
 801486c:	3301      	adds	r3, #1
 801486e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014872:	b914      	cbnz	r4, 801487a <__match+0x12>
 8014874:	6003      	str	r3, [r0, #0]
 8014876:	2001      	movs	r0, #1
 8014878:	bd30      	pop	{r4, r5, pc}
 801487a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801487e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014882:	2d19      	cmp	r5, #25
 8014884:	bf98      	it	ls
 8014886:	3220      	addls	r2, #32
 8014888:	42a2      	cmp	r2, r4
 801488a:	d0f0      	beq.n	801486e <__match+0x6>
 801488c:	2000      	movs	r0, #0
 801488e:	e7f3      	b.n	8014878 <__match+0x10>

08014890 <__hexnan>:
 8014890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014894:	680b      	ldr	r3, [r1, #0]
 8014896:	115e      	asrs	r6, r3, #5
 8014898:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801489c:	f013 031f 	ands.w	r3, r3, #31
 80148a0:	b087      	sub	sp, #28
 80148a2:	bf18      	it	ne
 80148a4:	3604      	addne	r6, #4
 80148a6:	2500      	movs	r5, #0
 80148a8:	1f37      	subs	r7, r6, #4
 80148aa:	4690      	mov	r8, r2
 80148ac:	6802      	ldr	r2, [r0, #0]
 80148ae:	9301      	str	r3, [sp, #4]
 80148b0:	4682      	mov	sl, r0
 80148b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80148b6:	46b9      	mov	r9, r7
 80148b8:	463c      	mov	r4, r7
 80148ba:	9502      	str	r5, [sp, #8]
 80148bc:	46ab      	mov	fp, r5
 80148be:	7851      	ldrb	r1, [r2, #1]
 80148c0:	1c53      	adds	r3, r2, #1
 80148c2:	9303      	str	r3, [sp, #12]
 80148c4:	b341      	cbz	r1, 8014918 <__hexnan+0x88>
 80148c6:	4608      	mov	r0, r1
 80148c8:	9205      	str	r2, [sp, #20]
 80148ca:	9104      	str	r1, [sp, #16]
 80148cc:	f7ff fd5e 	bl	801438c <__hexdig_fun>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	d14f      	bne.n	8014974 <__hexnan+0xe4>
 80148d4:	9904      	ldr	r1, [sp, #16]
 80148d6:	9a05      	ldr	r2, [sp, #20]
 80148d8:	2920      	cmp	r1, #32
 80148da:	d818      	bhi.n	801490e <__hexnan+0x7e>
 80148dc:	9b02      	ldr	r3, [sp, #8]
 80148de:	459b      	cmp	fp, r3
 80148e0:	dd13      	ble.n	801490a <__hexnan+0x7a>
 80148e2:	454c      	cmp	r4, r9
 80148e4:	d206      	bcs.n	80148f4 <__hexnan+0x64>
 80148e6:	2d07      	cmp	r5, #7
 80148e8:	dc04      	bgt.n	80148f4 <__hexnan+0x64>
 80148ea:	462a      	mov	r2, r5
 80148ec:	4649      	mov	r1, r9
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7ff ffa8 	bl	8014844 <L_shift>
 80148f4:	4544      	cmp	r4, r8
 80148f6:	d950      	bls.n	801499a <__hexnan+0x10a>
 80148f8:	2300      	movs	r3, #0
 80148fa:	f1a4 0904 	sub.w	r9, r4, #4
 80148fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8014902:	f8cd b008 	str.w	fp, [sp, #8]
 8014906:	464c      	mov	r4, r9
 8014908:	461d      	mov	r5, r3
 801490a:	9a03      	ldr	r2, [sp, #12]
 801490c:	e7d7      	b.n	80148be <__hexnan+0x2e>
 801490e:	2929      	cmp	r1, #41	; 0x29
 8014910:	d156      	bne.n	80149c0 <__hexnan+0x130>
 8014912:	3202      	adds	r2, #2
 8014914:	f8ca 2000 	str.w	r2, [sl]
 8014918:	f1bb 0f00 	cmp.w	fp, #0
 801491c:	d050      	beq.n	80149c0 <__hexnan+0x130>
 801491e:	454c      	cmp	r4, r9
 8014920:	d206      	bcs.n	8014930 <__hexnan+0xa0>
 8014922:	2d07      	cmp	r5, #7
 8014924:	dc04      	bgt.n	8014930 <__hexnan+0xa0>
 8014926:	462a      	mov	r2, r5
 8014928:	4649      	mov	r1, r9
 801492a:	4620      	mov	r0, r4
 801492c:	f7ff ff8a 	bl	8014844 <L_shift>
 8014930:	4544      	cmp	r4, r8
 8014932:	d934      	bls.n	801499e <__hexnan+0x10e>
 8014934:	f1a8 0204 	sub.w	r2, r8, #4
 8014938:	4623      	mov	r3, r4
 801493a:	f853 1b04 	ldr.w	r1, [r3], #4
 801493e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014942:	429f      	cmp	r7, r3
 8014944:	d2f9      	bcs.n	801493a <__hexnan+0xaa>
 8014946:	1b3b      	subs	r3, r7, r4
 8014948:	f023 0303 	bic.w	r3, r3, #3
 801494c:	3304      	adds	r3, #4
 801494e:	3401      	adds	r4, #1
 8014950:	3e03      	subs	r6, #3
 8014952:	42b4      	cmp	r4, r6
 8014954:	bf88      	it	hi
 8014956:	2304      	movhi	r3, #4
 8014958:	4443      	add	r3, r8
 801495a:	2200      	movs	r2, #0
 801495c:	f843 2b04 	str.w	r2, [r3], #4
 8014960:	429f      	cmp	r7, r3
 8014962:	d2fb      	bcs.n	801495c <__hexnan+0xcc>
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	b91b      	cbnz	r3, 8014970 <__hexnan+0xe0>
 8014968:	4547      	cmp	r7, r8
 801496a:	d127      	bne.n	80149bc <__hexnan+0x12c>
 801496c:	2301      	movs	r3, #1
 801496e:	603b      	str	r3, [r7, #0]
 8014970:	2005      	movs	r0, #5
 8014972:	e026      	b.n	80149c2 <__hexnan+0x132>
 8014974:	3501      	adds	r5, #1
 8014976:	2d08      	cmp	r5, #8
 8014978:	f10b 0b01 	add.w	fp, fp, #1
 801497c:	dd06      	ble.n	801498c <__hexnan+0xfc>
 801497e:	4544      	cmp	r4, r8
 8014980:	d9c3      	bls.n	801490a <__hexnan+0x7a>
 8014982:	2300      	movs	r3, #0
 8014984:	f844 3c04 	str.w	r3, [r4, #-4]
 8014988:	2501      	movs	r5, #1
 801498a:	3c04      	subs	r4, #4
 801498c:	6822      	ldr	r2, [r4, #0]
 801498e:	f000 000f 	and.w	r0, r0, #15
 8014992:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014996:	6022      	str	r2, [r4, #0]
 8014998:	e7b7      	b.n	801490a <__hexnan+0x7a>
 801499a:	2508      	movs	r5, #8
 801499c:	e7b5      	b.n	801490a <__hexnan+0x7a>
 801499e:	9b01      	ldr	r3, [sp, #4]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d0df      	beq.n	8014964 <__hexnan+0xd4>
 80149a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149a8:	f1c3 0320 	rsb	r3, r3, #32
 80149ac:	fa22 f303 	lsr.w	r3, r2, r3
 80149b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80149b4:	401a      	ands	r2, r3
 80149b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80149ba:	e7d3      	b.n	8014964 <__hexnan+0xd4>
 80149bc:	3f04      	subs	r7, #4
 80149be:	e7d1      	b.n	8014964 <__hexnan+0xd4>
 80149c0:	2004      	movs	r0, #4
 80149c2:	b007      	add	sp, #28
 80149c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149c8 <_localeconv_r>:
 80149c8:	4800      	ldr	r0, [pc, #0]	; (80149cc <_localeconv_r+0x4>)
 80149ca:	4770      	bx	lr
 80149cc:	20000168 	.word	0x20000168

080149d0 <_lseek_r>:
 80149d0:	b538      	push	{r3, r4, r5, lr}
 80149d2:	4d07      	ldr	r5, [pc, #28]	; (80149f0 <_lseek_r+0x20>)
 80149d4:	4604      	mov	r4, r0
 80149d6:	4608      	mov	r0, r1
 80149d8:	4611      	mov	r1, r2
 80149da:	2200      	movs	r2, #0
 80149dc:	602a      	str	r2, [r5, #0]
 80149de:	461a      	mov	r2, r3
 80149e0:	f7ed fb8a 	bl	80020f8 <_lseek>
 80149e4:	1c43      	adds	r3, r0, #1
 80149e6:	d102      	bne.n	80149ee <_lseek_r+0x1e>
 80149e8:	682b      	ldr	r3, [r5, #0]
 80149ea:	b103      	cbz	r3, 80149ee <_lseek_r+0x1e>
 80149ec:	6023      	str	r3, [r4, #0]
 80149ee:	bd38      	pop	{r3, r4, r5, pc}
 80149f0:	20002700 	.word	0x20002700

080149f4 <malloc>:
 80149f4:	4b02      	ldr	r3, [pc, #8]	; (8014a00 <malloc+0xc>)
 80149f6:	4601      	mov	r1, r0
 80149f8:	6818      	ldr	r0, [r3, #0]
 80149fa:	f7fc be61 	b.w	80116c0 <_malloc_r>
 80149fe:	bf00      	nop
 8014a00:	20000010 	.word	0x20000010

08014a04 <__ascii_mbtowc>:
 8014a04:	b082      	sub	sp, #8
 8014a06:	b901      	cbnz	r1, 8014a0a <__ascii_mbtowc+0x6>
 8014a08:	a901      	add	r1, sp, #4
 8014a0a:	b142      	cbz	r2, 8014a1e <__ascii_mbtowc+0x1a>
 8014a0c:	b14b      	cbz	r3, 8014a22 <__ascii_mbtowc+0x1e>
 8014a0e:	7813      	ldrb	r3, [r2, #0]
 8014a10:	600b      	str	r3, [r1, #0]
 8014a12:	7812      	ldrb	r2, [r2, #0]
 8014a14:	1e10      	subs	r0, r2, #0
 8014a16:	bf18      	it	ne
 8014a18:	2001      	movne	r0, #1
 8014a1a:	b002      	add	sp, #8
 8014a1c:	4770      	bx	lr
 8014a1e:	4610      	mov	r0, r2
 8014a20:	e7fb      	b.n	8014a1a <__ascii_mbtowc+0x16>
 8014a22:	f06f 0001 	mvn.w	r0, #1
 8014a26:	e7f8      	b.n	8014a1a <__ascii_mbtowc+0x16>

08014a28 <__malloc_lock>:
 8014a28:	4801      	ldr	r0, [pc, #4]	; (8014a30 <__malloc_lock+0x8>)
 8014a2a:	f7fc be10 	b.w	801164e <__retarget_lock_acquire_recursive>
 8014a2e:	bf00      	nop
 8014a30:	200026f4 	.word	0x200026f4

08014a34 <__malloc_unlock>:
 8014a34:	4801      	ldr	r0, [pc, #4]	; (8014a3c <__malloc_unlock+0x8>)
 8014a36:	f7fc be0b 	b.w	8011650 <__retarget_lock_release_recursive>
 8014a3a:	bf00      	nop
 8014a3c:	200026f4 	.word	0x200026f4

08014a40 <_Balloc>:
 8014a40:	b570      	push	{r4, r5, r6, lr}
 8014a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014a44:	4604      	mov	r4, r0
 8014a46:	460d      	mov	r5, r1
 8014a48:	b976      	cbnz	r6, 8014a68 <_Balloc+0x28>
 8014a4a:	2010      	movs	r0, #16
 8014a4c:	f7ff ffd2 	bl	80149f4 <malloc>
 8014a50:	4602      	mov	r2, r0
 8014a52:	6260      	str	r0, [r4, #36]	; 0x24
 8014a54:	b920      	cbnz	r0, 8014a60 <_Balloc+0x20>
 8014a56:	4b18      	ldr	r3, [pc, #96]	; (8014ab8 <_Balloc+0x78>)
 8014a58:	4818      	ldr	r0, [pc, #96]	; (8014abc <_Balloc+0x7c>)
 8014a5a:	2166      	movs	r1, #102	; 0x66
 8014a5c:	f000 feae 	bl	80157bc <__assert_func>
 8014a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a64:	6006      	str	r6, [r0, #0]
 8014a66:	60c6      	str	r6, [r0, #12]
 8014a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014a6a:	68f3      	ldr	r3, [r6, #12]
 8014a6c:	b183      	cbz	r3, 8014a90 <_Balloc+0x50>
 8014a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014a76:	b9b8      	cbnz	r0, 8014aa8 <_Balloc+0x68>
 8014a78:	2101      	movs	r1, #1
 8014a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8014a7e:	1d72      	adds	r2, r6, #5
 8014a80:	0092      	lsls	r2, r2, #2
 8014a82:	4620      	mov	r0, r4
 8014a84:	f000 fc9d 	bl	80153c2 <_calloc_r>
 8014a88:	b160      	cbz	r0, 8014aa4 <_Balloc+0x64>
 8014a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014a8e:	e00e      	b.n	8014aae <_Balloc+0x6e>
 8014a90:	2221      	movs	r2, #33	; 0x21
 8014a92:	2104      	movs	r1, #4
 8014a94:	4620      	mov	r0, r4
 8014a96:	f000 fc94 	bl	80153c2 <_calloc_r>
 8014a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a9c:	60f0      	str	r0, [r6, #12]
 8014a9e:	68db      	ldr	r3, [r3, #12]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d1e4      	bne.n	8014a6e <_Balloc+0x2e>
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	bd70      	pop	{r4, r5, r6, pc}
 8014aa8:	6802      	ldr	r2, [r0, #0]
 8014aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ab4:	e7f7      	b.n	8014aa6 <_Balloc+0x66>
 8014ab6:	bf00      	nop
 8014ab8:	080162d6 	.word	0x080162d6
 8014abc:	080163d4 	.word	0x080163d4

08014ac0 <_Bfree>:
 8014ac0:	b570      	push	{r4, r5, r6, lr}
 8014ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	460c      	mov	r4, r1
 8014ac8:	b976      	cbnz	r6, 8014ae8 <_Bfree+0x28>
 8014aca:	2010      	movs	r0, #16
 8014acc:	f7ff ff92 	bl	80149f4 <malloc>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8014ad4:	b920      	cbnz	r0, 8014ae0 <_Bfree+0x20>
 8014ad6:	4b09      	ldr	r3, [pc, #36]	; (8014afc <_Bfree+0x3c>)
 8014ad8:	4809      	ldr	r0, [pc, #36]	; (8014b00 <_Bfree+0x40>)
 8014ada:	218a      	movs	r1, #138	; 0x8a
 8014adc:	f000 fe6e 	bl	80157bc <__assert_func>
 8014ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ae4:	6006      	str	r6, [r0, #0]
 8014ae6:	60c6      	str	r6, [r0, #12]
 8014ae8:	b13c      	cbz	r4, 8014afa <_Bfree+0x3a>
 8014aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014aec:	6862      	ldr	r2, [r4, #4]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014af4:	6021      	str	r1, [r4, #0]
 8014af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014afa:	bd70      	pop	{r4, r5, r6, pc}
 8014afc:	080162d6 	.word	0x080162d6
 8014b00:	080163d4 	.word	0x080163d4

08014b04 <__multadd>:
 8014b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b08:	690d      	ldr	r5, [r1, #16]
 8014b0a:	4607      	mov	r7, r0
 8014b0c:	460c      	mov	r4, r1
 8014b0e:	461e      	mov	r6, r3
 8014b10:	f101 0c14 	add.w	ip, r1, #20
 8014b14:	2000      	movs	r0, #0
 8014b16:	f8dc 3000 	ldr.w	r3, [ip]
 8014b1a:	b299      	uxth	r1, r3
 8014b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8014b20:	0c1e      	lsrs	r6, r3, #16
 8014b22:	0c0b      	lsrs	r3, r1, #16
 8014b24:	fb02 3306 	mla	r3, r2, r6, r3
 8014b28:	b289      	uxth	r1, r1
 8014b2a:	3001      	adds	r0, #1
 8014b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014b30:	4285      	cmp	r5, r0
 8014b32:	f84c 1b04 	str.w	r1, [ip], #4
 8014b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014b3a:	dcec      	bgt.n	8014b16 <__multadd+0x12>
 8014b3c:	b30e      	cbz	r6, 8014b82 <__multadd+0x7e>
 8014b3e:	68a3      	ldr	r3, [r4, #8]
 8014b40:	42ab      	cmp	r3, r5
 8014b42:	dc19      	bgt.n	8014b78 <__multadd+0x74>
 8014b44:	6861      	ldr	r1, [r4, #4]
 8014b46:	4638      	mov	r0, r7
 8014b48:	3101      	adds	r1, #1
 8014b4a:	f7ff ff79 	bl	8014a40 <_Balloc>
 8014b4e:	4680      	mov	r8, r0
 8014b50:	b928      	cbnz	r0, 8014b5e <__multadd+0x5a>
 8014b52:	4602      	mov	r2, r0
 8014b54:	4b0c      	ldr	r3, [pc, #48]	; (8014b88 <__multadd+0x84>)
 8014b56:	480d      	ldr	r0, [pc, #52]	; (8014b8c <__multadd+0x88>)
 8014b58:	21b5      	movs	r1, #181	; 0xb5
 8014b5a:	f000 fe2f 	bl	80157bc <__assert_func>
 8014b5e:	6922      	ldr	r2, [r4, #16]
 8014b60:	3202      	adds	r2, #2
 8014b62:	f104 010c 	add.w	r1, r4, #12
 8014b66:	0092      	lsls	r2, r2, #2
 8014b68:	300c      	adds	r0, #12
 8014b6a:	f7fc fd72 	bl	8011652 <memcpy>
 8014b6e:	4621      	mov	r1, r4
 8014b70:	4638      	mov	r0, r7
 8014b72:	f7ff ffa5 	bl	8014ac0 <_Bfree>
 8014b76:	4644      	mov	r4, r8
 8014b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014b7c:	3501      	adds	r5, #1
 8014b7e:	615e      	str	r6, [r3, #20]
 8014b80:	6125      	str	r5, [r4, #16]
 8014b82:	4620      	mov	r0, r4
 8014b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b88:	08016348 	.word	0x08016348
 8014b8c:	080163d4 	.word	0x080163d4

08014b90 <__s2b>:
 8014b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b94:	460c      	mov	r4, r1
 8014b96:	4615      	mov	r5, r2
 8014b98:	461f      	mov	r7, r3
 8014b9a:	2209      	movs	r2, #9
 8014b9c:	3308      	adds	r3, #8
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	db09      	blt.n	8014bc0 <__s2b+0x30>
 8014bac:	4630      	mov	r0, r6
 8014bae:	f7ff ff47 	bl	8014a40 <_Balloc>
 8014bb2:	b940      	cbnz	r0, 8014bc6 <__s2b+0x36>
 8014bb4:	4602      	mov	r2, r0
 8014bb6:	4b19      	ldr	r3, [pc, #100]	; (8014c1c <__s2b+0x8c>)
 8014bb8:	4819      	ldr	r0, [pc, #100]	; (8014c20 <__s2b+0x90>)
 8014bba:	21ce      	movs	r1, #206	; 0xce
 8014bbc:	f000 fdfe 	bl	80157bc <__assert_func>
 8014bc0:	0052      	lsls	r2, r2, #1
 8014bc2:	3101      	adds	r1, #1
 8014bc4:	e7f0      	b.n	8014ba8 <__s2b+0x18>
 8014bc6:	9b08      	ldr	r3, [sp, #32]
 8014bc8:	6143      	str	r3, [r0, #20]
 8014bca:	2d09      	cmp	r5, #9
 8014bcc:	f04f 0301 	mov.w	r3, #1
 8014bd0:	6103      	str	r3, [r0, #16]
 8014bd2:	dd16      	ble.n	8014c02 <__s2b+0x72>
 8014bd4:	f104 0909 	add.w	r9, r4, #9
 8014bd8:	46c8      	mov	r8, r9
 8014bda:	442c      	add	r4, r5
 8014bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014be0:	4601      	mov	r1, r0
 8014be2:	3b30      	subs	r3, #48	; 0x30
 8014be4:	220a      	movs	r2, #10
 8014be6:	4630      	mov	r0, r6
 8014be8:	f7ff ff8c 	bl	8014b04 <__multadd>
 8014bec:	45a0      	cmp	r8, r4
 8014bee:	d1f5      	bne.n	8014bdc <__s2b+0x4c>
 8014bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8014bf4:	444c      	add	r4, r9
 8014bf6:	1b2d      	subs	r5, r5, r4
 8014bf8:	1963      	adds	r3, r4, r5
 8014bfa:	42bb      	cmp	r3, r7
 8014bfc:	db04      	blt.n	8014c08 <__s2b+0x78>
 8014bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c02:	340a      	adds	r4, #10
 8014c04:	2509      	movs	r5, #9
 8014c06:	e7f6      	b.n	8014bf6 <__s2b+0x66>
 8014c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c0c:	4601      	mov	r1, r0
 8014c0e:	3b30      	subs	r3, #48	; 0x30
 8014c10:	220a      	movs	r2, #10
 8014c12:	4630      	mov	r0, r6
 8014c14:	f7ff ff76 	bl	8014b04 <__multadd>
 8014c18:	e7ee      	b.n	8014bf8 <__s2b+0x68>
 8014c1a:	bf00      	nop
 8014c1c:	08016348 	.word	0x08016348
 8014c20:	080163d4 	.word	0x080163d4

08014c24 <__hi0bits>:
 8014c24:	0c03      	lsrs	r3, r0, #16
 8014c26:	041b      	lsls	r3, r3, #16
 8014c28:	b9d3      	cbnz	r3, 8014c60 <__hi0bits+0x3c>
 8014c2a:	0400      	lsls	r0, r0, #16
 8014c2c:	2310      	movs	r3, #16
 8014c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014c32:	bf04      	itt	eq
 8014c34:	0200      	lsleq	r0, r0, #8
 8014c36:	3308      	addeq	r3, #8
 8014c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014c3c:	bf04      	itt	eq
 8014c3e:	0100      	lsleq	r0, r0, #4
 8014c40:	3304      	addeq	r3, #4
 8014c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014c46:	bf04      	itt	eq
 8014c48:	0080      	lsleq	r0, r0, #2
 8014c4a:	3302      	addeq	r3, #2
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	db05      	blt.n	8014c5c <__hi0bits+0x38>
 8014c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014c54:	f103 0301 	add.w	r3, r3, #1
 8014c58:	bf08      	it	eq
 8014c5a:	2320      	moveq	r3, #32
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	4770      	bx	lr
 8014c60:	2300      	movs	r3, #0
 8014c62:	e7e4      	b.n	8014c2e <__hi0bits+0xa>

08014c64 <__lo0bits>:
 8014c64:	6803      	ldr	r3, [r0, #0]
 8014c66:	f013 0207 	ands.w	r2, r3, #7
 8014c6a:	4601      	mov	r1, r0
 8014c6c:	d00b      	beq.n	8014c86 <__lo0bits+0x22>
 8014c6e:	07da      	lsls	r2, r3, #31
 8014c70:	d423      	bmi.n	8014cba <__lo0bits+0x56>
 8014c72:	0798      	lsls	r0, r3, #30
 8014c74:	bf49      	itett	mi
 8014c76:	085b      	lsrmi	r3, r3, #1
 8014c78:	089b      	lsrpl	r3, r3, #2
 8014c7a:	2001      	movmi	r0, #1
 8014c7c:	600b      	strmi	r3, [r1, #0]
 8014c7e:	bf5c      	itt	pl
 8014c80:	600b      	strpl	r3, [r1, #0]
 8014c82:	2002      	movpl	r0, #2
 8014c84:	4770      	bx	lr
 8014c86:	b298      	uxth	r0, r3
 8014c88:	b9a8      	cbnz	r0, 8014cb6 <__lo0bits+0x52>
 8014c8a:	0c1b      	lsrs	r3, r3, #16
 8014c8c:	2010      	movs	r0, #16
 8014c8e:	b2da      	uxtb	r2, r3
 8014c90:	b90a      	cbnz	r2, 8014c96 <__lo0bits+0x32>
 8014c92:	3008      	adds	r0, #8
 8014c94:	0a1b      	lsrs	r3, r3, #8
 8014c96:	071a      	lsls	r2, r3, #28
 8014c98:	bf04      	itt	eq
 8014c9a:	091b      	lsreq	r3, r3, #4
 8014c9c:	3004      	addeq	r0, #4
 8014c9e:	079a      	lsls	r2, r3, #30
 8014ca0:	bf04      	itt	eq
 8014ca2:	089b      	lsreq	r3, r3, #2
 8014ca4:	3002      	addeq	r0, #2
 8014ca6:	07da      	lsls	r2, r3, #31
 8014ca8:	d403      	bmi.n	8014cb2 <__lo0bits+0x4e>
 8014caa:	085b      	lsrs	r3, r3, #1
 8014cac:	f100 0001 	add.w	r0, r0, #1
 8014cb0:	d005      	beq.n	8014cbe <__lo0bits+0x5a>
 8014cb2:	600b      	str	r3, [r1, #0]
 8014cb4:	4770      	bx	lr
 8014cb6:	4610      	mov	r0, r2
 8014cb8:	e7e9      	b.n	8014c8e <__lo0bits+0x2a>
 8014cba:	2000      	movs	r0, #0
 8014cbc:	4770      	bx	lr
 8014cbe:	2020      	movs	r0, #32
 8014cc0:	4770      	bx	lr
	...

08014cc4 <__i2b>:
 8014cc4:	b510      	push	{r4, lr}
 8014cc6:	460c      	mov	r4, r1
 8014cc8:	2101      	movs	r1, #1
 8014cca:	f7ff feb9 	bl	8014a40 <_Balloc>
 8014cce:	4602      	mov	r2, r0
 8014cd0:	b928      	cbnz	r0, 8014cde <__i2b+0x1a>
 8014cd2:	4b05      	ldr	r3, [pc, #20]	; (8014ce8 <__i2b+0x24>)
 8014cd4:	4805      	ldr	r0, [pc, #20]	; (8014cec <__i2b+0x28>)
 8014cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014cda:	f000 fd6f 	bl	80157bc <__assert_func>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	6144      	str	r4, [r0, #20]
 8014ce2:	6103      	str	r3, [r0, #16]
 8014ce4:	bd10      	pop	{r4, pc}
 8014ce6:	bf00      	nop
 8014ce8:	08016348 	.word	0x08016348
 8014cec:	080163d4 	.word	0x080163d4

08014cf0 <__multiply>:
 8014cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf4:	4691      	mov	r9, r2
 8014cf6:	690a      	ldr	r2, [r1, #16]
 8014cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	bfb8      	it	lt
 8014d00:	460b      	movlt	r3, r1
 8014d02:	460c      	mov	r4, r1
 8014d04:	bfbc      	itt	lt
 8014d06:	464c      	movlt	r4, r9
 8014d08:	4699      	movlt	r9, r3
 8014d0a:	6927      	ldr	r7, [r4, #16]
 8014d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014d10:	68a3      	ldr	r3, [r4, #8]
 8014d12:	6861      	ldr	r1, [r4, #4]
 8014d14:	eb07 060a 	add.w	r6, r7, sl
 8014d18:	42b3      	cmp	r3, r6
 8014d1a:	b085      	sub	sp, #20
 8014d1c:	bfb8      	it	lt
 8014d1e:	3101      	addlt	r1, #1
 8014d20:	f7ff fe8e 	bl	8014a40 <_Balloc>
 8014d24:	b930      	cbnz	r0, 8014d34 <__multiply+0x44>
 8014d26:	4602      	mov	r2, r0
 8014d28:	4b44      	ldr	r3, [pc, #272]	; (8014e3c <__multiply+0x14c>)
 8014d2a:	4845      	ldr	r0, [pc, #276]	; (8014e40 <__multiply+0x150>)
 8014d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8014d30:	f000 fd44 	bl	80157bc <__assert_func>
 8014d34:	f100 0514 	add.w	r5, r0, #20
 8014d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014d3c:	462b      	mov	r3, r5
 8014d3e:	2200      	movs	r2, #0
 8014d40:	4543      	cmp	r3, r8
 8014d42:	d321      	bcc.n	8014d88 <__multiply+0x98>
 8014d44:	f104 0314 	add.w	r3, r4, #20
 8014d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014d4c:	f109 0314 	add.w	r3, r9, #20
 8014d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014d54:	9202      	str	r2, [sp, #8]
 8014d56:	1b3a      	subs	r2, r7, r4
 8014d58:	3a15      	subs	r2, #21
 8014d5a:	f022 0203 	bic.w	r2, r2, #3
 8014d5e:	3204      	adds	r2, #4
 8014d60:	f104 0115 	add.w	r1, r4, #21
 8014d64:	428f      	cmp	r7, r1
 8014d66:	bf38      	it	cc
 8014d68:	2204      	movcc	r2, #4
 8014d6a:	9201      	str	r2, [sp, #4]
 8014d6c:	9a02      	ldr	r2, [sp, #8]
 8014d6e:	9303      	str	r3, [sp, #12]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d80c      	bhi.n	8014d8e <__multiply+0x9e>
 8014d74:	2e00      	cmp	r6, #0
 8014d76:	dd03      	ble.n	8014d80 <__multiply+0x90>
 8014d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d05a      	beq.n	8014e36 <__multiply+0x146>
 8014d80:	6106      	str	r6, [r0, #16]
 8014d82:	b005      	add	sp, #20
 8014d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d88:	f843 2b04 	str.w	r2, [r3], #4
 8014d8c:	e7d8      	b.n	8014d40 <__multiply+0x50>
 8014d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014d92:	f1ba 0f00 	cmp.w	sl, #0
 8014d96:	d024      	beq.n	8014de2 <__multiply+0xf2>
 8014d98:	f104 0e14 	add.w	lr, r4, #20
 8014d9c:	46a9      	mov	r9, r5
 8014d9e:	f04f 0c00 	mov.w	ip, #0
 8014da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014da6:	f8d9 1000 	ldr.w	r1, [r9]
 8014daa:	fa1f fb82 	uxth.w	fp, r2
 8014dae:	b289      	uxth	r1, r1
 8014db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8014db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014db8:	f8d9 2000 	ldr.w	r2, [r9]
 8014dbc:	4461      	add	r1, ip
 8014dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8014dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014dca:	b289      	uxth	r1, r1
 8014dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014dd0:	4577      	cmp	r7, lr
 8014dd2:	f849 1b04 	str.w	r1, [r9], #4
 8014dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014dda:	d8e2      	bhi.n	8014da2 <__multiply+0xb2>
 8014ddc:	9a01      	ldr	r2, [sp, #4]
 8014dde:	f845 c002 	str.w	ip, [r5, r2]
 8014de2:	9a03      	ldr	r2, [sp, #12]
 8014de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014de8:	3304      	adds	r3, #4
 8014dea:	f1b9 0f00 	cmp.w	r9, #0
 8014dee:	d020      	beq.n	8014e32 <__multiply+0x142>
 8014df0:	6829      	ldr	r1, [r5, #0]
 8014df2:	f104 0c14 	add.w	ip, r4, #20
 8014df6:	46ae      	mov	lr, r5
 8014df8:	f04f 0a00 	mov.w	sl, #0
 8014dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8014e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014e04:	fb09 220b 	mla	r2, r9, fp, r2
 8014e08:	4492      	add	sl, r2
 8014e0a:	b289      	uxth	r1, r1
 8014e0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014e10:	f84e 1b04 	str.w	r1, [lr], #4
 8014e14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014e18:	f8be 1000 	ldrh.w	r1, [lr]
 8014e1c:	0c12      	lsrs	r2, r2, #16
 8014e1e:	fb09 1102 	mla	r1, r9, r2, r1
 8014e22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014e26:	4567      	cmp	r7, ip
 8014e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e2c:	d8e6      	bhi.n	8014dfc <__multiply+0x10c>
 8014e2e:	9a01      	ldr	r2, [sp, #4]
 8014e30:	50a9      	str	r1, [r5, r2]
 8014e32:	3504      	adds	r5, #4
 8014e34:	e79a      	b.n	8014d6c <__multiply+0x7c>
 8014e36:	3e01      	subs	r6, #1
 8014e38:	e79c      	b.n	8014d74 <__multiply+0x84>
 8014e3a:	bf00      	nop
 8014e3c:	08016348 	.word	0x08016348
 8014e40:	080163d4 	.word	0x080163d4

08014e44 <__pow5mult>:
 8014e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e48:	4615      	mov	r5, r2
 8014e4a:	f012 0203 	ands.w	r2, r2, #3
 8014e4e:	4606      	mov	r6, r0
 8014e50:	460f      	mov	r7, r1
 8014e52:	d007      	beq.n	8014e64 <__pow5mult+0x20>
 8014e54:	4c25      	ldr	r4, [pc, #148]	; (8014eec <__pow5mult+0xa8>)
 8014e56:	3a01      	subs	r2, #1
 8014e58:	2300      	movs	r3, #0
 8014e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014e5e:	f7ff fe51 	bl	8014b04 <__multadd>
 8014e62:	4607      	mov	r7, r0
 8014e64:	10ad      	asrs	r5, r5, #2
 8014e66:	d03d      	beq.n	8014ee4 <__pow5mult+0xa0>
 8014e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014e6a:	b97c      	cbnz	r4, 8014e8c <__pow5mult+0x48>
 8014e6c:	2010      	movs	r0, #16
 8014e6e:	f7ff fdc1 	bl	80149f4 <malloc>
 8014e72:	4602      	mov	r2, r0
 8014e74:	6270      	str	r0, [r6, #36]	; 0x24
 8014e76:	b928      	cbnz	r0, 8014e84 <__pow5mult+0x40>
 8014e78:	4b1d      	ldr	r3, [pc, #116]	; (8014ef0 <__pow5mult+0xac>)
 8014e7a:	481e      	ldr	r0, [pc, #120]	; (8014ef4 <__pow5mult+0xb0>)
 8014e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014e80:	f000 fc9c 	bl	80157bc <__assert_func>
 8014e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014e88:	6004      	str	r4, [r0, #0]
 8014e8a:	60c4      	str	r4, [r0, #12]
 8014e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014e94:	b94c      	cbnz	r4, 8014eaa <__pow5mult+0x66>
 8014e96:	f240 2171 	movw	r1, #625	; 0x271
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f7ff ff12 	bl	8014cc4 <__i2b>
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8014ea6:	4604      	mov	r4, r0
 8014ea8:	6003      	str	r3, [r0, #0]
 8014eaa:	f04f 0900 	mov.w	r9, #0
 8014eae:	07eb      	lsls	r3, r5, #31
 8014eb0:	d50a      	bpl.n	8014ec8 <__pow5mult+0x84>
 8014eb2:	4639      	mov	r1, r7
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f7ff ff1a 	bl	8014cf0 <__multiply>
 8014ebc:	4639      	mov	r1, r7
 8014ebe:	4680      	mov	r8, r0
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	f7ff fdfd 	bl	8014ac0 <_Bfree>
 8014ec6:	4647      	mov	r7, r8
 8014ec8:	106d      	asrs	r5, r5, #1
 8014eca:	d00b      	beq.n	8014ee4 <__pow5mult+0xa0>
 8014ecc:	6820      	ldr	r0, [r4, #0]
 8014ece:	b938      	cbnz	r0, 8014ee0 <__pow5mult+0x9c>
 8014ed0:	4622      	mov	r2, r4
 8014ed2:	4621      	mov	r1, r4
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f7ff ff0b 	bl	8014cf0 <__multiply>
 8014eda:	6020      	str	r0, [r4, #0]
 8014edc:	f8c0 9000 	str.w	r9, [r0]
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	e7e4      	b.n	8014eae <__pow5mult+0x6a>
 8014ee4:	4638      	mov	r0, r7
 8014ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eea:	bf00      	nop
 8014eec:	08016520 	.word	0x08016520
 8014ef0:	080162d6 	.word	0x080162d6
 8014ef4:	080163d4 	.word	0x080163d4

08014ef8 <__lshift>:
 8014ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014efc:	460c      	mov	r4, r1
 8014efe:	6849      	ldr	r1, [r1, #4]
 8014f00:	6923      	ldr	r3, [r4, #16]
 8014f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f06:	68a3      	ldr	r3, [r4, #8]
 8014f08:	4607      	mov	r7, r0
 8014f0a:	4691      	mov	r9, r2
 8014f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f10:	f108 0601 	add.w	r6, r8, #1
 8014f14:	42b3      	cmp	r3, r6
 8014f16:	db0b      	blt.n	8014f30 <__lshift+0x38>
 8014f18:	4638      	mov	r0, r7
 8014f1a:	f7ff fd91 	bl	8014a40 <_Balloc>
 8014f1e:	4605      	mov	r5, r0
 8014f20:	b948      	cbnz	r0, 8014f36 <__lshift+0x3e>
 8014f22:	4602      	mov	r2, r0
 8014f24:	4b2a      	ldr	r3, [pc, #168]	; (8014fd0 <__lshift+0xd8>)
 8014f26:	482b      	ldr	r0, [pc, #172]	; (8014fd4 <__lshift+0xdc>)
 8014f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014f2c:	f000 fc46 	bl	80157bc <__assert_func>
 8014f30:	3101      	adds	r1, #1
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	e7ee      	b.n	8014f14 <__lshift+0x1c>
 8014f36:	2300      	movs	r3, #0
 8014f38:	f100 0114 	add.w	r1, r0, #20
 8014f3c:	f100 0210 	add.w	r2, r0, #16
 8014f40:	4618      	mov	r0, r3
 8014f42:	4553      	cmp	r3, sl
 8014f44:	db37      	blt.n	8014fb6 <__lshift+0xbe>
 8014f46:	6920      	ldr	r0, [r4, #16]
 8014f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014f4c:	f104 0314 	add.w	r3, r4, #20
 8014f50:	f019 091f 	ands.w	r9, r9, #31
 8014f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014f5c:	d02f      	beq.n	8014fbe <__lshift+0xc6>
 8014f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8014f62:	468a      	mov	sl, r1
 8014f64:	f04f 0c00 	mov.w	ip, #0
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	fa02 f209 	lsl.w	r2, r2, r9
 8014f6e:	ea42 020c 	orr.w	r2, r2, ip
 8014f72:	f84a 2b04 	str.w	r2, [sl], #4
 8014f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f7a:	4298      	cmp	r0, r3
 8014f7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014f80:	d8f2      	bhi.n	8014f68 <__lshift+0x70>
 8014f82:	1b03      	subs	r3, r0, r4
 8014f84:	3b15      	subs	r3, #21
 8014f86:	f023 0303 	bic.w	r3, r3, #3
 8014f8a:	3304      	adds	r3, #4
 8014f8c:	f104 0215 	add.w	r2, r4, #21
 8014f90:	4290      	cmp	r0, r2
 8014f92:	bf38      	it	cc
 8014f94:	2304      	movcc	r3, #4
 8014f96:	f841 c003 	str.w	ip, [r1, r3]
 8014f9a:	f1bc 0f00 	cmp.w	ip, #0
 8014f9e:	d001      	beq.n	8014fa4 <__lshift+0xac>
 8014fa0:	f108 0602 	add.w	r6, r8, #2
 8014fa4:	3e01      	subs	r6, #1
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	612e      	str	r6, [r5, #16]
 8014faa:	4621      	mov	r1, r4
 8014fac:	f7ff fd88 	bl	8014ac0 <_Bfree>
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8014fba:	3301      	adds	r3, #1
 8014fbc:	e7c1      	b.n	8014f42 <__lshift+0x4a>
 8014fbe:	3904      	subs	r1, #4
 8014fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8014fc8:	4298      	cmp	r0, r3
 8014fca:	d8f9      	bhi.n	8014fc0 <__lshift+0xc8>
 8014fcc:	e7ea      	b.n	8014fa4 <__lshift+0xac>
 8014fce:	bf00      	nop
 8014fd0:	08016348 	.word	0x08016348
 8014fd4:	080163d4 	.word	0x080163d4

08014fd8 <__mcmp>:
 8014fd8:	b530      	push	{r4, r5, lr}
 8014fda:	6902      	ldr	r2, [r0, #16]
 8014fdc:	690c      	ldr	r4, [r1, #16]
 8014fde:	1b12      	subs	r2, r2, r4
 8014fe0:	d10e      	bne.n	8015000 <__mcmp+0x28>
 8014fe2:	f100 0314 	add.w	r3, r0, #20
 8014fe6:	3114      	adds	r1, #20
 8014fe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014fec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014ff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014ff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014ff8:	42a5      	cmp	r5, r4
 8014ffa:	d003      	beq.n	8015004 <__mcmp+0x2c>
 8014ffc:	d305      	bcc.n	801500a <__mcmp+0x32>
 8014ffe:	2201      	movs	r2, #1
 8015000:	4610      	mov	r0, r2
 8015002:	bd30      	pop	{r4, r5, pc}
 8015004:	4283      	cmp	r3, r0
 8015006:	d3f3      	bcc.n	8014ff0 <__mcmp+0x18>
 8015008:	e7fa      	b.n	8015000 <__mcmp+0x28>
 801500a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801500e:	e7f7      	b.n	8015000 <__mcmp+0x28>

08015010 <__mdiff>:
 8015010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015014:	460c      	mov	r4, r1
 8015016:	4606      	mov	r6, r0
 8015018:	4611      	mov	r1, r2
 801501a:	4620      	mov	r0, r4
 801501c:	4690      	mov	r8, r2
 801501e:	f7ff ffdb 	bl	8014fd8 <__mcmp>
 8015022:	1e05      	subs	r5, r0, #0
 8015024:	d110      	bne.n	8015048 <__mdiff+0x38>
 8015026:	4629      	mov	r1, r5
 8015028:	4630      	mov	r0, r6
 801502a:	f7ff fd09 	bl	8014a40 <_Balloc>
 801502e:	b930      	cbnz	r0, 801503e <__mdiff+0x2e>
 8015030:	4b3a      	ldr	r3, [pc, #232]	; (801511c <__mdiff+0x10c>)
 8015032:	4602      	mov	r2, r0
 8015034:	f240 2132 	movw	r1, #562	; 0x232
 8015038:	4839      	ldr	r0, [pc, #228]	; (8015120 <__mdiff+0x110>)
 801503a:	f000 fbbf 	bl	80157bc <__assert_func>
 801503e:	2301      	movs	r3, #1
 8015040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015048:	bfa4      	itt	ge
 801504a:	4643      	movge	r3, r8
 801504c:	46a0      	movge	r8, r4
 801504e:	4630      	mov	r0, r6
 8015050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015054:	bfa6      	itte	ge
 8015056:	461c      	movge	r4, r3
 8015058:	2500      	movge	r5, #0
 801505a:	2501      	movlt	r5, #1
 801505c:	f7ff fcf0 	bl	8014a40 <_Balloc>
 8015060:	b920      	cbnz	r0, 801506c <__mdiff+0x5c>
 8015062:	4b2e      	ldr	r3, [pc, #184]	; (801511c <__mdiff+0x10c>)
 8015064:	4602      	mov	r2, r0
 8015066:	f44f 7110 	mov.w	r1, #576	; 0x240
 801506a:	e7e5      	b.n	8015038 <__mdiff+0x28>
 801506c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015070:	6926      	ldr	r6, [r4, #16]
 8015072:	60c5      	str	r5, [r0, #12]
 8015074:	f104 0914 	add.w	r9, r4, #20
 8015078:	f108 0514 	add.w	r5, r8, #20
 801507c:	f100 0e14 	add.w	lr, r0, #20
 8015080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015088:	f108 0210 	add.w	r2, r8, #16
 801508c:	46f2      	mov	sl, lr
 801508e:	2100      	movs	r1, #0
 8015090:	f859 3b04 	ldr.w	r3, [r9], #4
 8015094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015098:	fa1f f883 	uxth.w	r8, r3
 801509c:	fa11 f18b 	uxtah	r1, r1, fp
 80150a0:	0c1b      	lsrs	r3, r3, #16
 80150a2:	eba1 0808 	sub.w	r8, r1, r8
 80150a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80150aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80150ae:	fa1f f888 	uxth.w	r8, r8
 80150b2:	1419      	asrs	r1, r3, #16
 80150b4:	454e      	cmp	r6, r9
 80150b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80150ba:	f84a 3b04 	str.w	r3, [sl], #4
 80150be:	d8e7      	bhi.n	8015090 <__mdiff+0x80>
 80150c0:	1b33      	subs	r3, r6, r4
 80150c2:	3b15      	subs	r3, #21
 80150c4:	f023 0303 	bic.w	r3, r3, #3
 80150c8:	3304      	adds	r3, #4
 80150ca:	3415      	adds	r4, #21
 80150cc:	42a6      	cmp	r6, r4
 80150ce:	bf38      	it	cc
 80150d0:	2304      	movcc	r3, #4
 80150d2:	441d      	add	r5, r3
 80150d4:	4473      	add	r3, lr
 80150d6:	469e      	mov	lr, r3
 80150d8:	462e      	mov	r6, r5
 80150da:	4566      	cmp	r6, ip
 80150dc:	d30e      	bcc.n	80150fc <__mdiff+0xec>
 80150de:	f10c 0203 	add.w	r2, ip, #3
 80150e2:	1b52      	subs	r2, r2, r5
 80150e4:	f022 0203 	bic.w	r2, r2, #3
 80150e8:	3d03      	subs	r5, #3
 80150ea:	45ac      	cmp	ip, r5
 80150ec:	bf38      	it	cc
 80150ee:	2200      	movcc	r2, #0
 80150f0:	441a      	add	r2, r3
 80150f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80150f6:	b17b      	cbz	r3, 8015118 <__mdiff+0x108>
 80150f8:	6107      	str	r7, [r0, #16]
 80150fa:	e7a3      	b.n	8015044 <__mdiff+0x34>
 80150fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8015100:	fa11 f288 	uxtah	r2, r1, r8
 8015104:	1414      	asrs	r4, r2, #16
 8015106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801510a:	b292      	uxth	r2, r2
 801510c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015110:	f84e 2b04 	str.w	r2, [lr], #4
 8015114:	1421      	asrs	r1, r4, #16
 8015116:	e7e0      	b.n	80150da <__mdiff+0xca>
 8015118:	3f01      	subs	r7, #1
 801511a:	e7ea      	b.n	80150f2 <__mdiff+0xe2>
 801511c:	08016348 	.word	0x08016348
 8015120:	080163d4 	.word	0x080163d4

08015124 <__ulp>:
 8015124:	b082      	sub	sp, #8
 8015126:	ed8d 0b00 	vstr	d0, [sp]
 801512a:	9b01      	ldr	r3, [sp, #4]
 801512c:	4912      	ldr	r1, [pc, #72]	; (8015178 <__ulp+0x54>)
 801512e:	4019      	ands	r1, r3
 8015130:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015134:	2900      	cmp	r1, #0
 8015136:	dd05      	ble.n	8015144 <__ulp+0x20>
 8015138:	2200      	movs	r2, #0
 801513a:	460b      	mov	r3, r1
 801513c:	ec43 2b10 	vmov	d0, r2, r3
 8015140:	b002      	add	sp, #8
 8015142:	4770      	bx	lr
 8015144:	4249      	negs	r1, r1
 8015146:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801514a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801514e:	f04f 0200 	mov.w	r2, #0
 8015152:	f04f 0300 	mov.w	r3, #0
 8015156:	da04      	bge.n	8015162 <__ulp+0x3e>
 8015158:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801515c:	fa41 f300 	asr.w	r3, r1, r0
 8015160:	e7ec      	b.n	801513c <__ulp+0x18>
 8015162:	f1a0 0114 	sub.w	r1, r0, #20
 8015166:	291e      	cmp	r1, #30
 8015168:	bfda      	itte	le
 801516a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801516e:	fa20 f101 	lsrle.w	r1, r0, r1
 8015172:	2101      	movgt	r1, #1
 8015174:	460a      	mov	r2, r1
 8015176:	e7e1      	b.n	801513c <__ulp+0x18>
 8015178:	7ff00000 	.word	0x7ff00000

0801517c <__b2d>:
 801517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517e:	6905      	ldr	r5, [r0, #16]
 8015180:	f100 0714 	add.w	r7, r0, #20
 8015184:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015188:	1f2e      	subs	r6, r5, #4
 801518a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801518e:	4620      	mov	r0, r4
 8015190:	f7ff fd48 	bl	8014c24 <__hi0bits>
 8015194:	f1c0 0320 	rsb	r3, r0, #32
 8015198:	280a      	cmp	r0, #10
 801519a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015218 <__b2d+0x9c>
 801519e:	600b      	str	r3, [r1, #0]
 80151a0:	dc14      	bgt.n	80151cc <__b2d+0x50>
 80151a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80151a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80151aa:	42b7      	cmp	r7, r6
 80151ac:	ea41 030c 	orr.w	r3, r1, ip
 80151b0:	bf34      	ite	cc
 80151b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80151b6:	2100      	movcs	r1, #0
 80151b8:	3015      	adds	r0, #21
 80151ba:	fa04 f000 	lsl.w	r0, r4, r0
 80151be:	fa21 f10e 	lsr.w	r1, r1, lr
 80151c2:	ea40 0201 	orr.w	r2, r0, r1
 80151c6:	ec43 2b10 	vmov	d0, r2, r3
 80151ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151cc:	42b7      	cmp	r7, r6
 80151ce:	bf3a      	itte	cc
 80151d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80151d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80151d8:	2100      	movcs	r1, #0
 80151da:	380b      	subs	r0, #11
 80151dc:	d017      	beq.n	801520e <__b2d+0x92>
 80151de:	f1c0 0c20 	rsb	ip, r0, #32
 80151e2:	fa04 f500 	lsl.w	r5, r4, r0
 80151e6:	42be      	cmp	r6, r7
 80151e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80151ec:	ea45 0504 	orr.w	r5, r5, r4
 80151f0:	bf8c      	ite	hi
 80151f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80151f6:	2400      	movls	r4, #0
 80151f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80151fc:	fa01 f000 	lsl.w	r0, r1, r0
 8015200:	fa24 f40c 	lsr.w	r4, r4, ip
 8015204:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015208:	ea40 0204 	orr.w	r2, r0, r4
 801520c:	e7db      	b.n	80151c6 <__b2d+0x4a>
 801520e:	ea44 030c 	orr.w	r3, r4, ip
 8015212:	460a      	mov	r2, r1
 8015214:	e7d7      	b.n	80151c6 <__b2d+0x4a>
 8015216:	bf00      	nop
 8015218:	3ff00000 	.word	0x3ff00000

0801521c <__d2b>:
 801521c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015220:	4689      	mov	r9, r1
 8015222:	2101      	movs	r1, #1
 8015224:	ec57 6b10 	vmov	r6, r7, d0
 8015228:	4690      	mov	r8, r2
 801522a:	f7ff fc09 	bl	8014a40 <_Balloc>
 801522e:	4604      	mov	r4, r0
 8015230:	b930      	cbnz	r0, 8015240 <__d2b+0x24>
 8015232:	4602      	mov	r2, r0
 8015234:	4b25      	ldr	r3, [pc, #148]	; (80152cc <__d2b+0xb0>)
 8015236:	4826      	ldr	r0, [pc, #152]	; (80152d0 <__d2b+0xb4>)
 8015238:	f240 310a 	movw	r1, #778	; 0x30a
 801523c:	f000 fabe 	bl	80157bc <__assert_func>
 8015240:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015248:	bb35      	cbnz	r5, 8015298 <__d2b+0x7c>
 801524a:	2e00      	cmp	r6, #0
 801524c:	9301      	str	r3, [sp, #4]
 801524e:	d028      	beq.n	80152a2 <__d2b+0x86>
 8015250:	4668      	mov	r0, sp
 8015252:	9600      	str	r6, [sp, #0]
 8015254:	f7ff fd06 	bl	8014c64 <__lo0bits>
 8015258:	9900      	ldr	r1, [sp, #0]
 801525a:	b300      	cbz	r0, 801529e <__d2b+0x82>
 801525c:	9a01      	ldr	r2, [sp, #4]
 801525e:	f1c0 0320 	rsb	r3, r0, #32
 8015262:	fa02 f303 	lsl.w	r3, r2, r3
 8015266:	430b      	orrs	r3, r1
 8015268:	40c2      	lsrs	r2, r0
 801526a:	6163      	str	r3, [r4, #20]
 801526c:	9201      	str	r2, [sp, #4]
 801526e:	9b01      	ldr	r3, [sp, #4]
 8015270:	61a3      	str	r3, [r4, #24]
 8015272:	2b00      	cmp	r3, #0
 8015274:	bf14      	ite	ne
 8015276:	2202      	movne	r2, #2
 8015278:	2201      	moveq	r2, #1
 801527a:	6122      	str	r2, [r4, #16]
 801527c:	b1d5      	cbz	r5, 80152b4 <__d2b+0x98>
 801527e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015282:	4405      	add	r5, r0
 8015284:	f8c9 5000 	str.w	r5, [r9]
 8015288:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801528c:	f8c8 0000 	str.w	r0, [r8]
 8015290:	4620      	mov	r0, r4
 8015292:	b003      	add	sp, #12
 8015294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801529c:	e7d5      	b.n	801524a <__d2b+0x2e>
 801529e:	6161      	str	r1, [r4, #20]
 80152a0:	e7e5      	b.n	801526e <__d2b+0x52>
 80152a2:	a801      	add	r0, sp, #4
 80152a4:	f7ff fcde 	bl	8014c64 <__lo0bits>
 80152a8:	9b01      	ldr	r3, [sp, #4]
 80152aa:	6163      	str	r3, [r4, #20]
 80152ac:	2201      	movs	r2, #1
 80152ae:	6122      	str	r2, [r4, #16]
 80152b0:	3020      	adds	r0, #32
 80152b2:	e7e3      	b.n	801527c <__d2b+0x60>
 80152b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80152b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80152bc:	f8c9 0000 	str.w	r0, [r9]
 80152c0:	6918      	ldr	r0, [r3, #16]
 80152c2:	f7ff fcaf 	bl	8014c24 <__hi0bits>
 80152c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80152ca:	e7df      	b.n	801528c <__d2b+0x70>
 80152cc:	08016348 	.word	0x08016348
 80152d0:	080163d4 	.word	0x080163d4

080152d4 <__ratio>:
 80152d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	4688      	mov	r8, r1
 80152da:	4669      	mov	r1, sp
 80152dc:	4681      	mov	r9, r0
 80152de:	f7ff ff4d 	bl	801517c <__b2d>
 80152e2:	a901      	add	r1, sp, #4
 80152e4:	4640      	mov	r0, r8
 80152e6:	ec55 4b10 	vmov	r4, r5, d0
 80152ea:	f7ff ff47 	bl	801517c <__b2d>
 80152ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80152f6:	eba3 0c02 	sub.w	ip, r3, r2
 80152fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80152fe:	1a9b      	subs	r3, r3, r2
 8015300:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015304:	ec51 0b10 	vmov	r0, r1, d0
 8015308:	2b00      	cmp	r3, #0
 801530a:	bfd6      	itet	le
 801530c:	460a      	movle	r2, r1
 801530e:	462a      	movgt	r2, r5
 8015310:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015314:	468b      	mov	fp, r1
 8015316:	462f      	mov	r7, r5
 8015318:	bfd4      	ite	le
 801531a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801531e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015322:	4620      	mov	r0, r4
 8015324:	ee10 2a10 	vmov	r2, s0
 8015328:	465b      	mov	r3, fp
 801532a:	4639      	mov	r1, r7
 801532c:	f7eb faa6 	bl	800087c <__aeabi_ddiv>
 8015330:	ec41 0b10 	vmov	d0, r0, r1
 8015334:	b003      	add	sp, #12
 8015336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801533a <__copybits>:
 801533a:	3901      	subs	r1, #1
 801533c:	b570      	push	{r4, r5, r6, lr}
 801533e:	1149      	asrs	r1, r1, #5
 8015340:	6914      	ldr	r4, [r2, #16]
 8015342:	3101      	adds	r1, #1
 8015344:	f102 0314 	add.w	r3, r2, #20
 8015348:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801534c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015350:	1f05      	subs	r5, r0, #4
 8015352:	42a3      	cmp	r3, r4
 8015354:	d30c      	bcc.n	8015370 <__copybits+0x36>
 8015356:	1aa3      	subs	r3, r4, r2
 8015358:	3b11      	subs	r3, #17
 801535a:	f023 0303 	bic.w	r3, r3, #3
 801535e:	3211      	adds	r2, #17
 8015360:	42a2      	cmp	r2, r4
 8015362:	bf88      	it	hi
 8015364:	2300      	movhi	r3, #0
 8015366:	4418      	add	r0, r3
 8015368:	2300      	movs	r3, #0
 801536a:	4288      	cmp	r0, r1
 801536c:	d305      	bcc.n	801537a <__copybits+0x40>
 801536e:	bd70      	pop	{r4, r5, r6, pc}
 8015370:	f853 6b04 	ldr.w	r6, [r3], #4
 8015374:	f845 6f04 	str.w	r6, [r5, #4]!
 8015378:	e7eb      	b.n	8015352 <__copybits+0x18>
 801537a:	f840 3b04 	str.w	r3, [r0], #4
 801537e:	e7f4      	b.n	801536a <__copybits+0x30>

08015380 <__any_on>:
 8015380:	f100 0214 	add.w	r2, r0, #20
 8015384:	6900      	ldr	r0, [r0, #16]
 8015386:	114b      	asrs	r3, r1, #5
 8015388:	4298      	cmp	r0, r3
 801538a:	b510      	push	{r4, lr}
 801538c:	db11      	blt.n	80153b2 <__any_on+0x32>
 801538e:	dd0a      	ble.n	80153a6 <__any_on+0x26>
 8015390:	f011 011f 	ands.w	r1, r1, #31
 8015394:	d007      	beq.n	80153a6 <__any_on+0x26>
 8015396:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801539a:	fa24 f001 	lsr.w	r0, r4, r1
 801539e:	fa00 f101 	lsl.w	r1, r0, r1
 80153a2:	428c      	cmp	r4, r1
 80153a4:	d10b      	bne.n	80153be <__any_on+0x3e>
 80153a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d803      	bhi.n	80153b6 <__any_on+0x36>
 80153ae:	2000      	movs	r0, #0
 80153b0:	bd10      	pop	{r4, pc}
 80153b2:	4603      	mov	r3, r0
 80153b4:	e7f7      	b.n	80153a6 <__any_on+0x26>
 80153b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80153ba:	2900      	cmp	r1, #0
 80153bc:	d0f5      	beq.n	80153aa <__any_on+0x2a>
 80153be:	2001      	movs	r0, #1
 80153c0:	e7f6      	b.n	80153b0 <__any_on+0x30>

080153c2 <_calloc_r>:
 80153c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153c4:	fba1 2402 	umull	r2, r4, r1, r2
 80153c8:	b94c      	cbnz	r4, 80153de <_calloc_r+0x1c>
 80153ca:	4611      	mov	r1, r2
 80153cc:	9201      	str	r2, [sp, #4]
 80153ce:	f7fc f977 	bl	80116c0 <_malloc_r>
 80153d2:	9a01      	ldr	r2, [sp, #4]
 80153d4:	4605      	mov	r5, r0
 80153d6:	b930      	cbnz	r0, 80153e6 <_calloc_r+0x24>
 80153d8:	4628      	mov	r0, r5
 80153da:	b003      	add	sp, #12
 80153dc:	bd30      	pop	{r4, r5, pc}
 80153de:	220c      	movs	r2, #12
 80153e0:	6002      	str	r2, [r0, #0]
 80153e2:	2500      	movs	r5, #0
 80153e4:	e7f8      	b.n	80153d8 <_calloc_r+0x16>
 80153e6:	4621      	mov	r1, r4
 80153e8:	f7fc f941 	bl	801166e <memset>
 80153ec:	e7f4      	b.n	80153d8 <_calloc_r+0x16>
	...

080153f0 <_free_r>:
 80153f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153f2:	2900      	cmp	r1, #0
 80153f4:	d044      	beq.n	8015480 <_free_r+0x90>
 80153f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153fa:	9001      	str	r0, [sp, #4]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	f1a1 0404 	sub.w	r4, r1, #4
 8015402:	bfb8      	it	lt
 8015404:	18e4      	addlt	r4, r4, r3
 8015406:	f7ff fb0f 	bl	8014a28 <__malloc_lock>
 801540a:	4a1e      	ldr	r2, [pc, #120]	; (8015484 <_free_r+0x94>)
 801540c:	9801      	ldr	r0, [sp, #4]
 801540e:	6813      	ldr	r3, [r2, #0]
 8015410:	b933      	cbnz	r3, 8015420 <_free_r+0x30>
 8015412:	6063      	str	r3, [r4, #4]
 8015414:	6014      	str	r4, [r2, #0]
 8015416:	b003      	add	sp, #12
 8015418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801541c:	f7ff bb0a 	b.w	8014a34 <__malloc_unlock>
 8015420:	42a3      	cmp	r3, r4
 8015422:	d908      	bls.n	8015436 <_free_r+0x46>
 8015424:	6825      	ldr	r5, [r4, #0]
 8015426:	1961      	adds	r1, r4, r5
 8015428:	428b      	cmp	r3, r1
 801542a:	bf01      	itttt	eq
 801542c:	6819      	ldreq	r1, [r3, #0]
 801542e:	685b      	ldreq	r3, [r3, #4]
 8015430:	1949      	addeq	r1, r1, r5
 8015432:	6021      	streq	r1, [r4, #0]
 8015434:	e7ed      	b.n	8015412 <_free_r+0x22>
 8015436:	461a      	mov	r2, r3
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	b10b      	cbz	r3, 8015440 <_free_r+0x50>
 801543c:	42a3      	cmp	r3, r4
 801543e:	d9fa      	bls.n	8015436 <_free_r+0x46>
 8015440:	6811      	ldr	r1, [r2, #0]
 8015442:	1855      	adds	r5, r2, r1
 8015444:	42a5      	cmp	r5, r4
 8015446:	d10b      	bne.n	8015460 <_free_r+0x70>
 8015448:	6824      	ldr	r4, [r4, #0]
 801544a:	4421      	add	r1, r4
 801544c:	1854      	adds	r4, r2, r1
 801544e:	42a3      	cmp	r3, r4
 8015450:	6011      	str	r1, [r2, #0]
 8015452:	d1e0      	bne.n	8015416 <_free_r+0x26>
 8015454:	681c      	ldr	r4, [r3, #0]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	6053      	str	r3, [r2, #4]
 801545a:	4421      	add	r1, r4
 801545c:	6011      	str	r1, [r2, #0]
 801545e:	e7da      	b.n	8015416 <_free_r+0x26>
 8015460:	d902      	bls.n	8015468 <_free_r+0x78>
 8015462:	230c      	movs	r3, #12
 8015464:	6003      	str	r3, [r0, #0]
 8015466:	e7d6      	b.n	8015416 <_free_r+0x26>
 8015468:	6825      	ldr	r5, [r4, #0]
 801546a:	1961      	adds	r1, r4, r5
 801546c:	428b      	cmp	r3, r1
 801546e:	bf04      	itt	eq
 8015470:	6819      	ldreq	r1, [r3, #0]
 8015472:	685b      	ldreq	r3, [r3, #4]
 8015474:	6063      	str	r3, [r4, #4]
 8015476:	bf04      	itt	eq
 8015478:	1949      	addeq	r1, r1, r5
 801547a:	6021      	streq	r1, [r4, #0]
 801547c:	6054      	str	r4, [r2, #4]
 801547e:	e7ca      	b.n	8015416 <_free_r+0x26>
 8015480:	b003      	add	sp, #12
 8015482:	bd30      	pop	{r4, r5, pc}
 8015484:	200026f8 	.word	0x200026f8

08015488 <__ssputs_r>:
 8015488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801548c:	688e      	ldr	r6, [r1, #8]
 801548e:	429e      	cmp	r6, r3
 8015490:	4682      	mov	sl, r0
 8015492:	460c      	mov	r4, r1
 8015494:	4690      	mov	r8, r2
 8015496:	461f      	mov	r7, r3
 8015498:	d838      	bhi.n	801550c <__ssputs_r+0x84>
 801549a:	898a      	ldrh	r2, [r1, #12]
 801549c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154a0:	d032      	beq.n	8015508 <__ssputs_r+0x80>
 80154a2:	6825      	ldr	r5, [r4, #0]
 80154a4:	6909      	ldr	r1, [r1, #16]
 80154a6:	eba5 0901 	sub.w	r9, r5, r1
 80154aa:	6965      	ldr	r5, [r4, #20]
 80154ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80154b4:	3301      	adds	r3, #1
 80154b6:	444b      	add	r3, r9
 80154b8:	106d      	asrs	r5, r5, #1
 80154ba:	429d      	cmp	r5, r3
 80154bc:	bf38      	it	cc
 80154be:	461d      	movcc	r5, r3
 80154c0:	0553      	lsls	r3, r2, #21
 80154c2:	d531      	bpl.n	8015528 <__ssputs_r+0xa0>
 80154c4:	4629      	mov	r1, r5
 80154c6:	f7fc f8fb 	bl	80116c0 <_malloc_r>
 80154ca:	4606      	mov	r6, r0
 80154cc:	b950      	cbnz	r0, 80154e4 <__ssputs_r+0x5c>
 80154ce:	230c      	movs	r3, #12
 80154d0:	f8ca 3000 	str.w	r3, [sl]
 80154d4:	89a3      	ldrh	r3, [r4, #12]
 80154d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154da:	81a3      	strh	r3, [r4, #12]
 80154dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154e4:	6921      	ldr	r1, [r4, #16]
 80154e6:	464a      	mov	r2, r9
 80154e8:	f7fc f8b3 	bl	8011652 <memcpy>
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80154f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154f6:	81a3      	strh	r3, [r4, #12]
 80154f8:	6126      	str	r6, [r4, #16]
 80154fa:	6165      	str	r5, [r4, #20]
 80154fc:	444e      	add	r6, r9
 80154fe:	eba5 0509 	sub.w	r5, r5, r9
 8015502:	6026      	str	r6, [r4, #0]
 8015504:	60a5      	str	r5, [r4, #8]
 8015506:	463e      	mov	r6, r7
 8015508:	42be      	cmp	r6, r7
 801550a:	d900      	bls.n	801550e <__ssputs_r+0x86>
 801550c:	463e      	mov	r6, r7
 801550e:	6820      	ldr	r0, [r4, #0]
 8015510:	4632      	mov	r2, r6
 8015512:	4641      	mov	r1, r8
 8015514:	f000 f982 	bl	801581c <memmove>
 8015518:	68a3      	ldr	r3, [r4, #8]
 801551a:	1b9b      	subs	r3, r3, r6
 801551c:	60a3      	str	r3, [r4, #8]
 801551e:	6823      	ldr	r3, [r4, #0]
 8015520:	4433      	add	r3, r6
 8015522:	6023      	str	r3, [r4, #0]
 8015524:	2000      	movs	r0, #0
 8015526:	e7db      	b.n	80154e0 <__ssputs_r+0x58>
 8015528:	462a      	mov	r2, r5
 801552a:	f000 f991 	bl	8015850 <_realloc_r>
 801552e:	4606      	mov	r6, r0
 8015530:	2800      	cmp	r0, #0
 8015532:	d1e1      	bne.n	80154f8 <__ssputs_r+0x70>
 8015534:	6921      	ldr	r1, [r4, #16]
 8015536:	4650      	mov	r0, sl
 8015538:	f7ff ff5a 	bl	80153f0 <_free_r>
 801553c:	e7c7      	b.n	80154ce <__ssputs_r+0x46>
	...

08015540 <_svfiprintf_r>:
 8015540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015544:	4698      	mov	r8, r3
 8015546:	898b      	ldrh	r3, [r1, #12]
 8015548:	061b      	lsls	r3, r3, #24
 801554a:	b09d      	sub	sp, #116	; 0x74
 801554c:	4607      	mov	r7, r0
 801554e:	460d      	mov	r5, r1
 8015550:	4614      	mov	r4, r2
 8015552:	d50e      	bpl.n	8015572 <_svfiprintf_r+0x32>
 8015554:	690b      	ldr	r3, [r1, #16]
 8015556:	b963      	cbnz	r3, 8015572 <_svfiprintf_r+0x32>
 8015558:	2140      	movs	r1, #64	; 0x40
 801555a:	f7fc f8b1 	bl	80116c0 <_malloc_r>
 801555e:	6028      	str	r0, [r5, #0]
 8015560:	6128      	str	r0, [r5, #16]
 8015562:	b920      	cbnz	r0, 801556e <_svfiprintf_r+0x2e>
 8015564:	230c      	movs	r3, #12
 8015566:	603b      	str	r3, [r7, #0]
 8015568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801556c:	e0d1      	b.n	8015712 <_svfiprintf_r+0x1d2>
 801556e:	2340      	movs	r3, #64	; 0x40
 8015570:	616b      	str	r3, [r5, #20]
 8015572:	2300      	movs	r3, #0
 8015574:	9309      	str	r3, [sp, #36]	; 0x24
 8015576:	2320      	movs	r3, #32
 8015578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801557c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015580:	2330      	movs	r3, #48	; 0x30
 8015582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801572c <_svfiprintf_r+0x1ec>
 8015586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801558a:	f04f 0901 	mov.w	r9, #1
 801558e:	4623      	mov	r3, r4
 8015590:	469a      	mov	sl, r3
 8015592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015596:	b10a      	cbz	r2, 801559c <_svfiprintf_r+0x5c>
 8015598:	2a25      	cmp	r2, #37	; 0x25
 801559a:	d1f9      	bne.n	8015590 <_svfiprintf_r+0x50>
 801559c:	ebba 0b04 	subs.w	fp, sl, r4
 80155a0:	d00b      	beq.n	80155ba <_svfiprintf_r+0x7a>
 80155a2:	465b      	mov	r3, fp
 80155a4:	4622      	mov	r2, r4
 80155a6:	4629      	mov	r1, r5
 80155a8:	4638      	mov	r0, r7
 80155aa:	f7ff ff6d 	bl	8015488 <__ssputs_r>
 80155ae:	3001      	adds	r0, #1
 80155b0:	f000 80aa 	beq.w	8015708 <_svfiprintf_r+0x1c8>
 80155b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155b6:	445a      	add	r2, fp
 80155b8:	9209      	str	r2, [sp, #36]	; 0x24
 80155ba:	f89a 3000 	ldrb.w	r3, [sl]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	f000 80a2 	beq.w	8015708 <_svfiprintf_r+0x1c8>
 80155c4:	2300      	movs	r3, #0
 80155c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155ce:	f10a 0a01 	add.w	sl, sl, #1
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	9307      	str	r3, [sp, #28]
 80155d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155da:	931a      	str	r3, [sp, #104]	; 0x68
 80155dc:	4654      	mov	r4, sl
 80155de:	2205      	movs	r2, #5
 80155e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e4:	4851      	ldr	r0, [pc, #324]	; (801572c <_svfiprintf_r+0x1ec>)
 80155e6:	f7ea fe13 	bl	8000210 <memchr>
 80155ea:	9a04      	ldr	r2, [sp, #16]
 80155ec:	b9d8      	cbnz	r0, 8015626 <_svfiprintf_r+0xe6>
 80155ee:	06d0      	lsls	r0, r2, #27
 80155f0:	bf44      	itt	mi
 80155f2:	2320      	movmi	r3, #32
 80155f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155f8:	0711      	lsls	r1, r2, #28
 80155fa:	bf44      	itt	mi
 80155fc:	232b      	movmi	r3, #43	; 0x2b
 80155fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015602:	f89a 3000 	ldrb.w	r3, [sl]
 8015606:	2b2a      	cmp	r3, #42	; 0x2a
 8015608:	d015      	beq.n	8015636 <_svfiprintf_r+0xf6>
 801560a:	9a07      	ldr	r2, [sp, #28]
 801560c:	4654      	mov	r4, sl
 801560e:	2000      	movs	r0, #0
 8015610:	f04f 0c0a 	mov.w	ip, #10
 8015614:	4621      	mov	r1, r4
 8015616:	f811 3b01 	ldrb.w	r3, [r1], #1
 801561a:	3b30      	subs	r3, #48	; 0x30
 801561c:	2b09      	cmp	r3, #9
 801561e:	d94e      	bls.n	80156be <_svfiprintf_r+0x17e>
 8015620:	b1b0      	cbz	r0, 8015650 <_svfiprintf_r+0x110>
 8015622:	9207      	str	r2, [sp, #28]
 8015624:	e014      	b.n	8015650 <_svfiprintf_r+0x110>
 8015626:	eba0 0308 	sub.w	r3, r0, r8
 801562a:	fa09 f303 	lsl.w	r3, r9, r3
 801562e:	4313      	orrs	r3, r2
 8015630:	9304      	str	r3, [sp, #16]
 8015632:	46a2      	mov	sl, r4
 8015634:	e7d2      	b.n	80155dc <_svfiprintf_r+0x9c>
 8015636:	9b03      	ldr	r3, [sp, #12]
 8015638:	1d19      	adds	r1, r3, #4
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	9103      	str	r1, [sp, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	bfbb      	ittet	lt
 8015642:	425b      	neglt	r3, r3
 8015644:	f042 0202 	orrlt.w	r2, r2, #2
 8015648:	9307      	strge	r3, [sp, #28]
 801564a:	9307      	strlt	r3, [sp, #28]
 801564c:	bfb8      	it	lt
 801564e:	9204      	strlt	r2, [sp, #16]
 8015650:	7823      	ldrb	r3, [r4, #0]
 8015652:	2b2e      	cmp	r3, #46	; 0x2e
 8015654:	d10c      	bne.n	8015670 <_svfiprintf_r+0x130>
 8015656:	7863      	ldrb	r3, [r4, #1]
 8015658:	2b2a      	cmp	r3, #42	; 0x2a
 801565a:	d135      	bne.n	80156c8 <_svfiprintf_r+0x188>
 801565c:	9b03      	ldr	r3, [sp, #12]
 801565e:	1d1a      	adds	r2, r3, #4
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	9203      	str	r2, [sp, #12]
 8015664:	2b00      	cmp	r3, #0
 8015666:	bfb8      	it	lt
 8015668:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801566c:	3402      	adds	r4, #2
 801566e:	9305      	str	r3, [sp, #20]
 8015670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801573c <_svfiprintf_r+0x1fc>
 8015674:	7821      	ldrb	r1, [r4, #0]
 8015676:	2203      	movs	r2, #3
 8015678:	4650      	mov	r0, sl
 801567a:	f7ea fdc9 	bl	8000210 <memchr>
 801567e:	b140      	cbz	r0, 8015692 <_svfiprintf_r+0x152>
 8015680:	2340      	movs	r3, #64	; 0x40
 8015682:	eba0 000a 	sub.w	r0, r0, sl
 8015686:	fa03 f000 	lsl.w	r0, r3, r0
 801568a:	9b04      	ldr	r3, [sp, #16]
 801568c:	4303      	orrs	r3, r0
 801568e:	3401      	adds	r4, #1
 8015690:	9304      	str	r3, [sp, #16]
 8015692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015696:	4826      	ldr	r0, [pc, #152]	; (8015730 <_svfiprintf_r+0x1f0>)
 8015698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801569c:	2206      	movs	r2, #6
 801569e:	f7ea fdb7 	bl	8000210 <memchr>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d038      	beq.n	8015718 <_svfiprintf_r+0x1d8>
 80156a6:	4b23      	ldr	r3, [pc, #140]	; (8015734 <_svfiprintf_r+0x1f4>)
 80156a8:	bb1b      	cbnz	r3, 80156f2 <_svfiprintf_r+0x1b2>
 80156aa:	9b03      	ldr	r3, [sp, #12]
 80156ac:	3307      	adds	r3, #7
 80156ae:	f023 0307 	bic.w	r3, r3, #7
 80156b2:	3308      	adds	r3, #8
 80156b4:	9303      	str	r3, [sp, #12]
 80156b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156b8:	4433      	add	r3, r6
 80156ba:	9309      	str	r3, [sp, #36]	; 0x24
 80156bc:	e767      	b.n	801558e <_svfiprintf_r+0x4e>
 80156be:	fb0c 3202 	mla	r2, ip, r2, r3
 80156c2:	460c      	mov	r4, r1
 80156c4:	2001      	movs	r0, #1
 80156c6:	e7a5      	b.n	8015614 <_svfiprintf_r+0xd4>
 80156c8:	2300      	movs	r3, #0
 80156ca:	3401      	adds	r4, #1
 80156cc:	9305      	str	r3, [sp, #20]
 80156ce:	4619      	mov	r1, r3
 80156d0:	f04f 0c0a 	mov.w	ip, #10
 80156d4:	4620      	mov	r0, r4
 80156d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156da:	3a30      	subs	r2, #48	; 0x30
 80156dc:	2a09      	cmp	r2, #9
 80156de:	d903      	bls.n	80156e8 <_svfiprintf_r+0x1a8>
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d0c5      	beq.n	8015670 <_svfiprintf_r+0x130>
 80156e4:	9105      	str	r1, [sp, #20]
 80156e6:	e7c3      	b.n	8015670 <_svfiprintf_r+0x130>
 80156e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80156ec:	4604      	mov	r4, r0
 80156ee:	2301      	movs	r3, #1
 80156f0:	e7f0      	b.n	80156d4 <_svfiprintf_r+0x194>
 80156f2:	ab03      	add	r3, sp, #12
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	462a      	mov	r2, r5
 80156f8:	4b0f      	ldr	r3, [pc, #60]	; (8015738 <_svfiprintf_r+0x1f8>)
 80156fa:	a904      	add	r1, sp, #16
 80156fc:	4638      	mov	r0, r7
 80156fe:	f7fc f8f3 	bl	80118e8 <_printf_float>
 8015702:	1c42      	adds	r2, r0, #1
 8015704:	4606      	mov	r6, r0
 8015706:	d1d6      	bne.n	80156b6 <_svfiprintf_r+0x176>
 8015708:	89ab      	ldrh	r3, [r5, #12]
 801570a:	065b      	lsls	r3, r3, #25
 801570c:	f53f af2c 	bmi.w	8015568 <_svfiprintf_r+0x28>
 8015710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015712:	b01d      	add	sp, #116	; 0x74
 8015714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015718:	ab03      	add	r3, sp, #12
 801571a:	9300      	str	r3, [sp, #0]
 801571c:	462a      	mov	r2, r5
 801571e:	4b06      	ldr	r3, [pc, #24]	; (8015738 <_svfiprintf_r+0x1f8>)
 8015720:	a904      	add	r1, sp, #16
 8015722:	4638      	mov	r0, r7
 8015724:	f7fc fb84 	bl	8011e30 <_printf_i>
 8015728:	e7eb      	b.n	8015702 <_svfiprintf_r+0x1c2>
 801572a:	bf00      	nop
 801572c:	0801652c 	.word	0x0801652c
 8015730:	08016536 	.word	0x08016536
 8015734:	080118e9 	.word	0x080118e9
 8015738:	08015489 	.word	0x08015489
 801573c:	08016532 	.word	0x08016532

08015740 <_read_r>:
 8015740:	b538      	push	{r3, r4, r5, lr}
 8015742:	4d07      	ldr	r5, [pc, #28]	; (8015760 <_read_r+0x20>)
 8015744:	4604      	mov	r4, r0
 8015746:	4608      	mov	r0, r1
 8015748:	4611      	mov	r1, r2
 801574a:	2200      	movs	r2, #0
 801574c:	602a      	str	r2, [r5, #0]
 801574e:	461a      	mov	r2, r3
 8015750:	f7ec fc72 	bl	8002038 <_read>
 8015754:	1c43      	adds	r3, r0, #1
 8015756:	d102      	bne.n	801575e <_read_r+0x1e>
 8015758:	682b      	ldr	r3, [r5, #0]
 801575a:	b103      	cbz	r3, 801575e <_read_r+0x1e>
 801575c:	6023      	str	r3, [r4, #0]
 801575e:	bd38      	pop	{r3, r4, r5, pc}
 8015760:	20002700 	.word	0x20002700
 8015764:	00000000 	.word	0x00000000

08015768 <nan>:
 8015768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015770 <nan+0x8>
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	00000000 	.word	0x00000000
 8015774:	7ff80000 	.word	0x7ff80000

08015778 <strncmp>:
 8015778:	b510      	push	{r4, lr}
 801577a:	b17a      	cbz	r2, 801579c <strncmp+0x24>
 801577c:	4603      	mov	r3, r0
 801577e:	3901      	subs	r1, #1
 8015780:	1884      	adds	r4, r0, r2
 8015782:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015786:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801578a:	4290      	cmp	r0, r2
 801578c:	d101      	bne.n	8015792 <strncmp+0x1a>
 801578e:	42a3      	cmp	r3, r4
 8015790:	d101      	bne.n	8015796 <strncmp+0x1e>
 8015792:	1a80      	subs	r0, r0, r2
 8015794:	bd10      	pop	{r4, pc}
 8015796:	2800      	cmp	r0, #0
 8015798:	d1f3      	bne.n	8015782 <strncmp+0xa>
 801579a:	e7fa      	b.n	8015792 <strncmp+0x1a>
 801579c:	4610      	mov	r0, r2
 801579e:	e7f9      	b.n	8015794 <strncmp+0x1c>

080157a0 <__ascii_wctomb>:
 80157a0:	b149      	cbz	r1, 80157b6 <__ascii_wctomb+0x16>
 80157a2:	2aff      	cmp	r2, #255	; 0xff
 80157a4:	bf85      	ittet	hi
 80157a6:	238a      	movhi	r3, #138	; 0x8a
 80157a8:	6003      	strhi	r3, [r0, #0]
 80157aa:	700a      	strbls	r2, [r1, #0]
 80157ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80157b0:	bf98      	it	ls
 80157b2:	2001      	movls	r0, #1
 80157b4:	4770      	bx	lr
 80157b6:	4608      	mov	r0, r1
 80157b8:	4770      	bx	lr
	...

080157bc <__assert_func>:
 80157bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80157be:	4614      	mov	r4, r2
 80157c0:	461a      	mov	r2, r3
 80157c2:	4b09      	ldr	r3, [pc, #36]	; (80157e8 <__assert_func+0x2c>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	4605      	mov	r5, r0
 80157c8:	68d8      	ldr	r0, [r3, #12]
 80157ca:	b14c      	cbz	r4, 80157e0 <__assert_func+0x24>
 80157cc:	4b07      	ldr	r3, [pc, #28]	; (80157ec <__assert_func+0x30>)
 80157ce:	9100      	str	r1, [sp, #0]
 80157d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80157d4:	4906      	ldr	r1, [pc, #24]	; (80157f0 <__assert_func+0x34>)
 80157d6:	462b      	mov	r3, r5
 80157d8:	f000 f80e 	bl	80157f8 <fiprintf>
 80157dc:	f000 fa80 	bl	8015ce0 <abort>
 80157e0:	4b04      	ldr	r3, [pc, #16]	; (80157f4 <__assert_func+0x38>)
 80157e2:	461c      	mov	r4, r3
 80157e4:	e7f3      	b.n	80157ce <__assert_func+0x12>
 80157e6:	bf00      	nop
 80157e8:	20000010 	.word	0x20000010
 80157ec:	0801653d 	.word	0x0801653d
 80157f0:	0801654a 	.word	0x0801654a
 80157f4:	08016578 	.word	0x08016578

080157f8 <fiprintf>:
 80157f8:	b40e      	push	{r1, r2, r3}
 80157fa:	b503      	push	{r0, r1, lr}
 80157fc:	4601      	mov	r1, r0
 80157fe:	ab03      	add	r3, sp, #12
 8015800:	4805      	ldr	r0, [pc, #20]	; (8015818 <fiprintf+0x20>)
 8015802:	f853 2b04 	ldr.w	r2, [r3], #4
 8015806:	6800      	ldr	r0, [r0, #0]
 8015808:	9301      	str	r3, [sp, #4]
 801580a:	f000 f879 	bl	8015900 <_vfiprintf_r>
 801580e:	b002      	add	sp, #8
 8015810:	f85d eb04 	ldr.w	lr, [sp], #4
 8015814:	b003      	add	sp, #12
 8015816:	4770      	bx	lr
 8015818:	20000010 	.word	0x20000010

0801581c <memmove>:
 801581c:	4288      	cmp	r0, r1
 801581e:	b510      	push	{r4, lr}
 8015820:	eb01 0402 	add.w	r4, r1, r2
 8015824:	d902      	bls.n	801582c <memmove+0x10>
 8015826:	4284      	cmp	r4, r0
 8015828:	4623      	mov	r3, r4
 801582a:	d807      	bhi.n	801583c <memmove+0x20>
 801582c:	1e43      	subs	r3, r0, #1
 801582e:	42a1      	cmp	r1, r4
 8015830:	d008      	beq.n	8015844 <memmove+0x28>
 8015832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015836:	f803 2f01 	strb.w	r2, [r3, #1]!
 801583a:	e7f8      	b.n	801582e <memmove+0x12>
 801583c:	4402      	add	r2, r0
 801583e:	4601      	mov	r1, r0
 8015840:	428a      	cmp	r2, r1
 8015842:	d100      	bne.n	8015846 <memmove+0x2a>
 8015844:	bd10      	pop	{r4, pc}
 8015846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801584a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801584e:	e7f7      	b.n	8015840 <memmove+0x24>

08015850 <_realloc_r>:
 8015850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015854:	4680      	mov	r8, r0
 8015856:	4614      	mov	r4, r2
 8015858:	460e      	mov	r6, r1
 801585a:	b921      	cbnz	r1, 8015866 <_realloc_r+0x16>
 801585c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015860:	4611      	mov	r1, r2
 8015862:	f7fb bf2d 	b.w	80116c0 <_malloc_r>
 8015866:	b92a      	cbnz	r2, 8015874 <_realloc_r+0x24>
 8015868:	f7ff fdc2 	bl	80153f0 <_free_r>
 801586c:	4625      	mov	r5, r4
 801586e:	4628      	mov	r0, r5
 8015870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015874:	f000 faa0 	bl	8015db8 <_malloc_usable_size_r>
 8015878:	4284      	cmp	r4, r0
 801587a:	4607      	mov	r7, r0
 801587c:	d802      	bhi.n	8015884 <_realloc_r+0x34>
 801587e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015882:	d812      	bhi.n	80158aa <_realloc_r+0x5a>
 8015884:	4621      	mov	r1, r4
 8015886:	4640      	mov	r0, r8
 8015888:	f7fb ff1a 	bl	80116c0 <_malloc_r>
 801588c:	4605      	mov	r5, r0
 801588e:	2800      	cmp	r0, #0
 8015890:	d0ed      	beq.n	801586e <_realloc_r+0x1e>
 8015892:	42bc      	cmp	r4, r7
 8015894:	4622      	mov	r2, r4
 8015896:	4631      	mov	r1, r6
 8015898:	bf28      	it	cs
 801589a:	463a      	movcs	r2, r7
 801589c:	f7fb fed9 	bl	8011652 <memcpy>
 80158a0:	4631      	mov	r1, r6
 80158a2:	4640      	mov	r0, r8
 80158a4:	f7ff fda4 	bl	80153f0 <_free_r>
 80158a8:	e7e1      	b.n	801586e <_realloc_r+0x1e>
 80158aa:	4635      	mov	r5, r6
 80158ac:	e7df      	b.n	801586e <_realloc_r+0x1e>

080158ae <__sfputc_r>:
 80158ae:	6893      	ldr	r3, [r2, #8]
 80158b0:	3b01      	subs	r3, #1
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	b410      	push	{r4}
 80158b6:	6093      	str	r3, [r2, #8]
 80158b8:	da08      	bge.n	80158cc <__sfputc_r+0x1e>
 80158ba:	6994      	ldr	r4, [r2, #24]
 80158bc:	42a3      	cmp	r3, r4
 80158be:	db01      	blt.n	80158c4 <__sfputc_r+0x16>
 80158c0:	290a      	cmp	r1, #10
 80158c2:	d103      	bne.n	80158cc <__sfputc_r+0x1e>
 80158c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158c8:	f000 b94a 	b.w	8015b60 <__swbuf_r>
 80158cc:	6813      	ldr	r3, [r2, #0]
 80158ce:	1c58      	adds	r0, r3, #1
 80158d0:	6010      	str	r0, [r2, #0]
 80158d2:	7019      	strb	r1, [r3, #0]
 80158d4:	4608      	mov	r0, r1
 80158d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158da:	4770      	bx	lr

080158dc <__sfputs_r>:
 80158dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158de:	4606      	mov	r6, r0
 80158e0:	460f      	mov	r7, r1
 80158e2:	4614      	mov	r4, r2
 80158e4:	18d5      	adds	r5, r2, r3
 80158e6:	42ac      	cmp	r4, r5
 80158e8:	d101      	bne.n	80158ee <__sfputs_r+0x12>
 80158ea:	2000      	movs	r0, #0
 80158ec:	e007      	b.n	80158fe <__sfputs_r+0x22>
 80158ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158f2:	463a      	mov	r2, r7
 80158f4:	4630      	mov	r0, r6
 80158f6:	f7ff ffda 	bl	80158ae <__sfputc_r>
 80158fa:	1c43      	adds	r3, r0, #1
 80158fc:	d1f3      	bne.n	80158e6 <__sfputs_r+0xa>
 80158fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015900 <_vfiprintf_r>:
 8015900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015904:	460d      	mov	r5, r1
 8015906:	b09d      	sub	sp, #116	; 0x74
 8015908:	4614      	mov	r4, r2
 801590a:	4698      	mov	r8, r3
 801590c:	4606      	mov	r6, r0
 801590e:	b118      	cbz	r0, 8015918 <_vfiprintf_r+0x18>
 8015910:	6983      	ldr	r3, [r0, #24]
 8015912:	b90b      	cbnz	r3, 8015918 <_vfiprintf_r+0x18>
 8015914:	f7fb fdd8 	bl	80114c8 <__sinit>
 8015918:	4b89      	ldr	r3, [pc, #548]	; (8015b40 <_vfiprintf_r+0x240>)
 801591a:	429d      	cmp	r5, r3
 801591c:	d11b      	bne.n	8015956 <_vfiprintf_r+0x56>
 801591e:	6875      	ldr	r5, [r6, #4]
 8015920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015922:	07d9      	lsls	r1, r3, #31
 8015924:	d405      	bmi.n	8015932 <_vfiprintf_r+0x32>
 8015926:	89ab      	ldrh	r3, [r5, #12]
 8015928:	059a      	lsls	r2, r3, #22
 801592a:	d402      	bmi.n	8015932 <_vfiprintf_r+0x32>
 801592c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801592e:	f7fb fe8e 	bl	801164e <__retarget_lock_acquire_recursive>
 8015932:	89ab      	ldrh	r3, [r5, #12]
 8015934:	071b      	lsls	r3, r3, #28
 8015936:	d501      	bpl.n	801593c <_vfiprintf_r+0x3c>
 8015938:	692b      	ldr	r3, [r5, #16]
 801593a:	b9eb      	cbnz	r3, 8015978 <_vfiprintf_r+0x78>
 801593c:	4629      	mov	r1, r5
 801593e:	4630      	mov	r0, r6
 8015940:	f000 f960 	bl	8015c04 <__swsetup_r>
 8015944:	b1c0      	cbz	r0, 8015978 <_vfiprintf_r+0x78>
 8015946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015948:	07dc      	lsls	r4, r3, #31
 801594a:	d50e      	bpl.n	801596a <_vfiprintf_r+0x6a>
 801594c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015950:	b01d      	add	sp, #116	; 0x74
 8015952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015956:	4b7b      	ldr	r3, [pc, #492]	; (8015b44 <_vfiprintf_r+0x244>)
 8015958:	429d      	cmp	r5, r3
 801595a:	d101      	bne.n	8015960 <_vfiprintf_r+0x60>
 801595c:	68b5      	ldr	r5, [r6, #8]
 801595e:	e7df      	b.n	8015920 <_vfiprintf_r+0x20>
 8015960:	4b79      	ldr	r3, [pc, #484]	; (8015b48 <_vfiprintf_r+0x248>)
 8015962:	429d      	cmp	r5, r3
 8015964:	bf08      	it	eq
 8015966:	68f5      	ldreq	r5, [r6, #12]
 8015968:	e7da      	b.n	8015920 <_vfiprintf_r+0x20>
 801596a:	89ab      	ldrh	r3, [r5, #12]
 801596c:	0598      	lsls	r0, r3, #22
 801596e:	d4ed      	bmi.n	801594c <_vfiprintf_r+0x4c>
 8015970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015972:	f7fb fe6d 	bl	8011650 <__retarget_lock_release_recursive>
 8015976:	e7e9      	b.n	801594c <_vfiprintf_r+0x4c>
 8015978:	2300      	movs	r3, #0
 801597a:	9309      	str	r3, [sp, #36]	; 0x24
 801597c:	2320      	movs	r3, #32
 801597e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015982:	f8cd 800c 	str.w	r8, [sp, #12]
 8015986:	2330      	movs	r3, #48	; 0x30
 8015988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015b4c <_vfiprintf_r+0x24c>
 801598c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015990:	f04f 0901 	mov.w	r9, #1
 8015994:	4623      	mov	r3, r4
 8015996:	469a      	mov	sl, r3
 8015998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801599c:	b10a      	cbz	r2, 80159a2 <_vfiprintf_r+0xa2>
 801599e:	2a25      	cmp	r2, #37	; 0x25
 80159a0:	d1f9      	bne.n	8015996 <_vfiprintf_r+0x96>
 80159a2:	ebba 0b04 	subs.w	fp, sl, r4
 80159a6:	d00b      	beq.n	80159c0 <_vfiprintf_r+0xc0>
 80159a8:	465b      	mov	r3, fp
 80159aa:	4622      	mov	r2, r4
 80159ac:	4629      	mov	r1, r5
 80159ae:	4630      	mov	r0, r6
 80159b0:	f7ff ff94 	bl	80158dc <__sfputs_r>
 80159b4:	3001      	adds	r0, #1
 80159b6:	f000 80aa 	beq.w	8015b0e <_vfiprintf_r+0x20e>
 80159ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159bc:	445a      	add	r2, fp
 80159be:	9209      	str	r2, [sp, #36]	; 0x24
 80159c0:	f89a 3000 	ldrb.w	r3, [sl]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	f000 80a2 	beq.w	8015b0e <_vfiprintf_r+0x20e>
 80159ca:	2300      	movs	r3, #0
 80159cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159d4:	f10a 0a01 	add.w	sl, sl, #1
 80159d8:	9304      	str	r3, [sp, #16]
 80159da:	9307      	str	r3, [sp, #28]
 80159dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159e0:	931a      	str	r3, [sp, #104]	; 0x68
 80159e2:	4654      	mov	r4, sl
 80159e4:	2205      	movs	r2, #5
 80159e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159ea:	4858      	ldr	r0, [pc, #352]	; (8015b4c <_vfiprintf_r+0x24c>)
 80159ec:	f7ea fc10 	bl	8000210 <memchr>
 80159f0:	9a04      	ldr	r2, [sp, #16]
 80159f2:	b9d8      	cbnz	r0, 8015a2c <_vfiprintf_r+0x12c>
 80159f4:	06d1      	lsls	r1, r2, #27
 80159f6:	bf44      	itt	mi
 80159f8:	2320      	movmi	r3, #32
 80159fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159fe:	0713      	lsls	r3, r2, #28
 8015a00:	bf44      	itt	mi
 8015a02:	232b      	movmi	r3, #43	; 0x2b
 8015a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a08:	f89a 3000 	ldrb.w	r3, [sl]
 8015a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8015a0e:	d015      	beq.n	8015a3c <_vfiprintf_r+0x13c>
 8015a10:	9a07      	ldr	r2, [sp, #28]
 8015a12:	4654      	mov	r4, sl
 8015a14:	2000      	movs	r0, #0
 8015a16:	f04f 0c0a 	mov.w	ip, #10
 8015a1a:	4621      	mov	r1, r4
 8015a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a20:	3b30      	subs	r3, #48	; 0x30
 8015a22:	2b09      	cmp	r3, #9
 8015a24:	d94e      	bls.n	8015ac4 <_vfiprintf_r+0x1c4>
 8015a26:	b1b0      	cbz	r0, 8015a56 <_vfiprintf_r+0x156>
 8015a28:	9207      	str	r2, [sp, #28]
 8015a2a:	e014      	b.n	8015a56 <_vfiprintf_r+0x156>
 8015a2c:	eba0 0308 	sub.w	r3, r0, r8
 8015a30:	fa09 f303 	lsl.w	r3, r9, r3
 8015a34:	4313      	orrs	r3, r2
 8015a36:	9304      	str	r3, [sp, #16]
 8015a38:	46a2      	mov	sl, r4
 8015a3a:	e7d2      	b.n	80159e2 <_vfiprintf_r+0xe2>
 8015a3c:	9b03      	ldr	r3, [sp, #12]
 8015a3e:	1d19      	adds	r1, r3, #4
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	9103      	str	r1, [sp, #12]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	bfbb      	ittet	lt
 8015a48:	425b      	neglt	r3, r3
 8015a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8015a4e:	9307      	strge	r3, [sp, #28]
 8015a50:	9307      	strlt	r3, [sp, #28]
 8015a52:	bfb8      	it	lt
 8015a54:	9204      	strlt	r2, [sp, #16]
 8015a56:	7823      	ldrb	r3, [r4, #0]
 8015a58:	2b2e      	cmp	r3, #46	; 0x2e
 8015a5a:	d10c      	bne.n	8015a76 <_vfiprintf_r+0x176>
 8015a5c:	7863      	ldrb	r3, [r4, #1]
 8015a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8015a60:	d135      	bne.n	8015ace <_vfiprintf_r+0x1ce>
 8015a62:	9b03      	ldr	r3, [sp, #12]
 8015a64:	1d1a      	adds	r2, r3, #4
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	9203      	str	r2, [sp, #12]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	bfb8      	it	lt
 8015a6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015a72:	3402      	adds	r4, #2
 8015a74:	9305      	str	r3, [sp, #20]
 8015a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015b5c <_vfiprintf_r+0x25c>
 8015a7a:	7821      	ldrb	r1, [r4, #0]
 8015a7c:	2203      	movs	r2, #3
 8015a7e:	4650      	mov	r0, sl
 8015a80:	f7ea fbc6 	bl	8000210 <memchr>
 8015a84:	b140      	cbz	r0, 8015a98 <_vfiprintf_r+0x198>
 8015a86:	2340      	movs	r3, #64	; 0x40
 8015a88:	eba0 000a 	sub.w	r0, r0, sl
 8015a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8015a90:	9b04      	ldr	r3, [sp, #16]
 8015a92:	4303      	orrs	r3, r0
 8015a94:	3401      	adds	r4, #1
 8015a96:	9304      	str	r3, [sp, #16]
 8015a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a9c:	482c      	ldr	r0, [pc, #176]	; (8015b50 <_vfiprintf_r+0x250>)
 8015a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015aa2:	2206      	movs	r2, #6
 8015aa4:	f7ea fbb4 	bl	8000210 <memchr>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d03f      	beq.n	8015b2c <_vfiprintf_r+0x22c>
 8015aac:	4b29      	ldr	r3, [pc, #164]	; (8015b54 <_vfiprintf_r+0x254>)
 8015aae:	bb1b      	cbnz	r3, 8015af8 <_vfiprintf_r+0x1f8>
 8015ab0:	9b03      	ldr	r3, [sp, #12]
 8015ab2:	3307      	adds	r3, #7
 8015ab4:	f023 0307 	bic.w	r3, r3, #7
 8015ab8:	3308      	adds	r3, #8
 8015aba:	9303      	str	r3, [sp, #12]
 8015abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015abe:	443b      	add	r3, r7
 8015ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac2:	e767      	b.n	8015994 <_vfiprintf_r+0x94>
 8015ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ac8:	460c      	mov	r4, r1
 8015aca:	2001      	movs	r0, #1
 8015acc:	e7a5      	b.n	8015a1a <_vfiprintf_r+0x11a>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	3401      	adds	r4, #1
 8015ad2:	9305      	str	r3, [sp, #20]
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	f04f 0c0a 	mov.w	ip, #10
 8015ada:	4620      	mov	r0, r4
 8015adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ae0:	3a30      	subs	r2, #48	; 0x30
 8015ae2:	2a09      	cmp	r2, #9
 8015ae4:	d903      	bls.n	8015aee <_vfiprintf_r+0x1ee>
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d0c5      	beq.n	8015a76 <_vfiprintf_r+0x176>
 8015aea:	9105      	str	r1, [sp, #20]
 8015aec:	e7c3      	b.n	8015a76 <_vfiprintf_r+0x176>
 8015aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8015af2:	4604      	mov	r4, r0
 8015af4:	2301      	movs	r3, #1
 8015af6:	e7f0      	b.n	8015ada <_vfiprintf_r+0x1da>
 8015af8:	ab03      	add	r3, sp, #12
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	462a      	mov	r2, r5
 8015afe:	4b16      	ldr	r3, [pc, #88]	; (8015b58 <_vfiprintf_r+0x258>)
 8015b00:	a904      	add	r1, sp, #16
 8015b02:	4630      	mov	r0, r6
 8015b04:	f7fb fef0 	bl	80118e8 <_printf_float>
 8015b08:	4607      	mov	r7, r0
 8015b0a:	1c78      	adds	r0, r7, #1
 8015b0c:	d1d6      	bne.n	8015abc <_vfiprintf_r+0x1bc>
 8015b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b10:	07d9      	lsls	r1, r3, #31
 8015b12:	d405      	bmi.n	8015b20 <_vfiprintf_r+0x220>
 8015b14:	89ab      	ldrh	r3, [r5, #12]
 8015b16:	059a      	lsls	r2, r3, #22
 8015b18:	d402      	bmi.n	8015b20 <_vfiprintf_r+0x220>
 8015b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b1c:	f7fb fd98 	bl	8011650 <__retarget_lock_release_recursive>
 8015b20:	89ab      	ldrh	r3, [r5, #12]
 8015b22:	065b      	lsls	r3, r3, #25
 8015b24:	f53f af12 	bmi.w	801594c <_vfiprintf_r+0x4c>
 8015b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b2a:	e711      	b.n	8015950 <_vfiprintf_r+0x50>
 8015b2c:	ab03      	add	r3, sp, #12
 8015b2e:	9300      	str	r3, [sp, #0]
 8015b30:	462a      	mov	r2, r5
 8015b32:	4b09      	ldr	r3, [pc, #36]	; (8015b58 <_vfiprintf_r+0x258>)
 8015b34:	a904      	add	r1, sp, #16
 8015b36:	4630      	mov	r0, r6
 8015b38:	f7fc f97a 	bl	8011e30 <_printf_i>
 8015b3c:	e7e4      	b.n	8015b08 <_vfiprintf_r+0x208>
 8015b3e:	bf00      	nop
 8015b40:	080160f8 	.word	0x080160f8
 8015b44:	08016118 	.word	0x08016118
 8015b48:	080160d8 	.word	0x080160d8
 8015b4c:	0801652c 	.word	0x0801652c
 8015b50:	08016536 	.word	0x08016536
 8015b54:	080118e9 	.word	0x080118e9
 8015b58:	080158dd 	.word	0x080158dd
 8015b5c:	08016532 	.word	0x08016532

08015b60 <__swbuf_r>:
 8015b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b62:	460e      	mov	r6, r1
 8015b64:	4614      	mov	r4, r2
 8015b66:	4605      	mov	r5, r0
 8015b68:	b118      	cbz	r0, 8015b72 <__swbuf_r+0x12>
 8015b6a:	6983      	ldr	r3, [r0, #24]
 8015b6c:	b90b      	cbnz	r3, 8015b72 <__swbuf_r+0x12>
 8015b6e:	f7fb fcab 	bl	80114c8 <__sinit>
 8015b72:	4b21      	ldr	r3, [pc, #132]	; (8015bf8 <__swbuf_r+0x98>)
 8015b74:	429c      	cmp	r4, r3
 8015b76:	d12b      	bne.n	8015bd0 <__swbuf_r+0x70>
 8015b78:	686c      	ldr	r4, [r5, #4]
 8015b7a:	69a3      	ldr	r3, [r4, #24]
 8015b7c:	60a3      	str	r3, [r4, #8]
 8015b7e:	89a3      	ldrh	r3, [r4, #12]
 8015b80:	071a      	lsls	r2, r3, #28
 8015b82:	d52f      	bpl.n	8015be4 <__swbuf_r+0x84>
 8015b84:	6923      	ldr	r3, [r4, #16]
 8015b86:	b36b      	cbz	r3, 8015be4 <__swbuf_r+0x84>
 8015b88:	6923      	ldr	r3, [r4, #16]
 8015b8a:	6820      	ldr	r0, [r4, #0]
 8015b8c:	1ac0      	subs	r0, r0, r3
 8015b8e:	6963      	ldr	r3, [r4, #20]
 8015b90:	b2f6      	uxtb	r6, r6
 8015b92:	4283      	cmp	r3, r0
 8015b94:	4637      	mov	r7, r6
 8015b96:	dc04      	bgt.n	8015ba2 <__swbuf_r+0x42>
 8015b98:	4621      	mov	r1, r4
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	f7fe fb68 	bl	8014270 <_fflush_r>
 8015ba0:	bb30      	cbnz	r0, 8015bf0 <__swbuf_r+0x90>
 8015ba2:	68a3      	ldr	r3, [r4, #8]
 8015ba4:	3b01      	subs	r3, #1
 8015ba6:	60a3      	str	r3, [r4, #8]
 8015ba8:	6823      	ldr	r3, [r4, #0]
 8015baa:	1c5a      	adds	r2, r3, #1
 8015bac:	6022      	str	r2, [r4, #0]
 8015bae:	701e      	strb	r6, [r3, #0]
 8015bb0:	6963      	ldr	r3, [r4, #20]
 8015bb2:	3001      	adds	r0, #1
 8015bb4:	4283      	cmp	r3, r0
 8015bb6:	d004      	beq.n	8015bc2 <__swbuf_r+0x62>
 8015bb8:	89a3      	ldrh	r3, [r4, #12]
 8015bba:	07db      	lsls	r3, r3, #31
 8015bbc:	d506      	bpl.n	8015bcc <__swbuf_r+0x6c>
 8015bbe:	2e0a      	cmp	r6, #10
 8015bc0:	d104      	bne.n	8015bcc <__swbuf_r+0x6c>
 8015bc2:	4621      	mov	r1, r4
 8015bc4:	4628      	mov	r0, r5
 8015bc6:	f7fe fb53 	bl	8014270 <_fflush_r>
 8015bca:	b988      	cbnz	r0, 8015bf0 <__swbuf_r+0x90>
 8015bcc:	4638      	mov	r0, r7
 8015bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bd0:	4b0a      	ldr	r3, [pc, #40]	; (8015bfc <__swbuf_r+0x9c>)
 8015bd2:	429c      	cmp	r4, r3
 8015bd4:	d101      	bne.n	8015bda <__swbuf_r+0x7a>
 8015bd6:	68ac      	ldr	r4, [r5, #8]
 8015bd8:	e7cf      	b.n	8015b7a <__swbuf_r+0x1a>
 8015bda:	4b09      	ldr	r3, [pc, #36]	; (8015c00 <__swbuf_r+0xa0>)
 8015bdc:	429c      	cmp	r4, r3
 8015bde:	bf08      	it	eq
 8015be0:	68ec      	ldreq	r4, [r5, #12]
 8015be2:	e7ca      	b.n	8015b7a <__swbuf_r+0x1a>
 8015be4:	4621      	mov	r1, r4
 8015be6:	4628      	mov	r0, r5
 8015be8:	f000 f80c 	bl	8015c04 <__swsetup_r>
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d0cb      	beq.n	8015b88 <__swbuf_r+0x28>
 8015bf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015bf4:	e7ea      	b.n	8015bcc <__swbuf_r+0x6c>
 8015bf6:	bf00      	nop
 8015bf8:	080160f8 	.word	0x080160f8
 8015bfc:	08016118 	.word	0x08016118
 8015c00:	080160d8 	.word	0x080160d8

08015c04 <__swsetup_r>:
 8015c04:	4b32      	ldr	r3, [pc, #200]	; (8015cd0 <__swsetup_r+0xcc>)
 8015c06:	b570      	push	{r4, r5, r6, lr}
 8015c08:	681d      	ldr	r5, [r3, #0]
 8015c0a:	4606      	mov	r6, r0
 8015c0c:	460c      	mov	r4, r1
 8015c0e:	b125      	cbz	r5, 8015c1a <__swsetup_r+0x16>
 8015c10:	69ab      	ldr	r3, [r5, #24]
 8015c12:	b913      	cbnz	r3, 8015c1a <__swsetup_r+0x16>
 8015c14:	4628      	mov	r0, r5
 8015c16:	f7fb fc57 	bl	80114c8 <__sinit>
 8015c1a:	4b2e      	ldr	r3, [pc, #184]	; (8015cd4 <__swsetup_r+0xd0>)
 8015c1c:	429c      	cmp	r4, r3
 8015c1e:	d10f      	bne.n	8015c40 <__swsetup_r+0x3c>
 8015c20:	686c      	ldr	r4, [r5, #4]
 8015c22:	89a3      	ldrh	r3, [r4, #12]
 8015c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c28:	0719      	lsls	r1, r3, #28
 8015c2a:	d42c      	bmi.n	8015c86 <__swsetup_r+0x82>
 8015c2c:	06dd      	lsls	r5, r3, #27
 8015c2e:	d411      	bmi.n	8015c54 <__swsetup_r+0x50>
 8015c30:	2309      	movs	r3, #9
 8015c32:	6033      	str	r3, [r6, #0]
 8015c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015c38:	81a3      	strh	r3, [r4, #12]
 8015c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c3e:	e03e      	b.n	8015cbe <__swsetup_r+0xba>
 8015c40:	4b25      	ldr	r3, [pc, #148]	; (8015cd8 <__swsetup_r+0xd4>)
 8015c42:	429c      	cmp	r4, r3
 8015c44:	d101      	bne.n	8015c4a <__swsetup_r+0x46>
 8015c46:	68ac      	ldr	r4, [r5, #8]
 8015c48:	e7eb      	b.n	8015c22 <__swsetup_r+0x1e>
 8015c4a:	4b24      	ldr	r3, [pc, #144]	; (8015cdc <__swsetup_r+0xd8>)
 8015c4c:	429c      	cmp	r4, r3
 8015c4e:	bf08      	it	eq
 8015c50:	68ec      	ldreq	r4, [r5, #12]
 8015c52:	e7e6      	b.n	8015c22 <__swsetup_r+0x1e>
 8015c54:	0758      	lsls	r0, r3, #29
 8015c56:	d512      	bpl.n	8015c7e <__swsetup_r+0x7a>
 8015c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c5a:	b141      	cbz	r1, 8015c6e <__swsetup_r+0x6a>
 8015c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c60:	4299      	cmp	r1, r3
 8015c62:	d002      	beq.n	8015c6a <__swsetup_r+0x66>
 8015c64:	4630      	mov	r0, r6
 8015c66:	f7ff fbc3 	bl	80153f0 <_free_r>
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8015c6e:	89a3      	ldrh	r3, [r4, #12]
 8015c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015c74:	81a3      	strh	r3, [r4, #12]
 8015c76:	2300      	movs	r3, #0
 8015c78:	6063      	str	r3, [r4, #4]
 8015c7a:	6923      	ldr	r3, [r4, #16]
 8015c7c:	6023      	str	r3, [r4, #0]
 8015c7e:	89a3      	ldrh	r3, [r4, #12]
 8015c80:	f043 0308 	orr.w	r3, r3, #8
 8015c84:	81a3      	strh	r3, [r4, #12]
 8015c86:	6923      	ldr	r3, [r4, #16]
 8015c88:	b94b      	cbnz	r3, 8015c9e <__swsetup_r+0x9a>
 8015c8a:	89a3      	ldrh	r3, [r4, #12]
 8015c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c94:	d003      	beq.n	8015c9e <__swsetup_r+0x9a>
 8015c96:	4621      	mov	r1, r4
 8015c98:	4630      	mov	r0, r6
 8015c9a:	f000 f84d 	bl	8015d38 <__smakebuf_r>
 8015c9e:	89a0      	ldrh	r0, [r4, #12]
 8015ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ca4:	f010 0301 	ands.w	r3, r0, #1
 8015ca8:	d00a      	beq.n	8015cc0 <__swsetup_r+0xbc>
 8015caa:	2300      	movs	r3, #0
 8015cac:	60a3      	str	r3, [r4, #8]
 8015cae:	6963      	ldr	r3, [r4, #20]
 8015cb0:	425b      	negs	r3, r3
 8015cb2:	61a3      	str	r3, [r4, #24]
 8015cb4:	6923      	ldr	r3, [r4, #16]
 8015cb6:	b943      	cbnz	r3, 8015cca <__swsetup_r+0xc6>
 8015cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015cbc:	d1ba      	bne.n	8015c34 <__swsetup_r+0x30>
 8015cbe:	bd70      	pop	{r4, r5, r6, pc}
 8015cc0:	0781      	lsls	r1, r0, #30
 8015cc2:	bf58      	it	pl
 8015cc4:	6963      	ldrpl	r3, [r4, #20]
 8015cc6:	60a3      	str	r3, [r4, #8]
 8015cc8:	e7f4      	b.n	8015cb4 <__swsetup_r+0xb0>
 8015cca:	2000      	movs	r0, #0
 8015ccc:	e7f7      	b.n	8015cbe <__swsetup_r+0xba>
 8015cce:	bf00      	nop
 8015cd0:	20000010 	.word	0x20000010
 8015cd4:	080160f8 	.word	0x080160f8
 8015cd8:	08016118 	.word	0x08016118
 8015cdc:	080160d8 	.word	0x080160d8

08015ce0 <abort>:
 8015ce0:	b508      	push	{r3, lr}
 8015ce2:	2006      	movs	r0, #6
 8015ce4:	f000 f898 	bl	8015e18 <raise>
 8015ce8:	2001      	movs	r0, #1
 8015cea:	f7ec f99b 	bl	8002024 <_exit>

08015cee <__swhatbuf_r>:
 8015cee:	b570      	push	{r4, r5, r6, lr}
 8015cf0:	460e      	mov	r6, r1
 8015cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf6:	2900      	cmp	r1, #0
 8015cf8:	b096      	sub	sp, #88	; 0x58
 8015cfa:	4614      	mov	r4, r2
 8015cfc:	461d      	mov	r5, r3
 8015cfe:	da08      	bge.n	8015d12 <__swhatbuf_r+0x24>
 8015d00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015d04:	2200      	movs	r2, #0
 8015d06:	602a      	str	r2, [r5, #0]
 8015d08:	061a      	lsls	r2, r3, #24
 8015d0a:	d410      	bmi.n	8015d2e <__swhatbuf_r+0x40>
 8015d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d10:	e00e      	b.n	8015d30 <__swhatbuf_r+0x42>
 8015d12:	466a      	mov	r2, sp
 8015d14:	f000 f89c 	bl	8015e50 <_fstat_r>
 8015d18:	2800      	cmp	r0, #0
 8015d1a:	dbf1      	blt.n	8015d00 <__swhatbuf_r+0x12>
 8015d1c:	9a01      	ldr	r2, [sp, #4]
 8015d1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d26:	425a      	negs	r2, r3
 8015d28:	415a      	adcs	r2, r3
 8015d2a:	602a      	str	r2, [r5, #0]
 8015d2c:	e7ee      	b.n	8015d0c <__swhatbuf_r+0x1e>
 8015d2e:	2340      	movs	r3, #64	; 0x40
 8015d30:	2000      	movs	r0, #0
 8015d32:	6023      	str	r3, [r4, #0]
 8015d34:	b016      	add	sp, #88	; 0x58
 8015d36:	bd70      	pop	{r4, r5, r6, pc}

08015d38 <__smakebuf_r>:
 8015d38:	898b      	ldrh	r3, [r1, #12]
 8015d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d3c:	079d      	lsls	r5, r3, #30
 8015d3e:	4606      	mov	r6, r0
 8015d40:	460c      	mov	r4, r1
 8015d42:	d507      	bpl.n	8015d54 <__smakebuf_r+0x1c>
 8015d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d48:	6023      	str	r3, [r4, #0]
 8015d4a:	6123      	str	r3, [r4, #16]
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	6163      	str	r3, [r4, #20]
 8015d50:	b002      	add	sp, #8
 8015d52:	bd70      	pop	{r4, r5, r6, pc}
 8015d54:	ab01      	add	r3, sp, #4
 8015d56:	466a      	mov	r2, sp
 8015d58:	f7ff ffc9 	bl	8015cee <__swhatbuf_r>
 8015d5c:	9900      	ldr	r1, [sp, #0]
 8015d5e:	4605      	mov	r5, r0
 8015d60:	4630      	mov	r0, r6
 8015d62:	f7fb fcad 	bl	80116c0 <_malloc_r>
 8015d66:	b948      	cbnz	r0, 8015d7c <__smakebuf_r+0x44>
 8015d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d6c:	059a      	lsls	r2, r3, #22
 8015d6e:	d4ef      	bmi.n	8015d50 <__smakebuf_r+0x18>
 8015d70:	f023 0303 	bic.w	r3, r3, #3
 8015d74:	f043 0302 	orr.w	r3, r3, #2
 8015d78:	81a3      	strh	r3, [r4, #12]
 8015d7a:	e7e3      	b.n	8015d44 <__smakebuf_r+0xc>
 8015d7c:	4b0d      	ldr	r3, [pc, #52]	; (8015db4 <__smakebuf_r+0x7c>)
 8015d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d80:	89a3      	ldrh	r3, [r4, #12]
 8015d82:	6020      	str	r0, [r4, #0]
 8015d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d88:	81a3      	strh	r3, [r4, #12]
 8015d8a:	9b00      	ldr	r3, [sp, #0]
 8015d8c:	6163      	str	r3, [r4, #20]
 8015d8e:	9b01      	ldr	r3, [sp, #4]
 8015d90:	6120      	str	r0, [r4, #16]
 8015d92:	b15b      	cbz	r3, 8015dac <__smakebuf_r+0x74>
 8015d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d98:	4630      	mov	r0, r6
 8015d9a:	f000 f86b 	bl	8015e74 <_isatty_r>
 8015d9e:	b128      	cbz	r0, 8015dac <__smakebuf_r+0x74>
 8015da0:	89a3      	ldrh	r3, [r4, #12]
 8015da2:	f023 0303 	bic.w	r3, r3, #3
 8015da6:	f043 0301 	orr.w	r3, r3, #1
 8015daa:	81a3      	strh	r3, [r4, #12]
 8015dac:	89a0      	ldrh	r0, [r4, #12]
 8015dae:	4305      	orrs	r5, r0
 8015db0:	81a5      	strh	r5, [r4, #12]
 8015db2:	e7cd      	b.n	8015d50 <__smakebuf_r+0x18>
 8015db4:	08011461 	.word	0x08011461

08015db8 <_malloc_usable_size_r>:
 8015db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dbc:	1f18      	subs	r0, r3, #4
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	bfbc      	itt	lt
 8015dc2:	580b      	ldrlt	r3, [r1, r0]
 8015dc4:	18c0      	addlt	r0, r0, r3
 8015dc6:	4770      	bx	lr

08015dc8 <_raise_r>:
 8015dc8:	291f      	cmp	r1, #31
 8015dca:	b538      	push	{r3, r4, r5, lr}
 8015dcc:	4604      	mov	r4, r0
 8015dce:	460d      	mov	r5, r1
 8015dd0:	d904      	bls.n	8015ddc <_raise_r+0x14>
 8015dd2:	2316      	movs	r3, #22
 8015dd4:	6003      	str	r3, [r0, #0]
 8015dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015dda:	bd38      	pop	{r3, r4, r5, pc}
 8015ddc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015dde:	b112      	cbz	r2, 8015de6 <_raise_r+0x1e>
 8015de0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015de4:	b94b      	cbnz	r3, 8015dfa <_raise_r+0x32>
 8015de6:	4620      	mov	r0, r4
 8015de8:	f000 f830 	bl	8015e4c <_getpid_r>
 8015dec:	462a      	mov	r2, r5
 8015dee:	4601      	mov	r1, r0
 8015df0:	4620      	mov	r0, r4
 8015df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015df6:	f000 b817 	b.w	8015e28 <_kill_r>
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d00a      	beq.n	8015e14 <_raise_r+0x4c>
 8015dfe:	1c59      	adds	r1, r3, #1
 8015e00:	d103      	bne.n	8015e0a <_raise_r+0x42>
 8015e02:	2316      	movs	r3, #22
 8015e04:	6003      	str	r3, [r0, #0]
 8015e06:	2001      	movs	r0, #1
 8015e08:	e7e7      	b.n	8015dda <_raise_r+0x12>
 8015e0a:	2400      	movs	r4, #0
 8015e0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015e10:	4628      	mov	r0, r5
 8015e12:	4798      	blx	r3
 8015e14:	2000      	movs	r0, #0
 8015e16:	e7e0      	b.n	8015dda <_raise_r+0x12>

08015e18 <raise>:
 8015e18:	4b02      	ldr	r3, [pc, #8]	; (8015e24 <raise+0xc>)
 8015e1a:	4601      	mov	r1, r0
 8015e1c:	6818      	ldr	r0, [r3, #0]
 8015e1e:	f7ff bfd3 	b.w	8015dc8 <_raise_r>
 8015e22:	bf00      	nop
 8015e24:	20000010 	.word	0x20000010

08015e28 <_kill_r>:
 8015e28:	b538      	push	{r3, r4, r5, lr}
 8015e2a:	4d07      	ldr	r5, [pc, #28]	; (8015e48 <_kill_r+0x20>)
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	4604      	mov	r4, r0
 8015e30:	4608      	mov	r0, r1
 8015e32:	4611      	mov	r1, r2
 8015e34:	602b      	str	r3, [r5, #0]
 8015e36:	f7ec f8e5 	bl	8002004 <_kill>
 8015e3a:	1c43      	adds	r3, r0, #1
 8015e3c:	d102      	bne.n	8015e44 <_kill_r+0x1c>
 8015e3e:	682b      	ldr	r3, [r5, #0]
 8015e40:	b103      	cbz	r3, 8015e44 <_kill_r+0x1c>
 8015e42:	6023      	str	r3, [r4, #0]
 8015e44:	bd38      	pop	{r3, r4, r5, pc}
 8015e46:	bf00      	nop
 8015e48:	20002700 	.word	0x20002700

08015e4c <_getpid_r>:
 8015e4c:	f7ec b8d2 	b.w	8001ff4 <_getpid>

08015e50 <_fstat_r>:
 8015e50:	b538      	push	{r3, r4, r5, lr}
 8015e52:	4d07      	ldr	r5, [pc, #28]	; (8015e70 <_fstat_r+0x20>)
 8015e54:	2300      	movs	r3, #0
 8015e56:	4604      	mov	r4, r0
 8015e58:	4608      	mov	r0, r1
 8015e5a:	4611      	mov	r1, r2
 8015e5c:	602b      	str	r3, [r5, #0]
 8015e5e:	f7ec f930 	bl	80020c2 <_fstat>
 8015e62:	1c43      	adds	r3, r0, #1
 8015e64:	d102      	bne.n	8015e6c <_fstat_r+0x1c>
 8015e66:	682b      	ldr	r3, [r5, #0]
 8015e68:	b103      	cbz	r3, 8015e6c <_fstat_r+0x1c>
 8015e6a:	6023      	str	r3, [r4, #0]
 8015e6c:	bd38      	pop	{r3, r4, r5, pc}
 8015e6e:	bf00      	nop
 8015e70:	20002700 	.word	0x20002700

08015e74 <_isatty_r>:
 8015e74:	b538      	push	{r3, r4, r5, lr}
 8015e76:	4d06      	ldr	r5, [pc, #24]	; (8015e90 <_isatty_r+0x1c>)
 8015e78:	2300      	movs	r3, #0
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	4608      	mov	r0, r1
 8015e7e:	602b      	str	r3, [r5, #0]
 8015e80:	f7ec f92f 	bl	80020e2 <_isatty>
 8015e84:	1c43      	adds	r3, r0, #1
 8015e86:	d102      	bne.n	8015e8e <_isatty_r+0x1a>
 8015e88:	682b      	ldr	r3, [r5, #0]
 8015e8a:	b103      	cbz	r3, 8015e8e <_isatty_r+0x1a>
 8015e8c:	6023      	str	r3, [r4, #0]
 8015e8e:	bd38      	pop	{r3, r4, r5, pc}
 8015e90:	20002700 	.word	0x20002700

08015e94 <_init>:
 8015e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e96:	bf00      	nop
 8015e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e9a:	bc08      	pop	{r3}
 8015e9c:	469e      	mov	lr, r3
 8015e9e:	4770      	bx	lr

08015ea0 <_fini>:
 8015ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ea2:	bf00      	nop
 8015ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ea6:	bc08      	pop	{r3}
 8015ea8:	469e      	mov	lr, r3
 8015eaa:	4770      	bx	lr
