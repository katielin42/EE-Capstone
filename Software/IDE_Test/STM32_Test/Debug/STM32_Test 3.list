
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d310  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800d4d0  0800d4d0  0001d4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d61c  0800d61c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d61c  0800d61c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d61c  0800d61c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d48  20000074  0800d698  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001dbc  0800d698  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1c9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058c4  00000000  00000000  0004d26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002590  00000000  00000000  00052b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002328  00000000  00000000  000550c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000387a0  00000000  00000000  000573f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c41b  00000000  00000000  0008fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014fd0d  00000000  00000000  000bbfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020bcb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2e4  00000000  00000000  0020bd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d4b8 	.word	0x0800d4b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800d4b8 	.word	0x0800d4b8

08000200 <ADC_Init>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//initialize ADC thread
void ADC_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <ADC_Init+0x28>)
 8000206:	2101      	movs	r1, #1
 8000208:	2001      	movs	r0, #1
 800020a:	f009 fd51 	bl	8009cb0 <osSemaphoreNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ADC_Init+0x2c>)
 8000212:	6013      	str	r3, [r2, #0]
	thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <ADC_Init+0x30>)
 8000216:	4907      	ldr	r1, [pc, #28]	; (8000234 <ADC_Init+0x34>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ADC_Init+0x38>)
 800021a:	f009 fc9c 	bl	8009b56 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <ADC_Init+0x3c>)
 8000222:	6013      	str	r3, [r2, #0]

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800d508 	.word	0x0800d508
 800022c:	200000ac 	.word	0x200000ac
 8000230:	0800d518 	.word	0x0800d518
 8000234:	20000104 	.word	0x20000104
 8000238:	080002b5 	.word	0x080002b5
 800023c:	20000100 	.word	0x20000100

08000240 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e01d      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000256:	4619      	mov	r1, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3303      	adds	r3, #3
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	440b      	add	r3, r1
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	3206      	adds	r2, #6
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800026a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026e:	4413      	add	r3, r2
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b299      	uxth	r1, r3
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b02      	cmp	r3, #2
 800028e:	ddde      	ble.n	800024e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f009 fde7 	bl	8009e68 <osSemaphoreRelease>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000090 	.word	0x20000090
 80002a8:	55555556 	.word	0x55555556
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <ADC_collect>:

//collect raw adc data through the DMA
void ADC_collect(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 80002c0:	2209      	movs	r2, #9
 80002c2:	4907      	ldr	r1, [pc, #28]	; (80002e0 <ADC_collect+0x2c>)
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f001 fcaf 	bl	8001c28 <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ADC_collect+0x30>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 fd76 	bl	8009dc4 <osSemaphoreAcquire>
	  // process adc buffer good

    osDelay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f009 fcce 	bl	8009c7a <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002de:	e7f4      	b.n	80002ca <ADC_collect+0x16>
 80002e0:	20000090 	.word	0x20000090
 80002e4:	200000ac 	.word	0x200000ac

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f001 f905 	bl	80014fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f0:	f000 f828 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f4:	f000 fa60 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f8:	f000 f9ce 	bl	8000698 <MX_DMA_Init>
  MX_FMC_Init();
 80002fc:	f000 f9f6 	bl	80006ec <MX_FMC_Init>
  MX_I2C1_Init();
 8000300:	f000 f92a 	bl	8000558 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000304:	f000 f968 	bl	80005d8 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000308:	f000 f988 	bl	800061c <MX_SPI2_Init>
  MX_CAN1_Init();
 800030c:	f000 f8ee 	bl	80004ec <MX_CAN1_Init>
  MX_ADC1_Init();
 8000310:	f000 f866 	bl	80003e0 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000314:	f009 f8a0 	bl	8009458 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000318:	f009 fb9c 	bl	8009a54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <main+0x50>)
 800031e:	2100      	movs	r1, #0
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <main+0x54>)
 8000322:	f009 fc18 	bl	8009b56 <osThreadNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <main+0x58>)
 800032a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init();
 800032c:	f7ff ff68 	bl	8000200 <ADC_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000330:	f009 fbd6 	bl	8009ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000334:	e7fe      	b.n	8000334 <main+0x4c>
 8000336:	bf00      	nop
 8000338:	0800d53c 	.word	0x0800d53c
 800033c:	08000c55 	.word	0x08000c55
 8000340:	2000037c 	.word	0x2000037c

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b096      	sub	sp, #88	; 0x58
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	2244      	movs	r2, #68	; 0x44
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f00c ffe6 	bl	800d324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000366:	2000      	movs	r0, #0
 8000368:	f003 fb54 	bl	8003a14 <HAL_PWREx_ControlVoltageScaling>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000372:	f000 fc89 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000376:	2301      	movs	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000380:	2302      	movs	r3, #2
 8000382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000384:	2303      	movs	r3, #3
 8000386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000388:	2302      	movs	r3, #2
 800038a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800038c:	231e      	movs	r3, #30
 800038e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000390:	2302      	movs	r3, #2
 8000392:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000394:	2302      	movs	r3, #2
 8000396:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000398:	2302      	movs	r3, #2
 800039a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 fbeb 	bl	8003b7c <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003ac:	f000 fc6c 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	2303      	movs	r3, #3
 80003b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003c4:	463b      	mov	r3, r7
 80003c6:	2105      	movs	r1, #5
 80003c8:	4618      	mov	r0, r3
 80003ca:	f003 fff1 	bl	80043b0 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003d4:	f000 fc58 	bl	8000c88 <Error_Handler>
  }
}
 80003d8:	bf00      	nop
 80003da:	3758      	adds	r7, #88	; 0x58
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
 80003f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f6:	4b38      	ldr	r3, [pc, #224]	; (80004d8 <MX_ADC1_Init+0xf8>)
 80003f8:	4a38      	ldr	r2, [pc, #224]	; (80004dc <MX_ADC1_Init+0xfc>)
 80003fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003fc:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <MX_ADC1_Init+0xf8>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800040e:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000410:	2201      	movs	r2, #1
 8000412:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000416:	2204      	movs	r2, #4
 8000418:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800041c:	2200      	movs	r2, #0
 800041e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000420:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000422:	2201      	movs	r2, #1
 8000424:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000428:	2203      	movs	r2, #3
 800042a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042c:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000436:	2200      	movs	r2, #0
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800043c:	2200      	movs	r2, #0
 800043e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000442:	2201      	movs	r2, #1
 8000444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800044a:	2200      	movs	r2, #0
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_ADC1_Init+0xf8>)
 8000458:	2204      	movs	r2, #4
 800045a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800045c:	481e      	ldr	r0, [pc, #120]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800045e:	f001 fa97 	bl	8001990 <HAL_ADC_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000468:	f000 fc0e 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_ADC1_Init+0x100>)
 800046e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000470:	2306      	movs	r3, #6
 8000472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000478:	237f      	movs	r3, #127	; 0x7f
 800047a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047c:	2304      	movs	r3, #4
 800047e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4813      	ldr	r0, [pc, #76]	; (80004d8 <MX_ADC1_Init+0xf8>)
 800048a:	f001 fe23 	bl	80020d4 <HAL_ADC_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000494:	f000 fbf8 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_ADC1_Init+0x104>)
 800049a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800049c:	230c      	movs	r3, #12
 800049e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_ADC1_Init+0xf8>)
 80004a6:	f001 fe15 	bl	80020d4 <HAL_ADC_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004b0:	f000 fbea 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_ADC1_Init+0x108>)
 80004b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004b8:	2312      	movs	r3, #18
 80004ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_ADC1_Init+0xf8>)
 80004c2:	f001 fe07 	bl	80020d4 <HAL_ADC_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80004cc:	f000 fbdc 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000104 	.word	0x20000104
 80004dc:	50040000 	.word	0x50040000
 80004e0:	14f00020 	.word	0x14f00020
 80004e4:	19200040 	.word	0x19200040
 80004e8:	1d500080 	.word	0x1d500080

080004ec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2214      	movs	r2, #20
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f002 fb11 	bl	8002b64 <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fb9e 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200001cc 	.word	0x200001cc
 8000554:	40006400 	.word	0x40006400

08000558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_I2C1_Init+0x74>)
 8000594:	f003 f8f8 	bl	8003788 <HAL_I2C_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 fb73 	bl	8000c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_I2C1_Init+0x74>)
 80005a6:	f003 f97e 	bl	80038a6 <HAL_I2CEx_ConfigAnalogFilter>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 fb6a 	bl	8000c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_I2C1_Init+0x74>)
 80005b8:	f003 f9c0 	bl	800393c <HAL_I2CEx_ConfigDigitalFilter>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 fb61 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001f4 	.word	0x200001f4
 80005d0:	40005400 	.word	0x40005400
 80005d4:	307075b1 	.word	0x307075b1

080005d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <MX_SDMMC1_SD_Init+0x40>)
 80005e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 80005f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <MX_SDMMC1_SD_Init+0x3c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000248 	.word	0x20000248
 8000618:	50062400 	.word	0x50062400

0800061c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_SPI2_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_SPI2_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_SPI2_Init+0x74>)
 8000628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800062c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_SPI2_Init+0x74>)
 8000636:	f44f 7240 	mov.w	r2, #768	; 0x300
 800063a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_SPI2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_SPI2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_SPI2_Init+0x74>)
 800064a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_SPI2_Init+0x74>)
 8000652:	2208      	movs	r2, #8
 8000654:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_SPI2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_SPI2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_SPI2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_SPI2_Init+0x74>)
 800066a:	2207      	movs	r2, #7
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_SPI2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_SPI2_Init+0x74>)
 8000676:	2208      	movs	r2, #8
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_SPI2_Init+0x74>)
 800067c:	f007 fc23 	bl	8007ec6 <HAL_SPI_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 faff 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200002c8 	.word	0x200002c8
 8000694:	40003800 	.word	0x40003800

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_DMA_Init+0x50>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <MX_DMA_Init+0x50>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6493      	str	r3, [r2, #72]	; 0x48
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_DMA_Init+0x50>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_DMA_Init+0x50>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <MX_DMA_Init+0x50>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6493      	str	r3, [r2, #72]	; 0x48
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_DMA_Init+0x50>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2105      	movs	r1, #5
 80006d2:	200b      	movs	r0, #11
 80006d4:	f002 fbfa 	bl	8002ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d8:	200b      	movs	r0, #11
 80006da:	f002 fc13 	bl	8002f04 <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2220      	movs	r2, #32
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00c fe13 	bl	800d324 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000700:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000704:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000708:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <MX_FMC_Init+0xc8>)
 800070a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_FMC_Init+0xc4>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_FMC_Init+0xc4>)
 800071a:	2204      	movs	r2, #4
 800071c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000720:	2210      	movs	r2, #16
 8000722:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800072a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_FMC_Init+0xc4>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_FMC_Init+0xc4>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_FMC_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000754:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_FMC_Init+0xc4>)
 800075c:	2200      	movs	r2, #0
 800075e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000762:	2200      	movs	r2, #0
 8000764:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_FMC_Init+0xc4>)
 8000768:	2200      	movs	r2, #0
 800076a:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_FMC_Init+0xc4>)
 800076e:	2200      	movs	r2, #0
 8000770:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000772:	230f      	movs	r3, #15
 8000774:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000776:	230f      	movs	r3, #15
 8000778:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000782:	230f      	movs	r3, #15
 8000784:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000786:	2310      	movs	r3, #16
 8000788:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_FMC_Init+0xc4>)
 800079a:	f007 fc37 	bl	800800c <HAL_SRAM_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80007a4:	f000 fa70 	bl	8000c88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000032c 	.word	0x2000032c
 80007b4:	a0000104 	.word	0xa0000104

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ce:	4bb2      	ldr	r3, [pc, #712]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4ab1      	ldr	r2, [pc, #708]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80007d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007e2:	623b      	str	r3, [r7, #32]
 80007e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4bac      	ldr	r3, [pc, #688]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4aab      	ldr	r2, [pc, #684]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4ba9      	ldr	r3, [pc, #676]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	4ba6      	ldr	r3, [pc, #664]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4aa5      	ldr	r2, [pc, #660]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4ba3      	ldr	r3, [pc, #652]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4ba0      	ldr	r3, [pc, #640]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a9f      	ldr	r2, [pc, #636]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b9a      	ldr	r3, [pc, #616]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a99      	ldr	r2, [pc, #612]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b97      	ldr	r3, [pc, #604]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b94      	ldr	r3, [pc, #592]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a93      	ldr	r2, [pc, #588]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b91      	ldr	r3, [pc, #580]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800085e:	f003 f97d 	bl	8003b5c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	4b8d      	ldr	r3, [pc, #564]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a8c      	ldr	r2, [pc, #560]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b8a      	ldr	r3, [pc, #552]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b87      	ldr	r3, [pc, #540]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a86      	ldr	r2, [pc, #536]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b84      	ldr	r3, [pc, #528]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b81      	ldr	r3, [pc, #516]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a80      	ldr	r2, [pc, #512]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x2e0>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f244 0114 	movw	r1, #16404	; 0x4014
 80008b0:	487a      	ldr	r0, [pc, #488]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80008b2:	f002 ff51 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4878      	ldr	r0, [pc, #480]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 80008be:	f002 ff4b 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f002 ff45 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2104      	movs	r1, #4
 80008d2:	4874      	ldr	r0, [pc, #464]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80008d4:	f002 ff40 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80008d8:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	486c      	ldr	r0, [pc, #432]	; (8000aa8 <MX_GPIO_Init+0x2f0>)
 80008f6:	f002 fd85 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 80008fa:	f244 0314 	movw	r3, #16404	; 0x4014
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4862      	ldr	r0, [pc, #392]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000914:	f002 fd76 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000918:	2310      	movs	r3, #16
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000928:	2302      	movs	r3, #2
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	485c      	ldr	r0, [pc, #368]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 8000934:	f002 fd66 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800094a:	2307      	movs	r3, #7
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f002 fd54 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800095c:	23b0      	movs	r3, #176	; 0xb0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800096c:	230a      	movs	r3, #10
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	484c      	ldr	r0, [pc, #304]	; (8000aa8 <MX_GPIO_Init+0x2f0>)
 8000978:	f002 fd44 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800097c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800098e:	230d      	movs	r3, #13
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4842      	ldr	r0, [pc, #264]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 800099a:	f002 fd33 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 800099e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80009b0:	2305      	movs	r3, #5
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	483c      	ldr	r0, [pc, #240]	; (8000aac <MX_GPIO_Init+0x2f4>)
 80009bc:	f002 fd22 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80009c0:	2302      	movs	r3, #2
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4834      	ldr	r0, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0x2f0>)
 80009d6:	f002 fd15 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80009da:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009ec:	230a      	movs	r3, #10
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4829      	ldr	r0, [pc, #164]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80009f8:	f002 fd04 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000a1a:	f002 fcf3 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a30:	2305      	movs	r3, #5
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000a3c:	f002 fce2 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a50:	230d      	movs	r3, #13
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 8000a5c:	f002 fcd2 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a72:	230a      	movs	r3, #10
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f002 fcc0 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
 8000a96:	e00d      	b.n	8000ab4 <MX_GPIO_Init+0x2fc>
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48001c00 	.word	0x48001c00
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	48002000 	.word	0x48002000
 8000aac:	48001800 	.word	0x48001800
 8000ab0:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4862      	ldr	r0, [pc, #392]	; (8000c44 <MX_GPIO_Init+0x48c>)
 8000abc:	f002 fca2 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000ac0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	485a      	ldr	r0, [pc, #360]	; (8000c48 <MX_GPIO_Init+0x490>)
 8000ade:	f002 fc91 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4853      	ldr	r0, [pc, #332]	; (8000c44 <MX_GPIO_Init+0x48c>)
 8000af8:	f002 fc84 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000afc:	2384      	movs	r3, #132	; 0x84
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	484b      	ldr	r0, [pc, #300]	; (8000c44 <MX_GPIO_Init+0x48c>)
 8000b18:	f002 fc74 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4844      	ldr	r0, [pc, #272]	; (8000c4c <MX_GPIO_Init+0x494>)
 8000b3a:	f002 fc63 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	483a      	ldr	r0, [pc, #232]	; (8000c44 <MX_GPIO_Init+0x48c>)
 8000b5a:	f002 fc53 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f002 fc46 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f002 fc37 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000b96:	2308      	movs	r3, #8
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f002 fc26 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000bb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481e      	ldr	r0, [pc, #120]	; (8000c50 <MX_GPIO_Init+0x498>)
 8000bd6:	f002 fc15 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000bea:	230a      	movs	r3, #10
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f002 fc04 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <MX_GPIO_Init+0x494>)
 8000c14:	f002 fbf6 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_GPIO_Init+0x494>)
 8000c36:	f002 fbe5 	bl	8003404 <HAL_GPIO_Init>

}
 8000c3a:	bf00      	nop
 8000c3c:	3738      	adds	r7, #56	; 0x38
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48001800 	.word	0x48001800
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48001400 	.word	0x48001400

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f009 f80c 	bl	8009c7a <osDelay>
 8000c62:	e7fb      	b.n	8000c5c <StartDefaultTask+0x8>

08000c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c76:	f000 fc59 	bl	800152c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40001000 	.word	0x40001000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f002 f8fb 	bl	8002ecc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b2      	sub	sp, #200	; 0xc8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	229c      	movs	r2, #156	; 0x9c
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00c fb0d 	bl	800d324 <memset>
  if(hadc->Instance==ADC1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a5c      	ldr	r2, [pc, #368]	; (8000e80 <HAL_ADC_MspInit+0x19c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	f040 80b1 	bne.w	8000e78 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d24:	2303      	movs	r3, #3
 8000d26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fe1e 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000d52:	f7ff ff99 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d56:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a4a      	ldr	r2, [pc, #296]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a44      	ldr	r2, [pc, #272]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a38      	ldr	r2, [pc, #224]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000db6:	2318      	movs	r3, #24
 8000db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482e      	ldr	r0, [pc, #184]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000dd0:	f002 fb18 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000dd4:	2387      	movs	r3, #135	; 0x87
 8000dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f002 fb08 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000e0e:	f002 faf9 	bl	8003404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e14:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_ADC_MspInit+0x1b0>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e4e:	f002 f867 	bl	8002f20 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000e58:	f7ff ff16 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e60:	651a      	str	r2, [r3, #80]	; 0x50
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	2012      	movs	r0, #18
 8000e6e:	f002 f82d 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e72:	2012      	movs	r0, #18
 8000e74:	f002 f846 	bl	8002f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	37c8      	adds	r7, #200	; 0xc8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	50040000 	.word	0x50040000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000800 	.word	0x48000800
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	2000016c 	.word	0x2000016c
 8000e94:	40020008 	.word	0x40020008

08000e98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <HAL_CAN_MspInit+0x80>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d129      	bne.n	8000f0e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ec0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000eea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000efc:	2309      	movs	r3, #9
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f002 fa7b 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40006400 	.word	0x40006400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0b2      	sub	sp, #200	; 0xc8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	229c      	movs	r2, #156	; 0x9c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00c f9ef 	bl	800d324 <memset>
  if(hi2c->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a33      	ldr	r2, [pc, #204]	; (8001018 <HAL_I2C_MspInit+0xf8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d15e      	bne.n	800100e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fd13 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff fe8e 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	4a2a      	ldr	r2, [pc, #168]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a24      	ldr	r2, [pc, #144]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f9c:	f002 fdde 	bl	8003b5c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4816      	ldr	r0, [pc, #88]	; (8001020 <HAL_I2C_MspInit+0x100>)
 8000fc6:	f002 fa1d 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000ff2:	f002 fa07 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_I2C_MspInit+0xfc>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	37c8      	adds	r7, #200	; 0xc8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40005400 	.word	0x40005400
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400
 8001024:	48001800 	.word	0x48001800

08001028 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0b2      	sub	sp, #200	; 0xc8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	229c      	movs	r2, #156	; 0x9c
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00c f96b 	bl	800d324 <memset>
  if(hsd->Instance==SDMMC1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a37      	ldr	r2, [pc, #220]	; (8001130 <HAL_SD_MspInit+0x108>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d167      	bne.n	8001128 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800105c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800105e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fc8c 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001076:	f7ff fe07 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_SD_MspInit+0x10c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a2d      	ldr	r2, [pc, #180]	; (8001134 <HAL_SD_MspInit+0x10c>)
 8001080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_SD_MspInit+0x10c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <HAL_SD_MspInit+0x10c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_SD_MspInit+0x10c>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_SD_MspInit+0x10c>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_SD_MspInit+0x10c>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a21      	ldr	r2, [pc, #132]	; (8001134 <HAL_SD_MspInit+0x10c>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <HAL_SD_MspInit+0x10c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010c2:	2304      	movs	r3, #4
 80010c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010da:	230c      	movs	r3, #12
 80010dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <HAL_SD_MspInit+0x110>)
 80010e8:	f002 f98c 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80010ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001106:	230c      	movs	r3, #12
 8001108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001110:	4619      	mov	r1, r3
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <HAL_SD_MspInit+0x114>)
 8001114:	f002 f976 	bl	8003404 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2105      	movs	r1, #5
 800111c:	2031      	movs	r0, #49	; 0x31
 800111e:	f001 fed5 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001122:	2031      	movs	r0, #49	; 0x31
 8001124:	f001 feee 	bl	8002f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	37c8      	adds	r7, #200	; 0xc8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	50062400 	.word	0x50062400
 8001134:	40021000 	.word	0x40021000
 8001138:	48000c00 	.word	0x48000c00
 800113c:	48000800 	.word	0x48000800

08001140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_SPI_MspInit+0xb4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d144      	bne.n	80011ec <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <HAL_SPI_MspInit+0xbc>)
 80011c6:	f002 f91d 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80011ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011dc:	2305      	movs	r3, #5
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <HAL_SPI_MspInit+0xc0>)
 80011e8:	f002 f90c 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40003800 	.word	0x40003800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48002000 	.word	0x48002000
 8001200:	48000400 	.word	0x48000400

08001204 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_FMC_MspInit+0xe0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d15d      	bne.n	80012dc <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_FMC_MspInit+0xe0>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_FMC_MspInit+0xe4>)
 8001228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122a:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <HAL_FMC_MspInit+0xe4>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6513      	str	r3, [r2, #80]	; 0x50
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_FMC_MspInit+0xe4>)
 8001234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800123e:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001242:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001250:	230c      	movs	r3, #12
 8001252:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4824      	ldr	r0, [pc, #144]	; (80012ec <HAL_FMC_MspInit+0xe8>)
 800125a:	f002 f8d3 	bl	8003404 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800125e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001262:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001270:	230c      	movs	r3, #12
 8001272:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	481d      	ldr	r0, [pc, #116]	; (80012f0 <HAL_FMC_MspInit+0xec>)
 800127a:	f002 f8c3 	bl	8003404 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128e:	230c      	movs	r3, #12
 8001290:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4619      	mov	r1, r3
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <HAL_FMC_MspInit+0xf0>)
 8001298:	f002 f8b4 	bl	8003404 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800129c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80012a0:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <HAL_FMC_MspInit+0xf4>)
 80012b8:	f002 f8a4 	bl	8003404 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80012bc:	233f      	movs	r3, #63	; 0x3f
 80012be:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012cc:	230c      	movs	r3, #12
 80012ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <HAL_FMC_MspInit+0xf8>)
 80012d6:	f002 f895 	bl	8003404 <HAL_GPIO_Init>
 80012da:	e000      	b.n	80012de <HAL_FMC_MspInit+0xda>
    return;
 80012dc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000380 	.word	0x20000380
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48001000 	.word	0x48001000
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48001400 	.word	0x48001400
 80012fc:	48001800 	.word	0x48001800

08001300 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001308:	f7ff ff7c 	bl	8001204 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_InitTick+0xe0>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <HAL_InitTick+0xe0>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6593      	str	r3, [r2, #88]	; 0x58
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_InitTick+0xe0>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133a:	f107 0210 	add.w	r2, r7, #16
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fa2f 	bl	80047a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001354:	f003 f9fc 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8001358:	6378      	str	r0, [r7, #52]	; 0x34
 800135a:	e004      	b.n	8001366 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800135c:	f003 f9f8 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8001360:	4603      	mov	r3, r0
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_InitTick+0xe4>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	3b01      	subs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_InitTick+0xe8>)
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_InitTick+0xec>)
 8001378:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_InitTick+0xe8>)
 800137c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001380:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_InitTick+0xe8>)
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_InitTick+0xe8>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_InitTick+0xe8>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_InitTick+0xe8>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <HAL_InitTick+0xe8>)
 800139c:	f006 fe7e 	bl	800809c <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d11b      	bne.n	80013e6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <HAL_InitTick+0xe8>)
 80013b0:	f006 fed6 	bl	8008160 <HAL_TIM_Base_Start_IT>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d111      	bne.n	80013e6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013c2:	2036      	movs	r0, #54	; 0x36
 80013c4:	f001 fd9e 	bl	8002f04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d808      	bhi.n	80013e0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013ce:	2200      	movs	r2, #0
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	2036      	movs	r0, #54	; 0x36
 80013d4:	f001 fd7a 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_InitTick+0xf0>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e002      	b.n	80013e6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	431bde83 	.word	0x431bde83
 80013fc:	20000384 	.word	0x20000384
 8001400:	40001000 	.word	0x40001000
 8001404:	20000004 	.word	0x20000004

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Channel1_IRQHandler+0x10>)
 800143a:	f001 fe94 	bl	8003166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000016c 	.word	0x2000016c

08001448 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <ADC1_IRQHandler+0x10>)
 800144e:	f000 fc6f 	bl	8001d30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000104 	.word	0x20000104

0800145c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <SDMMC1_IRQHandler+0x10>)
 8001462:	f005 fab3 	bl	80069cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000248 	.word	0x20000248

08001470 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM6_DAC_IRQHandler+0x10>)
 8001476:	f006 fee3 	bl	8008240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000384 	.word	0x20000384

08001484 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f00b fef1 	bl	800d2bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014da:	f7fe ff05 	bl	80002e8 <main>

080014de <LoopForever>:

LoopForever:
    b LoopForever
 80014de:	e7fe      	b.n	80014de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014ec:	0800d624 	.word	0x0800d624
  ldr r2, =_sbss
 80014f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014f4:	20001dbc 	.word	0x20001dbc

080014f8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <CAN1_RX0_IRQHandler>

080014fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f001 fcd6 	bl	8002eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150a:	200f      	movs	r0, #15
 800150c:	f7ff ff02 	bl	8001314 <HAL_InitTick>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	e001      	b.n	8001520 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151c:	f7ff fbba 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001520:	79fb      	ldrb	r3, [r7, #7]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	200003d0 	.word	0x200003d0

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200003d0 	.word	0x200003d0

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3360      	adds	r3, #96	; 0x60
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <LL_ADC_SetOffset+0x44>)
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	4313      	orrs	r3, r2
 800164c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	03fff000 	.word	0x03fff000

08001664 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3360      	adds	r3, #96	; 0x60
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3360      	adds	r3, #96	; 0x60
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	615a      	str	r2, [r3, #20]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001712:	b480      	push	{r7}
 8001714:	b087      	sub	sp, #28
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3330      	adds	r3, #48	; 0x30
 8001722:	461a      	mov	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	4413      	add	r3, r2
 8001730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	211f      	movs	r1, #31
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	0e9b      	lsrs	r3, r3, #26
 800174a:	f003 011f 	and.w	r1, r3, #31
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3314      	adds	r3, #20
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	0e5b      	lsrs	r3, r3, #25
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	0d1b      	lsrs	r3, r3, #20
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2107      	movs	r1, #7
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	0d1b      	lsrs	r3, r3, #20
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0318 	and.w	r3, r3, #24
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <LL_ADC_SetChannelSingleDiff+0x44>)
 800180c:	40d9      	lsrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	400b      	ands	r3, r1
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	0007ffff 	.word	0x0007ffff

08001830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6093      	str	r3, [r2, #8]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001868:	d101      	bne.n	800186e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800188c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001890:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <LL_ADC_IsEnabled+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_IsEnabled+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192e:	f043 0204 	orr.w	r2, r3, #4
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b04      	cmp	r3, #4
 8001954:	d101      	bne.n	800195a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b08      	cmp	r3, #8
 800197a:	d101      	bne.n	8001980 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e12f      	b.n	8001c0a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff f993 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff3f 	bl	8001854 <LL_ADC_IsDeepPowerDownEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff25 	bl	8001830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff5a 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff3e 	bl	800187c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a00:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <HAL_ADC_Init+0x284>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	4a84      	ldr	r2, [pc, #528]	; (8001c18 <HAL_ADC_Init+0x288>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff3c 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10d      	bne.n	8001a4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff75 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001a58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 80c8 	bne.w	8001bf8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 80c4 	bne.w	8001bf8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a78:	f043 0202 	orr.w	r2, r3, #2
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff35 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a90:	4862      	ldr	r0, [pc, #392]	; (8001c1c <HAL_ADC_Init+0x28c>)
 8001a92:	f7ff ff2f 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	485f      	ldr	r0, [pc, #380]	; (8001c20 <HAL_ADC_Init+0x290>)
 8001aa4:	f7ff fd86 	bl	80015b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e5b      	ldrb	r3, [r3, #25]
 8001aac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ab8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001abe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	3b01      	subs	r3, #1
 8001adc:	045b      	lsls	r3, r3, #17
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_ADC_Init+0x294>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff12 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff1f 	bl	8001968 <LL_ADC_INJ_IsConversionOngoing>
 8001b2a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d140      	bne.n	8001bb4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d13d      	bne.n	8001bb4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
 8001b40:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b42:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b5a:	f023 0306 	bic.w	r3, r3, #6
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d118      	bne.n	8001ba4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b94:	430a      	orrs	r2, r1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	e007      	b.n	8001bb4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10c      	bne.n	8001bd6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f023 010f 	bic.w	r1, r3, #15
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	1e5a      	subs	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd4:	e007      	b.n	8001be6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 020f 	bic.w	r2, r2, #15
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58
 8001bf6:	e007      	b.n	8001c08 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	f043 0210 	orr.w	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000
 8001c18:	053e2d63 	.word	0x053e2d63
 8001c1c:	50040000 	.word	0x50040000
 8001c20:	50040300 	.word	0x50040300
 8001c24:	fff0c007 	.word	0xfff0c007

08001c28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fe82 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d167      	bne.n	8001d14 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Start_DMA+0x2a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e063      	b.n	8001d1a <HAL_ADC_Start_DMA+0xf2>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fe36 	bl	80028cc <ADC_Enable>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d14f      	bne.n	8001d0a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	f023 0206 	bic.w	r2, r3, #6
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c96:	e002      	b.n	8001c9e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca2:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <HAL_ADC_Start_DMA+0xfc>)
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_ADC_Start_DMA+0x100>)
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_ADC_Start_DMA+0x104>)
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	221c      	movs	r2, #28
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0210 	orr.w	r2, r2, #16
 8001cd4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3340      	adds	r3, #64	; 0x40
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f001 f9bb 	bl	8003070 <HAL_DMA_Start_IT>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fe09 	bl	800191a <LL_ADC_REG_StartConversion>
 8001d08:	e006      	b.n	8001d18 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	080029d9 	.word	0x080029d9
 8001d28:	08002ab1 	.word	0x08002ab1
 8001d2c:	08002acd 	.word	0x08002acd

08001d30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d017      	beq.n	8001d86 <HAL_ADC_IRQHandler+0x56>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fee9 	bl	8002b50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x6a>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d05e      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d059      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fc8e 	bl	80016ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d03e      	beq.n	8001e54 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d135      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d12e      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fda1 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d11a      	bne.n	8001e3c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 020c 	bic.w	r2, r2, #12
 8001e14:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d112      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	659a      	str	r2, [r3, #88]	; 0x58
 8001e3a:	e00b      	b.n	8001e54 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f043 0210 	orr.w	r2, r3, #16
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe f9f3 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x146>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d072      	beq.n	8001f66 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06d      	beq.n	8001f66 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fc5f 	bl	800176a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001eac:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fc1a 	bl	80016ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eb8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d047      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0x1b2>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03f      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d13a      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d133      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d12e      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fd32 	bl	8001968 <LL_ADC_INJ_IsConversionOngoing>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11a      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f18:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d112      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f3e:	e00b      	b.n	8001f58 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fdd1 	bl	8002b00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2260      	movs	r2, #96	; 0x60
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d011      	beq.n	8001f94 <HAL_ADC_IRQHandler+0x264>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f890 	bl	80020ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x294>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fdb7 	bl	8002b28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x2c4>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fda9 	bl	8002b3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d02a      	beq.n	8002054 <HAL_ADC_IRQHandler+0x324>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d025      	beq.n	8002054 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002010:	2301      	movs	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	e008      	b.n	8002028 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10e      	bne.n	800204c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	f043 0202 	orr.w	r2, r3, #2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f83a 	bl	80020c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d018      	beq.n	8002090 <HAL_ADC_IRQHandler+0x360>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	f043 0208 	orr.w	r2, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002088:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fd42 	bl	8002b14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0b6      	sub	sp, #216	; 0xd8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x22>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e3d5      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x7ce>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fc1d 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 83ba 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d824      	bhi.n	8002162 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	3b02      	subs	r3, #2
 800211e:	2b03      	cmp	r3, #3
 8002120:	d81b      	bhi.n	800215a <HAL_ADC_ConfigChannel+0x86>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_ADC_ConfigChannel+0x54>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	08002139 	.word	0x08002139
 800212c:	08002141 	.word	0x08002141
 8002130:	08002149 	.word	0x08002149
 8002134:	08002151 	.word	0x08002151
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	220c      	movs	r2, #12
 800213c:	605a      	str	r2, [r3, #4]
          break;
 800213e:	e011      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2212      	movs	r2, #18
 8002144:	605a      	str	r2, [r3, #4]
          break;
 8002146:	e00d      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2218      	movs	r2, #24
 800214c:	605a      	str	r2, [r3, #4]
          break;
 800214e:	e009      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002156:	605a      	str	r2, [r3, #4]
          break;
 8002158:	e004      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2206      	movs	r2, #6
 800215e:	605a      	str	r2, [r3, #4]
          break;
 8002160:	e000      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002162:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	f7ff face 	bl	8001712 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fbe1 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8002180:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fbed 	bl	8001968 <LL_ADC_INJ_IsConversionOngoing>
 800218e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 81c1 	bne.w	800251e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800219c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 81bc 	bne.w	800251e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ae:	d10f      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff fae8 	bl	8001790 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fa7c 	bl	80016c6 <LL_ADC_SetSamplingTimeCommonConfig>
 80021ce:	e00e      	b.n	80021ee <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	f7ff fad7 	bl	8001790 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fa6c 	bl	80016c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00a      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002220:	f7ff f9fc 	bl	800161c <LL_ADC_SetOffset>
 8002224:	e17b      	b.n	800251e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fa19 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x17e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fa0e 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	e01e      	b.n	8002290 <HAL_ADC_ConfigChannel+0x1bc>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fa03 	bl	8001664 <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e004      	b.n	800228e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1d4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	e018      	b.n	80022da <HAL_ADC_ConfigChannel+0x206>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e004      	b.n	80022da <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80022d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022da:	429a      	cmp	r2, r3
 80022dc:	d106      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f9d2 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f9b6 	bl	8001664 <LL_ADC_GetOffsetChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x244>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f9ab 	bl	8001664 <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	f003 021f 	and.w	r2, r3, #31
 8002316:	e01e      	b.n	8002356 <HAL_ADC_ConfigChannel+0x282>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9a0 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800233a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800233e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e004      	b.n	8002354 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800234a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_ConfigChannel+0x29a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	e018      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2cc>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800238a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e004      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d106      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2101      	movs	r1, #1
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f96f 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2102      	movs	r1, #2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f953 	bl	8001664 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <HAL_ADC_ConfigChannel+0x30a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f948 	bl	8001664 <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	e01e      	b.n	800241c <HAL_ADC_ConfigChannel+0x348>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f93d 	bl	8001664 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e004      	b.n	800241a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x360>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	e016      	b.n	8002462 <HAL_ADC_ConfigChannel+0x38e>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800244c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2102      	movs	r1, #2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f90e 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2103      	movs	r1, #3
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f8f2 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x3cc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2103      	movs	r1, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f8e7 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	e017      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x3fc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2103      	movs	r1, #3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f8dc 	bl	8001664 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e003      	b.n	80024ce <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80024c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x414>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	e011      	b.n	800250c <HAL_ADC_ConfigChannel+0x438>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	2103      	movs	r1, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f8b9 	bl	8001690 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f9e6 	bl	80018f4 <LL_ADC_IsEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 8140 	bne.w	80027b0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	461a      	mov	r2, r3
 800253e:	f7ff f953 	bl	80017e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a8f      	ldr	r2, [pc, #572]	; (8002784 <HAL_ADC_ConfigChannel+0x6b0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f040 8131 	bne.w	80027b0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x4a2>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2b09      	cmp	r3, #9
 800256c:	bf94      	ite	ls
 800256e:	2301      	movls	r3, #1
 8002570:	2300      	movhi	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e019      	b.n	80025aa <HAL_ADC_ConfigChannel+0x4d6>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002586:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e003      	b.n	800259a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d079      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x4f6>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	e015      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x522>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	069b      	lsls	r3, r3, #26
 80025f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x542>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	e017      	b.n	8002646 <HAL_ADC_ConfigChannel+0x572>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	ea42 0103 	orr.w	r1, r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x598>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	e018      	b.n	800269e <HAL_ADC_ConfigChannel+0x5ca>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269e:	430b      	orrs	r3, r1
 80026a0:	e081      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_ADC_ConfigChannel+0x5ea>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	3301      	adds	r3, #1
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026bc:	e015      	b.n	80026ea <HAL_ADC_ConfigChannel+0x616>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e003      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	069b      	lsls	r3, r3, #26
 80026e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_ADC_ConfigChannel+0x636>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	e017      	b.n	800273a <HAL_ADC_ConfigChannel+0x666>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	61fb      	str	r3, [r7, #28]
  return result;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e003      	b.n	800272e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	ea42 0103 	orr.w	r1, r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x692>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	f003 021f 	and.w	r2, r3, #31
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	3b1e      	subs	r3, #30
 800275e:	051b      	lsls	r3, r3, #20
 8002760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002764:	e01e      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x6d0>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	613b      	str	r3, [r7, #16]
  return result;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800277e:	2320      	movs	r3, #32
 8002780:	e006      	b.n	8002790 <HAL_ADC_ConfigChannel+0x6bc>
 8002782:	bf00      	nop
 8002784:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	3b1e      	subs	r3, #30
 800279e:	051b      	lsls	r3, r3, #20
 80027a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a4:	430b      	orrs	r3, r1
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe fff0 	bl	8001790 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_ADC_ConfigChannel+0x7d8>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d06c      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027bc:	483c      	ldr	r0, [pc, #240]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027be:	f7fe ff1f 	bl	8001600 <LL_ADC_GetCommonPathInternalCh>
 80027c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3a      	ldr	r2, [pc, #232]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d127      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d121      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d157      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ee:	4619      	mov	r1, r3
 80027f0:	482f      	ldr	r0, [pc, #188]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027f2:	f7fe fef2 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_ADC_ConfigChannel+0x7e8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_ADC_ConfigChannel+0x7ec>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002810:	e002      	b.n	8002818 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b01      	subs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800281e:	e03a      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d113      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x77e>
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d12a      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002848:	4619      	mov	r1, r3
 800284a:	4819      	ldr	r0, [pc, #100]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800284c:	f7fe fec5 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002850:	e021      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11c      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002876:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800287a:	4619      	mov	r1, r3
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800287e:	f7fe feac 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
 8002882:	e008      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800289e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	37d8      	adds	r7, #216	; 0xd8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	80080000 	.word	0x80080000
 80028b0:	50040300 	.word	0x50040300
 80028b4:	c7520000 	.word	0xc7520000
 80028b8:	50040000 	.word	0x50040000
 80028bc:	20000000 	.word	0x20000000
 80028c0:	053e2d63 	.word	0x053e2d63
 80028c4:	cb840000 	.word	0xcb840000
 80028c8:	80000001 	.word	0x80000001

080028cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f809 	bl	80018f4 <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d169      	bne.n	80029bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <ADC_Enable+0xfc>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e055      	b.n	80029be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe ffd8 	bl	80018cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800291c:	482b      	ldr	r0, [pc, #172]	; (80029cc <ADC_Enable+0x100>)
 800291e:	f7fe fe6f 	bl	8001600 <LL_ADC_GetCommonPathInternalCh>
 8002922:	4603      	mov	r3, r0
 8002924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <ADC_Enable+0x104>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <ADC_Enable+0x108>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002946:	e002      	b.n	800294e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3b01      	subs	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002954:	f7fe fdfe 	bl	8001554 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295a:	e028      	b.n	80029ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ffc7 	bl	80018f4 <LL_ADC_IsEnabled>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe ffab 	bl	80018cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002976:	f7fe fded 	bl	8001554 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d914      	bls.n	80029ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d00d      	beq.n	80029ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e007      	b.n	80029be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d1cf      	bne.n	800295c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	8000003f 	.word	0x8000003f
 80029cc:	50040300 	.word	0x50040300
 80029d0:	20000000 	.word	0x20000000
 80029d4:	053e2d63 	.word	0x053e2d63

080029d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d14b      	bne.n	8002a8a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d021      	beq.n	8002a50 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fe6b 	bl	80016ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d032      	beq.n	8002a82 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d12b      	bne.n	8002a82 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11f      	bne.n	8002a82 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4e:	e018      	b.n	8002a82 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d111      	bne.n	8002a82 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f7fd fbdc 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a88:	e00e      	b.n	8002aa8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fb12 	bl	80020c0 <HAL_ADC_ErrorCallback>
}
 8002a9c:	e004      	b.n	8002aa8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff faea 	bl	8002098 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff fae4 	bl	80020c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0ed      	b.n	8002d52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f988 	bl	8000e98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b98:	f7fe fcdc 	bl	8001554 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b9e:	e012      	b.n	8002bc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba0:	f7fe fcd8 	bl	8001554 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b0a      	cmp	r3, #10
 8002bac:	d90b      	bls.n	8002bc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0c5      	b.n	8002d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0e5      	beq.n	8002ba0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0202 	bic.w	r2, r2, #2
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be4:	f7fe fcb6 	bl	8001554 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bea:	e012      	b.n	8002c12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bec:	f7fe fcb2 	bl	8001554 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b0a      	cmp	r3, #10
 8002bf8:	d90b      	bls.n	8002c12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2205      	movs	r2, #5
 8002c0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e09f      	b.n	8002d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e5      	bne.n	8002bec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d108      	bne.n	8002c3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e007      	b.n	8002c4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7e5b      	ldrb	r3, [r3, #25]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e007      	b.n	8002c74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e9b      	ldrb	r3, [r3, #26]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d108      	bne.n	8002c8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0220 	orr.w	r2, r2, #32
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e007      	b.n	8002c9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0220 	bic.w	r2, r2, #32
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7edb      	ldrb	r3, [r3, #27]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d108      	bne.n	8002cb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0210 	bic.w	r2, r2, #16
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e007      	b.n	8002cc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0210 	orr.w	r2, r2, #16
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7f1b      	ldrb	r3, [r3, #28]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d108      	bne.n	8002ce2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e007      	b.n	8002cf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0208 	bic.w	r2, r2, #8
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7f5b      	ldrb	r3, [r3, #29]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d108      	bne.n	8002d0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ff4c 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ede:	f7ff ff61 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002ee2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f7ff ffb1 	bl	8002e50 <NVIC_EncodePriority>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff80 	bl	8002dfc <__NVIC_SetPriority>
}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff54 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08d      	b.n	800304e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_DMA_Init+0x138>)
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d80f      	bhi.n	8002f5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b45      	ldr	r3, [pc, #276]	; (800305c <HAL_DMA_Init+0x13c>)
 8002f46:	4413      	add	r3, r2
 8002f48:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_DMA_Init+0x140>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	009a      	lsls	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_DMA_Init+0x144>)
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f5c:	e00e      	b.n	8002f7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_DMA_Init+0x148>)
 8002f66:	4413      	add	r3, r2
 8002f68:	4a3d      	ldr	r2, [pc, #244]	; (8003060 <HAL_DMA_Init+0x140>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a3c      	ldr	r2, [pc, #240]	; (800306c <HAL_DMA_Init+0x14c>)
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9b6 	bl	8003340 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fdc:	d102      	bne.n	8002fe4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ff8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_DMA_Init+0x104>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b04      	cmp	r3, #4
 8003008:	d80c      	bhi.n	8003024 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9d6 	bl	80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	e008      	b.n	8003036 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40020407 	.word	0x40020407
 800305c:	bffdfff8 	.word	0xbffdfff8
 8003060:	cccccccd 	.word	0xcccccccd
 8003064:	40020000 	.word	0x40020000
 8003068:	bffdfbf8 	.word	0xbffdfbf8
 800306c:	40020400 	.word	0x40020400

08003070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_DMA_Start_IT+0x20>
 800308c:	2302      	movs	r3, #2
 800308e:	e066      	b.n	800315e <HAL_DMA_Start_IT+0xee>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d155      	bne.n	8003150 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f8fb 	bl	80032c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 020e 	orr.w	r2, r2, #14
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00f      	b.n	8003108 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0204 	bic.w	r2, r2, #4
 80030f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 020a 	orr.w	r2, r2, #10
 8003106:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003124:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e005      	b.n	800315c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 031c 	and.w	r3, r3, #28
 8003186:	2204      	movs	r2, #4
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d026      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x7a>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d021      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0204 	bic.w	r2, r2, #4
 80031b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 021c 	and.w	r2, r3, #28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2104      	movs	r1, #4
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d071      	beq.n	80032ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031de:	e06c      	b.n	80032ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f003 031c 	and.w	r3, r3, #28
 80031e8:	2202      	movs	r2, #2
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02e      	beq.n	8003252 <HAL_DMA_IRQHandler+0xec>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d029      	beq.n	8003252 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 020a 	bic.w	r2, r2, #10
 800321a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f003 021c 	and.w	r2, r3, #28
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2102      	movs	r1, #2
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d038      	beq.n	80032ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003250:	e033      	b.n	80032ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f003 031c 	and.w	r3, r3, #28
 800325a:	2208      	movs	r2, #8
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02a      	beq.n	80032bc <HAL_DMA_IRQHandler+0x156>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d025      	beq.n	80032bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 020e 	bic.w	r2, r2, #14
 800327e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f003 021c 	and.w	r2, r3, #28
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
}
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032da:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032ec:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f003 021c 	and.w	r2, r3, #28
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003300:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d108      	bne.n	8003324 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003322:	e007      	b.n	8003334 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003350:	429a      	cmp	r2, r3
 8003352:	d80a      	bhi.n	800336a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003360:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6493      	str	r3, [r2, #72]	; 0x48
 8003368:	e007      	b.n	800337a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003374:	4413      	add	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3b08      	subs	r3, #8
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003390:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40020407 	.word	0x40020407
 80033b0:	4002081c 	.word	0x4002081c
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	40020880 	.word	0x40020880

080033bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033de:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	1000823f 	.word	0x1000823f
 8003400:	40020940 	.word	0x40020940

08003404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003412:	e166      	b.n	80036e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8158 	beq.w	80036dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d005      	beq.n	8003444 <HAL_GPIO_Init+0x40>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d130      	bne.n	80034a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800347a:	2201      	movs	r2, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 0201 	and.w	r2, r3, #1
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d017      	beq.n	80034e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d123      	bne.n	8003536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	08da      	lsrs	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3208      	adds	r2, #8
 8003530:	6939      	ldr	r1, [r7, #16]
 8003532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0203 	and.w	r2, r3, #3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80b2 	beq.w	80036dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_GPIO_Init+0x2fc>)
 800357a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357c:	4a60      	ldr	r2, [pc, #384]	; (8003700 <HAL_GPIO_Init+0x2fc>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6613      	str	r3, [r2, #96]	; 0x60
 8003584:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_GPIO_Init+0x2fc>)
 8003586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <HAL_GPIO_Init+0x300>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	220f      	movs	r2, #15
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ba:	d02b      	beq.n	8003614 <HAL_GPIO_Init+0x210>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_GPIO_Init+0x304>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d025      	beq.n	8003610 <HAL_GPIO_Init+0x20c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a51      	ldr	r2, [pc, #324]	; (800370c <HAL_GPIO_Init+0x308>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01f      	beq.n	800360c <HAL_GPIO_Init+0x208>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a50      	ldr	r2, [pc, #320]	; (8003710 <HAL_GPIO_Init+0x30c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d019      	beq.n	8003608 <HAL_GPIO_Init+0x204>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a4f      	ldr	r2, [pc, #316]	; (8003714 <HAL_GPIO_Init+0x310>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_GPIO_Init+0x200>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a4e      	ldr	r2, [pc, #312]	; (8003718 <HAL_GPIO_Init+0x314>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00d      	beq.n	8003600 <HAL_GPIO_Init+0x1fc>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a4d      	ldr	r2, [pc, #308]	; (800371c <HAL_GPIO_Init+0x318>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <HAL_GPIO_Init+0x1f8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a4c      	ldr	r2, [pc, #304]	; (8003720 <HAL_GPIO_Init+0x31c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_GPIO_Init+0x1f4>
 80035f4:	2307      	movs	r3, #7
 80035f6:	e00e      	b.n	8003616 <HAL_GPIO_Init+0x212>
 80035f8:	2308      	movs	r3, #8
 80035fa:	e00c      	b.n	8003616 <HAL_GPIO_Init+0x212>
 80035fc:	2306      	movs	r3, #6
 80035fe:	e00a      	b.n	8003616 <HAL_GPIO_Init+0x212>
 8003600:	2305      	movs	r3, #5
 8003602:	e008      	b.n	8003616 <HAL_GPIO_Init+0x212>
 8003604:	2304      	movs	r3, #4
 8003606:	e006      	b.n	8003616 <HAL_GPIO_Init+0x212>
 8003608:	2303      	movs	r3, #3
 800360a:	e004      	b.n	8003616 <HAL_GPIO_Init+0x212>
 800360c:	2302      	movs	r3, #2
 800360e:	e002      	b.n	8003616 <HAL_GPIO_Init+0x212>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_GPIO_Init+0x212>
 8003614:	2300      	movs	r3, #0
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	f002 0203 	and.w	r2, r2, #3
 800361c:	0092      	lsls	r2, r2, #2
 800361e:	4093      	lsls	r3, r2
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003626:	4937      	ldr	r1, [pc, #220]	; (8003704 <HAL_GPIO_Init+0x300>)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_GPIO_Init+0x320>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003658:	4a32      	ldr	r2, [pc, #200]	; (8003724 <HAL_GPIO_Init+0x320>)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_GPIO_Init+0x320>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003682:	4a28      	ldr	r2, [pc, #160]	; (8003724 <HAL_GPIO_Init+0x320>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003688:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_GPIO_Init+0x320>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <HAL_GPIO_Init+0x320>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_GPIO_Init+0x320>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <HAL_GPIO_Init+0x320>)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3301      	adds	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f47f ae91 	bne.w	8003414 <HAL_GPIO_Init+0x10>
  }
}
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40021000 	.word	0x40021000
 8003704:	40010000 	.word	0x40010000
 8003708:	48000400 	.word	0x48000400
 800370c:	48000800 	.word	0x48000800
 8003710:	48000c00 	.word	0x48000c00
 8003714:	48001000 	.word	0x48001000
 8003718:	48001400 	.word	0x48001400
 800371c:	48001800 	.word	0x48001800
 8003720:	48001c00 	.word	0x48001c00
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e001      	b.n	800374a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003774:	e002      	b.n	800377c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e081      	b.n	800389e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fbb6 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	e006      	b.n	8003810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800380e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d104      	bne.n	8003822 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003820:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d138      	bne.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e032      	b.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2224      	movs	r2, #36	; 0x24
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d139      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800395c:	2302      	movs	r3, #2
 800395e:	e033      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800398e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039d8:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e4:	d102      	bne.n	80039ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80039e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ea:	e00b      	b.n	8003a04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fa:	d102      	bne.n	8003a02 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80039fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a00:	e000      	b.n	8003a04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a02:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40007000 	.word	0x40007000

08003a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d141      	bne.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a22:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d131      	bne.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a30:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a36:	4a46      	ldr	r2, [pc, #280]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a40:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a48:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a50:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2232      	movs	r2, #50	; 0x32
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	4a3f      	ldr	r2, [pc, #252]	; (8003b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a66:	e002      	b.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6e:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7a:	d102      	bne.n	8003a82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f2      	bne.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a82:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8e:	d158      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e057      	b.n	8003b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a94:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003aa4:	e04d      	b.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d141      	bne.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	d131      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac2:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2232      	movs	r2, #50	; 0x32
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af2:	e002      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b06:	d102      	bne.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f2      	bne.n	8003af4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d112      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e011      	b.n	8003b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b30:	e007      	b.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b40:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40007000 	.word	0x40007000
 8003b54:	20000000 	.word	0x20000000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6a:	6053      	str	r3, [r2, #4]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40007000 	.word	0x40007000

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f000 bc08 	b.w	80043a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b90:	4b96      	ldr	r3, [pc, #600]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b9a:	4b94      	ldr	r3, [pc, #592]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80e4 	beq.w	8003d7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4c>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	f040 808b 	bne.w	8003cd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	f040 8087 	bne.w	8003cd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc8:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x64>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e3df      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_RCC_OscConfig+0x7e>
 8003bf0:	4b7e      	ldr	r3, [pc, #504]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf8:	e005      	b.n	8003c06 <HAL_RCC_OscConfig+0x8a>
 8003bfa:	4b7c      	ldr	r3, [pc, #496]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d223      	bcs.n	8003c52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fdfc 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e3c0      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1e:	4b73      	ldr	r3, [pc, #460]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a72      	ldr	r2, [pc, #456]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b70      	ldr	r3, [pc, #448]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	496d      	ldr	r1, [pc, #436]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3c:	4b6b      	ldr	r3, [pc, #428]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	4968      	ldr	r1, [pc, #416]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
 8003c50:	e025      	b.n	8003c9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c52:	4b66      	ldr	r3, [pc, #408]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a65      	ldr	r2, [pc, #404]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4960      	ldr	r1, [pc, #384]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c70:	4b5e      	ldr	r3, [pc, #376]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	495b      	ldr	r1, [pc, #364]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fdbc 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e380      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c9e:	f000 fcc1 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	4950      	ldr	r1, [pc, #320]	; (8003df0 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a4e      	ldr	r2, [pc, #312]	; (8003df4 <HAL_RCC_OscConfig+0x278>)
 8003cbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fb26 	bl	8001314 <HAL_InitTick>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d052      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	e364      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d032      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cde:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a42      	ldr	r2, [pc, #264]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cea:	f7fd fc33 	bl	8001554 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf2:	f7fd fc2f 	bl	8001554 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e34d      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d04:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d10:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a35      	ldr	r2, [pc, #212]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d16:	f043 0308 	orr.w	r3, r3, #8
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4930      	ldr	r1, [pc, #192]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	492b      	ldr	r1, [pc, #172]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
 8003d42:	e01a      	b.n	8003d7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a28      	ldr	r2, [pc, #160]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fc00 	bl	8001554 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d58:	f7fd fbfc 	bl	8001554 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e31a      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1dc>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d073      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x21c>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d10e      	bne.n	8003db0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d063      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2f0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d15f      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e2f7      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e025      	b.n	8003e14 <HAL_RCC_OscConfig+0x298>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d114      	bne.n	8003dfc <HAL_RCC_OscConfig+0x280>
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a05      	ldr	r2, [pc, #20]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a02      	ldr	r2, [pc, #8]	; (8003dec <HAL_RCC_OscConfig+0x270>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e013      	b.n	8003e14 <HAL_RCC_OscConfig+0x298>
 8003dec:	40021000 	.word	0x40021000
 8003df0:	0800d560 	.word	0x0800d560
 8003df4:	20000000 	.word	0x20000000
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	4ba0      	ldr	r3, [pc, #640]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a9f      	ldr	r2, [pc, #636]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b9d      	ldr	r3, [pc, #628]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a9c      	ldr	r2, [pc, #624]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fb9a 	bl	8001554 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd fb96 	bl	8001554 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e2b4      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e36:	4b92      	ldr	r3, [pc, #584]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x2a8>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fb86 	bl	8001554 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fb82 	bl	8001554 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e2a0      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5e:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2d0>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d060      	beq.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_OscConfig+0x310>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d119      	bne.n	8003eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d116      	bne.n	8003eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e8c:	4b7c      	ldr	r3, [pc, #496]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x328>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e27d      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b76      	ldr	r3, [pc, #472]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	4973      	ldr	r1, [pc, #460]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb8:	e040      	b.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d023      	beq.n	8003f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec2:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6e      	ldr	r2, [pc, #440]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fd fb41 	bl	8001554 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed6:	f7fd fb3d 	bl	8001554 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e25b      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee8:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b62      	ldr	r3, [pc, #392]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	495f      	ldr	r1, [pc, #380]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e018      	b.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fb1d 	bl	8001554 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1e:	f7fd fb19 	bl	8001554 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e237      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d03c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f50:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f56:	4a4a      	ldr	r2, [pc, #296]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd faf8 	bl	8001554 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd faf4 	bl	8001554 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e212      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ef      	beq.n	8003f68 <HAL_RCC_OscConfig+0x3ec>
 8003f88:	e01b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f90:	4a3b      	ldr	r2, [pc, #236]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9a:	f7fd fadb 	bl	8001554 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7fd fad7 	bl	8001554 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1f5      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ef      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a6 	beq.w	800411c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10d      	bne.n	8003ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	6593      	str	r3, [r2, #88]	; 0x58
 8003fec:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCC_OscConfig+0x508>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d118      	bne.n	800403a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_OscConfig+0x508>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <HAL_RCC_OscConfig+0x508>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004014:	f7fd fa9e 	bl	8001554 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fd fa9a 	bl	8001554 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1b8      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_RCC_OscConfig+0x508>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d108      	bne.n	8004054 <HAL_RCC_OscConfig+0x4d8>
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004052:	e029      	b.n	80040a8 <HAL_RCC_OscConfig+0x52c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b05      	cmp	r3, #5
 800405a:	d115      	bne.n	8004088 <HAL_RCC_OscConfig+0x50c>
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a03      	ldr	r2, [pc, #12]	; (8004080 <HAL_RCC_OscConfig+0x504>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407c:	e014      	b.n	80040a8 <HAL_RCC_OscConfig+0x52c>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
 8004088:	4b9d      	ldr	r3, [pc, #628]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	4a9c      	ldr	r2, [pc, #624]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004098:	4b99      	ldr	r3, [pc, #612]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	4a98      	ldr	r2, [pc, #608]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d016      	beq.n	80040de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fa50 	bl	8001554 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fd fa4c 	bl	8001554 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e168      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ce:	4b8c      	ldr	r3, [pc, #560]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ed      	beq.n	80040b8 <HAL_RCC_OscConfig+0x53c>
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fd fa39 	bl	8001554 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fd fa35 	bl	8001554 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e151      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040fc:	4b80      	ldr	r3, [pc, #512]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ed      	bne.n	80040e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	4a7a      	ldr	r2, [pc, #488]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d03c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004130:	4b73      	ldr	r3, [pc, #460]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004136:	4a72      	ldr	r2, [pc, #456]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fd fa08 	bl	8001554 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004148:	f7fd fa04 	bl	8001554 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e122      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415a:	4b69      	ldr	r3, [pc, #420]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800415c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ef      	beq.n	8004148 <HAL_RCC_OscConfig+0x5cc>
 8004168:	e01b      	b.n	80041a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800416a:	4b65      	ldr	r3, [pc, #404]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800416c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004170:	4a63      	ldr	r2, [pc, #396]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fd f9eb 	bl	8001554 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004182:	f7fd f9e7 	bl	8001554 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e105      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004194:	4b5a      	ldr	r3, [pc, #360]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ef      	bne.n	8004182 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80f9 	beq.w	800439e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f040 80cf 	bne.w	8004354 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041b6:	4b52      	ldr	r3, [pc, #328]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0203 	and.w	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d12c      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	3b01      	subs	r3, #1
 80041d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d123      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d11b      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d113      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d109      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	3b01      	subs	r3, #1
 800421e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d071      	beq.n	8004308 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d068      	beq.n	80042fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800422a:	4b35      	ldr	r3, [pc, #212]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004236:	4b32      	ldr	r3, [pc, #200]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0ac      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004246:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800424c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004250:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004252:	f7fd f97f 	bl	8001554 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fd f97b 	bl	8001554 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e099      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCC_OscConfig+0x788>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004288:	3a01      	subs	r2, #1
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004292:	0212      	lsls	r2, r2, #8
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800429a:	0852      	lsrs	r2, r2, #1
 800429c:	3a01      	subs	r2, #1
 800429e:	0552      	lsls	r2, r2, #21
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b2:	06d2      	lsls	r2, r2, #27
 80042b4:	430a      	orrs	r2, r1
 80042b6:	4912      	ldr	r1, [pc, #72]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d4:	f7fd f93e 	bl	8001554 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd f93a 	bl	8001554 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e058      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_RCC_OscConfig+0x784>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fa:	e050      	b.n	800439e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e04f      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
 8004300:	40021000 	.word	0x40021000
 8004304:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d144      	bne.n	800439e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 800431a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800431e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800432c:	f7fd f912 	bl	8001554 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd f90e 	bl	8001554 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e02c      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x7b8>
 8004352:	e024      	b.n	800439e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d01f      	beq.n	800439a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd f8f5 	bl	8001554 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436e:	f7fd f8f1 	bl	8001554 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e00f      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4905      	ldr	r1, [pc, #20]	; (80043a8 <HAL_RCC_OscConfig+0x82c>)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_OscConfig+0x830>)
 8004394:	4013      	ands	r3, r2
 8004396:	60cb      	str	r3, [r1, #12]
 8004398:	e001      	b.n	800439e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	feeefffc 	.word	0xfeeefffc

080043b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e11d      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c8:	4b90      	ldr	r3, [pc, #576]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d910      	bls.n	80043f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b8d      	ldr	r3, [pc, #564]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 020f 	bic.w	r2, r3, #15
 80043de:	498b      	ldr	r1, [pc, #556]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b89      	ldr	r3, [pc, #548]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e105      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	4b81      	ldr	r3, [pc, #516]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004410:	429a      	cmp	r2, r3
 8004412:	d908      	bls.n	8004426 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004414:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	497b      	ldr	r1, [pc, #492]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d079      	beq.n	8004526 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d11e      	bne.n	8004478 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	4b75      	ldr	r3, [pc, #468]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0dc      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800444a:	f000 fa39 	bl	80048c0 <RCC_GetSysClockFreqFromPLLSource>
 800444e:	4603      	mov	r3, r0
 8004450:	4a70      	ldr	r2, [pc, #448]	; (8004614 <HAL_RCC_ClockConfig+0x264>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d946      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004456:	4b6e      	ldr	r3, [pc, #440]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d140      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004462:	4b6b      	ldr	r3, [pc, #428]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800446a:	4a69      	ldr	r2, [pc, #420]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 800446c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004470:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e035      	b.n	80044e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004480:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d115      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b9      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004498:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ad      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0a5      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044b8:	f000 f8b4 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80044bc:	4603      	mov	r3, r0
 80044be:	4a55      	ldr	r2, [pc, #340]	; (8004614 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d90f      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044c4:	4b52      	ldr	r3, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044d0:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d8:	4a4d      	ldr	r2, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80044da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044e4:	4b4a      	ldr	r3, [pc, #296]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 0203 	bic.w	r2, r3, #3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4947      	ldr	r1, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f6:	f7fd f82d 	bl	8001554 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fe:	f7fd f829 	bl	8001554 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e077      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004514:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 020c 	and.w	r2, r3, #12
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	429a      	cmp	r2, r3
 8004524:	d1eb      	bne.n	80044fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d105      	bne.n	8004538 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800452c:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a37      	ldr	r2, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004536:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004550:	429a      	cmp	r2, r3
 8004552:	d208      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	492b      	ldr	r1, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004566:	4b29      	ldr	r3, [pc, #164]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d210      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 020f 	bic.w	r2, r3, #15
 800457c:	4923      	ldr	r1, [pc, #140]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <HAL_RCC_ClockConfig+0x25c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e036      	b.n	8004604 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4918      	ldr	r1, [pc, #96]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4910      	ldr	r1, [pc, #64]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d4:	f000 f826 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCC_ClockConfig+0x260>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	490c      	ldr	r1, [pc, #48]	; (8004618 <HAL_RCC_ClockConfig+0x268>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x26c>)
 80045f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fc fe8b 	bl	8001314 <HAL_InitTick>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]

  return status;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40022000 	.word	0x40022000
 8004610:	40021000 	.word	0x40021000
 8004614:	04c4b400 	.word	0x04c4b400
 8004618:	0800d560 	.word	0x0800d560
 800461c:	20000000 	.word	0x20000000
 8004620:	20000004 	.word	0x20000004

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800463c:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x34>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d121      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d11e      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004658:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004664:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e005      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004680:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d102      	bne.n	80046a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e004      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a8:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 80046aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b0c      	cmp	r3, #12
 80046b0:	d134      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0xa6>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0xac>
 80046c8:	e005      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 80046cc:	617b      	str	r3, [r7, #20]
      break;
 80046ce:	e005      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046d0:	4b18      	ldr	r3, [pc, #96]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 80046d2:	617b      	str	r3, [r7, #20]
      break;
 80046d4:	e002      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	617b      	str	r3, [r7, #20]
      break;
 80046da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3301      	adds	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	fb03 f202 	mul.w	r2, r3, r2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	0e5b      	lsrs	r3, r3, #25
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	3301      	adds	r3, #1
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800471c:	69bb      	ldr	r3, [r7, #24]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	; 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	0800d578 	.word	0x0800d578
 8004734:	00f42400 	.word	0x00f42400

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000000 	.word	0x20000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	0800d570 	.word	0x0800d570

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004780:	f7ff ffda 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0adb      	lsrs	r3, r3, #11
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800d570 	.word	0x0800d570

080047a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	220f      	movs	r2, #15
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0203 	and.w	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_RCC_GetClockConfig+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	40022000 	.word	0x40022000

0800480c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004824:	f7ff f8d6 	bl	80039d4 <HAL_PWREx_GetVoltageRange>
 8004828:	6178      	str	r0, [r7, #20]
 800482a:	e014      	b.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004844:	f7ff f8c6 	bl	80039d4 <HAL_PWREx_GetVoltageRange>
 8004848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d10b      	bne.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d913      	bls.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2ba0      	cmp	r3, #160	; 0xa0
 8004868:	d902      	bls.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800486a:	2302      	movs	r3, #2
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e00d      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e00a      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d902      	bls.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800487c:	2302      	movs	r3, #2
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e004      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b70      	cmp	r3, #112	; 0x70
 8004886:	d101      	bne.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004888:	2301      	movs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 020f 	bic.w	r2, r3, #15
 8004894:	4909      	ldr	r1, [pc, #36]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40022000 	.word	0x40022000

080048c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d00b      	beq.n	80048ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d825      	bhi.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d008      	beq.n	80048f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11f      	bne.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048ea:	613b      	str	r3, [r7, #16]
    break;
 80048ec:	e01f      	b.n	800492e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048f0:	613b      	str	r3, [r7, #16]
    break;
 80048f2:	e01c      	b.n	800492e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048f4:	4b21      	ldr	r3, [pc, #132]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e005      	b.n	800491c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	613b      	str	r3, [r7, #16]
    break;
 8004926:	e002      	b.n	800492e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
    break;
 800492c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	3301      	adds	r3, #1
 800493a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	fb03 f202 	mul.w	r2, r3, r2
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0e5b      	lsrs	r3, r3, #25
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800496e:	683b      	ldr	r3, [r7, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40021000 	.word	0x40021000
 8004980:	00f42400 	.word	0x00f42400
 8004984:	0800d578 	.word	0x0800d578

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004990:	2300      	movs	r3, #0
 8004992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004994:	2300      	movs	r3, #0
 8004996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d040      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a8:	2b80      	cmp	r3, #128	; 0x80
 80049aa:	d02a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d825      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049b0:	2b60      	cmp	r3, #96	; 0x60
 80049b2:	d026      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d821      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d006      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d81d      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d010      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049c8:	e018      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049ca:	4b89      	ldr	r3, [pc, #548]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4a88      	ldr	r2, [pc, #544]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d6:	e015      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fa82 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e8:	e00c      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3320      	adds	r3, #32
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fb6d 	bl	80060d0 <RCCEx_PLLSAI2_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	74fb      	strb	r3, [r7, #19]
      break;
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a0a:	4b79      	ldr	r3, [pc, #484]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a10:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a18:	4975      	ldr	r1, [pc, #468]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a20:	e001      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d047      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3a:	d030      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d82a      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a46:	d02a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d824      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d81e      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d010      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a64:	e018      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a66:	4b62      	ldr	r3, [pc, #392]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a61      	ldr	r2, [pc, #388]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a72:	e015      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fa34 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a84:	e00c      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3320      	adds	r3, #32
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fb1f 	bl	80060d0 <RCCEx_PLLSAI2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	74fb      	strb	r3, [r7, #19]
      break;
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aa6:	4b52      	ldr	r3, [pc, #328]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	494e      	ldr	r1, [pc, #312]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004abc:	e001      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 809f 	beq.w	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ad4:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	4a40      	ldr	r2, [pc, #256]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b02:	2301      	movs	r3, #1
 8004b04:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3a      	ldr	r2, [pc, #232]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b12:	f7fc fd1f 	bl	8001554 <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b18:	e009      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fc fd1b 	bl	8001554 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d902      	bls.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b2c:	e005      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ef      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d15b      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01f      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d019      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b8a:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d016      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fc fcda 	bl	8001554 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fc fcd6 	bl	8001554 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d902      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	74fb      	strb	r3, [r7, #19]
            break;
 8004bba:	e006      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ec      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10c      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be8:	e008      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	74bb      	strb	r3, [r7, #18]
 8004bee:	e005      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
 8004bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bfc:	7c7b      	ldrb	r3, [r7, #17]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c02:	4ba0      	ldr	r3, [pc, #640]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	4a9f      	ldr	r2, [pc, #636]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c1a:	4b9a      	ldr	r3, [pc, #616]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f023 0203 	bic.w	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	4996      	ldr	r1, [pc, #600]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c3c:	4b91      	ldr	r3, [pc, #580]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f023 020c 	bic.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	498e      	ldr	r1, [pc, #568]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c5e:	4b89      	ldr	r3, [pc, #548]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	4985      	ldr	r1, [pc, #532]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c80:	4b80      	ldr	r3, [pc, #512]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	497d      	ldr	r1, [pc, #500]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ca2:	4b78      	ldr	r3, [pc, #480]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	4974      	ldr	r1, [pc, #464]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	496c      	ldr	r1, [pc, #432]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce6:	4b67      	ldr	r3, [pc, #412]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf4:	4963      	ldr	r1, [pc, #396]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d08:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d16:	495b      	ldr	r1, [pc, #364]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2a:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	4952      	ldr	r1, [pc, #328]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d4c:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	494a      	ldr	r1, [pc, #296]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d6e:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	4941      	ldr	r1, [pc, #260]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d90:	4b3c      	ldr	r3, [pc, #240]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9e:	4939      	ldr	r1, [pc, #228]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d028      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc0:	4930      	ldr	r1, [pc, #192]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ddc:	60d3      	str	r3, [r2, #12]
 8004dde:	e011      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f879 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d04d      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e18:	d108      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e2a:	e012      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e2c:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e32:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4a:	490e      	ldr	r1, [pc, #56]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
 8004e68:	e020      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e72:	d109      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a02      	ldr	r2, [pc, #8]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7e:	60d3      	str	r3, [r2, #12]
 8004e80:	e014      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	2101      	movs	r1, #1
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 f825 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d028      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eb8:	4b7a      	ldr	r3, [pc, #488]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec6:	4977      	ldr	r1, [pc, #476]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed8:	4b72      	ldr	r3, [pc, #456]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a71      	ldr	r2, [pc, #452]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee2:	60d3      	str	r3, [r2, #12]
 8004ee4:	e011      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fff6 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01e      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f16:	4b63      	ldr	r3, [pc, #396]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f26:	495f      	ldr	r1, [pc, #380]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 ffd1 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00b      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f60:	4b50      	ldr	r3, [pc, #320]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f66:	f023 0204 	bic.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f70:	494c      	ldr	r1, [pc, #304]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f84:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f8a:	f023 0218 	bic.w	r2, r3, #24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	4943      	ldr	r1, [pc, #268]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d035      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fa8:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3d      	ldr	r2, [pc, #244]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fc face 	bl	8001554 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fba:	e009      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fbc:	f7fc faca 	bl	8001554 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ef      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d113      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004fe2:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff2:	492c      	ldr	r1, [pc, #176]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3320      	adds	r3, #32
 8004ffe:	2102      	movs	r1, #2
 8005000:	4618      	mov	r0, r3
 8005002:	f001 f865 	bl	80060d0 <RCCEx_PLLSAI2_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800500a:	7cfb      	ldrb	r3, [r7, #19]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	491c      	ldr	r1, [pc, #112]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005042:	d10c      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3320      	adds	r3, #32
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f001 f840 	bl	80060d0 <RCCEx_PLLSAI2_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800505a:	7cfb      	ldrb	r3, [r7, #19]
 800505c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800506c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507a:	490a      	ldr	r1, [pc, #40]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800508c:	d105      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005098:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800509a:	7cbb      	ldrb	r3, [r7, #18]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000

080050a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ba:	d13e      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80050bc:	4bb6      	ldr	r3, [pc, #728]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ce:	d028      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d6:	f200 86f2 	bhi.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e0:	d005      	beq.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d00e      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80050ea:	f000 bee8 	b.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050ee:	4baa      	ldr	r3, [pc, #680]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	f040 86e2 	bne.w	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005102:	61fb      	str	r3, [r7, #28]
      break;
 8005104:	f000 bedd 	b.w	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005108:	4ba3      	ldr	r3, [pc, #652]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800510a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	f040 86d7 	bne.w	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005118:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800511c:	61fb      	str	r3, [r7, #28]
      break;
 800511e:	f000 bed2 	b.w	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005122:	4b9d      	ldr	r3, [pc, #628]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512e:	f040 86cc 	bne.w	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8005132:	4b9a      	ldr	r3, [pc, #616]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005134:	61fb      	str	r3, [r7, #28]
      break;
 8005136:	f000 bec8 	b.w	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800513a:	4b97      	ldr	r3, [pc, #604]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d036      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d840      	bhi.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d003      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d020      	beq.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800515c:	e039      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800515e:	4b8e      	ldr	r3, [pc, #568]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d116      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800516a:	4b8b      	ldr	r3, [pc, #556]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005176:	4b88      	ldr	r3, [pc, #544]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	e005      	b.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005182:	4b85      	ldr	r3, [pc, #532]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	4a84      	ldr	r2, [pc, #528]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005194:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005196:	e01f      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
      break;
 800519c:	e01c      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800519e:	4b7e      	ldr	r3, [pc, #504]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051aa:	d102      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80051ac:	4b7d      	ldr	r3, [pc, #500]	; (80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051b0:	e012      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
      break;
 80051b6:	e00f      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051b8:	4b77      	ldr	r3, [pc, #476]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d102      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80051c6:	4b77      	ldr	r3, [pc, #476]	; (80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051ca:	e005      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]
      break;
 80051d0:	e002      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
      break;
 80051d6:	bf00      	nop
    }

    switch(PeriphClk)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051de:	f000 8604 	beq.w	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051e8:	f200 8671 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f2:	f000 8467 	beq.w	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fc:	f200 8667 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	f000 852f 	beq.w	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005210:	f200 865d 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800521a:	f000 8185 	beq.w	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005224:	f200 8653 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800522e:	f000 80cb 	beq.w	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005238:	f200 8649 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005242:	f000 842e 	beq.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	f200 863f 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005256:	f000 83e2 	beq.w	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005260:	f200 8635 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	f000 80ad 	beq.w	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005274:	f200 862b 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	f000 809b 	beq.w	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	f200 8621 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005292:	f000 8089 	beq.w	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529c:	f200 8617 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	f000 8552 	beq.w	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b0:	f200 860d 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ba:	f000 84fe 	beq.w	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c4:	f200 8603 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ce:	f000 849f 	beq.w	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d8:	f200 85f9 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	f000 846a 	beq.w	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b80      	cmp	r3, #128	; 0x80
 80052e8:	f200 85f1 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d84c      	bhi.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 85ea 	beq.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	2b1f      	cmp	r3, #31
 8005300:	f200 85e5 	bhi.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800571d 	.word	0x0800571d
 8005310:	0800578b 	.word	0x0800578b
 8005314:	08005ecf 	.word	0x08005ecf
 8005318:	0800581f 	.word	0x0800581f
 800531c:	08005ecf 	.word	0x08005ecf
 8005320:	08005ecf 	.word	0x08005ecf
 8005324:	08005ecf 	.word	0x08005ecf
 8005328:	08005897 	.word	0x08005897
 800532c:	08005ecf 	.word	0x08005ecf
 8005330:	08005ecf 	.word	0x08005ecf
 8005334:	08005ecf 	.word	0x08005ecf
 8005338:	08005ecf 	.word	0x08005ecf
 800533c:	08005ecf 	.word	0x08005ecf
 8005340:	08005ecf 	.word	0x08005ecf
 8005344:	08005ecf 	.word	0x08005ecf
 8005348:	0800591b 	.word	0x0800591b
 800534c:	08005ecf 	.word	0x08005ecf
 8005350:	08005ecf 	.word	0x08005ecf
 8005354:	08005ecf 	.word	0x08005ecf
 8005358:	08005ecf 	.word	0x08005ecf
 800535c:	08005ecf 	.word	0x08005ecf
 8005360:	08005ecf 	.word	0x08005ecf
 8005364:	08005ecf 	.word	0x08005ecf
 8005368:	08005ecf 	.word	0x08005ecf
 800536c:	08005ecf 	.word	0x08005ecf
 8005370:	08005ecf 	.word	0x08005ecf
 8005374:	08005ecf 	.word	0x08005ecf
 8005378:	08005ecf 	.word	0x08005ecf
 800537c:	08005ecf 	.word	0x08005ecf
 8005380:	08005ecf 	.word	0x08005ecf
 8005384:	08005ecf 	.word	0x08005ecf
 8005388:	0800599d 	.word	0x0800599d
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	f000 83e6 	beq.w	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005394:	f000 bd9b 	b.w	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005398:	40021000 	.word	0x40021000
 800539c:	0007a120 	.word	0x0007a120
 80053a0:	0800d578 	.word	0x0800d578
 80053a4:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053ae:	f000 ff83 	bl	80062b8 <RCCEx_GetSAIxPeriphCLKFreq>
 80053b2:	61f8      	str	r0, [r7, #28]
      break;
 80053b4:	f000 bd8e 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053be:	f000 ff7b 	bl	80062b8 <RCCEx_GetSAIxPeriphCLKFreq>
 80053c2:	61f8      	str	r0, [r7, #28]
      break;
 80053c4:	f000 bd86 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80053c8:	4b9a      	ldr	r3, [pc, #616]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053da:	d015      	beq.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053e2:	f200 8092 	bhi.w	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ec:	d029      	beq.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f4:	f200 8089 	bhi.w	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d07b      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005404:	d04a      	beq.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8005406:	e080      	b.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005408:	4b8a      	ldr	r3, [pc, #552]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d17d      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005414:	4b87      	ldr	r3, [pc, #540]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005420:	4b84      	ldr	r3, [pc, #528]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800542c:	4b81      	ldr	r3, [pc, #516]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800542e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	4a7f      	ldr	r2, [pc, #508]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800543a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543e:	61fb      	str	r3, [r7, #28]
          break;
 8005440:	e066      	b.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005442:	4b7c      	ldr	r3, [pc, #496]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800544e:	d162      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005450:	4b78      	ldr	r3, [pc, #480]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545c:	d15b      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800545e:	4b75      	ldr	r3, [pc, #468]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005468:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	fb03 f202 	mul.w	r2, r3, r2
 8005472:	4b70      	ldr	r3, [pc, #448]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	3301      	adds	r3, #1
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005484:	4b6b      	ldr	r3, [pc, #428]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	0d5b      	lsrs	r3, r3, #21
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	3301      	adds	r3, #1
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	61fb      	str	r3, [r7, #28]
          break;
 800549a:	e03c      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800549c:	4b65      	ldr	r3, [pc, #404]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a8:	d138      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80054aa:	4b62      	ldr	r3, [pc, #392]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b6:	d131      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80054b8:	4b5e      	ldr	r3, [pc, #376]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	fb03 f202 	mul.w	r2, r3, r2
 80054cc:	4b59      	ldr	r3, [pc, #356]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	3301      	adds	r3, #1
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80054de:	4b55      	ldr	r3, [pc, #340]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	0d5b      	lsrs	r3, r3, #21
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	3301      	adds	r3, #1
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	61fb      	str	r3, [r7, #28]
          break;
 80054f4:	e012      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80054f6:	4b4f      	ldr	r3, [pc, #316]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b02      	cmp	r3, #2
 8005502:	d10e      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005504:	4b4d      	ldr	r3, [pc, #308]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005506:	61fb      	str	r3, [r7, #28]
          break;
 8005508:	e00b      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 800550a:	bf00      	nop
 800550c:	f000 bce2 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005510:	bf00      	nop
 8005512:	f000 bcdf 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005516:	bf00      	nop
 8005518:	f000 bcdc 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800551c:	bf00      	nop
 800551e:	f000 bcd9 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005522:	bf00      	nop
        break;
 8005524:	f000 bcd6 	b.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800552a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800552e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005536:	d13d      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005538:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005544:	f040 84c5 	bne.w	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005548:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	f040 84bd 	bne.w	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005558:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005562:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	fb03 f202 	mul.w	r2, r3, r2
 800556c:	4b31      	ldr	r3, [pc, #196]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	091b      	lsrs	r3, r3, #4
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	3301      	adds	r3, #1
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800557e:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	0edb      	lsrs	r3, r3, #27
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 800559c:	2311      	movs	r3, #17
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e001      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80055a2:	2307      	movs	r3, #7
 80055a4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	61fb      	str	r3, [r7, #28]
      break;
 80055b0:	f000 bc8f 	b.w	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80055b4:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055c6:	d016      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055ce:	f200 809b 	bhi.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d8:	d032      	beq.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e0:	f200 8092 	bhi.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8084 	beq.w	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f2:	d052      	beq.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80055f4:	e088      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	f040 8084 	bne.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	e005      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	4a03      	ldr	r2, [pc, #12]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	61fb      	str	r3, [r7, #28]
          break;
 8005630:	e06c      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	0800d578 	.word	0x0800d578
 800563c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005640:	4ba5      	ldr	r3, [pc, #660]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800564c:	d160      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800564e:	4ba2      	ldr	r3, [pc, #648]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565a:	d159      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800565c:	4b9e      	ldr	r3, [pc, #632]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005666:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	fb03 f202 	mul.w	r2, r3, r2
 8005670:	4b99      	ldr	r3, [pc, #612]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3301      	adds	r3, #1
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005682:	4b95      	ldr	r3, [pc, #596]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	0d5b      	lsrs	r3, r3, #21
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	3301      	adds	r3, #1
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	61fb      	str	r3, [r7, #28]
          break;
 8005698:	e03a      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800569a:	4b8f      	ldr	r3, [pc, #572]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a6:	d135      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80056a8:	4b8b      	ldr	r3, [pc, #556]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b4:	d12e      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056b6:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	fb03 f202 	mul.w	r2, r3, r2
 80056ca:	4b83      	ldr	r3, [pc, #524]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	3301      	adds	r3, #1
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80056dc:	4b7e      	ldr	r3, [pc, #504]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	0d5b      	lsrs	r3, r3, #21
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	3301      	adds	r3, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	61fb      	str	r3, [r7, #28]
          break;
 80056f2:	e00f      	b.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80056f4:	4b78      	ldr	r3, [pc, #480]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d10a      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005704:	61fb      	str	r3, [r7, #28]
          break;
 8005706:	e007      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005708:	bf00      	nop
 800570a:	e3e2      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800570c:	bf00      	nop
 800570e:	e3e0      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005710:	bf00      	nop
 8005712:	e3de      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005714:	bf00      	nop
 8005716:	e3dc      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005718:	bf00      	nop
      break;
 800571a:	e3da      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800571c:	4b6e      	ldr	r3, [pc, #440]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d827      	bhi.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005745 	.word	0x08005745
 8005738:	0800574d 	.word	0x0800574d
 800573c:	08005755 	.word	0x08005755
 8005740:	08005769 	.word	0x08005769
          frequency = HAL_RCC_GetPCLK2Freq();
 8005744:	f7ff f81a 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8005748:	61f8      	str	r0, [r7, #28]
          break;
 800574a:	e01d      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800574c:	f7fe ff6a 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005750:	61f8      	str	r0, [r7, #28]
          break;
 8005752:	e019      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005754:	4b60      	ldr	r3, [pc, #384]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	d10f      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8005762:	4b5f      	ldr	r3, [pc, #380]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005764:	61fb      	str	r3, [r7, #28]
          break;
 8005766:	e00c      	b.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d107      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577a:	61fb      	str	r3, [r7, #28]
          break;
 800577c:	e003      	b.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800577e:	bf00      	nop
 8005780:	e3a8      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005782:	bf00      	nop
 8005784:	e3a6      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005786:	bf00      	nop
        break;
 8005788:	e3a4      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800578a:	4b53      	ldr	r3, [pc, #332]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b0c      	cmp	r3, #12
 800579a:	d83a      	bhi.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	08005813 	.word	0x08005813
 80057ac:	08005813 	.word	0x08005813
 80057b0:	08005813 	.word	0x08005813
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	08005813 	.word	0x08005813
 80057bc:	08005813 	.word	0x08005813
 80057c0:	08005813 	.word	0x08005813
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	08005813 	.word	0x08005813
 80057cc:	08005813 	.word	0x08005813
 80057d0:	08005813 	.word	0x08005813
 80057d4:	080057fd 	.word	0x080057fd
          frequency = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fe ffba 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80057dc:	61f8      	str	r0, [r7, #28]
          break;
 80057de:	e01d      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80057e0:	f7fe ff20 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80057e4:	61f8      	str	r0, [r7, #28]
          break;
 80057e6:	e019      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057e8:	4b3b      	ldr	r3, [pc, #236]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d10f      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80057f6:	4b3a      	ldr	r3, [pc, #232]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80057f8:	61fb      	str	r3, [r7, #28]
          break;
 80057fa:	e00c      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057fc:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d107      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580e:	61fb      	str	r3, [r7, #28]
          break;
 8005810:	e003      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8005812:	bf00      	nop
 8005814:	e35e      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005816:	bf00      	nop
 8005818:	e35c      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800581a:	bf00      	nop
        break;
 800581c:	e35a      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800581e:	4b2e      	ldr	r3, [pc, #184]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b30      	cmp	r3, #48	; 0x30
 800582e:	d021      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b30      	cmp	r3, #48	; 0x30
 8005834:	d829      	bhi.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b20      	cmp	r3, #32
 800583a:	d011      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b20      	cmp	r3, #32
 8005840:	d823      	bhi.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b10      	cmp	r3, #16
 800584c:	d004      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800584e:	e01c      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fe ff7e 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005854:	61f8      	str	r0, [r7, #28]
          break;
 8005856:	e01d      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005858:	f7fe fee4 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 800585c:	61f8      	str	r0, [r7, #28]
          break;
 800585e:	e019      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005860:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	d10f      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800586e:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005870:	61fb      	str	r3, [r7, #28]
          break;
 8005872:	e00c      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005874:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d107      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	61fb      	str	r3, [r7, #28]
          break;
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800588a:	bf00      	nop
 800588c:	e322      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800588e:	bf00      	nop
 8005890:	e320      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005892:	bf00      	nop
        break;
 8005894:	e31e      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2bc0      	cmp	r3, #192	; 0xc0
 80058a6:	d027      	beq.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2bc0      	cmp	r3, #192	; 0xc0
 80058ac:	d82f      	bhi.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b80      	cmp	r3, #128	; 0x80
 80058b2:	d017      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d829      	bhi.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d004      	beq.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80058c6:	e022      	b.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7fe ff42 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80058cc:	61f8      	str	r0, [r7, #28]
          break;
 80058ce:	e023      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80058d0:	f7fe fea8 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80058d4:	61f8      	str	r0, [r7, #28]
          break;
 80058d6:	e01f      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80058d8:	40021000 	.word	0x40021000
 80058dc:	02dc6c00 	.word	0x02dc6c00
 80058e0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e4:	4b9b      	ldr	r3, [pc, #620]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f0:	d10f      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058f4:	61fb      	str	r3, [r7, #28]
          break;
 80058f6:	e00c      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058f8:	4b96      	ldr	r3, [pc, #600]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b02      	cmp	r3, #2
 8005904:	d107      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	61fb      	str	r3, [r7, #28]
          break;
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800590e:	bf00      	nop
 8005910:	e2e0      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005912:	bf00      	nop
 8005914:	e2de      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005916:	bf00      	nop
        break;
 8005918:	e2dc      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800591a:	4b8e      	ldr	r3, [pc, #568]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592c:	d025      	beq.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005934:	d82c      	bhi.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593c:	d013      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005944:	d824      	bhi.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005952:	d004      	beq.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005954:	e01c      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005956:	f7fe fefb 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 800595a:	61f8      	str	r0, [r7, #28]
          break;
 800595c:	e01d      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800595e:	f7fe fe61 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005962:	61f8      	str	r0, [r7, #28]
          break;
 8005964:	e019      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005972:	d10f      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8005974:	4b78      	ldr	r3, [pc, #480]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005976:	61fb      	str	r3, [r7, #28]
          break;
 8005978:	e00c      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800597a:	4b76      	ldr	r3, [pc, #472]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d107      	bne.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598c:	61fb      	str	r3, [r7, #28]
          break;
 800598e:	e003      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005990:	bf00      	nop
 8005992:	e29f      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005994:	bf00      	nop
 8005996:	e29d      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005998:	bf00      	nop
        break;
 800599a:	e29b      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800599c:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059ae:	d025      	beq.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b6:	d82c      	bhi.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059be:	d013      	beq.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c6:	d824      	bhi.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d4:	d004      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80059d6:	e01c      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fe feba 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80059dc:	61f8      	str	r0, [r7, #28]
          break;
 80059de:	e01d      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80059e0:	f7fe fe20 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80059e4:	61f8      	str	r0, [r7, #28]
          break;
 80059e6:	e019      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d10f      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80059f6:	4b58      	ldr	r3, [pc, #352]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059f8:	61fb      	str	r3, [r7, #28]
          break;
 80059fa:	e00c      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059fc:	4b55      	ldr	r3, [pc, #340]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d107      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0e:	61fb      	str	r3, [r7, #28]
          break;
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005a12:	bf00      	nop
 8005a14:	e25e      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a16:	bf00      	nop
 8005a18:	e25c      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a1a:	bf00      	nop
        break;
 8005a1c:	e25a      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a1e:	4b4d      	ldr	r3, [pc, #308]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a30:	d007      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a38:	d12f      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a3a:	f7fe fdf3 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005a3e:	61f8      	str	r0, [r7, #28]
          break;
 8005a40:	e02e      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005a42:	4b44      	ldr	r3, [pc, #272]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4e:	d126      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005a50:	4b40      	ldr	r3, [pc, #256]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d020      	beq.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a5c:	4b3d      	ldr	r3, [pc, #244]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a66:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	fb03 f202 	mul.w	r2, r3, r2
 8005a70:	4b38      	ldr	r3, [pc, #224]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a82:	4b34      	ldr	r3, [pc, #208]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	0e5b      	lsrs	r3, r3, #25
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	61fb      	str	r3, [r7, #28]
          break;
 8005a98:	e001      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005a9a:	bf00      	nop
 8005a9c:	e21a      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a9e:	bf00      	nop
        break;
 8005aa0:	e218      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d103      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe fe62 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8005ab8:	61f8      	str	r0, [r7, #28]
        break;
 8005aba:	e20b      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005abc:	f7fe fdb2 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005ac0:	61f8      	str	r0, [r7, #28]
        break;
 8005ac2:	e207      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aca:	f003 0318 	and.w	r3, r3, #24
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d010      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d834      	bhi.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d024      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005ae8:	e02d      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005aea:	69b9      	ldr	r1, [r7, #24]
 8005aec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005af0:	f000 fbe2 	bl	80062b8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005af4:	61f8      	str	r0, [r7, #28]
          break;
 8005af6:	e02b      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005af8:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d122      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005b10:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	e005      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	4a0c      	ldr	r2, [pc, #48]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2e:	61fb      	str	r3, [r7, #28]
          break;
 8005b30:	e00b      	b.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b42:	61fb      	str	r3, [r7, #28]
          break;
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005b46:	bf00      	nop
 8005b48:	e1c4      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b4a:	bf00      	nop
 8005b4c:	e1c2      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b4e:	bf00      	nop
        break;
 8005b50:	e1c0      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	0800d578 	.word	0x0800d578
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b60:	4b96      	ldr	r3, [pc, #600]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b72:	d013      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7a:	d819      	bhi.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d004      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005b8a:	e011      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b8c:	f7fe fde0 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005b90:	61f8      	str	r0, [r7, #28]
          break;
 8005b92:	e010      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b94:	f7fe fd46 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005b98:	61f8      	str	r0, [r7, #28]
          break;
 8005b9a:	e00c      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b9c:	4b87      	ldr	r3, [pc, #540]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	d104      	bne.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005baa:	4b85      	ldr	r3, [pc, #532]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bac:	61fb      	str	r3, [r7, #28]
          break;
 8005bae:	e001      	b.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005bb0:	bf00      	nop
 8005bb2:	e18f      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bb4:	bf00      	nop
        break;
 8005bb6:	e18d      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005bb8:	4b80      	ldr	r3, [pc, #512]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bca:	d013      	beq.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd2:	d819      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be0:	d004      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005be2:	e011      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fe fdb4 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005be8:	61f8      	str	r0, [r7, #28]
          break;
 8005bea:	e010      	b.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bec:	f7fe fd1a 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005bf0:	61f8      	str	r0, [r7, #28]
          break;
 8005bf2:	e00c      	b.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bf4:	4b71      	ldr	r3, [pc, #452]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c00:	d104      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005c02:	4b6f      	ldr	r3, [pc, #444]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c04:	61fb      	str	r3, [r7, #28]
          break;
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005c08:	bf00      	nop
 8005c0a:	e163      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c0c:	bf00      	nop
        break;
 8005c0e:	e161      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005c10:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c22:	d013      	beq.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c2a:	d819      	bhi.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d004      	beq.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005c3a:	e011      	b.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c3c:	f7fe fd88 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005c40:	61f8      	str	r0, [r7, #28]
          break;
 8005c42:	e010      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c44:	f7fe fcee 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005c48:	61f8      	str	r0, [r7, #28]
          break;
 8005c4a:	e00c      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c4c:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c58:	d104      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005c5a:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c5c:	61fb      	str	r3, [r7, #28]
          break;
 8005c5e:	e001      	b.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005c60:	bf00      	nop
 8005c62:	e137      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c64:	bf00      	nop
        break;
 8005c66:	e135      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c68:	4b54      	ldr	r3, [pc, #336]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d011      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d818      	bhi.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005c8c:	e011      	b.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fe fd5f 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005c92:	61f8      	str	r0, [r7, #28]
          break;
 8005c94:	e010      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c96:	f7fe fcc5 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005c9a:	61f8      	str	r0, [r7, #28]
          break;
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005caa:	d104      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005cac:	4b44      	ldr	r3, [pc, #272]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cae:	61fb      	str	r3, [r7, #28]
          break;
 8005cb0:	e001      	b.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005cb2:	bf00      	nop
 8005cb4:	e10e      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005cb6:	bf00      	nop
        break;
 8005cb8:	e10c      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005cba:	4b40      	ldr	r3, [pc, #256]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ccc:	d02c      	beq.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cd4:	d833      	bhi.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cdc:	d01a      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ce4:	d82b      	bhi.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cf2:	d004      	beq.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005cf4:	e023      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cf6:	f7fe fd2b 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005cfa:	61f8      	str	r0, [r7, #28]
          break;
 8005cfc:	e026      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005cfe:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11a      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005d0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d10:	61fb      	str	r3, [r7, #28]
          break;
 8005d12:	e016      	b.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d14:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d20:	d111      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005d22:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d24:	61fb      	str	r3, [r7, #28]
          break;
 8005d26:	e00e      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d28:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d109      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3a:	61fb      	str	r3, [r7, #28]
          break;
 8005d3c:	e005      	b.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005d3e:	bf00      	nop
 8005d40:	e0c8      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d42:	bf00      	nop
 8005d44:	e0c6      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d46:	bf00      	nop
 8005d48:	e0c4      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d4a:	bf00      	nop
        break;
 8005d4c:	e0c2      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d4e:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d60:	d030      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d68:	d837      	bhi.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d70:	d01a      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d78:	d82f      	bhi.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d86:	d004      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005d88:	e027      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d8a:	f7fe fce1 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005d8e:	61f8      	str	r0, [r7, #28]
          break;
 8005d90:	e02a      	b.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d11e      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005da0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005da4:	61fb      	str	r3, [r7, #28]
          break;
 8005da6:	e01a      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db4:	d115      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005db6:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005db8:	61fb      	str	r3, [r7, #28]
          break;
 8005dba:	e012      	b.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005dc4:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d109      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd6:	61fb      	str	r3, [r7, #28]
          break;
 8005dd8:	e005      	b.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005dda:	bf00      	nop
 8005ddc:	e07a      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dde:	bf00      	nop
 8005de0:	e078      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005de2:	bf00      	nop
 8005de4:	e076      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005de6:	bf00      	nop
        break;
 8005de8:	e074      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005dea:	4b3d      	ldr	r3, [pc, #244]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dfc:	d02c      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e04:	d855      	bhi.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e12:	d004      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005e14:	e04d      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e16:	f7fe fc05 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005e1a:	61f8      	str	r0, [r7, #28]
          break;
 8005e1c:	e04e      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e1e:	4b30      	ldr	r3, [pc, #192]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d145      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	e005      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005e42:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e54:	61fb      	str	r3, [r7, #28]
          break;
 8005e56:	e02e      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e58:	4b21      	ldr	r3, [pc, #132]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e64:	d129      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e66:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	d122      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e74:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	fb03 f202 	mul.w	r2, r3, r2
 8005e88:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	3301      	adds	r3, #1
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	0d5b      	lsrs	r3, r3, #21
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	61fb      	str	r3, [r7, #28]
          break;
 8005eb0:	e003      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005eb2:	bf00      	nop
 8005eb4:	e00e      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005eb6:	bf00      	nop
 8005eb8:	e00c      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005eba:	bf00      	nop
        break;
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ec2:	bf00      	nop
 8005ec4:	e006      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ec6:	bf00      	nop
 8005ec8:	e004      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ed2:	bf00      	nop
    }
  }

  return(frequency);
 8005ed4:	69fb      	ldr	r3, [r7, #28]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	0800d578 	.word	0x0800d578

08005ee8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ef6:	4b72      	ldr	r3, [pc, #456]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f02:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0203 	and.w	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d103      	bne.n	8005f1a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
       ||
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d142      	bne.n	8005fa0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
 8005f1e:	e03f      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d018      	beq.n	8005f5a <RCCEx_PLLSAI1_Config+0x72>
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d825      	bhi.n	8005f78 <RCCEx_PLLSAI1_Config+0x90>
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d002      	beq.n	8005f36 <RCCEx_PLLSAI1_Config+0x4e>
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d009      	beq.n	8005f48 <RCCEx_PLLSAI1_Config+0x60>
 8005f34:	e020      	b.n	8005f78 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f36:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11d      	bne.n	8005f7e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f46:	e01a      	b.n	8005f7e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f48:	4b5d      	ldr	r3, [pc, #372]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d116      	bne.n	8005f82 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f58:	e013      	b.n	8005f82 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f5a:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f66:	4b56      	ldr	r3, [pc, #344]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f76:	e006      	b.n	8005f86 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7c:	e004      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f8e:	4b4c      	ldr	r3, [pc, #304]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f023 0203 	bic.w	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4949      	ldr	r1, [pc, #292]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 8086 	bne.w	80060b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fa8:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a44      	ldr	r2, [pc, #272]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb4:	f7fb face 	bl	8001554 <HAL_GetTick>
 8005fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fba:	e009      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fbc:	f7fb faca 	bl	8001554 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d902      	bls.n	8005fd0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8005fce:	e005      	b.n	8005fdc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1ef      	bne.n	8005fbc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d168      	bne.n	80060b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d113      	bne.n	8006010 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe8:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	4b35      	ldr	r3, [pc, #212]	; (80060c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6892      	ldr	r2, [r2, #8]
 8005ff4:	0211      	lsls	r1, r2, #8
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68d2      	ldr	r2, [r2, #12]
 8005ffa:	06d2      	lsls	r2, r2, #27
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6852      	ldr	r2, [r2, #4]
 8006002:	3a01      	subs	r2, #1
 8006004:	0112      	lsls	r2, r2, #4
 8006006:	430a      	orrs	r2, r1
 8006008:	492d      	ldr	r1, [pc, #180]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800600a:	4313      	orrs	r3, r2
 800600c:	610b      	str	r3, [r1, #16]
 800600e:	e02d      	b.n	800606c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d115      	bne.n	8006042 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006016:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	4b2b      	ldr	r3, [pc, #172]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800601c:	4013      	ands	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6892      	ldr	r2, [r2, #8]
 8006022:	0211      	lsls	r1, r2, #8
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6912      	ldr	r2, [r2, #16]
 8006028:	0852      	lsrs	r2, r2, #1
 800602a:	3a01      	subs	r2, #1
 800602c:	0552      	lsls	r2, r2, #21
 800602e:	4311      	orrs	r1, r2
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6852      	ldr	r2, [r2, #4]
 8006034:	3a01      	subs	r2, #1
 8006036:	0112      	lsls	r2, r2, #4
 8006038:	430a      	orrs	r2, r1
 800603a:	4921      	ldr	r1, [pc, #132]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800603c:	4313      	orrs	r3, r2
 800603e:	610b      	str	r3, [r1, #16]
 8006040:	e014      	b.n	800606c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006042:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	4b21      	ldr	r3, [pc, #132]	; (80060cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6892      	ldr	r2, [r2, #8]
 800604e:	0211      	lsls	r1, r2, #8
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6952      	ldr	r2, [r2, #20]
 8006054:	0852      	lsrs	r2, r2, #1
 8006056:	3a01      	subs	r2, #1
 8006058:	0652      	lsls	r2, r2, #25
 800605a:	4311      	orrs	r1, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6852      	ldr	r2, [r2, #4]
 8006060:	3a01      	subs	r2, #1
 8006062:	0112      	lsls	r2, r2, #4
 8006064:	430a      	orrs	r2, r1
 8006066:	4916      	ldr	r1, [pc, #88]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006068:	4313      	orrs	r3, r2
 800606a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006076:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006078:	f7fb fa6c 	bl	8001554 <HAL_GetTick>
 800607c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800607e:	e009      	b.n	8006094 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006080:	f7fb fa68 	bl	8001554 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d902      	bls.n	8006094 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	73fb      	strb	r3, [r7, #15]
          break;
 8006092:	e005      	b.n	80060a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0ef      	beq.n	8006080 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	4904      	ldr	r1, [pc, #16]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000
 80060c4:	07ff800f 	.word	0x07ff800f
 80060c8:	ff9f800f 	.word	0xff9f800f
 80060cc:	f9ff800f 	.word	0xf9ff800f

080060d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060de:	4b72      	ldr	r3, [pc, #456]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060ea:	4b6f      	ldr	r3, [pc, #444]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0203 	and.w	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d103      	bne.n	8006102 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
       ||
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d142      	bne.n	8006188 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
 8006106:	e03f      	b.n	8006188 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b03      	cmp	r3, #3
 800610e:	d018      	beq.n	8006142 <RCCEx_PLLSAI2_Config+0x72>
 8006110:	2b03      	cmp	r3, #3
 8006112:	d825      	bhi.n	8006160 <RCCEx_PLLSAI2_Config+0x90>
 8006114:	2b01      	cmp	r3, #1
 8006116:	d002      	beq.n	800611e <RCCEx_PLLSAI2_Config+0x4e>
 8006118:	2b02      	cmp	r3, #2
 800611a:	d009      	beq.n	8006130 <RCCEx_PLLSAI2_Config+0x60>
 800611c:	e020      	b.n	8006160 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800611e:	4b62      	ldr	r3, [pc, #392]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11d      	bne.n	8006166 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800612e:	e01a      	b.n	8006166 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006130:	4b5d      	ldr	r3, [pc, #372]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006138:	2b00      	cmp	r3, #0
 800613a:	d116      	bne.n	800616a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006140:	e013      	b.n	800616a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006142:	4b59      	ldr	r3, [pc, #356]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800614e:	4b56      	ldr	r3, [pc, #344]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800615e:	e006      	b.n	800616e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      break;
 8006164:	e004      	b.n	8006170 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006166:	bf00      	nop
 8006168:	e002      	b.n	8006170 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800616e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006176:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 0203 	bic.w	r2, r3, #3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4949      	ldr	r1, [pc, #292]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f040 8086 	bne.w	800629c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006190:	4b45      	ldr	r3, [pc, #276]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a44      	ldr	r2, [pc, #272]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800619c:	f7fb f9da 	bl	8001554 <HAL_GetTick>
 80061a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061a2:	e009      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061a4:	f7fb f9d6 	bl	8001554 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d902      	bls.n	80061b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	73fb      	strb	r3, [r7, #15]
        break;
 80061b6:	e005      	b.n	80061c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061b8:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ef      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d168      	bne.n	800629c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d113      	bne.n	80061f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	4b35      	ldr	r3, [pc, #212]	; (80062ac <RCCEx_PLLSAI2_Config+0x1dc>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6892      	ldr	r2, [r2, #8]
 80061dc:	0211      	lsls	r1, r2, #8
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68d2      	ldr	r2, [r2, #12]
 80061e2:	06d2      	lsls	r2, r2, #27
 80061e4:	4311      	orrs	r1, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6852      	ldr	r2, [r2, #4]
 80061ea:	3a01      	subs	r2, #1
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	430a      	orrs	r2, r1
 80061f0:	492d      	ldr	r1, [pc, #180]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	614b      	str	r3, [r1, #20]
 80061f6:	e02d      	b.n	8006254 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d115      	bne.n	800622a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061fe:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006204:	4013      	ands	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6892      	ldr	r2, [r2, #8]
 800620a:	0211      	lsls	r1, r2, #8
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6912      	ldr	r2, [r2, #16]
 8006210:	0852      	lsrs	r2, r2, #1
 8006212:	3a01      	subs	r2, #1
 8006214:	0552      	lsls	r2, r2, #21
 8006216:	4311      	orrs	r1, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6852      	ldr	r2, [r2, #4]
 800621c:	3a01      	subs	r2, #1
 800621e:	0112      	lsls	r2, r2, #4
 8006220:	430a      	orrs	r2, r1
 8006222:	4921      	ldr	r1, [pc, #132]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006224:	4313      	orrs	r3, r2
 8006226:	614b      	str	r3, [r1, #20]
 8006228:	e014      	b.n	8006254 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800622a:	4b1f      	ldr	r3, [pc, #124]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	4b21      	ldr	r3, [pc, #132]	; (80062b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006230:	4013      	ands	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6892      	ldr	r2, [r2, #8]
 8006236:	0211      	lsls	r1, r2, #8
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6952      	ldr	r2, [r2, #20]
 800623c:	0852      	lsrs	r2, r2, #1
 800623e:	3a01      	subs	r2, #1
 8006240:	0652      	lsls	r2, r2, #25
 8006242:	4311      	orrs	r1, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6852      	ldr	r2, [r2, #4]
 8006248:	3a01      	subs	r2, #1
 800624a:	0112      	lsls	r2, r2, #4
 800624c:	430a      	orrs	r2, r1
 800624e:	4916      	ldr	r1, [pc, #88]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006250:	4313      	orrs	r3, r2
 8006252:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fb f978 	bl	8001554 <HAL_GetTick>
 8006264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006266:	e009      	b.n	800627c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006268:	f7fb f974 	bl	8001554 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d902      	bls.n	800627c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	73fb      	strb	r3, [r7, #15]
          break;
 800627a:	e005      	b.n	8006288 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ef      	beq.n	8006268 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	4904      	ldr	r1, [pc, #16]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006298:	4313      	orrs	r3, r2
 800629a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000
 80062ac:	07ff800f 	.word	0x07ff800f
 80062b0:	ff9f800f 	.word	0xff9f800f
 80062b4:	f9ff800f 	.word	0xf9ff800f

080062b8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b089      	sub	sp, #36	; 0x24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d4:	d10b      	bne.n	80062ee <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80062d6:	4b7e      	ldr	r3, [pc, #504]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062e0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b60      	cmp	r3, #96	; 0x60
 80062e6:	d112      	bne.n	800630e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062e8:	4b7a      	ldr	r3, [pc, #488]	; (80064d4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e00f      	b.n	800630e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f4:	d10b      	bne.n	800630e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80062f6:	4b76      	ldr	r3, [pc, #472]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006300:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006308:	d101      	bne.n	800630e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800630a:	4b72      	ldr	r3, [pc, #456]	; (80064d4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800630c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 80d6 	bne.w	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	d003      	beq.n	8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d13b      	bne.n	80063a0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006328:	4b69      	ldr	r3, [pc, #420]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006334:	f040 80c4 	bne.w	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006338:	4b65      	ldr	r3, [pc, #404]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80bd 	beq.w	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006346:	4b62      	ldr	r3, [pc, #392]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	3301      	adds	r3, #1
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800635a:	4b5d      	ldr	r3, [pc, #372]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006366:	4b5a      	ldr	r3, [pc, #360]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	0edb      	lsrs	r3, r3, #27
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006378:	4b55      	ldr	r3, [pc, #340]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006384:	2311      	movs	r3, #17
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e001      	b.n	800638e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800638a:	2307      	movs	r3, #7
 800638c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	fb03 f202 	mul.w	r2, r3, r2
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800639e:	e08f      	b.n	80064c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d13a      	bne.n	800641c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80063a6:	4b4a      	ldr	r3, [pc, #296]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b2:	f040 8086 	bne.w	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80063b6:	4b46      	ldr	r3, [pc, #280]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d07f      	beq.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063c2:	4b43      	ldr	r3, [pc, #268]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	3301      	adds	r3, #1
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063d6:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80063e2:	4b3b      	ldr	r3, [pc, #236]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	0edb      	lsrs	r3, r3, #27
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80063f4:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006400:	2311      	movs	r3, #17
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e001      	b.n	800640a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006406:	2307      	movs	r3, #7
 8006408:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	fb03 f202 	mul.w	r2, r3, r2
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	e052      	b.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d003      	beq.n	800642a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006428:	d109      	bne.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800642a:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d144      	bne.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800643a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800643c:	e041      	b.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b20      	cmp	r3, #32
 8006442:	d003      	beq.n	800644c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644a:	d13a      	bne.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800644c:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006458:	d133      	bne.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800645a:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02d      	beq.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	3301      	adds	r3, #1
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006484:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	0edb      	lsrs	r3, r3, #27
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80064a4:	2311      	movs	r3, #17
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e001      	b.n	80064ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80064aa:	2307      	movs	r3, #7
 80064ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	fb03 f202 	mul.w	r2, r3, r2
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e000      	b.n	80064c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80064c0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80064c2:	69fb      	ldr	r3, [r7, #28]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3724      	adds	r7, #36	; 0x24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40021000 	.word	0x40021000
 80064d4:	001fff68 	.word	0x001fff68
 80064d8:	00f42400 	.word	0x00f42400

080064dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08a      	sub	sp, #40	; 0x28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e078      	b.n	80065e0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fa fd91 	bl	8001028 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2203      	movs	r2, #3
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f86a 	bl	80065e8 <HAL_SD_InitCard>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e060      	b.n	80065e0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fdb5 	bl	8007094 <HAL_SD_GetCardStatus>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e055      	b.n	80065e0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006534:	7e3b      	ldrb	r3, [r7, #24]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800653a:	7e7b      	ldrb	r3, [r7, #25]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10a      	bne.n	800655e <HAL_SD_Init+0x82>
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <HAL_SD_Init+0x78>
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800655a:	65da      	str	r2, [r3, #92]	; 0x5c
 800655c:	e00b      	b.n	8006576 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d104      	bne.n	8006570 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656c:	65da      	str	r2, [r3, #92]	; 0x5c
 800656e:	e002      	b.n	8006576 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fe6b 	bl	8007258 <HAL_SD_ConfigWideBusOperation>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e029      	b.n	80065e0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800658c:	f7fa ffe2 	bl	8001554 <HAL_GetTick>
 8006590:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006592:	e014      	b.n	80065be <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006594:	f7fa ffde 	bl	8001554 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a2:	d10c      	bne.n	80065be <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e010      	b.n	80065e0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 ff5e 	bl	8007480 <HAL_SD_GetCardState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d1e4      	bne.n	8006594 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3728      	adds	r7, #40	; 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b08e      	sub	sp, #56	; 0x38
 80065ec:	af04      	add	r7, sp, #16
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006600:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006604:	f7fe fd50 	bl	80050a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006608:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e079      	b.n	8006718 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	4a3d      	ldr	r2, [pc, #244]	; (8006720 <HAL_SD_InitCard+0x138>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	091b      	lsrs	r3, r3, #4
 8006630:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0210 	orr.w	r2, r2, #16
 800664e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681d      	ldr	r5, [r3, #0]
 8006654:	466c      	mov	r4, sp
 8006656:	f107 0314 	add.w	r3, r7, #20
 800665a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800665e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006662:	f107 0308 	add.w	r3, r7, #8
 8006666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006668:	4628      	mov	r0, r5
 800666a:	f002 f90f 	bl	800888c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f002 f952 	bl	800891c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006684:	4a27      	ldr	r2, [pc, #156]	; (8006724 <HAL_SD_InitCard+0x13c>)
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	3301      	adds	r3, #1
 800668e:	4618      	mov	r0, r3
 8006690:	f7fa ff6c 	bl	800156c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 ffd3 	bl	8007640 <SD_PowerON>
 800669a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e02e      	b.n	8006718 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 ff00 	bl	80074c0 <SD_InitCard>
 80066c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e01b      	b.n	8006718 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e8:	4618      	mov	r0, r3
 80066ea:	f002 f9ad 	bl	8008a48 <SDMMC_CmdBlockLength>
 80066ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <HAL_SD_InitCard+0x140>)
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3728      	adds	r7, #40	; 0x28
 800671c:	46bd      	mov	sp, r7
 800671e:	bdb0      	pop	{r4, r5, r7, pc}
 8006720:	014f8b59 	.word	0x014f8b59
 8006724:	00012110 	.word	0x00012110
 8006728:	1fe00fff 	.word	0x1fe00fff

0800672c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08c      	sub	sp, #48	; 0x30
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e08d      	b.n	8006870 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	f040 8086 	bne.w	800686e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	441a      	add	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	429a      	cmp	r2, r3
 8006774:	d907      	bls.n	8006786 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e074      	b.n	8006870 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2203      	movs	r2, #3
 800678a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	025a      	lsls	r2, r3, #9
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d002      	beq.n	80067b2 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	025b      	lsls	r3, r3, #9
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	025b      	lsls	r3, r3, #9
 80067bc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067be:	2390      	movs	r3, #144	; 0x90
 80067c0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067c2:	2302      	movs	r3, #2
 80067c4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f107 0210 	add.w	r2, r7, #16
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 f909 	bl	80089f0 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2201      	movs	r2, #1
 80067fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d90a      	bls.n	800681a <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2282      	movs	r2, #130	; 0x82
 8006808:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006810:	4618      	mov	r0, r3
 8006812:	f002 f95f 	bl	8008ad4 <SDMMC_CmdReadMultiBlock>
 8006816:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006818:	e009      	b.n	800682e <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2281      	movs	r2, #129	; 0x81
 800681e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006826:	4618      	mov	r0, r3
 8006828:	f002 f931 	bl	8008a8e <SDMMC_CmdReadSingleBlock>
 800682c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d012      	beq.n	800685a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a0f      	ldr	r2, [pc, #60]	; (8006878 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	431a      	orrs	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e00a      	b.n	8006870 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006868:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	e000      	b.n	8006870 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800686e:	2302      	movs	r3, #2
  }
}
 8006870:	4618      	mov	r0, r3
 8006872:	3730      	adds	r7, #48	; 0x30
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	1fe00fff 	.word	0x1fe00fff

0800687c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08c      	sub	sp, #48	; 0x30
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e08d      	b.n	80069c0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 8086 	bne.w	80069be <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d907      	bls.n	80068d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e074      	b.n	80069c0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2203      	movs	r2, #3
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	025a      	lsls	r2, r3, #9
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d002      	beq.n	8006902 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006906:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	025b      	lsls	r3, r3, #9
 800690c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800690e:	2390      	movs	r3, #144	; 0x90
 8006910:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006916:	2300      	movs	r3, #0
 8006918:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800691a:	2300      	movs	r3, #0
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f107 0210 	add.w	r2, r7, #16
 8006926:	4611      	mov	r1, r2
 8006928:	4618      	mov	r0, r3
 800692a:	f002 f861 	bl	80089f0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d90a      	bls.n	800696a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22a0      	movs	r2, #160	; 0xa0
 8006958:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006960:	4618      	mov	r0, r3
 8006962:	f002 f8fd 	bl	8008b60 <SDMMC_CmdWriteMultiBlock>
 8006966:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006968:	e009      	b.n	800697e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2290      	movs	r2, #144	; 0x90
 800696e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006976:	4618      	mov	r0, r3
 8006978:	f002 f8cf 	bl	8008b1a <SDMMC_CmdWriteSingleBlock>
 800697c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800698a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	431a      	orrs	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e00a      	b.n	80069c0 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80069b8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3730      	adds	r7, #48	; 0x30
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	1fe00fff 	.word	0x1fe00fff

080069cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_SD_IRQHandler+0x2e>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f98e 	bl	8007d14 <SD_Read_IT>
 80069f8:	e199      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80ae 	beq.w	8006b66 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006a22:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006a26:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a36:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a46:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d038      	beq.n	8006ac4 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_SD_IRQHandler+0x9a>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f002 f89c 	bl	8008ba8 <SDMMC_CmdStopTransfer>
 8006a70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f957 	bl	8006d38 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a90      	ldr	r2, [pc, #576]	; (8006cd0 <HAL_SD_IRQHandler+0x304>)
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_SD_IRQHandler+0xe8>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 fd63 	bl	8009580 <HAL_SD_RxCpltCallback>
 8006aba:	e138      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f002 fd55 	bl	800956c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006ac2:	e134      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 812f 	beq.w	8006d2e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_SD_IRQHandler+0x130>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d011      	beq.n	8006b20 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f002 f851 	bl	8008ba8 <SDMMC_CmdStopTransfer>
 8006b06:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f90c 	bl	8006d38 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_SD_IRQHandler+0x176>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 fd12 	bl	800956c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <HAL_SD_IRQHandler+0x192>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80e8 	beq.w	8006d2e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f002 fd0e 	bl	8009580 <HAL_SD_RxCpltCallback>
}
 8006b64:	e0e3      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <HAL_SD_IRQHandler+0x1ba>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f919 	bl	8007db6 <SD_Write_IT>
 8006b84:	e0d3      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 809f 	beq.w	8006cd4 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	f043 0202 	orr.w	r2, r3, #2
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc2:	f043 0208 	orr.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	f043 0220 	orr.w	r2, r3, #32
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	f043 0210 	orr.w	r2, r3, #16
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a33      	ldr	r2, [pc, #204]	; (8006cd0 <HAL_SD_IRQHandler+0x304>)
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c14:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c24:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c34:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c44:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 ffac 	bl	8008ba8 <SDMMC_CmdStopTransfer>
 8006c50:	4602      	mov	r2, r0
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c6a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f852 	bl	8006d38 <HAL_SD_ErrorCallback>
}
 8006c94:	e04b      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d046      	beq.n	8006d2e <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d042      	beq.n	8006d2e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cb6:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f835 	bl	8006d38 <HAL_SD_ErrorCallback>
}
 8006cce:	e02e      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
 8006cd0:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d025      	beq.n	8006d2e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10c      	bne.n	8006d14 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f8d4 	bl	8007eb2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006d0a:	e010      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f8bc 	bl	8007e8a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006d12:	e00c      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 f8bd 	bl	8007e9e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006d24:	e003      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 f8a5 	bl	8007e76 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006d2c:	e7ff      	b.n	8006d2e <HAL_SD_IRQHandler+0x362>
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop

08006d38 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5a:	0f9b      	lsrs	r3, r3, #30
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d66:	0e9b      	lsrs	r3, r3, #26
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d78:	0e1b      	lsrs	r3, r3, #24
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8a:	0c1b      	lsrs	r3, r3, #16
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dac:	0d1b      	lsrs	r3, r3, #20
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dca:	0bdb      	lsrs	r3, r3, #15
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ddc:	0b9b      	lsrs	r3, r3, #14
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dee:	0b5b      	lsrs	r3, r3, #13
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	0b1b      	lsrs	r3, r3, #12
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d163      	bne.n	8006ee4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e20:	009a      	lsls	r2, r3, #2
 8006e22:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e26:	4013      	ands	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e2c:	0f92      	lsrs	r2, r2, #30
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e38:	0edb      	lsrs	r3, r3, #27
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e5c:	0d5b      	lsrs	r3, r3, #21
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e6e:	0c9b      	lsrs	r3, r3, #18
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e80:	0bdb      	lsrs	r3, r3, #15
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	7e1b      	ldrb	r3, [r3, #24]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	3302      	adds	r3, #2
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006eae:	fb03 f202 	mul.w	r2, r3, r2
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	7a1b      	ldrb	r3, [r3, #8]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ed0:	0a52      	lsrs	r2, r2, #9
 8006ed2:	fb03 f202 	mul.w	r2, r3, r2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ee2:	e031      	b.n	8006f48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d11d      	bne.n	8006f28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef0:	041b      	lsls	r3, r3, #16
 8006ef2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efa:	0c1b      	lsrs	r3, r3, #16
 8006efc:	431a      	orrs	r2, r3
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	3301      	adds	r3, #1
 8006f08:	029a      	lsls	r2, r3, #10
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f1c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	659a      	str	r2, [r3, #88]	; 0x58
 8006f26:	e00f      	b.n	8006f48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a58      	ldr	r2, [pc, #352]	; (8007090 <HAL_SD_GetCardCSD+0x344>)
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e09d      	b.n	8007084 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f4c:	0b9b      	lsrs	r3, r3, #14
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f80:	0fdb      	lsrs	r3, r3, #31
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	0f5b      	lsrs	r3, r3, #29
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9e:	0e9b      	lsrs	r3, r3, #26
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb0:	0d9b      	lsrs	r3, r3, #22
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc2:	0d5b      	lsrs	r3, r3, #21
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	0c1b      	lsrs	r3, r3, #16
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff2:	0bdb      	lsrs	r3, r3, #15
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007006:	0b9b      	lsrs	r3, r3, #14
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	b2da      	uxtb	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701a:	0b5b      	lsrs	r3, r3, #13
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702e:	0b1b      	lsrs	r3, r3, #12
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007042:	0a9b      	lsrs	r3, r3, #10
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	b2da      	uxtb	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	b2da      	uxtb	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007072:	b2da      	uxtb	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	1fe00fff 	.word	0x1fe00fff

08007094 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b094      	sub	sp, #80	; 0x50
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80070a4:	f107 0308 	add.w	r3, r7, #8
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fbd4 	bl	8007858 <SD_SendSDStatus>
 80070b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d011      	beq.n	80070dc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a4f      	ldr	r2, [pc, #316]	; (80071fc <HAL_SD_GetCardStatus+0x168>)
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80070da:	e070      	b.n	80071be <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	099b      	lsrs	r3, r3, #6
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	b29b      	uxth	r3, r3
 8007102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007106:	b29a      	uxth	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	b29b      	uxth	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b29a      	uxth	r2, r3
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	061a      	lsls	r2, r3, #24
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007122:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800712c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	0e1b      	lsrs	r3, r3, #24
 8007132:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	b2da      	uxtb	r2, r3
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	b2da      	uxtb	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	b29b      	uxth	r3, r3
 8007160:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007164:	b29a      	uxth	r2, r3
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	b29b      	uxth	r3, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	b29b      	uxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	b29a      	uxth	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	0a9b      	lsrs	r3, r3, #10
 800717a:	b2db      	uxtb	r3, r3
 800717c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007180:	b2da      	uxtb	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 0303 	and.w	r3, r3, #3
 8007190:	b2da      	uxtb	r2, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fc3e 	bl	8008a48 <SDMMC_CmdBlockLength>
 80071cc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00d      	beq.n	80071f0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a08      	ldr	r2, [pc, #32]	; (80071fc <HAL_SD_GetCardStatus+0x168>)
 80071da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80071f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3750      	adds	r7, #80	; 0x50
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	1fe00fff 	.word	0x1fe00fff

08007200 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007258:	b5b0      	push	{r4, r5, r7, lr}
 800725a:	b090      	sub	sp, #64	; 0x40
 800725c:	af04      	add	r7, sp, #16
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2203      	movs	r2, #3
 800726c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	2b03      	cmp	r3, #3
 8007276:	d02e      	beq.n	80072d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727e:	d106      	bne.n	800728e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
 800728c:	e029      	b.n	80072e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007294:	d10a      	bne.n	80072ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fbd6 	bl	8007a48 <SD_WideBus_Enable>
 800729c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
 80072aa:	e01a      	b.n	80072e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fc13 	bl	8007ade <SD_WideBus_Disable>
 80072b8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38
 80072c6:	e00c      	b.n	80072e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
 80072d4:	e005      	b.n	80072e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d007      	beq.n	80072fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a60      	ldr	r2, [pc, #384]	; (8007470 <HAL_SD_ConfigWideBusOperation+0x218>)
 80072f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80072f8:	e097      	b.n	800742a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80072fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80072fe:	f7fd fed3 	bl	80050a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007302:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8086 	beq.w	8007418 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	4952      	ldr	r1, [pc, #328]	; (8007474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800732a:	fba1 1303 	umull	r1, r3, r1, r3
 800732e:	0e1b      	lsrs	r3, r3, #24
 8007330:	429a      	cmp	r2, r3
 8007332:	d303      	bcc.n	800733c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	e05a      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007344:	d103      	bne.n	800734e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	e051      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007356:	d126      	bne.n	80073a6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10e      	bne.n	800737e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	4a45      	ldr	r2, [pc, #276]	; (8007478 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d906      	bls.n	8007376 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	4a42      	ldr	r2, [pc, #264]	; (8007474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	0e5b      	lsrs	r3, r3, #25
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e03d      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e039      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	4a3b      	ldr	r2, [pc, #236]	; (8007478 <HAL_SD_ConfigWideBusOperation+0x220>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d906      	bls.n	800739e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	4a38      	ldr	r2, [pc, #224]	; (8007474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	0e5b      	lsrs	r3, r3, #25
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e029      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e025      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10e      	bne.n	80073cc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	4a32      	ldr	r2, [pc, #200]	; (800747c <HAL_SD_ConfigWideBusOperation+0x224>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d906      	bls.n	80073c4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	4a2e      	ldr	r2, [pc, #184]	; (8007474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	0e1b      	lsrs	r3, r3, #24
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e016      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	e012      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	4a28      	ldr	r2, [pc, #160]	; (800747c <HAL_SD_ConfigWideBusOperation+0x224>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d906      	bls.n	80073ec <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	4a24      	ldr	r2, [pc, #144]	; (8007474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	0e1b      	lsrs	r3, r3, #24
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	e002      	b.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681d      	ldr	r5, [r3, #0]
 80073fc:	466c      	mov	r4, sp
 80073fe:	f107 0318 	add.w	r3, r7, #24
 8007402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800740a:	f107 030c 	add.w	r3, r7, #12
 800740e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007410:	4628      	mov	r0, r5
 8007412:	f001 fa3b 	bl	800888c <SDMMC_Init>
 8007416:	e008      	b.n	800742a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007432:	4618      	mov	r0, r3
 8007434:	f001 fb08 	bl	8008a48 <SDMMC_CmdBlockLength>
 8007438:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a0a      	ldr	r2, [pc, #40]	; (8007470 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007466:	4618      	mov	r0, r3
 8007468:	3730      	adds	r7, #48	; 0x30
 800746a:	46bd      	mov	sp, r7
 800746c:	bdb0      	pop	{r4, r5, r7, pc}
 800746e:	bf00      	nop
 8007470:	1fe00fff 	.word	0x1fe00fff
 8007474:	55e63b89 	.word	0x55e63b89
 8007478:	02faf080 	.word	0x02faf080
 800747c:	017d7840 	.word	0x017d7840

08007480 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800748c:	f107 030c 	add.w	r3, r7, #12
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fab0 	bl	80079f8 <SD_SendStatus>
 8007498:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	0a5b      	lsrs	r3, r3, #9
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80074b6:	693b      	ldr	r3, [r7, #16]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074c0:	b5b0      	push	{r4, r5, r7, lr}
 80074c2:	b090      	sub	sp, #64	; 0x40
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80074c8:	2301      	movs	r3, #1
 80074ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 fa35 	bl	8008940 <SDMMC_GetPowerState>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074e0:	e0a9      	b.n	8007636 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d02e      	beq.n	8007548 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fc7a 	bl	8008de8 <SDMMC_CmdSendCID>
 80074f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <SD_InitCard+0x40>
    {
      return errorstate;
 80074fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fe:	e09a      	b.n	8007636 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f001 fa5f 	bl	80089ca <SDMMC_GetResponse>
 800750c:	4602      	mov	r2, r0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2104      	movs	r1, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fa56 	bl	80089ca <SDMMC_GetResponse>
 800751e:	4602      	mov	r2, r0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2108      	movs	r1, #8
 800752a:	4618      	mov	r0, r3
 800752c:	f001 fa4d 	bl	80089ca <SDMMC_GetResponse>
 8007530:	4602      	mov	r2, r0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	210c      	movs	r1, #12
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fa44 	bl	80089ca <SDMMC_GetResponse>
 8007542:	4602      	mov	r2, r0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	2b03      	cmp	r3, #3
 800754e:	d00d      	beq.n	800756c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f107 020e 	add.w	r2, r7, #14
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fc83 	bl	8008e66 <SDMMC_CmdSetRelAdd>
 8007560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <SD_InitCard+0xac>
    {
      return errorstate;
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	e064      	b.n	8007636 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	2b03      	cmp	r3, #3
 8007572:	d036      	beq.n	80075e2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007574:	89fb      	ldrh	r3, [r7, #14]
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f001 fc4c 	bl	8008e26 <SDMMC_CmdSendCSD>
 800758e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <SD_InitCard+0xda>
    {
      return errorstate;
 8007596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007598:	e04d      	b.n	8007636 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fa12 	bl	80089ca <SDMMC_GetResponse>
 80075a6:	4602      	mov	r2, r0
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2104      	movs	r1, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fa09 	bl	80089ca <SDMMC_GetResponse>
 80075b8:	4602      	mov	r2, r0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2108      	movs	r1, #8
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 fa00 	bl	80089ca <SDMMC_GetResponse>
 80075ca:	4602      	mov	r2, r0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	210c      	movs	r1, #12
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 f9f7 	bl	80089ca <SDMMC_GetResponse>
 80075dc:	4602      	mov	r2, r0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2104      	movs	r1, #4
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 f9ee 	bl	80089ca <SDMMC_GetResponse>
 80075ee:	4603      	mov	r3, r0
 80075f0:	0d1a      	lsrs	r2, r3, #20
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80075f6:	f107 0310 	add.w	r3, r7, #16
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fba5 	bl	8006d4c <HAL_SD_GetCardCSD>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007608:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800760c:	e013      	b.n	8007636 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	2200      	movs	r2, #0
 800761a:	461c      	mov	r4, r3
 800761c:	4615      	mov	r5, r2
 800761e:	4622      	mov	r2, r4
 8007620:	462b      	mov	r3, r5
 8007622:	4608      	mov	r0, r1
 8007624:	f001 faf6 	bl	8008c14 <SDMMC_CmdSelDesel>
 8007628:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <SD_InitCard+0x174>
  {
    return errorstate;
 8007630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007632:	e000      	b.n	8007636 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3740      	adds	r7, #64	; 0x40
 800763a:	46bd      	mov	sp, r7
 800763c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007640 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007654:	f7f9 ff7e 	bl	8001554 <HAL_GetTick>
 8007658:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fafc 	bl	8008c5c <SDMMC_CmdGoIdleState>
 8007664:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <SD_PowerON+0x30>
  {
    return errorstate;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	e0ed      	b.n	800784c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fb0f 	bl	8008c98 <SDMMC_CmdOperCond>
 800767a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00d      	beq.n	800769e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fae5 	bl	8008c5c <SDMMC_CmdGoIdleState>
 8007692:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <SD_PowerON+0x64>
    {
      return errorstate;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	e0d6      	b.n	800784c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d137      	bne.n	800771c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 fb10 	bl	8008cd8 <SDMMC_CmdAppCommand>
 80076b8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02d      	beq.n	800771c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076c4:	e0c2      	b.n	800784c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2100      	movs	r1, #0
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fb03 	bl	8008cd8 <SDMMC_CmdAppCommand>
 80076d2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <SD_PowerON+0x9e>
    {
      return errorstate;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	e0b6      	b.n	800784c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	495c      	ldr	r1, [pc, #368]	; (8007854 <SD_PowerON+0x214>)
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 fb1a 	bl	8008d1e <SDMMC_CmdAppOperCommand>
 80076ea:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076f6:	e0a9      	b.n	800784c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 f963 	bl	80089ca <SDMMC_GetResponse>
 8007704:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	0fdb      	lsrs	r3, r3, #31
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <SD_PowerON+0xd2>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <SD_PowerON+0xd4>
 8007712:	2300      	movs	r3, #0
 8007714:	61bb      	str	r3, [r7, #24]

    count++;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007722:	4293      	cmp	r3, r2
 8007724:	d802      	bhi.n	800772c <SD_PowerON+0xec>
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0cc      	beq.n	80076c6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007732:	4293      	cmp	r3, r2
 8007734:	d902      	bls.n	800773c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800773a:	e087      	b.n	800784c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d07e      	beq.n	8007844 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d17a      	bne.n	800784a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d075      	beq.n	800784a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007764:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0208 	orr.w	r2, r2, #8
 8007774:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f001 fbda 	bl	8008f34 <SDMMC_CmdVoltageSwitch>
 8007780:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00c      	beq.n	80077a2 <SD_PowerON+0x162>
        {
          return errorstate;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	e05f      	b.n	800784c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800778c:	f7f9 fee2 	bl	8001554 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800779a:	d102      	bne.n	80077a2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800779c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077a0:	e054      	b.n	800784c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077b0:	d1ec      	bne.n	800778c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ca:	d002      	beq.n	80077d2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80077cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077d0:	e03c      	b.n	800784c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80077d2:	2001      	movs	r0, #1
 80077d4:	f000 fb44 	bl	8007e60 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0204 	orr.w	r2, r2, #4
 80077e6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80077e8:	e00a      	b.n	8007800 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077ea:	f7f9 feb3 	bl	8001554 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f8:	d102      	bne.n	8007800 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80077fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077fe:	e025      	b.n	800784c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800780a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800780e:	d1ec      	bne.n	80077ea <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007818:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007828:	d102      	bne.n	8007830 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800782a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800782e:	e00d      	b.n	800784c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2213      	movs	r2, #19
 8007836:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
 8007842:	e002      	b.n	800784a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	c1100000 	.word	0xc1100000

08007858 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	; 0x30
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007862:	f7f9 fe77 	bl	8001554 <HAL_GetTick>
 8007866:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f001 f8a9 	bl	80089ca <SDMMC_GetResponse>
 8007878:	4603      	mov	r3, r0
 800787a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007882:	d102      	bne.n	800788a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007888:	e0b0      	b.n	80079ec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2140      	movs	r1, #64	; 0x40
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f8d9 	bl	8008a48 <SDMMC_CmdBlockLength>
 8007896:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	e0a0      	b.n	80079ec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f001 fa0e 	bl	8008cd8 <SDMMC_CmdAppCommand>
 80078bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	e08d      	b.n	80079ec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80078d6:	2340      	movs	r3, #64	; 0x40
 80078d8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80078da:	2360      	movs	r3, #96	; 0x60
 80078dc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078de:	2302      	movs	r3, #2
 80078e0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f107 0208 	add.w	r2, r7, #8
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f87b 	bl	80089f0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 faf6 	bl	8008ef0 <SDMMC_CmdStatusRegister>
 8007904:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d02b      	beq.n	8007964 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	e069      	b.n	80079ec <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d013      	beq.n	800794e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007926:	2300      	movs	r3, #0
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800792a:	e00d      	b.n	8007948 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 ffd5 	bl	80088e0 <SDMMC_ReadFIFO>
 8007936:	4602      	mov	r2, r0
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	601a      	str	r2, [r3, #0]
        pData++;
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	3304      	adds	r3, #4
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	3301      	adds	r3, #1
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	2b07      	cmp	r3, #7
 800794c:	d9ee      	bls.n	800792c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800794e:	f7f9 fe01 	bl	8001554 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800795c:	d102      	bne.n	8007964 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800795e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007962:	e043      	b.n	80079ec <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0d2      	beq.n	8007918 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007980:	2308      	movs	r3, #8
 8007982:	e033      	b.n	80079ec <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007992:	2302      	movs	r3, #2
 8007994:	e02a      	b.n	80079ec <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d017      	beq.n	80079d4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80079a4:	2320      	movs	r3, #32
 80079a6:	e021      	b.n	80079ec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 ff97 	bl	80088e0 <SDMMC_ReadFIFO>
 80079b2:	4602      	mov	r2, r0
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	601a      	str	r2, [r3, #0]
    pData++;
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	3304      	adds	r3, #4
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079be:	f7f9 fdc9 	bl	8001554 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079cc:	d102      	bne.n	80079d4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079d2:	e00b      	b.n	80079ec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e2      	bne.n	80079a8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a03      	ldr	r2, [pc, #12]	; (80079f4 <SD_SendSDStatus+0x19c>)
 80079e8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3730      	adds	r7, #48	; 0x30
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	18000f3a 	.word	0x18000f3a

080079f8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a0c:	e018      	b.n	8007a40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	041b      	lsls	r3, r3, #16
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f001 fa45 	bl	8008eaa <SDMMC_CmdSendStatus>
 8007a20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	e009      	b.n	8007a40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 ffc9 	bl	80089ca <SDMMC_GetResponse>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 ffb3 	bl	80089ca <SDMMC_GetResponse>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a6e:	d102      	bne.n	8007a76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a74:	e02f      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a76:	f107 030c 	add.w	r3, r7, #12
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f879 	bl	8007b74 <SD_FindSCR>
 8007a82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	e023      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01c      	beq.n	8007ad2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f001 f917 	bl	8008cd8 <SDMMC_CmdAppCommand>
 8007aaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	e00f      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2102      	movs	r1, #2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 f94e 	bl	8008d5e <SDMMC_CmdBusWidth>
 8007ac2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	e003      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e001      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	2300      	movs	r3, #0
 8007aec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 ff68 	bl	80089ca <SDMMC_GetResponse>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b04:	d102      	bne.n	8007b0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b0a:	e02f      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f82e 	bl	8007b74 <SD_FindSCR>
 8007b18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	e023      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01c      	beq.n	8007b68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f001 f8cc 	bl	8008cd8 <SDMMC_CmdAppCommand>
 8007b40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	e00f      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 f903 	bl	8008d5e <SDMMC_CmdBusWidth>
 8007b58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	e003      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e001      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08e      	sub	sp, #56	; 0x38
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b7e:	f7f9 fce9 	bl	8001554 <HAL_GetTick>
 8007b82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2108      	movs	r1, #8
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 ff54 	bl	8008a48 <SDMMC_CmdBlockLength>
 8007ba0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <SD_FindSCR+0x38>
  {
    return errorstate;
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	e0ad      	b.n	8007d08 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f001 f88d 	bl	8008cd8 <SDMMC_CmdAppCommand>
 8007bbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	e09e      	b.n	8007d08 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007bd4:	2330      	movs	r3, #48	; 0x30
 8007bd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007be0:	2301      	movs	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f107 0210 	add.w	r2, r7, #16
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fefe 	bl	80089f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f8d3 	bl	8008da4 <SDMMC_CmdSendSCR>
 8007bfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d027      	beq.n	8007c56 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	e07e      	b.n	8007d08 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d113      	bne.n	8007c40 <SD_FindSCR+0xcc>
 8007c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d110      	bne.n	8007c40 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fe5c 	bl	80088e0 <SDMMC_ReadFIFO>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fe55 	bl	80088e0 <SDMMC_ReadFIFO>
 8007c36:	4603      	mov	r3, r0
 8007c38:	60fb      	str	r3, [r7, #12]
      index++;
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c40:	f7f9 fc88 	bl	8001554 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4e:	d102      	bne.n	8007c56 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c54:	e058      	b.n	8007d08 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c5c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0d1      	beq.n	8007c0a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	e043      	b.n	8007d08 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2202      	movs	r2, #2
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c96:	2302      	movs	r3, #2
 8007c98:	e036      	b.n	8007d08 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2220      	movs	r2, #32
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007cb0:	2320      	movs	r3, #32
 8007cb2:	e029      	b.n	8007d08 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a15      	ldr	r2, [pc, #84]	; (8007d10 <SD_FindSCR+0x19c>)
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	061a      	lsls	r2, r3, #24
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cc8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	0a1b      	lsrs	r3, r3, #8
 8007cce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cd2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	0e1b      	lsrs	r3, r3, #24
 8007cd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	601a      	str	r2, [r3, #0]
    scr++;
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	061a      	lsls	r2, r3, #24
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cf0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cfa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	0e1b      	lsrs	r3, r3, #24
 8007d00:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3738      	adds	r7, #56	; 0x38
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	18000f3a 	.word	0x18000f3a

08007d14 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d03f      	beq.n	8007dae <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e033      	b.n	8007d9c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fdd1 	bl	80088e0 <SDMMC_ReadFIFO>
 8007d3e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	0e1b      	lsrs	r3, r3, #24
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b07      	cmp	r3, #7
 8007da0:	d9c8      	bls.n	8007d34 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007dae:	bf00      	nop
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d043      	beq.n	8007e58 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	e037      	b.n	8007e46 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	021a      	lsls	r2, r3, #8
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3301      	adds	r3, #1
 8007df8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	041a      	lsls	r2, r3, #16
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	061a      	lsls	r2, r3, #24
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f107 0208 	add.w	r2, r7, #8
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fd5d 	bl	80088fa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	3301      	adds	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b07      	cmp	r3, #7
 8007e4a:	d9c4      	bls.n	8007dd6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e095      	b.n	8008004 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d108      	bne.n	8007ef2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ee8:	d009      	beq.n	8007efe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	61da      	str	r2, [r3, #28]
 8007ef0:	e005      	b.n	8007efe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7f9 f911 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f34:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f3e:	d902      	bls.n	8007f46 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e002      	b.n	8007f4c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f54:	d007      	beq.n	8007f66 <HAL_SPI_Init+0xa0>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f5e:	d002      	beq.n	8007f66 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa8:	ea42 0103 	orr.w	r1, r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	0c1b      	lsrs	r3, r3, #16
 8007fc2:	f003 0204 	and.w	r2, r3, #4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	f003 0310 	and.w	r3, r3, #16
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fe2:	ea42 0103 	orr.w	r1, r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e038      	b.n	8008094 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7f9 f962 	bl	8001300 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3308      	adds	r3, #8
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f000 fafa 	bl	8008640 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	461a      	mov	r2, r3
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	f000 fb8c 	bl	8008774 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6858      	ldr	r0, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	f000 fbd5 	bl	8008818 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	6892      	ldr	r2, [r2, #8]
 8008082:	f041 0101 	orr.w	r1, r1, #1
 8008086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e049      	b.n	8008142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f841 	bl	800814a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f000 f9f8 	bl	80084d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	d001      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e04f      	b.n	8008218 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a23      	ldr	r2, [pc, #140]	; (8008224 <HAL_TIM_Base_Start_IT+0xc4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d01d      	beq.n	80081d6 <HAL_TIM_Base_Start_IT+0x76>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a2:	d018      	beq.n	80081d6 <HAL_TIM_Base_Start_IT+0x76>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1f      	ldr	r2, [pc, #124]	; (8008228 <HAL_TIM_Base_Start_IT+0xc8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <HAL_TIM_Base_Start_IT+0x76>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1e      	ldr	r2, [pc, #120]	; (800822c <HAL_TIM_Base_Start_IT+0xcc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00e      	beq.n	80081d6 <HAL_TIM_Base_Start_IT+0x76>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1c      	ldr	r2, [pc, #112]	; (8008230 <HAL_TIM_Base_Start_IT+0xd0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d009      	beq.n	80081d6 <HAL_TIM_Base_Start_IT+0x76>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1b      	ldr	r2, [pc, #108]	; (8008234 <HAL_TIM_Base_Start_IT+0xd4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d004      	beq.n	80081d6 <HAL_TIM_Base_Start_IT+0x76>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a19      	ldr	r2, [pc, #100]	; (8008238 <HAL_TIM_Base_Start_IT+0xd8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d115      	bne.n	8008202 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	4b17      	ldr	r3, [pc, #92]	; (800823c <HAL_TIM_Base_Start_IT+0xdc>)
 80081de:	4013      	ands	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b06      	cmp	r3, #6
 80081e6:	d015      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0xb4>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ee:	d011      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0201 	orr.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008200:	e008      	b.n	8008214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0201 	orr.w	r2, r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e000      	b.n	8008216 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008214:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800
 8008230:	40000c00 	.word	0x40000c00
 8008234:	40013400 	.word	0x40013400
 8008238:	40014000 	.word	0x40014000
 800823c:	00010007 	.word	0x00010007

08008240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b02      	cmp	r3, #2
 8008254:	d122      	bne.n	800829c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d11b      	bne.n	800829c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0202 	mvn.w	r2, #2
 800826c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f905 	bl	8008492 <HAL_TIM_IC_CaptureCallback>
 8008288:	e005      	b.n	8008296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8f7 	bl	800847e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f908 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d122      	bne.n	80082f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d11b      	bne.n	80082f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0204 	mvn.w	r2, #4
 80082c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f8db 	bl	8008492 <HAL_TIM_IC_CaptureCallback>
 80082dc:	e005      	b.n	80082ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f8cd 	bl	800847e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f8de 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d122      	bne.n	8008344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b08      	cmp	r3, #8
 800830a:	d11b      	bne.n	8008344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f06f 0208 	mvn.w	r2, #8
 8008314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f8b1 	bl	8008492 <HAL_TIM_IC_CaptureCallback>
 8008330:	e005      	b.n	800833e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f8a3 	bl	800847e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f8b4 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0310 	and.w	r3, r3, #16
 800834e:	2b10      	cmp	r3, #16
 8008350:	d122      	bne.n	8008398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	2b10      	cmp	r3, #16
 800835e:	d11b      	bne.n	8008398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0210 	mvn.w	r2, #16
 8008368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2208      	movs	r2, #8
 800836e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f887 	bl	8008492 <HAL_TIM_IC_CaptureCallback>
 8008384:	e005      	b.n	8008392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f879 	bl	800847e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f88a 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d10e      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d107      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0201 	mvn.w	r2, #1
 80083bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7f8 fc50 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ce:	2b80      	cmp	r3, #128	; 0x80
 80083d0:	d10e      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083dc:	2b80      	cmp	r3, #128	; 0x80
 80083de:	d107      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f914 	bl	8008618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fe:	d10e      	bne.n	800841e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840a:	2b80      	cmp	r3, #128	; 0x80
 800840c:	d107      	bne.n	800841e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f907 	bl	800862c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b40      	cmp	r3, #64	; 0x40
 800842a:	d10e      	bne.n	800844a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	d107      	bne.n	800844a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f838 	bl	80084ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b20      	cmp	r3, #32
 8008456:	d10e      	bne.n	8008476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b20      	cmp	r3, #32
 8008464:	d107      	bne.n	8008476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f06f 0220 	mvn.w	r2, #32
 800846e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f8c7 	bl	8008604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a40      	ldr	r2, [pc, #256]	; (80085e4 <TIM_Base_SetConfig+0x114>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d013      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ee:	d00f      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a3d      	ldr	r2, [pc, #244]	; (80085e8 <TIM_Base_SetConfig+0x118>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00b      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a3c      	ldr	r2, [pc, #240]	; (80085ec <TIM_Base_SetConfig+0x11c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d007      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3b      	ldr	r2, [pc, #236]	; (80085f0 <TIM_Base_SetConfig+0x120>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d003      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3a      	ldr	r2, [pc, #232]	; (80085f4 <TIM_Base_SetConfig+0x124>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d108      	bne.n	8008522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a2f      	ldr	r2, [pc, #188]	; (80085e4 <TIM_Base_SetConfig+0x114>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d01f      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008530:	d01b      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2c      	ldr	r2, [pc, #176]	; (80085e8 <TIM_Base_SetConfig+0x118>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d017      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a2b      	ldr	r2, [pc, #172]	; (80085ec <TIM_Base_SetConfig+0x11c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2a      	ldr	r2, [pc, #168]	; (80085f0 <TIM_Base_SetConfig+0x120>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00f      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a29      	ldr	r2, [pc, #164]	; (80085f4 <TIM_Base_SetConfig+0x124>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a28      	ldr	r2, [pc, #160]	; (80085f8 <TIM_Base_SetConfig+0x128>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a27      	ldr	r2, [pc, #156]	; (80085fc <TIM_Base_SetConfig+0x12c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a26      	ldr	r2, [pc, #152]	; (8008600 <TIM_Base_SetConfig+0x130>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d108      	bne.n	800857c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <TIM_Base_SetConfig+0x114>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00f      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a12      	ldr	r2, [pc, #72]	; (80085f4 <TIM_Base_SetConfig+0x124>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00b      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <TIM_Base_SetConfig+0x128>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d007      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a10      	ldr	r2, [pc, #64]	; (80085fc <TIM_Base_SetConfig+0x12c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d003      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <TIM_Base_SetConfig+0x130>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d103      	bne.n	80085d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	615a      	str	r2, [r3, #20]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40000400 	.word	0x40000400
 80085ec:	40000800 	.word	0x40000800
 80085f0:	40000c00 	.word	0x40000c00
 80085f4:	40013400 	.word	0x40013400
 80085f8:	40014000 	.word	0x40014000
 80085fc:	40014400 	.word	0x40014400
 8008600:	40014800 	.word	0x40014800

08008604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	f023 0101 	bic.w	r1, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b08      	cmp	r3, #8
 8008668:	d102      	bne.n	8008670 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	e001      	b.n	8008674 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008680:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008686:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800868c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008692:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008698:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800869e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80086a4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80086aa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80086b0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80086e2:	4b23      	ldr	r3, [pc, #140]	; (8008770 <FMC_NORSRAM_Init+0x130>)
 80086e4:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ec:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086f4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80086fc:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008704:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	43db      	mvns	r3, r3
 8008714:	ea02 0103 	and.w	r1, r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4319      	orrs	r1, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800872e:	d10c      	bne.n	800874a <FMC_NORSRAM_Init+0x10a>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008744:	431a      	orrs	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d006      	beq.n	8008760 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	0008fb7f 	.word	0x0008fb7f

08008774 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	431a      	orrs	r2, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	431a      	orrs	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	079b      	lsls	r3, r3, #30
 80087a4:	431a      	orrs	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	041b      	lsls	r3, r3, #16
 80087ac:	431a      	orrs	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	051b      	lsls	r3, r3, #20
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	3b02      	subs	r3, #2
 80087be:	061b      	lsls	r3, r3, #24
 80087c0:	ea42 0103 	orr.w	r1, r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	3201      	adds	r2, #1
 80087cc:	4319      	orrs	r1, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e0:	d113      	bne.n	800880a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087ea:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	051b      	lsls	r3, r3, #20
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	431a      	orrs	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800882c:	d121      	bne.n	8008872 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008836:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	4319      	orrs	r1, r3
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	4319      	orrs	r1, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	079b      	lsls	r3, r3, #30
 8008854:	4319      	orrs	r1, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	4319      	orrs	r1, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	041b      	lsls	r3, r3, #16
 8008862:	430b      	orrs	r3, r1
 8008864:	ea42 0103 	orr.w	r1, r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008870:	e005      	b.n	800887e <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800887a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800888c:	b084      	sub	sp, #16
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	f107 001c 	add.w	r0, r7, #28
 800889a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80088a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80088a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80088a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80088aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80088ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80088b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <SDMMC_Init+0x50>)
 80088c0:	4013      	ands	r3, r2
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	b004      	add	sp, #16
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	ffc02c00 	.word	0xffc02c00

080088e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f043 0203 	orr.w	r2, r3, #3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008930:	2002      	movs	r0, #2
 8008932:	f7f8 fe1b 	bl	800156c <HAL_Delay>

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0303 	and.w	r3, r3, #3
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800897a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008980:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008986:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	4b06      	ldr	r3, [pc, #24]	; (80089ac <SDMMC_SendCommand+0x50>)
 8008994:	4013      	ands	r3, r2
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	fffee0c0 	.word	0xfffee0c0

080089b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	b2db      	uxtb	r3, r3
}
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3314      	adds	r3, #20
 80089d8:	461a      	mov	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	4413      	add	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a16:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0

}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a56:	2310      	movs	r3, #16
 8008a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a6a:	f107 0308 	add.w	r3, r7, #8
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff ff73 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7a:	2110      	movs	r1, #16
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fa7b 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a84:	69fb      	ldr	r3, [r7, #28]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b088      	sub	sp, #32
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a9c:	2311      	movs	r3, #17
 8008a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ab0:	f107 0308 	add.w	r3, r7, #8
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff ff50 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac0:	2111      	movs	r1, #17
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fa58 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aca:	69fb      	ldr	r3, [r7, #28]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ae2:	2312      	movs	r3, #18
 8008ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008af6:	f107 0308 	add.w	r3, r7, #8
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff ff2d 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b06:	2112      	movs	r1, #18
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fa35 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b10:	69fb      	ldr	r3, [r7, #28]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b088      	sub	sp, #32
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b28:	2318      	movs	r3, #24
 8008b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b3c:	f107 0308 	add.w	r3, r7, #8
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff ff0a 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4c:	2118      	movs	r1, #24
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa12 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b56:	69fb      	ldr	r3, [r7, #28]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b6e:	2319      	movs	r3, #25
 8008b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7ff fee7 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b92:	2119      	movs	r1, #25
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f9ef 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bc6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008be0:	f107 0308 	add.w	r3, r7, #8
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff feb8 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008bec:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <SDMMC_CmdStopTransfer+0x68>)
 8008bee:	210c      	movs	r1, #12
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f9c1 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008bf6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008c04:	69fb      	ldr	r3, [r7, #28]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	05f5e100 	.word	0x05f5e100

08008c14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	; 0x28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c24:	2307      	movs	r3, #7
 8008c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c2c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c36:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c38:	f107 0310 	add.w	r3, r7, #16
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fe8c 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c48:	2107      	movs	r1, #7
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 f994 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3728      	adds	r7, #40	; 0x28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff fe6b 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fbb8 	bl	80093fc <SDMMC_GetCmdError>
 8008c8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3720      	adds	r7, #32
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008ca0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008ca6:	2308      	movs	r3, #8
 8008ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cba:	f107 0308 	add.w	r3, r7, #8
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff fe4b 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fb4a 	bl	8009360 <SDMMC_GetCmdResp7>
 8008ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cce:	69fb      	ldr	r3, [r7, #28]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008ce6:	2337      	movs	r3, #55	; 0x37
 8008ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cfa:	f107 0308 	add.w	r3, r7, #8
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fe2b 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0a:	2137      	movs	r1, #55	; 0x37
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f933 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d14:	69fb      	ldr	r3, [r7, #28]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b088      	sub	sp, #32
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d2c:	2329      	movs	r3, #41	; 0x29
 8008d2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d40:	f107 0308 	add.w	r3, r7, #8
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff fe08 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fa4f 	bl	80091f0 <SDMMC_GetCmdResp3>
 8008d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d54:	69fb      	ldr	r3, [r7, #28]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b088      	sub	sp, #32
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d6c:	2306      	movs	r3, #6
 8008d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d80:	f107 0308 	add.w	r3, r7, #8
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff fde8 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d90:	2106      	movs	r1, #6
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f8f0 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d9a:	69fb      	ldr	r3, [r7, #28]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008db0:	2333      	movs	r3, #51	; 0x33
 8008db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff fdc6 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd4:	2133      	movs	r1, #51	; 0x33
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f8ce 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dde:	69fb      	ldr	r3, [r7, #28]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008df4:	2302      	movs	r3, #2
 8008df6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e08:	f107 0308 	add.w	r3, r7, #8
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fda4 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9a1 	bl	800915c <SDMMC_GetCmdResp2>
 8008e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3720      	adds	r7, #32
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b088      	sub	sp, #32
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e34:	2309      	movs	r3, #9
 8008e36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e48:	f107 0308 	add.w	r3, r7, #8
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff fd84 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f981 	bl	800915c <SDMMC_GetCmdResp2>
 8008e5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b088      	sub	sp, #32
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e74:	2303      	movs	r3, #3
 8008e76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff fd64 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	2103      	movs	r1, #3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f9e9 	bl	8009270 <SDMMC_GetCmdResp6>
 8008e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b088      	sub	sp, #32
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008eb8:	230d      	movs	r3, #13
 8008eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff fd42 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008edc:	210d      	movs	r1, #13
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f84a 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3720      	adds	r7, #32
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008efc:	230d      	movs	r3, #13
 8008efe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f06:	2300      	movs	r3, #0
 8008f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f10:	f107 0308 	add.w	r3, r7, #8
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fd20 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f20:	210d      	movs	r1, #13
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f828 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008f40:	230b      	movs	r3, #11
 8008f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fcfe 	bl	800895c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f64:	210b      	movs	r1, #11
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f806 	bl	8008f78 <SDMMC_GetCmdResp1>
 8008f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	460b      	mov	r3, r1
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008f86:	4b70      	ldr	r3, [pc, #448]	; (8009148 <SDMMC_GetCmdResp1+0x1d0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a70      	ldr	r2, [pc, #448]	; (800914c <SDMMC_GetCmdResp1+0x1d4>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	0a5a      	lsrs	r2, r3, #9
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	1e5a      	subs	r2, r3, #1
 8008f9e:	61fa      	str	r2, [r7, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fa8:	e0c9      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fae:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	4b67      	ldr	r3, [pc, #412]	; (8009150 <SDMMC_GetCmdResp1+0x1d8>)
 8008fb4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0ef      	beq.n	8008f9a <SDMMC_GetCmdResp1+0x22>
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1ea      	bne.n	8008f9a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	e0b1      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e0a6      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a58      	ldr	r2, [pc, #352]	; (8009154 <SDMMC_GetCmdResp1+0x1dc>)
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7ff fcda 	bl	80089b0 <SDMMC_GetCommandResponse>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	461a      	mov	r2, r3
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	4293      	cmp	r3, r2
 8009004:	d001      	beq.n	800900a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009006:	2301      	movs	r3, #1
 8009008:	e099      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800900a:	2100      	movs	r1, #0
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7ff fcdc 	bl	80089ca <SDMMC_GetResponse>
 8009012:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	4b50      	ldr	r3, [pc, #320]	; (8009158 <SDMMC_GetCmdResp1+0x1e0>)
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800901e:	2300      	movs	r3, #0
 8009020:	e08d      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	da02      	bge.n	800902e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800902c:	e087      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009038:	2340      	movs	r3, #64	; 0x40
 800903a:	e080      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009046:	2380      	movs	r3, #128	; 0x80
 8009048:	e079      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009058:	e071      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009068:	e069      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009078:	e061      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009088:	e059      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009098:	e051      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090a8:	e049      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090b8:	e041      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80090c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c8:	e039      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090d8:	e031      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090e8:	e029      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090f8:	e021      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009104:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009108:	e019      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009114:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009118:	e011      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009128:	e009      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f003 0308 	and.w	r3, r3, #8
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009134:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009138:	e001      	b.n	800913e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800913a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000000 	.word	0x20000000
 800914c:	10624dd3 	.word	0x10624dd3
 8009150:	00200045 	.word	0x00200045
 8009154:	002000c5 	.word	0x002000c5
 8009158:	fdffe008 	.word	0xfdffe008

0800915c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009164:	4b1f      	ldr	r3, [pc, #124]	; (80091e4 <SDMMC_GetCmdResp2+0x88>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a1f      	ldr	r2, [pc, #124]	; (80091e8 <SDMMC_GetCmdResp2+0x8c>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	0a5b      	lsrs	r3, r3, #9
 8009170:	f241 3288 	movw	r2, #5000	; 0x1388
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	1e5a      	subs	r2, r3, #1
 800917e:	60fa      	str	r2, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009188:	e026      	b.n	80091d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0ef      	beq.n	800917a <SDMMC_GetCmdResp2+0x1e>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1ea      	bne.n	800917a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2204      	movs	r2, #4
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091b6:	2304      	movs	r3, #4
 80091b8:	e00e      	b.n	80091d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e003      	b.n	80091d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a06      	ldr	r2, [pc, #24]	; (80091ec <SDMMC_GetCmdResp2+0x90>)
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	20000000 	.word	0x20000000
 80091e8:	10624dd3 	.word	0x10624dd3
 80091ec:	002000c5 	.word	0x002000c5

080091f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091f8:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <SDMMC_GetCmdResp3+0x74>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1a      	ldr	r2, [pc, #104]	; (8009268 <SDMMC_GetCmdResp3+0x78>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	0a5b      	lsrs	r3, r3, #9
 8009204:	f241 3288 	movw	r2, #5000	; 0x1388
 8009208:	fb02 f303 	mul.w	r3, r2, r3
 800920c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	60fa      	str	r2, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d102      	bne.n	800921e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800921c:	e01b      	b.n	8009256 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0ef      	beq.n	800920e <SDMMC_GetCmdResp3+0x1e>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1ea      	bne.n	800920e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2204      	movs	r2, #4
 8009248:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800924a:	2304      	movs	r3, #4
 800924c:	e003      	b.n	8009256 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a06      	ldr	r2, [pc, #24]	; (800926c <SDMMC_GetCmdResp3+0x7c>)
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000000 	.word	0x20000000
 8009268:	10624dd3 	.word	0x10624dd3
 800926c:	002000c5 	.word	0x002000c5

08009270 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	460b      	mov	r3, r1
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800927e:	4b35      	ldr	r3, [pc, #212]	; (8009354 <SDMMC_GetCmdResp6+0xe4>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a35      	ldr	r2, [pc, #212]	; (8009358 <SDMMC_GetCmdResp6+0xe8>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	0a5b      	lsrs	r3, r3, #9
 800928a:	f241 3288 	movw	r2, #5000	; 0x1388
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	61fa      	str	r2, [r7, #28]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d102      	bne.n	80092a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800929e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a2:	e052      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0ef      	beq.n	8009294 <SDMMC_GetCmdResp6+0x24>
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1ea      	bne.n	8009294 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2204      	movs	r2, #4
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092d0:	2304      	movs	r3, #4
 80092d2:	e03a      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e02f      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff fb60 	bl	80089b0 <SDMMC_GetCommandResponse>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d001      	beq.n	80092fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e025      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4a16      	ldr	r2, [pc, #88]	; (800935c <SDMMC_GetCmdResp6+0xec>)
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009304:	2100      	movs	r1, #0
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7ff fb5f 	bl	80089ca <SDMMC_GetResponse>
 800930c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d106      	bne.n	8009326 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	0c1b      	lsrs	r3, r3, #16
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009322:	2300      	movs	r3, #0
 8009324:	e011      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009334:	e009      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009344:	e001      	b.n	800934a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	3720      	adds	r7, #32
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20000000 	.word	0x20000000
 8009358:	10624dd3 	.word	0x10624dd3
 800935c:	002000c5 	.word	0x002000c5

08009360 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009368:	4b22      	ldr	r3, [pc, #136]	; (80093f4 <SDMMC_GetCmdResp7+0x94>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a22      	ldr	r2, [pc, #136]	; (80093f8 <SDMMC_GetCmdResp7+0x98>)
 800936e:	fba2 2303 	umull	r2, r3, r2, r3
 8009372:	0a5b      	lsrs	r3, r3, #9
 8009374:	f241 3288 	movw	r2, #5000	; 0x1388
 8009378:	fb02 f303 	mul.w	r3, r2, r3
 800937c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1e5a      	subs	r2, r3, #1
 8009382:	60fa      	str	r2, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800938c:	e02c      	b.n	80093e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0ef      	beq.n	800937e <SDMMC_GetCmdResp7+0x1e>
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1ea      	bne.n	800937e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2204      	movs	r2, #4
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093ba:	2304      	movs	r3, #4
 80093bc:	e014      	b.n	80093e8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e009      	b.n	80093e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2240      	movs	r2, #64	; 0x40
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80093e6:	2300      	movs	r3, #0

}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20000000 	.word	0x20000000
 80093f8:	10624dd3 	.word	0x10624dd3

080093fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009404:	4b11      	ldr	r3, [pc, #68]	; (800944c <SDMMC_GetCmdError+0x50>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a11      	ldr	r2, [pc, #68]	; (8009450 <SDMMC_GetCmdError+0x54>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	0a5b      	lsrs	r3, r3, #9
 8009410:	f241 3288 	movw	r2, #5000	; 0x1388
 8009414:	fb02 f303 	mul.w	r3, r2, r3
 8009418:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1e5a      	subs	r2, r3, #1
 800941e:	60fa      	str	r2, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d102      	bne.n	800942a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009428:	e009      	b.n	800943e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0f1      	beq.n	800941a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a06      	ldr	r2, [pc, #24]	; (8009454 <SDMMC_GetCmdError+0x58>)
 800943a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000000 	.word	0x20000000
 8009450:	10624dd3 	.word	0x10624dd3
 8009454:	002000c5 	.word	0x002000c5

08009458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800945c:	4904      	ldr	r1, [pc, #16]	; (8009470 <MX_FATFS_Init+0x18>)
 800945e:	4805      	ldr	r0, [pc, #20]	; (8009474 <MX_FATFS_Init+0x1c>)
 8009460:	f000 faa4 	bl	80099ac <FATFS_LinkDriver>
 8009464:	4603      	mov	r3, r0
 8009466:	461a      	mov	r2, r3
 8009468:	4b03      	ldr	r3, [pc, #12]	; (8009478 <MX_FATFS_Init+0x20>)
 800946a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800946c:	bf00      	nop
 800946e:	bd80      	pop	{r7, pc}
 8009470:	200003d8 	.word	0x200003d8
 8009474:	0800d5a8 	.word	0x0800d5a8
 8009478:	200003d4 	.word	0x200003d4

0800947c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009486:	f000 f885 	bl	8009594 <BSP_SD_IsDetected>
 800948a:	4603      	mov	r3, r0
 800948c:	2b01      	cmp	r3, #1
 800948e:	d001      	beq.n	8009494 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009490:	2302      	movs	r3, #2
 8009492:	e012      	b.n	80094ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009494:	480b      	ldr	r0, [pc, #44]	; (80094c4 <BSP_SD_Init+0x48>)
 8009496:	f7fd f821 	bl	80064dc <HAL_SD_Init>
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80094a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80094a8:	4806      	ldr	r0, [pc, #24]	; (80094c4 <BSP_SD_Init+0x48>)
 80094aa:	f7fd fed5 	bl	8007258 <HAL_SD_ConfigWideBusOperation>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80094b8:	79fb      	ldrb	r3, [r7, #7]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000248 	.word	0x20000248

080094c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	68f9      	ldr	r1, [r7, #12]
 80094de:	4806      	ldr	r0, [pc, #24]	; (80094f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80094e0:	f7fd f924 	bl	800672c <HAL_SD_ReadBlocks_DMA>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20000248 	.word	0x20000248

080094fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	68f9      	ldr	r1, [r7, #12]
 8009512:	4806      	ldr	r0, [pc, #24]	; (800952c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009514:	f7fd f9b2 	bl	800687c <HAL_SD_WriteBlocks_DMA>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20000248 	.word	0x20000248

08009530 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009534:	4805      	ldr	r0, [pc, #20]	; (800954c <BSP_SD_GetCardState+0x1c>)
 8009536:	f7fd ffa3 	bl	8007480 <HAL_SD_GetCardState>
 800953a:	4603      	mov	r3, r0
 800953c:	2b04      	cmp	r3, #4
 800953e:	bf14      	ite	ne
 8009540:	2301      	movne	r3, #1
 8009542:	2300      	moveq	r3, #0
 8009544:	b2db      	uxtb	r3, r3
}
 8009546:	4618      	mov	r0, r3
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000248 	.word	0x20000248

08009550 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4803      	ldr	r0, [pc, #12]	; (8009568 <BSP_SD_GetCardInfo+0x18>)
 800955c:	f7fd fe50 	bl	8007200 <HAL_SD_GetCardInfo>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000248 	.word	0x20000248

0800956c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009574:	f000 f9aa 	bl	80098cc <BSP_SD_WriteCpltCallback>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009588:	f000 f9b2 	bl	80098f0 <BSP_SD_ReadCpltCallback>
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800959a:	2301      	movs	r3, #1
 800959c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800959e:	f000 f80b 	bl	80095b8 <BSP_PlatformIsDetected>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80095a8:	2300      	movs	r3, #0
 80095aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	b2db      	uxtb	r3, r3
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80095be:	2301      	movs	r3, #1
 80095c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80095c2:	2120      	movs	r1, #32
 80095c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095c8:	f7fa f8ae 	bl	8003728 <HAL_GPIO_ReadPin>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80095d2:	2300      	movs	r3, #0
 80095d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80095d6:	79fb      	ldrb	r3, [r7, #7]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80095e8:	f000 faa0 	bl	8009b2c <osKernelGetTickCount>
 80095ec:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80095ee:	e006      	b.n	80095fe <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095f0:	f7ff ff9e 	bl	8009530 <BSP_SD_GetCardState>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e009      	b.n	8009612 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80095fe:	f000 fa95 	bl	8009b2c <osKernelGetTickCount>
 8009602:	4602      	mov	r2, r0
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	429a      	cmp	r2, r3
 800960c:	d8f0      	bhi.n	80095f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800960e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009626:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <SD_CheckStatus+0x38>)
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800962c:	f7ff ff80 	bl	8009530 <BSP_SD_GetCardState>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d107      	bne.n	8009646 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <SD_CheckStatus+0x38>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f023 0301 	bic.w	r3, r3, #1
 8009640:	b2da      	uxtb	r2, r3
 8009642:	4b04      	ldr	r3, [pc, #16]	; (8009654 <SD_CheckStatus+0x38>)
 8009644:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009646:	4b03      	ldr	r3, [pc, #12]	; (8009654 <SD_CheckStatus+0x38>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b2db      	uxtb	r3, r3
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20000009 	.word	0x20000009

08009658 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <SD_initialize+0x7c>)
 8009664:	2201      	movs	r2, #1
 8009666:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009668:	f000 fa18 	bl	8009a9c <osKernelGetState>
 800966c:	4603      	mov	r3, r0
 800966e:	2b02      	cmp	r3, #2
 8009670:	d129      	bne.n	80096c6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009672:	f7ff ff03 	bl	800947c <BSP_SD_Init>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d107      	bne.n	800968c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff ffcc 	bl	800961c <SD_CheckStatus>
 8009684:	4603      	mov	r3, r0
 8009686:	461a      	mov	r2, r3
 8009688:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <SD_initialize+0x7c>)
 800968a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <SD_initialize+0x7c>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b01      	cmp	r3, #1
 8009694:	d017      	beq.n	80096c6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <SD_initialize+0x80>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d107      	bne.n	80096ae <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800969e:	2200      	movs	r2, #0
 80096a0:	2102      	movs	r1, #2
 80096a2:	200a      	movs	r0, #10
 80096a4:	f000 fc24 	bl	8009ef0 <osMessageQueueNew>
 80096a8:	4603      	mov	r3, r0
 80096aa:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <SD_initialize+0x80>)
 80096ac:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <SD_initialize+0x80>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d107      	bne.n	80096c6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80096b6:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <SD_initialize+0x7c>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f043 0301 	orr.w	r3, r3, #1
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	4b04      	ldr	r3, [pc, #16]	; (80096d4 <SD_initialize+0x7c>)
 80096c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80096c6:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <SD_initialize+0x7c>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	b2db      	uxtb	r3, r3
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20000009 	.word	0x20000009
 80096d8:	200003dc 	.word	0x200003dc

080096dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff ff97 	bl	800961c <SD_CheckStatus>
 80096ee:	4603      	mov	r3, r0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800970c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009710:	f7ff ff66 	bl	80095e0 <SD_CheckStatusWithTimeout>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	da01      	bge.n	800971e <SD_read+0x26>
  {
    return res;
 800971a:	7ffb      	ldrb	r3, [r7, #31]
 800971c:	e02f      	b.n	800977e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	68b8      	ldr	r0, [r7, #8]
 8009724:	f7ff fed0 	bl	80094c8 <BSP_SD_ReadBlocks_DMA>
 8009728:	4603      	mov	r3, r0
 800972a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800972c:	7fbb      	ldrb	r3, [r7, #30]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d124      	bne.n	800977c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009732:	4b15      	ldr	r3, [pc, #84]	; (8009788 <SD_read+0x90>)
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	f107 0112 	add.w	r1, r7, #18
 800973a:	f247 5330 	movw	r3, #30000	; 0x7530
 800973e:	2200      	movs	r2, #0
 8009740:	f000 fcaa 	bl	800a098 <osMessageQueueGet>
 8009744:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d117      	bne.n	800977c <SD_read+0x84>
 800974c:	8a7b      	ldrh	r3, [r7, #18]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d114      	bne.n	800977c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009752:	f000 f9eb 	bl	8009b2c <osKernelGetTickCount>
 8009756:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009758:	e007      	b.n	800976a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800975a:	f7ff fee9 	bl	8009530 <BSP_SD_GetCardState>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <SD_read+0x72>
              {
                res = RES_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009768:	e008      	b.n	800977c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800976a:	f000 f9df 	bl	8009b2c <osKernelGetTickCount>
 800976e:	4602      	mov	r2, r0
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	f247 522f 	movw	r2, #29999	; 0x752f
 8009778:	4293      	cmp	r3, r2
 800977a:	d9ee      	bls.n	800975a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800977c:	7ffb      	ldrb	r3, [r7, #31]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	200003dc 	.word	0x200003dc

0800978c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80097a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80097a4:	f7ff ff1c 	bl	80095e0 <SD_CheckStatusWithTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	da01      	bge.n	80097b2 <SD_write+0x26>
  {
    return res;
 80097ae:	7ffb      	ldrb	r3, [r7, #31]
 80097b0:	e02d      	b.n	800980e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	68b8      	ldr	r0, [r7, #8]
 80097b8:	f7ff fea0 	bl	80094fc <BSP_SD_WriteBlocks_DMA>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d124      	bne.n	800980c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80097c2:	4b15      	ldr	r3, [pc, #84]	; (8009818 <SD_write+0x8c>)
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f107 0112 	add.w	r1, r7, #18
 80097ca:	f247 5330 	movw	r3, #30000	; 0x7530
 80097ce:	2200      	movs	r2, #0
 80097d0:	f000 fc62 	bl	800a098 <osMessageQueueGet>
 80097d4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d117      	bne.n	800980c <SD_write+0x80>
 80097dc:	8a7b      	ldrh	r3, [r7, #18]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d114      	bne.n	800980c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80097e2:	f000 f9a3 	bl	8009b2c <osKernelGetTickCount>
 80097e6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80097e8:	e007      	b.n	80097fa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097ea:	f7ff fea1 	bl	8009530 <BSP_SD_GetCardState>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <SD_write+0x6e>
          {
            res = RES_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	77fb      	strb	r3, [r7, #31]
            break;
 80097f8:	e008      	b.n	800980c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80097fa:	f000 f997 	bl	8009b2c <osKernelGetTickCount>
 80097fe:	4602      	mov	r2, r0
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	f247 522f 	movw	r2, #29999	; 0x752f
 8009808:	4293      	cmp	r3, r2
 800980a:	d9ee      	bls.n	80097ea <SD_write+0x5e>
    }

  }
#endif

  return res;
 800980c:	7ffb      	ldrb	r3, [r7, #31]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3720      	adds	r7, #32
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	200003dc 	.word	0x200003dc

0800981c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08c      	sub	sp, #48	; 0x30
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	603a      	str	r2, [r7, #0]
 8009826:	71fb      	strb	r3, [r7, #7]
 8009828:	460b      	mov	r3, r1
 800982a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009832:	4b25      	ldr	r3, [pc, #148]	; (80098c8 <SD_ioctl+0xac>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <SD_ioctl+0x28>
 8009840:	2303      	movs	r3, #3
 8009842:	e03c      	b.n	80098be <SD_ioctl+0xa2>

  switch (cmd)
 8009844:	79bb      	ldrb	r3, [r7, #6]
 8009846:	2b03      	cmp	r3, #3
 8009848:	d834      	bhi.n	80098b4 <SD_ioctl+0x98>
 800984a:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <SD_ioctl+0x34>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	08009861 	.word	0x08009861
 8009854:	08009869 	.word	0x08009869
 8009858:	08009881 	.word	0x08009881
 800985c:	0800989b 	.word	0x0800989b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009866:	e028      	b.n	80098ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009868:	f107 0308 	add.w	r3, r7, #8
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff fe6f 	bl	8009550 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009872:	6a3a      	ldr	r2, [r7, #32]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800987e:	e01c      	b.n	80098ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009880:	f107 0308 	add.w	r3, r7, #8
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fe63 	bl	8009550 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	b29a      	uxth	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009898:	e00f      	b.n	80098ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fe56 	bl	8009550 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	0a5a      	lsrs	r2, r3, #9
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098b2:	e002      	b.n	80098ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098b4:	2304      	movs	r3, #4
 80098b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80098ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3730      	adds	r7, #48	; 0x30
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20000009 	.word	0x20000009

080098cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80098d2:	2302      	movs	r3, #2
 80098d4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <BSP_SD_WriteCpltCallback+0x20>)
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	1db9      	adds	r1, r7, #6
 80098dc:	2300      	movs	r3, #0
 80098de:	2200      	movs	r2, #0
 80098e0:	f000 fb7a 	bl	8009fd8 <osMessageQueuePut>
#endif
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	200003dc 	.word	0x200003dc

080098f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80098f6:	2301      	movs	r3, #1
 80098f8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <BSP_SD_ReadCpltCallback+0x20>)
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	1db9      	adds	r1, r7, #6
 8009900:	2300      	movs	r3, #0
 8009902:	2200      	movs	r2, #0
 8009904:	f000 fb68 	bl	8009fd8 <osMessageQueuePut>
#endif
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	200003dc 	.word	0x200003dc

08009914 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009922:	2301      	movs	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800992a:	4b1f      	ldr	r3, [pc, #124]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 800992c:	7a5b      	ldrb	r3, [r3, #9]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d131      	bne.n	8009998 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009934:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 8009936:	7a5b      	ldrb	r3, [r3, #9]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 800993e:	2100      	movs	r1, #0
 8009940:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009942:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 8009944:	7a5b      	ldrb	r3, [r3, #9]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 8009954:	7a5b      	ldrb	r3, [r3, #9]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	461a      	mov	r2, r3
 800995a:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 800995c:	4413      	add	r3, r2
 800995e:	79fa      	ldrb	r2, [r7, #7]
 8009960:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009962:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 8009964:	7a5b      	ldrb	r3, [r3, #9]
 8009966:	b2db      	uxtb	r3, r3
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	b2d1      	uxtb	r1, r2
 800996c:	4a0e      	ldr	r2, [pc, #56]	; (80099a8 <FATFS_LinkDriverEx+0x94>)
 800996e:	7251      	strb	r1, [r2, #9]
 8009970:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009972:	7dbb      	ldrb	r3, [r7, #22]
 8009974:	3330      	adds	r3, #48	; 0x30
 8009976:	b2da      	uxtb	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	3301      	adds	r3, #1
 8009980:	223a      	movs	r2, #58	; 0x3a
 8009982:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	3302      	adds	r3, #2
 8009988:	222f      	movs	r2, #47	; 0x2f
 800998a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3303      	adds	r3, #3
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
}
 800999a:	4618      	mov	r0, r3
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	200003e0 	.word	0x200003e0

080099ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80099b6:	2200      	movs	r2, #0
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff ffaa 	bl	8009914 <FATFS_LinkDriverEx>
 80099c0:	4603      	mov	r3, r0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <__NVIC_SetPriority>:
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	db0a      	blt.n	80099f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	490c      	ldr	r1, [pc, #48]	; (8009a18 <__NVIC_SetPriority+0x4c>)
 80099e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ea:	0112      	lsls	r2, r2, #4
 80099ec:	b2d2      	uxtb	r2, r2
 80099ee:	440b      	add	r3, r1
 80099f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099f4:	e00a      	b.n	8009a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	4908      	ldr	r1, [pc, #32]	; (8009a1c <__NVIC_SetPriority+0x50>)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	3b04      	subs	r3, #4
 8009a04:	0112      	lsls	r2, r2, #4
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	440b      	add	r3, r1
 8009a0a:	761a      	strb	r2, [r3, #24]
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	e000e100 	.word	0xe000e100
 8009a1c:	e000ed00 	.word	0xe000ed00

08009a20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <SysTick_Handler+0x1c>)
 8009a26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a28:	f002 fae4 	bl	800bff4 <xTaskGetSchedulerState>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d001      	beq.n	8009a36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a32:	f003 f9c9 	bl	800cdc8 <xPortSysTickHandler>
  }
}
 8009a36:	bf00      	nop
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	e000e010 	.word	0xe000e010

08009a40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a44:	2100      	movs	r1, #0
 8009a46:	f06f 0004 	mvn.w	r0, #4
 8009a4a:	f7ff ffbf 	bl	80099cc <__NVIC_SetPriority>
#endif
}
 8009a4e:	bf00      	nop
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a5a:	f3ef 8305 	mrs	r3, IPSR
 8009a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a66:	f06f 0305 	mvn.w	r3, #5
 8009a6a:	607b      	str	r3, [r7, #4]
 8009a6c:	e00c      	b.n	8009a88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a6e:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <osKernelInitialize+0x44>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a76:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <osKernelInitialize+0x44>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	607b      	str	r3, [r7, #4]
 8009a80:	e002      	b.n	8009a88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a88:	687b      	ldr	r3, [r7, #4]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	200003ec 	.word	0x200003ec

08009a9c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009aa2:	f002 faa7 	bl	800bff4 <xTaskGetSchedulerState>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <osKernelGetState+0x1a>
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d105      	bne.n	8009abc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	607b      	str	r3, [r7, #4]
      break;
 8009ab4:	e00c      	b.n	8009ad0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	607b      	str	r3, [r7, #4]
      break;
 8009aba:	e009      	b.n	8009ad0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009abc:	4b07      	ldr	r3, [pc, #28]	; (8009adc <osKernelGetState+0x40>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d102      	bne.n	8009aca <osKernelGetState+0x2e>
        state = osKernelReady;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009ac8:	e001      	b.n	8009ace <osKernelGetState+0x32>
        state = osKernelInactive;
 8009aca:	2300      	movs	r3, #0
 8009acc:	607b      	str	r3, [r7, #4]
      break;
 8009ace:	bf00      	nop
  }

  return (state);
 8009ad0:	687b      	ldr	r3, [r7, #4]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200003ec 	.word	0x200003ec

08009ae0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae6:	f3ef 8305 	mrs	r3, IPSR
 8009aea:	603b      	str	r3, [r7, #0]
  return(result);
 8009aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <osKernelStart+0x1a>
    stat = osErrorISR;
 8009af2:	f06f 0305 	mvn.w	r3, #5
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e010      	b.n	8009b1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <osKernelStart+0x48>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d109      	bne.n	8009b16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b02:	f7ff ff9d 	bl	8009a40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b06:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <osKernelStart+0x48>)
 8009b08:	2202      	movs	r2, #2
 8009b0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b0c:	f001 fe04 	bl	800b718 <vTaskStartScheduler>
      stat = osOK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	607b      	str	r3, [r7, #4]
 8009b14:	e002      	b.n	8009b1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b1c:	687b      	ldr	r3, [r7, #4]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200003ec 	.word	0x200003ec

08009b2c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b32:	f3ef 8305 	mrs	r3, IPSR
 8009b36:	603b      	str	r3, [r7, #0]
  return(result);
 8009b38:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009b3e:	f001 ff17 	bl	800b970 <xTaskGetTickCountFromISR>
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	e002      	b.n	8009b4c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009b46:	f001 ff03 	bl	800b950 <xTaskGetTickCount>
 8009b4a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009b4c:	687b      	ldr	r3, [r7, #4]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b08e      	sub	sp, #56	; 0x38
 8009b5a:	af04      	add	r7, sp, #16
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b66:	f3ef 8305 	mrs	r3, IPSR
 8009b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8009b6c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d17e      	bne.n	8009c70 <osThreadNew+0x11a>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d07b      	beq.n	8009c70 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b7c:	2318      	movs	r3, #24
 8009b7e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d045      	beq.n	8009c1c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <osThreadNew+0x48>
        name = attr->name;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d008      	beq.n	8009bc4 <osThreadNew+0x6e>
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2b38      	cmp	r3, #56	; 0x38
 8009bb6:	d805      	bhi.n	8009bc4 <osThreadNew+0x6e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <osThreadNew+0x72>
        return (NULL);
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e054      	b.n	8009c72 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	089b      	lsrs	r3, r3, #2
 8009bd6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00e      	beq.n	8009bfe <osThreadNew+0xa8>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	2bbb      	cmp	r3, #187	; 0xbb
 8009be6:	d90a      	bls.n	8009bfe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <osThreadNew+0xa8>
        mem = 1;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	61bb      	str	r3, [r7, #24]
 8009bfc:	e010      	b.n	8009c20 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10c      	bne.n	8009c20 <osThreadNew+0xca>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d108      	bne.n	8009c20 <osThreadNew+0xca>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <osThreadNew+0xca>
          mem = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	e001      	b.n	8009c20 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d110      	bne.n	8009c48 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c2e:	9202      	str	r2, [sp, #8]
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6a3a      	ldr	r2, [r7, #32]
 8009c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f001 fb7f 	bl	800b340 <xTaskCreateStatic>
 8009c42:	4603      	mov	r3, r0
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	e013      	b.n	8009c70 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d110      	bne.n	8009c70 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	f107 0310 	add.w	r3, r7, #16
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f001 fbca 	bl	800b3fa <xTaskCreate>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d001      	beq.n	8009c70 <osThreadNew+0x11a>
            hTask = NULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c70:	693b      	ldr	r3, [r7, #16]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3728      	adds	r7, #40	; 0x28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c82:	f3ef 8305 	mrs	r3, IPSR
 8009c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <osDelay+0x1c>
    stat = osErrorISR;
 8009c8e:	f06f 0305 	mvn.w	r3, #5
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e007      	b.n	8009ca6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fd05 	bl	800b6b0 <vTaskDelay>
    }
  }

  return (stat);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08a      	sub	sp, #40	; 0x28
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cc0:	f3ef 8305 	mrs	r3, IPSR
 8009cc4:	613b      	str	r3, [r7, #16]
  return(result);
 8009cc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d175      	bne.n	8009db8 <osSemaphoreNew+0x108>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d072      	beq.n	8009db8 <osSemaphoreNew+0x108>
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d86e      	bhi.n	8009db8 <osSemaphoreNew+0x108>
    mem = -1;
 8009cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d015      	beq.n	8009d12 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <osSemaphoreNew+0x4c>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b4f      	cmp	r3, #79	; 0x4f
 8009cf4:	d902      	bls.n	8009cfc <osSemaphoreNew+0x4c>
        mem = 1;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	61bb      	str	r3, [r7, #24]
 8009cfa:	e00c      	b.n	8009d16 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d108      	bne.n	8009d16 <osSemaphoreNew+0x66>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <osSemaphoreNew+0x66>
          mem = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	e001      	b.n	8009d16 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d1c:	d04c      	beq.n	8009db8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d128      	bne.n	8009d76 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d10a      	bne.n	8009d40 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2203      	movs	r2, #3
 8009d30:	9200      	str	r2, [sp, #0]
 8009d32:	2200      	movs	r2, #0
 8009d34:	2100      	movs	r1, #0
 8009d36:	2001      	movs	r0, #1
 8009d38:	f000 fb5c 	bl	800a3f4 <xQueueGenericCreateStatic>
 8009d3c:	61f8      	str	r0, [r7, #28]
 8009d3e:	e005      	b.n	8009d4c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009d40:	2203      	movs	r2, #3
 8009d42:	2100      	movs	r1, #0
 8009d44:	2001      	movs	r0, #1
 8009d46:	f000 fbcd 	bl	800a4e4 <xQueueGenericCreate>
 8009d4a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d022      	beq.n	8009d98 <osSemaphoreNew+0xe8>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01f      	beq.n	8009d98 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	69f8      	ldr	r0, [r7, #28]
 8009d60:	f000 fc88 	bl	800a674 <xQueueGenericSend>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d016      	beq.n	8009d98 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d6a:	69f8      	ldr	r0, [r7, #28]
 8009d6c:	f001 f914 	bl	800af98 <vQueueDelete>
            hSemaphore = NULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e010      	b.n	8009d98 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d108      	bne.n	8009d8e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	461a      	mov	r2, r3
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fc0a 	bl	800a59e <xQueueCreateCountingSemaphoreStatic>
 8009d8a:	61f8      	str	r0, [r7, #28]
 8009d8c:	e004      	b.n	8009d98 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 fc3b 	bl	800a60c <xQueueCreateCountingSemaphore>
 8009d96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00c      	beq.n	8009db8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <osSemaphoreNew+0xfc>
          name = attr->name;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	e001      	b.n	8009db0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009dac:	2300      	movs	r3, #0
 8009dae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009db0:	6979      	ldr	r1, [r7, #20]
 8009db2:	69f8      	ldr	r0, [r7, #28]
 8009db4:	f001 fa3c 	bl	800b230 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009db8:	69fb      	ldr	r3, [r7, #28]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009ddc:	f06f 0303 	mvn.w	r3, #3
 8009de0:	617b      	str	r3, [r7, #20]
 8009de2:	e039      	b.n	8009e58 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de4:	f3ef 8305 	mrs	r3, IPSR
 8009de8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d022      	beq.n	8009e36 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009df6:	f06f 0303 	mvn.w	r3, #3
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e02c      	b.n	8009e58 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	461a      	mov	r2, r3
 8009e08:	2100      	movs	r1, #0
 8009e0a:	6938      	ldr	r0, [r7, #16]
 8009e0c:	f001 f844 	bl	800ae98 <xQueueReceiveFromISR>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d003      	beq.n	8009e1e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009e16:	f06f 0302 	mvn.w	r3, #2
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e01c      	b.n	8009e58 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d019      	beq.n	8009e58 <osSemaphoreAcquire+0x94>
 8009e24:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <osSemaphoreAcquire+0xa0>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	e010      	b.n	8009e58 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6938      	ldr	r0, [r7, #16]
 8009e3a:	f000 ff21 	bl	800ac80 <xQueueSemaphoreTake>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d009      	beq.n	8009e58 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009e4a:	f06f 0301 	mvn.w	r3, #1
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	e002      	b.n	8009e58 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009e52:	f06f 0302 	mvn.w	r3, #2
 8009e56:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009e58:	697b      	ldr	r3, [r7, #20]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009e7e:	f06f 0303 	mvn.w	r3, #3
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e02c      	b.n	8009ee0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e86:	f3ef 8305 	mrs	r3, IPSR
 8009e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01a      	beq.n	8009ec8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009e96:	f107 0308 	add.w	r3, r7, #8
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6938      	ldr	r0, [r7, #16]
 8009e9e:	f000 fd82 	bl	800a9a6 <xQueueGiveFromISR>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d003      	beq.n	8009eb0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009ea8:	f06f 0302 	mvn.w	r3, #2
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	e017      	b.n	8009ee0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d014      	beq.n	8009ee0 <osSemaphoreRelease+0x78>
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <osSemaphoreRelease+0x84>)
 8009eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	e00b      	b.n	8009ee0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ec8:	2300      	movs	r3, #0
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6938      	ldr	r0, [r7, #16]
 8009ed0:	f000 fbd0 	bl	800a674 <xQueueGenericSend>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d002      	beq.n	8009ee0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009eda:	f06f 0302 	mvn.w	r3, #2
 8009ede:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009ee0:	697b      	ldr	r3, [r7, #20]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08a      	sub	sp, #40	; 0x28
 8009ef4:	af02      	add	r7, sp, #8
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009efc:	2300      	movs	r3, #0
 8009efe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f00:	f3ef 8305 	mrs	r3, IPSR
 8009f04:	613b      	str	r3, [r7, #16]
  return(result);
 8009f06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d15f      	bne.n	8009fcc <osMessageQueueNew+0xdc>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d05c      	beq.n	8009fcc <osMessageQueueNew+0xdc>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d059      	beq.n	8009fcc <osMessageQueueNew+0xdc>
    mem = -1;
 8009f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d029      	beq.n	8009f78 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d012      	beq.n	8009f52 <osMessageQueueNew+0x62>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	2b4f      	cmp	r3, #79	; 0x4f
 8009f32:	d90e      	bls.n	8009f52 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	695a      	ldr	r2, [r3, #20]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d302      	bcc.n	8009f52 <osMessageQueueNew+0x62>
        mem = 1;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	61bb      	str	r3, [r7, #24]
 8009f50:	e014      	b.n	8009f7c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d110      	bne.n	8009f7c <osMessageQueueNew+0x8c>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10c      	bne.n	8009f7c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d108      	bne.n	8009f7c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <osMessageQueueNew+0x8c>
          mem = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	61bb      	str	r3, [r7, #24]
 8009f76:	e001      	b.n	8009f7c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d10b      	bne.n	8009f9a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691a      	ldr	r2, [r3, #16]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	9100      	str	r1, [sp, #0]
 8009f8e:	68b9      	ldr	r1, [r7, #8]
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 fa2f 	bl	800a3f4 <xQueueGenericCreateStatic>
 8009f96:	61f8      	str	r0, [r7, #28]
 8009f98:	e008      	b.n	8009fac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d105      	bne.n	8009fac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fa9d 	bl	800a4e4 <xQueueGenericCreate>
 8009faa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00c      	beq.n	8009fcc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	e001      	b.n	8009fc4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009fc4:	6979      	ldr	r1, [r7, #20]
 8009fc6:	69f8      	ldr	r0, [r7, #28]
 8009fc8:	f001 f932 	bl	800b230 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009fcc:	69fb      	ldr	r3, [r7, #28]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3720      	adds	r7, #32
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	603b      	str	r3, [r7, #0]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff0:	f3ef 8305 	mrs	r3, IPSR
 8009ff4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ff6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d028      	beq.n	800a04e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <osMessageQueuePut+0x36>
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <osMessageQueuePut+0x36>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a00e:	f06f 0303 	mvn.w	r3, #3
 800a012:	61fb      	str	r3, [r7, #28]
 800a014:	e038      	b.n	800a088 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a016:	2300      	movs	r3, #0
 800a018:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a01a:	f107 0210 	add.w	r2, r7, #16
 800a01e:	2300      	movs	r3, #0
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	69b8      	ldr	r0, [r7, #24]
 800a024:	f000 fc24 	bl	800a870 <xQueueGenericSendFromISR>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d003      	beq.n	800a036 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a02e:	f06f 0302 	mvn.w	r3, #2
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	e028      	b.n	800a088 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d025      	beq.n	800a088 <osMessageQueuePut+0xb0>
 800a03c:	4b15      	ldr	r3, [pc, #84]	; (800a094 <osMessageQueuePut+0xbc>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	e01c      	b.n	800a088 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <osMessageQueuePut+0x82>
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d103      	bne.n	800a062 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a05a:	f06f 0303 	mvn.w	r3, #3
 800a05e:	61fb      	str	r3, [r7, #28]
 800a060:	e012      	b.n	800a088 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a062:	2300      	movs	r3, #0
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	69b8      	ldr	r0, [r7, #24]
 800a06a:	f000 fb03 	bl	800a674 <xQueueGenericSend>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b01      	cmp	r3, #1
 800a072:	d009      	beq.n	800a088 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a07a:	f06f 0301 	mvn.w	r3, #1
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e002      	b.n	800a088 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a082:	f06f 0302 	mvn.w	r3, #2
 800a086:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a088:	69fb      	ldr	r3, [r7, #28]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ae:	f3ef 8305 	mrs	r3, IPSR
 800a0b2:	617b      	str	r3, [r7, #20]
  return(result);
 800a0b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d028      	beq.n	800a10c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <osMessageQueueGet+0x34>
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <osMessageQueueGet+0x34>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a0cc:	f06f 0303 	mvn.w	r3, #3
 800a0d0:	61fb      	str	r3, [r7, #28]
 800a0d2:	e037      	b.n	800a144 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a0d8:	f107 0310 	add.w	r3, r7, #16
 800a0dc:	461a      	mov	r2, r3
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	69b8      	ldr	r0, [r7, #24]
 800a0e2:	f000 fed9 	bl	800ae98 <xQueueReceiveFromISR>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d003      	beq.n	800a0f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a0ec:	f06f 0302 	mvn.w	r3, #2
 800a0f0:	61fb      	str	r3, [r7, #28]
 800a0f2:	e027      	b.n	800a144 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d024      	beq.n	800a144 <osMessageQueueGet+0xac>
 800a0fa:	4b15      	ldr	r3, [pc, #84]	; (800a150 <osMessageQueueGet+0xb8>)
 800a0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	e01b      	b.n	800a144 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <osMessageQueueGet+0x80>
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a118:	f06f 0303 	mvn.w	r3, #3
 800a11c:	61fb      	str	r3, [r7, #28]
 800a11e:	e011      	b.n	800a144 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	69b8      	ldr	r0, [r7, #24]
 800a126:	f000 fccb 	bl	800aac0 <xQueueReceive>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d009      	beq.n	800a144 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a136:	f06f 0301 	mvn.w	r3, #1
 800a13a:	61fb      	str	r3, [r7, #28]
 800a13c:	e002      	b.n	800a144 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a13e:	f06f 0302 	mvn.w	r3, #2
 800a142:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a144:	69fb      	ldr	r3, [r7, #28]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4a07      	ldr	r2, [pc, #28]	; (800a180 <vApplicationGetIdleTaskMemory+0x2c>)
 800a164:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	4a06      	ldr	r2, [pc, #24]	; (800a184 <vApplicationGetIdleTaskMemory+0x30>)
 800a16a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2280      	movs	r2, #128	; 0x80
 800a170:	601a      	str	r2, [r3, #0]
}
 800a172:	bf00      	nop
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	200003f0 	.word	0x200003f0
 800a184:	200004ac 	.word	0x200004ac

0800a188 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4a07      	ldr	r2, [pc, #28]	; (800a1b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a198:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	4a06      	ldr	r2, [pc, #24]	; (800a1b8 <vApplicationGetTimerTaskMemory+0x30>)
 800a19e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1a6:	601a      	str	r2, [r3, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	200006ac 	.word	0x200006ac
 800a1b8:	20000768 	.word	0x20000768

0800a1bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f103 0208 	add.w	r2, r3, #8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f103 0208 	add.w	r2, r3, #8
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f103 0208 	add.w	r2, r3, #8
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	601a      	str	r2, [r3, #0]
}
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a274:	d103      	bne.n	800a27e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e00c      	b.n	800a298 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3308      	adds	r3, #8
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e002      	b.n	800a28c <vListInsert+0x2e>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d2f6      	bcs.n	800a286 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	601a      	str	r2, [r3, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	6892      	ldr	r2, [r2, #8]
 800a2e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	6852      	ldr	r2, [r2, #4]
 800a2f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d103      	bne.n	800a304 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	1e5a      	subs	r2, r3, #1
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a34e:	f002 fca9 	bl	800cca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a35e:	fb01 f303 	mul.w	r3, r1, r3
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	3b01      	subs	r3, #1
 800a380:	68f9      	ldr	r1, [r7, #12]
 800a382:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a384:	fb01 f303 	mul.w	r3, r1, r3
 800a388:	441a      	add	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	22ff      	movs	r2, #255	; 0xff
 800a392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	22ff      	movs	r2, #255	; 0xff
 800a39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d114      	bne.n	800a3ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01a      	beq.n	800a3e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3310      	adds	r3, #16
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 fc5d 	bl	800bc70 <xTaskRemoveFromEventList>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d012      	beq.n	800a3e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3bc:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <xQueueGenericReset+0xcc>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	e009      	b.n	800a3e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3310      	adds	r3, #16
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fef2 	bl	800a1bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3324      	adds	r3, #36	; 0x24
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7ff feed 	bl	800a1bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3e2:	f002 fc8f 	bl	800cd04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3e6:	2301      	movs	r3, #1
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	e000ed04 	.word	0xe000ed04

0800a3f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08e      	sub	sp, #56	; 0x38
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <xQueueGenericCreateStatic+0x52>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <xQueueGenericCreateStatic+0x56>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <xQueueGenericCreateStatic+0x58>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	623b      	str	r3, [r7, #32]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <xQueueGenericCreateStatic+0x7e>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <xQueueGenericCreateStatic+0x82>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <xQueueGenericCreateStatic+0x84>
 800a476:	2300      	movs	r3, #0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	61fb      	str	r3, [r7, #28]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a492:	2350      	movs	r3, #80	; 0x50
 800a494:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b50      	cmp	r3, #80	; 0x50
 800a49a:	d00a      	beq.n	800a4b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	61bb      	str	r3, [r7, #24]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00d      	beq.n	800a4da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 f83f 	bl	800a558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3730      	adds	r7, #48	; 0x30
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	613b      	str	r3, [r7, #16]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	3350      	adds	r3, #80	; 0x50
 800a51c:	4618      	mov	r0, r3
 800a51e:	f002 fce3 	bl	800cee8 <pvPortMalloc>
 800a522:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d011      	beq.n	800a54e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	3350      	adds	r3, #80	; 0x50
 800a532:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	4613      	mov	r3, r2
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 f805 	bl	800a558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a54e:	69bb      	ldr	r3, [r7, #24]
	}
 800a550:	4618      	mov	r0, r3
 800a552:	3720      	adds	r7, #32
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	e002      	b.n	800a57a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a586:	2101      	movs	r1, #1
 800a588:	69b8      	ldr	r0, [r7, #24]
 800a58a:	f7ff fecb 	bl	800a324 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	78fa      	ldrb	r2, [r7, #3]
 800a592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b08a      	sub	sp, #40	; 0x28
 800a5a2:	af02      	add	r7, sp, #8
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10a      	bne.n	800a5c6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61bb      	str	r3, [r7, #24]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d90a      	bls.n	800a5e4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff ff00 	bl	800a3f4 <xQueueGenericCreateStatic>
 800a5f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a602:	69fb      	ldr	r3, [r7, #28]
	}
 800a604:	4618      	mov	r0, r3
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	613b      	str	r3, [r7, #16]
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	429a      	cmp	r2, r3
 800a638:	d90a      	bls.n	800a650 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a650:	2202      	movs	r2, #2
 800a652:	2100      	movs	r1, #0
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ff45 	bl	800a4e4 <xQueueGenericCreate>
 800a65a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a668:	697b      	ldr	r3, [r7, #20]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08e      	sub	sp, #56	; 0x38
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a682:	2300      	movs	r3, #0
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xQueueGenericSend+0x32>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <xQueueGenericSend+0x40>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <xQueueGenericSend+0x44>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e000      	b.n	800a6ba <xQueueGenericSend+0x46>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <xQueueGenericSend+0x60>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d103      	bne.n	800a6e2 <xQueueGenericSend+0x6e>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <xQueueGenericSend+0x72>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <xQueueGenericSend+0x74>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	623b      	str	r3, [r7, #32]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a702:	f001 fc77 	bl	800bff4 <xTaskGetSchedulerState>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <xQueueGenericSend+0x9e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <xQueueGenericSend+0xa2>
 800a712:	2301      	movs	r3, #1
 800a714:	e000      	b.n	800a718 <xQueueGenericSend+0xa4>
 800a716:	2300      	movs	r3, #0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xQueueGenericSend+0xbe>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	61fb      	str	r3, [r7, #28]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a732:	f002 fab7 	bl	800cca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73e:	429a      	cmp	r2, r3
 800a740:	d302      	bcc.n	800a748 <xQueueGenericSend+0xd4>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b02      	cmp	r3, #2
 800a746:	d129      	bne.n	800a79c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	68b9      	ldr	r1, [r7, #8]
 800a74c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a74e:	f000 fc5e 	bl	800b00e <prvCopyDataToQueue>
 800a752:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	3324      	adds	r3, #36	; 0x24
 800a760:	4618      	mov	r0, r3
 800a762:	f001 fa85 	bl	800bc70 <xTaskRemoveFromEventList>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d013      	beq.n	800a794 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a76c:	4b3f      	ldr	r3, [pc, #252]	; (800a86c <xQueueGenericSend+0x1f8>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	e00a      	b.n	800a794 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d007      	beq.n	800a794 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a784:	4b39      	ldr	r3, [pc, #228]	; (800a86c <xQueueGenericSend+0x1f8>)
 800a786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a794:	f002 fab6 	bl	800cd04 <vPortExitCritical>
				return pdPASS;
 800a798:	2301      	movs	r3, #1
 800a79a:	e063      	b.n	800a864 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7a2:	f002 faaf 	bl	800cd04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e05c      	b.n	800a864 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 fabf 	bl	800bd38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7be:	f002 faa1 	bl	800cd04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7c2:	f001 f819 	bl	800b7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7c6:	f002 fa6d 	bl	800cca4 <vPortEnterCritical>
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7d0:	b25b      	sxtb	r3, r3
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7d6:	d103      	bne.n	800a7e0 <xQueueGenericSend+0x16c>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e6:	b25b      	sxtb	r3, r3
 800a7e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ec:	d103      	bne.n	800a7f6 <xQueueGenericSend+0x182>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f6:	f002 fa85 	bl	800cd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7fa:	1d3a      	adds	r2, r7, #4
 800a7fc:	f107 0314 	add.w	r3, r7, #20
 800a800:	4611      	mov	r1, r2
 800a802:	4618      	mov	r0, r3
 800a804:	f001 faae 	bl	800bd64 <xTaskCheckForTimeOut>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d124      	bne.n	800a858 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a80e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a810:	f000 fcf5 	bl	800b1fe <prvIsQueueFull>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d018      	beq.n	800a84c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	3310      	adds	r3, #16
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f001 f9d4 	bl	800bbd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82a:	f000 fc80 	bl	800b12e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a82e:	f000 fff1 	bl	800b814 <xTaskResumeAll>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	f47f af7c 	bne.w	800a732 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <xQueueGenericSend+0x1f8>)
 800a83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	e772      	b.n	800a732 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a84e:	f000 fc6e 	bl	800b12e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a852:	f000 ffdf 	bl	800b814 <xTaskResumeAll>
 800a856:	e76c      	b.n	800a732 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85a:	f000 fc68 	bl	800b12e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a85e:	f000 ffd9 	bl	800b814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a862:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a864:	4618      	mov	r0, r3
 800a866:	3738      	adds	r7, #56	; 0x38
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	e000ed04 	.word	0xe000ed04

0800a870 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b090      	sub	sp, #64	; 0x40
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d103      	bne.n	800a8ac <xQueueGenericSendFromISR+0x3c>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x40>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <xQueueGenericSendFromISR+0x42>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d103      	bne.n	800a8da <xQueueGenericSendFromISR+0x6a>
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <xQueueGenericSendFromISR+0x6e>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e000      	b.n	800a8e0 <xQueueGenericSendFromISR+0x70>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10a      	bne.n	800a8fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	623b      	str	r3, [r7, #32]
}
 800a8f6:	bf00      	nop
 800a8f8:	e7fe      	b.n	800a8f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8fa:	f002 fab5 	bl	800ce68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8fe:	f3ef 8211 	mrs	r2, BASEPRI
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	61fa      	str	r2, [r7, #28]
 800a914:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a916:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a918:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <xQueueGenericSendFromISR+0xbc>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d12f      	bne.n	800a98c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a942:	f000 fb64 	bl	800b00e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a946:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a94a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a94e:	d112      	bne.n	800a976 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	2b00      	cmp	r3, #0
 800a956:	d016      	beq.n	800a986 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f987 	bl	800bc70 <xTaskRemoveFromEventList>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00e      	beq.n	800a986 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e007      	b.n	800a986 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a97a:	3301      	adds	r3, #1
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	b25a      	sxtb	r2, r3
 800a980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a986:	2301      	movs	r3, #1
 800a988:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a98a:	e001      	b.n	800a990 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a98c:	2300      	movs	r3, #0
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a992:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a99a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3740      	adds	r7, #64	; 0x40
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b08e      	sub	sp, #56	; 0x38
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	623b      	str	r3, [r7, #32]
}
 800a9cc:	bf00      	nop
 800a9ce:	e7fe      	b.n	800a9ce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <xQueueGiveFromISR+0x48>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	61fb      	str	r3, [r7, #28]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d103      	bne.n	800a9fe <xQueueGiveFromISR+0x58>
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <xQueueGiveFromISR+0x5c>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <xQueueGiveFromISR+0x5e>
 800aa02:	2300      	movs	r3, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <xQueueGiveFromISR+0x78>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	61bb      	str	r3, [r7, #24]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa1e:	f002 fa23 	bl	800ce68 <vPortValidateInterruptPriority>
	__asm volatile
 800aa22:	f3ef 8211 	mrs	r2, BASEPRI
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	617a      	str	r2, [r7, #20]
 800aa38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d22b      	bcs.n	800aaa6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa68:	d112      	bne.n	800aa90 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d016      	beq.n	800aaa0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	3324      	adds	r3, #36	; 0x24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f001 f8fa 	bl	800bc70 <xTaskRemoveFromEventList>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00e      	beq.n	800aaa0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e007      	b.n	800aaa0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa94:	3301      	adds	r3, #1
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	b25a      	sxtb	r2, r3
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa4:	e001      	b.n	800aaaa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f383 8811 	msr	BASEPRI, r3
}
 800aab4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3738      	adds	r7, #56	; 0x38
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08c      	sub	sp, #48	; 0x30
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aacc:	2300      	movs	r3, #0
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10a      	bne.n	800aaf0 <xQueueReceive+0x30>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	623b      	str	r3, [r7, #32]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <xQueueReceive+0x3e>
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <xQueueReceive+0x42>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e000      	b.n	800ab04 <xQueueReceive+0x44>
 800ab02:	2300      	movs	r3, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <xQueueReceive+0x5e>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	61fb      	str	r3, [r7, #28]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab1e:	f001 fa69 	bl	800bff4 <xTaskGetSchedulerState>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <xQueueReceive+0x6e>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <xQueueReceive+0x72>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xQueueReceive+0x74>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <xQueueReceive+0x8e>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	61bb      	str	r3, [r7, #24]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab4e:	f002 f8a9 	bl	800cca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01f      	beq.n	800ab9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab5e:	68b9      	ldr	r1, [r7, #8]
 800ab60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab62:	f000 fabe 	bl	800b0e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	1e5a      	subs	r2, r3, #1
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	3310      	adds	r3, #16
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 f878 	bl	800bc70 <xTaskRemoveFromEventList>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab86:	4b3d      	ldr	r3, [pc, #244]	; (800ac7c <xQueueReceive+0x1bc>)
 800ab88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab96:	f002 f8b5 	bl	800cd04 <vPortExitCritical>
				return pdPASS;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e069      	b.n	800ac72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aba4:	f002 f8ae 	bl	800cd04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aba8:	2300      	movs	r3, #0
 800abaa:	e062      	b.n	800ac72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abb2:	f107 0310 	add.w	r3, r7, #16
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 f8be 	bl	800bd38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abbc:	2301      	movs	r3, #1
 800abbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abc0:	f002 f8a0 	bl	800cd04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abc4:	f000 fe18 	bl	800b7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abc8:	f002 f86c 	bl	800cca4 <vPortEnterCritical>
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abd8:	d103      	bne.n	800abe2 <xQueueReceive+0x122>
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe8:	b25b      	sxtb	r3, r3
 800abea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abee:	d103      	bne.n	800abf8 <xQueueReceive+0x138>
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abf8:	f002 f884 	bl	800cd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abfc:	1d3a      	adds	r2, r7, #4
 800abfe:	f107 0310 	add.w	r3, r7, #16
 800ac02:	4611      	mov	r1, r2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 f8ad 	bl	800bd64 <xTaskCheckForTimeOut>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d123      	bne.n	800ac58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac12:	f000 fade 	bl	800b1d2 <prvIsQueueEmpty>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d017      	beq.n	800ac4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	3324      	adds	r3, #36	; 0x24
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	4611      	mov	r1, r2
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 ffd3 	bl	800bbd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac2c:	f000 fa7f 	bl	800b12e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac30:	f000 fdf0 	bl	800b814 <xTaskResumeAll>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d189      	bne.n	800ab4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac3a:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <xQueueReceive+0x1bc>)
 800ac3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	e780      	b.n	800ab4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac4e:	f000 fa6e 	bl	800b12e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac52:	f000 fddf 	bl	800b814 <xTaskResumeAll>
 800ac56:	e77a      	b.n	800ab4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5a:	f000 fa68 	bl	800b12e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac5e:	f000 fdd9 	bl	800b814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac64:	f000 fab5 	bl	800b1d2 <prvIsQueueEmpty>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f43f af6f 	beq.w	800ab4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3730      	adds	r7, #48	; 0x30
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08e      	sub	sp, #56	; 0x38
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	623b      	str	r3, [r7, #32]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	61fb      	str	r3, [r7, #28]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acd0:	f001 f990 	bl	800bff4 <xTaskGetSchedulerState>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d102      	bne.n	800ace0 <xQueueSemaphoreTake+0x60>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <xQueueSemaphoreTake+0x64>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e000      	b.n	800ace6 <xQueueSemaphoreTake+0x66>
 800ace4:	2300      	movs	r3, #0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10a      	bne.n	800ad00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	61bb      	str	r3, [r7, #24]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad00:	f001 ffd0 	bl	800cca4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d024      	beq.n	800ad5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	1e5a      	subs	r2, r3, #1
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d104      	bne.n	800ad2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad20:	f001 fade 	bl	800c2e0 <pvTaskIncrementMutexHeldCount>
 800ad24:	4602      	mov	r2, r0
 800ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00f      	beq.n	800ad52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	3310      	adds	r3, #16
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 ff9a 	bl	800bc70 <xTaskRemoveFromEventList>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad42:	4b54      	ldr	r3, [pc, #336]	; (800ae94 <xQueueSemaphoreTake+0x214>)
 800ad44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad52:	f001 ffd7 	bl	800cd04 <vPortExitCritical>
				return pdPASS;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e097      	b.n	800ae8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d111      	bne.n	800ad84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	617b      	str	r3, [r7, #20]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad7c:	f001 ffc2 	bl	800cd04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e082      	b.n	800ae8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad8a:	f107 030c 	add.w	r3, r7, #12
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 ffd2 	bl	800bd38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad98:	f001 ffb4 	bl	800cd04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad9c:	f000 fd2c 	bl	800b7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ada0:	f001 ff80 	bl	800cca4 <vPortEnterCritical>
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adaa:	b25b      	sxtb	r3, r3
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adb0:	d103      	bne.n	800adba <xQueueSemaphoreTake+0x13a>
 800adb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adc0:	b25b      	sxtb	r3, r3
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc6:	d103      	bne.n	800add0 <xQueueSemaphoreTake+0x150>
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800add0:	f001 ff98 	bl	800cd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add4:	463a      	mov	r2, r7
 800add6:	f107 030c 	add.w	r3, r7, #12
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f000 ffc1 	bl	800bd64 <xTaskCheckForTimeOut>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d132      	bne.n	800ae4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adea:	f000 f9f2 	bl	800b1d2 <prvIsQueueEmpty>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d026      	beq.n	800ae42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d109      	bne.n	800ae10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800adfc:	f001 ff52 	bl	800cca4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f001 f913 	bl	800c030 <xTaskPriorityInherit>
 800ae0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae0c:	f001 ff7a 	bl	800cd04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	3324      	adds	r3, #36	; 0x24
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fed9 	bl	800bbd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae20:	f000 f985 	bl	800b12e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae24:	f000 fcf6 	bl	800b814 <xTaskResumeAll>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f47f af68 	bne.w	800ad00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae30:	4b18      	ldr	r3, [pc, #96]	; (800ae94 <xQueueSemaphoreTake+0x214>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	e75e      	b.n	800ad00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae44:	f000 f973 	bl	800b12e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae48:	f000 fce4 	bl	800b814 <xTaskResumeAll>
 800ae4c:	e758      	b.n	800ad00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae50:	f000 f96d 	bl	800b12e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae54:	f000 fcde 	bl	800b814 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae5a:	f000 f9ba 	bl	800b1d2 <prvIsQueueEmpty>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f43f af4d 	beq.w	800ad00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00d      	beq.n	800ae88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae6c:	f001 ff1a 	bl	800cca4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae72:	f000 f8b4 	bl	800afde <prvGetDisinheritPriorityAfterTimeout>
 800ae76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 f9ac 	bl	800c1dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae84:	f001 ff3e 	bl	800cd04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3738      	adds	r7, #56	; 0x38
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	e000ed04 	.word	0xe000ed04

0800ae98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08e      	sub	sp, #56	; 0x38
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	623b      	str	r3, [r7, #32]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d103      	bne.n	800aed2 <xQueueReceiveFromISR+0x3a>
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <xQueueReceiveFromISR+0x3e>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <xQueueReceiveFromISR+0x40>
 800aed6:	2300      	movs	r3, #0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10a      	bne.n	800aef2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	61fb      	str	r3, [r7, #28]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aef2:	f001 ffb9 	bl	800ce68 <vPortValidateInterruptPriority>
	__asm volatile
 800aef6:	f3ef 8211 	mrs	r2, BASEPRI
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	61ba      	str	r2, [r7, #24]
 800af0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d02f      	beq.n	800af7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2c:	f000 f8d9 	bl	800b0e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	1e5a      	subs	r2, r3, #1
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af40:	d112      	bne.n	800af68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	3310      	adds	r3, #16
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fe8e 	bl	800bc70 <xTaskRemoveFromEventList>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e007      	b.n	800af78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af6c:	3301      	adds	r3, #1
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	b25a      	sxtb	r2, r3
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af78:	2301      	movs	r3, #1
 800af7a:	637b      	str	r3, [r7, #52]	; 0x34
 800af7c:	e001      	b.n	800af82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af7e:	2300      	movs	r3, #0
 800af80:	637b      	str	r3, [r7, #52]	; 0x34
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f383 8811 	msr	BASEPRI, r3
}
 800af8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af90:	4618      	mov	r0, r3
 800af92:	3738      	adds	r7, #56	; 0x38
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10a      	bne.n	800afc0 <vQueueDelete+0x28>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	60bb      	str	r3, [r7, #8]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 f95f 	bl	800b284 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f002 f855 	bl	800d080 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afd6:	bf00      	nop
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	e001      	b.n	800b000 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800affc:	2300      	movs	r3, #0
 800affe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b000:	68fb      	ldr	r3, [r7, #12]
	}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b022:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10d      	bne.n	800b048 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d14d      	bne.n	800b0d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 f861 	bl	800c100 <xTaskPriorityDisinherit>
 800b03e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	609a      	str	r2, [r3, #8]
 800b046:	e043      	b.n	800b0d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d119      	bne.n	800b082 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6858      	ldr	r0, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b056:	461a      	mov	r2, r3
 800b058:	68b9      	ldr	r1, [r7, #8]
 800b05a:	f002 f955 	bl	800d308 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	441a      	add	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	429a      	cmp	r2, r3
 800b076:	d32b      	bcc.n	800b0d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	605a      	str	r2, [r3, #4]
 800b080:	e026      	b.n	800b0d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68d8      	ldr	r0, [r3, #12]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	461a      	mov	r2, r3
 800b08c:	68b9      	ldr	r1, [r7, #8]
 800b08e:	f002 f93b 	bl	800d308 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	425b      	negs	r3, r3
 800b09c:	441a      	add	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68da      	ldr	r2, [r3, #12]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d207      	bcs.n	800b0be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	689a      	ldr	r2, [r3, #8]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	425b      	negs	r3, r3
 800b0b8:	441a      	add	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d105      	bne.n	800b0d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0d8:	697b      	ldr	r3, [r7, #20]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b082      	sub	sp, #8
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d018      	beq.n	800b126 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fc:	441a      	add	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d303      	bcc.n	800b116 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68d9      	ldr	r1, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	461a      	mov	r2, r3
 800b120:	6838      	ldr	r0, [r7, #0]
 800b122:	f002 f8f1 	bl	800d308 <memcpy>
	}
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b136:	f001 fdb5 	bl	800cca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b140:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b142:	e011      	b.n	800b168 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d012      	beq.n	800b172 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3324      	adds	r3, #36	; 0x24
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fd8d 	bl	800bc70 <xTaskRemoveFromEventList>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b15c:	f000 fe64 	bl	800be28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	3b01      	subs	r3, #1
 800b164:	b2db      	uxtb	r3, r3
 800b166:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dce9      	bgt.n	800b144 <prvUnlockQueue+0x16>
 800b170:	e000      	b.n	800b174 <prvUnlockQueue+0x46>
					break;
 800b172:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	22ff      	movs	r2, #255	; 0xff
 800b178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b17c:	f001 fdc2 	bl	800cd04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b180:	f001 fd90 	bl	800cca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b18c:	e011      	b.n	800b1b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d012      	beq.n	800b1bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3310      	adds	r3, #16
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 fd68 	bl	800bc70 <xTaskRemoveFromEventList>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1a6:	f000 fe3f 	bl	800be28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dce9      	bgt.n	800b18e <prvUnlockQueue+0x60>
 800b1ba:	e000      	b.n	800b1be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	22ff      	movs	r2, #255	; 0xff
 800b1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1c6:	f001 fd9d 	bl	800cd04 <vPortExitCritical>
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1da:	f001 fd63 	bl	800cca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	e001      	b.n	800b1f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1f0:	f001 fd88 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b206:	f001 fd4d 	bl	800cca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b212:	429a      	cmp	r2, r3
 800b214:	d102      	bne.n	800b21c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b216:	2301      	movs	r3, #1
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	e001      	b.n	800b220 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b21c:	2300      	movs	r3, #0
 800b21e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b220:	f001 fd70 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800b224:	68fb      	ldr	r3, [r7, #12]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	e014      	b.n	800b26a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b240:	4a0f      	ldr	r2, [pc, #60]	; (800b280 <vQueueAddToRegistry+0x50>)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b24c:	490c      	ldr	r1, [pc, #48]	; (800b280 <vQueueAddToRegistry+0x50>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b256:	4a0a      	ldr	r2, [pc, #40]	; (800b280 <vQueueAddToRegistry+0x50>)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	4413      	add	r3, r2
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b262:	e006      	b.n	800b272 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3301      	adds	r3, #1
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b07      	cmp	r3, #7
 800b26e:	d9e7      	bls.n	800b240 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000b68 	.word	0x20000b68

0800b284 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	e016      	b.n	800b2c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b292:	4a10      	ldr	r2, [pc, #64]	; (800b2d4 <vQueueUnregisterQueue+0x50>)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4413      	add	r3, r2
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d10b      	bne.n	800b2ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b2a2:	4a0c      	ldr	r2, [pc, #48]	; (800b2d4 <vQueueUnregisterQueue+0x50>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b2ac:	4a09      	ldr	r2, [pc, #36]	; (800b2d4 <vQueueUnregisterQueue+0x50>)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	4413      	add	r3, r2
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	605a      	str	r2, [r3, #4]
				break;
 800b2b8:	e006      	b.n	800b2c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b07      	cmp	r3, #7
 800b2c4:	d9e5      	bls.n	800b292 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	20000b68 	.word	0x20000b68

0800b2d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2e8:	f001 fcdc 	bl	800cca4 <vPortEnterCritical>
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2f2:	b25b      	sxtb	r3, r3
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2f8:	d103      	bne.n	800b302 <vQueueWaitForMessageRestricted+0x2a>
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b308:	b25b      	sxtb	r3, r3
 800b30a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b30e:	d103      	bne.n	800b318 <vQueueWaitForMessageRestricted+0x40>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b318:	f001 fcf4 	bl	800cd04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b320:	2b00      	cmp	r3, #0
 800b322:	d106      	bne.n	800b332 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	3324      	adds	r3, #36	; 0x24
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fc73 	bl	800bc18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b332:	6978      	ldr	r0, [r7, #20]
 800b334:	f7ff fefb 	bl	800b12e <prvUnlockQueue>
	}
 800b338:	bf00      	nop
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08e      	sub	sp, #56	; 0x38
 800b344:	af04      	add	r7, sp, #16
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10a      	bne.n	800b36a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	623b      	str	r3, [r7, #32]
}
 800b366:	bf00      	nop
 800b368:	e7fe      	b.n	800b368 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10a      	bne.n	800b386 <xTaskCreateStatic+0x46>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	61fb      	str	r3, [r7, #28]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b386:	23bc      	movs	r3, #188	; 0xbc
 800b388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2bbc      	cmp	r3, #188	; 0xbc
 800b38e:	d00a      	beq.n	800b3a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	61bb      	str	r3, [r7, #24]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d01e      	beq.n	800b3ec <xTaskCreateStatic+0xac>
 800b3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d01b      	beq.n	800b3ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	9302      	str	r3, [sp, #8]
 800b3ce:	f107 0314 	add.w	r3, r7, #20
 800b3d2:	9301      	str	r3, [sp, #4]
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 f850 	bl	800b484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3e6:	f000 f8f3 	bl	800b5d0 <prvAddNewTaskToReadyList>
 800b3ea:	e001      	b.n	800b3f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3f0:	697b      	ldr	r3, [r7, #20]
	}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3728      	adds	r7, #40	; 0x28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b08c      	sub	sp, #48	; 0x30
 800b3fe:	af04      	add	r7, sp, #16
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	603b      	str	r3, [r7, #0]
 800b406:	4613      	mov	r3, r2
 800b408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 fd6a 	bl	800cee8 <pvPortMalloc>
 800b414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00e      	beq.n	800b43a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b41c:	20bc      	movs	r0, #188	; 0xbc
 800b41e:	f001 fd63 	bl	800cee8 <pvPortMalloc>
 800b422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d003      	beq.n	800b432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	631a      	str	r2, [r3, #48]	; 0x30
 800b430:	e005      	b.n	800b43e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b432:	6978      	ldr	r0, [r7, #20]
 800b434:	f001 fe24 	bl	800d080 <vPortFree>
 800b438:	e001      	b.n	800b43e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d017      	beq.n	800b474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b44c:	88fa      	ldrh	r2, [r7, #6]
 800b44e:	2300      	movs	r3, #0
 800b450:	9303      	str	r3, [sp, #12]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	9302      	str	r3, [sp, #8]
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f80e 	bl	800b484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b468:	69f8      	ldr	r0, [r7, #28]
 800b46a:	f000 f8b1 	bl	800b5d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b46e:	2301      	movs	r3, #1
 800b470:	61bb      	str	r3, [r7, #24]
 800b472:	e002      	b.n	800b47a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b47a:	69bb      	ldr	r3, [r7, #24]
	}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3720      	adds	r7, #32
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	461a      	mov	r2, r3
 800b49c:	21a5      	movs	r1, #165	; 0xa5
 800b49e:	f001 ff41 	bl	800d324 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f023 0307 	bic.w	r3, r3, #7
 800b4ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	f003 0307 	and.w	r3, r3, #7
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	617b      	str	r3, [r7, #20]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d01f      	beq.n	800b522 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	e012      	b.n	800b50e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	7819      	ldrb	r1, [r3, #0]
 800b4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3334      	adds	r3, #52	; 0x34
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	4413      	add	r3, r2
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d006      	beq.n	800b516 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	3301      	adds	r3, #1
 800b50c:	61fb      	str	r3, [r7, #28]
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	2b0f      	cmp	r3, #15
 800b512:	d9e9      	bls.n	800b4e8 <prvInitialiseNewTask+0x64>
 800b514:	e000      	b.n	800b518 <prvInitialiseNewTask+0x94>
			{
				break;
 800b516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b520:	e003      	b.n	800b52a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	2200      	movs	r2, #0
 800b526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	2b37      	cmp	r3, #55	; 0x37
 800b52e:	d901      	bls.n	800b534 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b530:	2337      	movs	r3, #55	; 0x37
 800b532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b53e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	2200      	movs	r2, #0
 800b544:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	3304      	adds	r3, #4
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fe56 	bl	800a1fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	3318      	adds	r3, #24
 800b554:	4618      	mov	r0, r3
 800b556:	f7fe fe51 	bl	800a1fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b56e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	3354      	adds	r3, #84	; 0x54
 800b584:	2260      	movs	r2, #96	; 0x60
 800b586:	2100      	movs	r1, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f001 fecb 	bl	800d324 <memset>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	4a0c      	ldr	r2, [pc, #48]	; (800b5c4 <prvInitialiseNewTask+0x140>)
 800b592:	659a      	str	r2, [r3, #88]	; 0x58
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	4a0c      	ldr	r2, [pc, #48]	; (800b5c8 <prvInitialiseNewTask+0x144>)
 800b598:	65da      	str	r2, [r3, #92]	; 0x5c
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	4a0b      	ldr	r2, [pc, #44]	; (800b5cc <prvInitialiseNewTask+0x148>)
 800b59e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	69b8      	ldr	r0, [r7, #24]
 800b5a6:	f001 fa51 	bl	800ca4c <pxPortInitialiseStack>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d002      	beq.n	800b5bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5bc:	bf00      	nop
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	0800d5dc 	.word	0x0800d5dc
 800b5c8:	0800d5fc 	.word	0x0800d5fc
 800b5cc:	0800d5bc 	.word	0x0800d5bc

0800b5d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5d8:	f001 fb64 	bl	800cca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5dc:	4b2d      	ldr	r3, [pc, #180]	; (800b694 <prvAddNewTaskToReadyList+0xc4>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	4a2c      	ldr	r2, [pc, #176]	; (800b694 <prvAddNewTaskToReadyList+0xc4>)
 800b5e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5e6:	4b2c      	ldr	r3, [pc, #176]	; (800b698 <prvAddNewTaskToReadyList+0xc8>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5ee:	4a2a      	ldr	r2, [pc, #168]	; (800b698 <prvAddNewTaskToReadyList+0xc8>)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5f4:	4b27      	ldr	r3, [pc, #156]	; (800b694 <prvAddNewTaskToReadyList+0xc4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d110      	bne.n	800b61e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5fc:	f000 fc38 	bl	800be70 <prvInitialiseTaskLists>
 800b600:	e00d      	b.n	800b61e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b602:	4b26      	ldr	r3, [pc, #152]	; (800b69c <prvAddNewTaskToReadyList+0xcc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d109      	bne.n	800b61e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b60a:	4b23      	ldr	r3, [pc, #140]	; (800b698 <prvAddNewTaskToReadyList+0xc8>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	429a      	cmp	r2, r3
 800b616:	d802      	bhi.n	800b61e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b618:	4a1f      	ldr	r2, [pc, #124]	; (800b698 <prvAddNewTaskToReadyList+0xc8>)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <prvAddNewTaskToReadyList+0xd0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3301      	adds	r3, #1
 800b624:	4a1e      	ldr	r2, [pc, #120]	; (800b6a0 <prvAddNewTaskToReadyList+0xd0>)
 800b626:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b628:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <prvAddNewTaskToReadyList+0xd0>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <prvAddNewTaskToReadyList+0xd4>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d903      	bls.n	800b644 <prvAddNewTaskToReadyList+0x74>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	4a18      	ldr	r2, [pc, #96]	; (800b6a4 <prvAddNewTaskToReadyList+0xd4>)
 800b642:	6013      	str	r3, [r2, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	4613      	mov	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4a15      	ldr	r2, [pc, #84]	; (800b6a8 <prvAddNewTaskToReadyList+0xd8>)
 800b652:	441a      	add	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	4619      	mov	r1, r3
 800b65a:	4610      	mov	r0, r2
 800b65c:	f7fe fddb 	bl	800a216 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b660:	f001 fb50 	bl	800cd04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b664:	4b0d      	ldr	r3, [pc, #52]	; (800b69c <prvAddNewTaskToReadyList+0xcc>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00e      	beq.n	800b68a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <prvAddNewTaskToReadyList+0xc8>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	429a      	cmp	r2, r3
 800b678:	d207      	bcs.n	800b68a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b67a:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <prvAddNewTaskToReadyList+0xdc>)
 800b67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	2000107c 	.word	0x2000107c
 800b698:	20000ba8 	.word	0x20000ba8
 800b69c:	20001088 	.word	0x20001088
 800b6a0:	20001098 	.word	0x20001098
 800b6a4:	20001084 	.word	0x20001084
 800b6a8:	20000bac 	.word	0x20000bac
 800b6ac:	e000ed04 	.word	0xe000ed04

0800b6b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d017      	beq.n	800b6f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <vTaskDelay+0x60>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <vTaskDelay+0x30>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	60bb      	str	r3, [r7, #8]
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6e0:	f000 f88a 	bl	800b7f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fe0e 	bl	800c308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6ec:	f000 f892 	bl	800b814 <xTaskResumeAll>
 800b6f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d107      	bne.n	800b708 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6f8:	4b06      	ldr	r3, [pc, #24]	; (800b714 <vTaskDelay+0x64>)
 800b6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b708:	bf00      	nop
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	200010a4 	.word	0x200010a4
 800b714:	e000ed04 	.word	0xe000ed04

0800b718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08a      	sub	sp, #40	; 0x28
 800b71c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b722:	2300      	movs	r3, #0
 800b724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b726:	463a      	mov	r2, r7
 800b728:	1d39      	adds	r1, r7, #4
 800b72a:	f107 0308 	add.w	r3, r7, #8
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fd10 	bl	800a154 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	9202      	str	r2, [sp, #8]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	2300      	movs	r3, #0
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	460a      	mov	r2, r1
 800b746:	4924      	ldr	r1, [pc, #144]	; (800b7d8 <vTaskStartScheduler+0xc0>)
 800b748:	4824      	ldr	r0, [pc, #144]	; (800b7dc <vTaskStartScheduler+0xc4>)
 800b74a:	f7ff fdf9 	bl	800b340 <xTaskCreateStatic>
 800b74e:	4603      	mov	r3, r0
 800b750:	4a23      	ldr	r2, [pc, #140]	; (800b7e0 <vTaskStartScheduler+0xc8>)
 800b752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b754:	4b22      	ldr	r3, [pc, #136]	; (800b7e0 <vTaskStartScheduler+0xc8>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b75c:	2301      	movs	r3, #1
 800b75e:	617b      	str	r3, [r7, #20]
 800b760:	e001      	b.n	800b766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d102      	bne.n	800b772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b76c:	f000 fe20 	bl	800c3b0 <xTimerCreateTimerTask>
 800b770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d11b      	bne.n	800b7b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	613b      	str	r3, [r7, #16]
}
 800b78a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b78c:	4b15      	ldr	r3, [pc, #84]	; (800b7e4 <vTaskStartScheduler+0xcc>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3354      	adds	r3, #84	; 0x54
 800b792:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <vTaskStartScheduler+0xd0>)
 800b794:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b796:	4b15      	ldr	r3, [pc, #84]	; (800b7ec <vTaskStartScheduler+0xd4>)
 800b798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b79c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b79e:	4b14      	ldr	r3, [pc, #80]	; (800b7f0 <vTaskStartScheduler+0xd8>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7a4:	4b13      	ldr	r3, [pc, #76]	; (800b7f4 <vTaskStartScheduler+0xdc>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7aa:	f001 f9d9 	bl	800cb60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7ae:	e00e      	b.n	800b7ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7b6:	d10a      	bne.n	800b7ce <vTaskStartScheduler+0xb6>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	60fb      	str	r3, [r7, #12]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <vTaskStartScheduler+0xb4>
}
 800b7ce:	bf00      	nop
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0800d4f0 	.word	0x0800d4f0
 800b7dc:	0800be41 	.word	0x0800be41
 800b7e0:	200010a0 	.word	0x200010a0
 800b7e4:	20000ba8 	.word	0x20000ba8
 800b7e8:	20000010 	.word	0x20000010
 800b7ec:	2000109c 	.word	0x2000109c
 800b7f0:	20001088 	.word	0x20001088
 800b7f4:	20001080 	.word	0x20001080

0800b7f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <vTaskSuspendAll+0x18>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3301      	adds	r3, #1
 800b802:	4a03      	ldr	r2, [pc, #12]	; (800b810 <vTaskSuspendAll+0x18>)
 800b804:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b806:	bf00      	nop
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	200010a4 	.word	0x200010a4

0800b814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b81e:	2300      	movs	r3, #0
 800b820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b822:	4b42      	ldr	r3, [pc, #264]	; (800b92c <xTaskResumeAll+0x118>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <xTaskResumeAll+0x2c>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	603b      	str	r3, [r7, #0]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b840:	f001 fa30 	bl	800cca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b844:	4b39      	ldr	r3, [pc, #228]	; (800b92c <xTaskResumeAll+0x118>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3b01      	subs	r3, #1
 800b84a:	4a38      	ldr	r2, [pc, #224]	; (800b92c <xTaskResumeAll+0x118>)
 800b84c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b84e:	4b37      	ldr	r3, [pc, #220]	; (800b92c <xTaskResumeAll+0x118>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d162      	bne.n	800b91c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b856:	4b36      	ldr	r3, [pc, #216]	; (800b930 <xTaskResumeAll+0x11c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d05e      	beq.n	800b91c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b85e:	e02f      	b.n	800b8c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b860:	4b34      	ldr	r3, [pc, #208]	; (800b934 <xTaskResumeAll+0x120>)
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3318      	adds	r3, #24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fd2f 	bl	800a2d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3304      	adds	r3, #4
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fd2a 	bl	800a2d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	4b2d      	ldr	r3, [pc, #180]	; (800b938 <xTaskResumeAll+0x124>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d903      	bls.n	800b890 <xTaskResumeAll+0x7c>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	4a2a      	ldr	r2, [pc, #168]	; (800b938 <xTaskResumeAll+0x124>)
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4a27      	ldr	r2, [pc, #156]	; (800b93c <xTaskResumeAll+0x128>)
 800b89e:	441a      	add	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f7fe fcb5 	bl	800a216 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b0:	4b23      	ldr	r3, [pc, #140]	; (800b940 <xTaskResumeAll+0x12c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d302      	bcc.n	800b8c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b8ba:	4b22      	ldr	r3, [pc, #136]	; (800b944 <xTaskResumeAll+0x130>)
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8c0:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <xTaskResumeAll+0x120>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1cb      	bne.n	800b860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8ce:	f000 fb71 	bl	800bfb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8d2:	4b1d      	ldr	r3, [pc, #116]	; (800b948 <xTaskResumeAll+0x134>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d010      	beq.n	800b900 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8de:	f000 f859 	bl	800b994 <xTaskIncrementTick>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b8e8:	4b16      	ldr	r3, [pc, #88]	; (800b944 <xTaskResumeAll+0x130>)
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1f1      	bne.n	800b8de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b8fa:	4b13      	ldr	r3, [pc, #76]	; (800b948 <xTaskResumeAll+0x134>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b900:	4b10      	ldr	r3, [pc, #64]	; (800b944 <xTaskResumeAll+0x130>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b90c:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <xTaskResumeAll+0x138>)
 800b90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b91c:	f001 f9f2 	bl	800cd04 <vPortExitCritical>

	return xAlreadyYielded;
 800b920:	68bb      	ldr	r3, [r7, #8]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	200010a4 	.word	0x200010a4
 800b930:	2000107c 	.word	0x2000107c
 800b934:	2000103c 	.word	0x2000103c
 800b938:	20001084 	.word	0x20001084
 800b93c:	20000bac 	.word	0x20000bac
 800b940:	20000ba8 	.word	0x20000ba8
 800b944:	20001090 	.word	0x20001090
 800b948:	2000108c 	.word	0x2000108c
 800b94c:	e000ed04 	.word	0xe000ed04

0800b950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b956:	4b05      	ldr	r3, [pc, #20]	; (800b96c <xTaskGetTickCount+0x1c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b95c:	687b      	ldr	r3, [r7, #4]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	20001080 	.word	0x20001080

0800b970 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b976:	f001 fa77 	bl	800ce68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b97a:	2300      	movs	r3, #0
 800b97c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b97e:	4b04      	ldr	r3, [pc, #16]	; (800b990 <xTaskGetTickCountFromISR+0x20>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b984:	683b      	ldr	r3, [r7, #0]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20001080 	.word	0x20001080

0800b994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b99a:	2300      	movs	r3, #0
 800b99c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b99e:	4b4f      	ldr	r3, [pc, #316]	; (800badc <xTaskIncrementTick+0x148>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f040 808f 	bne.w	800bac6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9a8:	4b4d      	ldr	r3, [pc, #308]	; (800bae0 <xTaskIncrementTick+0x14c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9b0:	4a4b      	ldr	r2, [pc, #300]	; (800bae0 <xTaskIncrementTick+0x14c>)
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d120      	bne.n	800b9fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9bc:	4b49      	ldr	r3, [pc, #292]	; (800bae4 <xTaskIncrementTick+0x150>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <xTaskIncrementTick+0x48>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	603b      	str	r3, [r7, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	e7fe      	b.n	800b9da <xTaskIncrementTick+0x46>
 800b9dc:	4b41      	ldr	r3, [pc, #260]	; (800bae4 <xTaskIncrementTick+0x150>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	4b41      	ldr	r3, [pc, #260]	; (800bae8 <xTaskIncrementTick+0x154>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a3f      	ldr	r2, [pc, #252]	; (800bae4 <xTaskIncrementTick+0x150>)
 800b9e8:	6013      	str	r3, [r2, #0]
 800b9ea:	4a3f      	ldr	r2, [pc, #252]	; (800bae8 <xTaskIncrementTick+0x154>)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	4b3e      	ldr	r3, [pc, #248]	; (800baec <xTaskIncrementTick+0x158>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	4a3d      	ldr	r2, [pc, #244]	; (800baec <xTaskIncrementTick+0x158>)
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	f000 fadb 	bl	800bfb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9fe:	4b3c      	ldr	r3, [pc, #240]	; (800baf0 <xTaskIncrementTick+0x15c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d349      	bcc.n	800ba9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba08:	4b36      	ldr	r3, [pc, #216]	; (800bae4 <xTaskIncrementTick+0x150>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d104      	bne.n	800ba1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba12:	4b37      	ldr	r3, [pc, #220]	; (800baf0 <xTaskIncrementTick+0x15c>)
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba18:	601a      	str	r2, [r3, #0]
					break;
 800ba1a:	e03f      	b.n	800ba9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba1c:	4b31      	ldr	r3, [pc, #196]	; (800bae4 <xTaskIncrementTick+0x150>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d203      	bcs.n	800ba3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba34:	4a2e      	ldr	r2, [pc, #184]	; (800baf0 <xTaskIncrementTick+0x15c>)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba3a:	e02f      	b.n	800ba9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fc45 	bl	800a2d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	3318      	adds	r3, #24
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fc3c 	bl	800a2d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5c:	4b25      	ldr	r3, [pc, #148]	; (800baf4 <xTaskIncrementTick+0x160>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d903      	bls.n	800ba6c <xTaskIncrementTick+0xd8>
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	4a22      	ldr	r2, [pc, #136]	; (800baf4 <xTaskIncrementTick+0x160>)
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4a1f      	ldr	r2, [pc, #124]	; (800baf8 <xTaskIncrementTick+0x164>)
 800ba7a:	441a      	add	r2, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fe fbc7 	bl	800a216 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	4b1b      	ldr	r3, [pc, #108]	; (800bafc <xTaskIncrementTick+0x168>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d3b8      	bcc.n	800ba08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba9a:	e7b5      	b.n	800ba08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba9c:	4b17      	ldr	r3, [pc, #92]	; (800bafc <xTaskIncrementTick+0x168>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa2:	4915      	ldr	r1, [pc, #84]	; (800baf8 <xTaskIncrementTick+0x164>)
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	440b      	add	r3, r1
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d901      	bls.n	800bab8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bab8:	4b11      	ldr	r3, [pc, #68]	; (800bb00 <xTaskIncrementTick+0x16c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d007      	beq.n	800bad0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	e004      	b.n	800bad0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bac6:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <xTaskIncrementTick+0x170>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	4a0d      	ldr	r2, [pc, #52]	; (800bb04 <xTaskIncrementTick+0x170>)
 800bace:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bad0:	697b      	ldr	r3, [r7, #20]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	200010a4 	.word	0x200010a4
 800bae0:	20001080 	.word	0x20001080
 800bae4:	20001034 	.word	0x20001034
 800bae8:	20001038 	.word	0x20001038
 800baec:	20001094 	.word	0x20001094
 800baf0:	2000109c 	.word	0x2000109c
 800baf4:	20001084 	.word	0x20001084
 800baf8:	20000bac 	.word	0x20000bac
 800bafc:	20000ba8 	.word	0x20000ba8
 800bb00:	20001090 	.word	0x20001090
 800bb04:	2000108c 	.word	0x2000108c

0800bb08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb0e:	4b2a      	ldr	r3, [pc, #168]	; (800bbb8 <vTaskSwitchContext+0xb0>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb16:	4b29      	ldr	r3, [pc, #164]	; (800bbbc <vTaskSwitchContext+0xb4>)
 800bb18:	2201      	movs	r2, #1
 800bb1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb1c:	e046      	b.n	800bbac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bb1e:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <vTaskSwitchContext+0xb4>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb24:	4b26      	ldr	r3, [pc, #152]	; (800bbc0 <vTaskSwitchContext+0xb8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	e010      	b.n	800bb4e <vTaskSwitchContext+0x46>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <vTaskSwitchContext+0x40>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	607b      	str	r3, [r7, #4]
}
 800bb44:	bf00      	nop
 800bb46:	e7fe      	b.n	800bb46 <vTaskSwitchContext+0x3e>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	491d      	ldr	r1, [pc, #116]	; (800bbc4 <vTaskSwitchContext+0xbc>)
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	440b      	add	r3, r1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0e4      	beq.n	800bb2c <vTaskSwitchContext+0x24>
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	4613      	mov	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4413      	add	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4a15      	ldr	r2, [pc, #84]	; (800bbc4 <vTaskSwitchContext+0xbc>)
 800bb6e:	4413      	add	r3, r2
 800bb70:	60bb      	str	r3, [r7, #8]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	685a      	ldr	r2, [r3, #4]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	605a      	str	r2, [r3, #4]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	3308      	adds	r3, #8
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d104      	bne.n	800bb92 <vTaskSwitchContext+0x8a>
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	605a      	str	r2, [r3, #4]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	4a0b      	ldr	r2, [pc, #44]	; (800bbc8 <vTaskSwitchContext+0xc0>)
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	4a08      	ldr	r2, [pc, #32]	; (800bbc0 <vTaskSwitchContext+0xb8>)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bba2:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <vTaskSwitchContext+0xc0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3354      	adds	r3, #84	; 0x54
 800bba8:	4a08      	ldr	r2, [pc, #32]	; (800bbcc <vTaskSwitchContext+0xc4>)
 800bbaa:	6013      	str	r3, [r2, #0]
}
 800bbac:	bf00      	nop
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	200010a4 	.word	0x200010a4
 800bbbc:	20001090 	.word	0x20001090
 800bbc0:	20001084 	.word	0x20001084
 800bbc4:	20000bac 	.word	0x20000bac
 800bbc8:	20000ba8 	.word	0x20000ba8
 800bbcc:	20000010 	.word	0x20000010

0800bbd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	60fb      	str	r3, [r7, #12]
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbf6:	4b07      	ldr	r3, [pc, #28]	; (800bc14 <vTaskPlaceOnEventList+0x44>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3318      	adds	r3, #24
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7fe fb2d 	bl	800a25e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc04:	2101      	movs	r1, #1
 800bc06:	6838      	ldr	r0, [r7, #0]
 800bc08:	f000 fb7e 	bl	800c308 <prvAddCurrentTaskToDelayedList>
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	20000ba8 	.word	0x20000ba8

0800bc18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	617b      	str	r3, [r7, #20]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc40:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <vTaskPlaceOnEventListRestricted+0x54>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3318      	adds	r3, #24
 800bc46:	4619      	mov	r1, r3
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f7fe fae4 	bl	800a216 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc5a:	6879      	ldr	r1, [r7, #4]
 800bc5c:	68b8      	ldr	r0, [r7, #8]
 800bc5e:	f000 fb53 	bl	800c308 <prvAddCurrentTaskToDelayedList>
	}
 800bc62:	bf00      	nop
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000ba8 	.word	0x20000ba8

0800bc70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	60fb      	str	r3, [r7, #12]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	3318      	adds	r3, #24
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fe fb15 	bl	800a2d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bca6:	4b1e      	ldr	r3, [pc, #120]	; (800bd20 <xTaskRemoveFromEventList+0xb0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d11d      	bne.n	800bcea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fe fb0c 	bl	800a2d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbc:	4b19      	ldr	r3, [pc, #100]	; (800bd24 <xTaskRemoveFromEventList+0xb4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d903      	bls.n	800bccc <xTaskRemoveFromEventList+0x5c>
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	4a16      	ldr	r2, [pc, #88]	; (800bd24 <xTaskRemoveFromEventList+0xb4>)
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <xTaskRemoveFromEventList+0xb8>)
 800bcda:	441a      	add	r2, r3
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	3304      	adds	r3, #4
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f7fe fa97 	bl	800a216 <vListInsertEnd>
 800bce8:	e005      	b.n	800bcf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	3318      	adds	r3, #24
 800bcee:	4619      	mov	r1, r3
 800bcf0:	480e      	ldr	r0, [pc, #56]	; (800bd2c <xTaskRemoveFromEventList+0xbc>)
 800bcf2:	f7fe fa90 	bl	800a216 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	4b0d      	ldr	r3, [pc, #52]	; (800bd30 <xTaskRemoveFromEventList+0xc0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d905      	bls.n	800bd10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd04:	2301      	movs	r3, #1
 800bd06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <xTaskRemoveFromEventList+0xc4>)
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	e001      	b.n	800bd14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd14:	697b      	ldr	r3, [r7, #20]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	200010a4 	.word	0x200010a4
 800bd24:	20001084 	.word	0x20001084
 800bd28:	20000bac 	.word	0x20000bac
 800bd2c:	2000103c 	.word	0x2000103c
 800bd30:	20000ba8 	.word	0x20000ba8
 800bd34:	20001090 	.word	0x20001090

0800bd38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd40:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <vTaskInternalSetTimeOutState+0x24>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd48:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <vTaskInternalSetTimeOutState+0x28>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	605a      	str	r2, [r3, #4]
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20001094 	.word	0x20001094
 800bd60:	20001080 	.word	0x20001080

0800bd64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	613b      	str	r3, [r7, #16]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bda6:	f000 ff7d 	bl	800cca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdaa:	4b1d      	ldr	r3, [pc, #116]	; (800be20 <xTaskCheckForTimeOut+0xbc>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdc2:	d102      	bne.n	800bdca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	61fb      	str	r3, [r7, #28]
 800bdc8:	e023      	b.n	800be12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	4b15      	ldr	r3, [pc, #84]	; (800be24 <xTaskCheckForTimeOut+0xc0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d007      	beq.n	800bde6 <xTaskCheckForTimeOut+0x82>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d302      	bcc.n	800bde6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bde0:	2301      	movs	r3, #1
 800bde2:	61fb      	str	r3, [r7, #28]
 800bde4:	e015      	b.n	800be12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d20b      	bcs.n	800be08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	1ad2      	subs	r2, r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff ff9b 	bl	800bd38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be02:	2300      	movs	r3, #0
 800be04:	61fb      	str	r3, [r7, #28]
 800be06:	e004      	b.n	800be12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be0e:	2301      	movs	r3, #1
 800be10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f000 ff77 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800be16:	69fb      	ldr	r3, [r7, #28]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	20001080 	.word	0x20001080
 800be24:	20001094 	.word	0x20001094

0800be28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be28:	b480      	push	{r7}
 800be2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be2c:	4b03      	ldr	r3, [pc, #12]	; (800be3c <vTaskMissedYield+0x14>)
 800be2e:	2201      	movs	r2, #1
 800be30:	601a      	str	r2, [r3, #0]
}
 800be32:	bf00      	nop
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20001090 	.word	0x20001090

0800be40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be48:	f000 f852 	bl	800bef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be4c:	4b06      	ldr	r3, [pc, #24]	; (800be68 <prvIdleTask+0x28>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d9f9      	bls.n	800be48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be54:	4b05      	ldr	r3, [pc, #20]	; (800be6c <prvIdleTask+0x2c>)
 800be56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be64:	e7f0      	b.n	800be48 <prvIdleTask+0x8>
 800be66:	bf00      	nop
 800be68:	20000bac 	.word	0x20000bac
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be76:	2300      	movs	r3, #0
 800be78:	607b      	str	r3, [r7, #4]
 800be7a:	e00c      	b.n	800be96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4a12      	ldr	r2, [pc, #72]	; (800bed0 <prvInitialiseTaskLists+0x60>)
 800be88:	4413      	add	r3, r2
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe f996 	bl	800a1bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3301      	adds	r3, #1
 800be94:	607b      	str	r3, [r7, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b37      	cmp	r3, #55	; 0x37
 800be9a:	d9ef      	bls.n	800be7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be9c:	480d      	ldr	r0, [pc, #52]	; (800bed4 <prvInitialiseTaskLists+0x64>)
 800be9e:	f7fe f98d 	bl	800a1bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bea2:	480d      	ldr	r0, [pc, #52]	; (800bed8 <prvInitialiseTaskLists+0x68>)
 800bea4:	f7fe f98a 	bl	800a1bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bea8:	480c      	ldr	r0, [pc, #48]	; (800bedc <prvInitialiseTaskLists+0x6c>)
 800beaa:	f7fe f987 	bl	800a1bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800beae:	480c      	ldr	r0, [pc, #48]	; (800bee0 <prvInitialiseTaskLists+0x70>)
 800beb0:	f7fe f984 	bl	800a1bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800beb4:	480b      	ldr	r0, [pc, #44]	; (800bee4 <prvInitialiseTaskLists+0x74>)
 800beb6:	f7fe f981 	bl	800a1bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800beba:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <prvInitialiseTaskLists+0x78>)
 800bebc:	4a05      	ldr	r2, [pc, #20]	; (800bed4 <prvInitialiseTaskLists+0x64>)
 800bebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bec0:	4b0a      	ldr	r3, [pc, #40]	; (800beec <prvInitialiseTaskLists+0x7c>)
 800bec2:	4a05      	ldr	r2, [pc, #20]	; (800bed8 <prvInitialiseTaskLists+0x68>)
 800bec4:	601a      	str	r2, [r3, #0]
}
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20000bac 	.word	0x20000bac
 800bed4:	2000100c 	.word	0x2000100c
 800bed8:	20001020 	.word	0x20001020
 800bedc:	2000103c 	.word	0x2000103c
 800bee0:	20001050 	.word	0x20001050
 800bee4:	20001068 	.word	0x20001068
 800bee8:	20001034 	.word	0x20001034
 800beec:	20001038 	.word	0x20001038

0800bef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bef6:	e019      	b.n	800bf2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bef8:	f000 fed4 	bl	800cca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befc:	4b10      	ldr	r3, [pc, #64]	; (800bf40 <prvCheckTasksWaitingTermination+0x50>)
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe f9e1 	bl	800a2d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf0e:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <prvCheckTasksWaitingTermination+0x54>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	4a0b      	ldr	r2, [pc, #44]	; (800bf44 <prvCheckTasksWaitingTermination+0x54>)
 800bf16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf18:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <prvCheckTasksWaitingTermination+0x58>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	4a0a      	ldr	r2, [pc, #40]	; (800bf48 <prvCheckTasksWaitingTermination+0x58>)
 800bf20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf22:	f000 feef 	bl	800cd04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f810 	bl	800bf4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf2c:	4b06      	ldr	r3, [pc, #24]	; (800bf48 <prvCheckTasksWaitingTermination+0x58>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1e1      	bne.n	800bef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20001050 	.word	0x20001050
 800bf44:	2000107c 	.word	0x2000107c
 800bf48:	20001064 	.word	0x20001064

0800bf4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3354      	adds	r3, #84	; 0x54
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f001 f9f9 	bl	800d350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d108      	bne.n	800bf7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 f887 	bl	800d080 <vPortFree>
				vPortFree( pxTCB );
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f001 f884 	bl	800d080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf78:	e018      	b.n	800bfac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d103      	bne.n	800bf8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 f87b 	bl	800d080 <vPortFree>
	}
 800bf8a:	e00f      	b.n	800bfac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d00a      	beq.n	800bfac <prvDeleteTCB+0x60>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	60fb      	str	r3, [r7, #12]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <prvDeleteTCB+0x5e>
	}
 800bfac:	bf00      	nop
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfba:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <prvResetNextTaskUnblockTime+0x38>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d104      	bne.n	800bfce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfc4:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <prvResetNextTaskUnblockTime+0x3c>)
 800bfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfcc:	e008      	b.n	800bfe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfce:	4b07      	ldr	r3, [pc, #28]	; (800bfec <prvResetNextTaskUnblockTime+0x38>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	4a04      	ldr	r2, [pc, #16]	; (800bff0 <prvResetNextTaskUnblockTime+0x3c>)
 800bfde:	6013      	str	r3, [r2, #0]
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	20001034 	.word	0x20001034
 800bff0:	2000109c 	.word	0x2000109c

0800bff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bffa:	4b0b      	ldr	r3, [pc, #44]	; (800c028 <xTaskGetSchedulerState+0x34>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c002:	2301      	movs	r3, #1
 800c004:	607b      	str	r3, [r7, #4]
 800c006:	e008      	b.n	800c01a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c008:	4b08      	ldr	r3, [pc, #32]	; (800c02c <xTaskGetSchedulerState+0x38>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d102      	bne.n	800c016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c010:	2302      	movs	r3, #2
 800c012:	607b      	str	r3, [r7, #4]
 800c014:	e001      	b.n	800c01a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c016:	2300      	movs	r3, #0
 800c018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c01a:	687b      	ldr	r3, [r7, #4]
	}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	20001088 	.word	0x20001088
 800c02c:	200010a4 	.word	0x200010a4

0800c030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d051      	beq.n	800c0ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04a:	4b2a      	ldr	r3, [pc, #168]	; (800c0f4 <xTaskPriorityInherit+0xc4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	429a      	cmp	r2, r3
 800c052:	d241      	bcs.n	800c0d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	699b      	ldr	r3, [r3, #24]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	db06      	blt.n	800c06a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c05c:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <xTaskPriorityInherit+0xc4>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	6959      	ldr	r1, [r3, #20]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c072:	4613      	mov	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4a1f      	ldr	r2, [pc, #124]	; (800c0f8 <xTaskPriorityInherit+0xc8>)
 800c07c:	4413      	add	r3, r2
 800c07e:	4299      	cmp	r1, r3
 800c080:	d122      	bne.n	800c0c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	3304      	adds	r3, #4
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe f922 	bl	800a2d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c08c:	4b19      	ldr	r3, [pc, #100]	; (800c0f4 <xTaskPriorityInherit+0xc4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09a:	4b18      	ldr	r3, [pc, #96]	; (800c0fc <xTaskPriorityInherit+0xcc>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d903      	bls.n	800c0aa <xTaskPriorityInherit+0x7a>
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4a15      	ldr	r2, [pc, #84]	; (800c0fc <xTaskPriorityInherit+0xcc>)
 800c0a8:	6013      	str	r3, [r2, #0]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4a10      	ldr	r2, [pc, #64]	; (800c0f8 <xTaskPriorityInherit+0xc8>)
 800c0b8:	441a      	add	r2, r3
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	f7fe f8a8 	bl	800a216 <vListInsertEnd>
 800c0c6:	e004      	b.n	800c0d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <xTaskPriorityInherit+0xc4>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e008      	b.n	800c0ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0dc:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <xTaskPriorityInherit+0xc4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d201      	bcs.n	800c0ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20000ba8 	.word	0x20000ba8
 800c0f8:	20000bac 	.word	0x20000bac
 800c0fc:	20001084 	.word	0x20001084

0800c100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d056      	beq.n	800c1c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c116:	4b2e      	ldr	r3, [pc, #184]	; (800c1d0 <xTaskPriorityDisinherit+0xd0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	693a      	ldr	r2, [r7, #16]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d00a      	beq.n	800c136 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	60fb      	str	r3, [r7, #12]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d10a      	bne.n	800c154 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	60bb      	str	r3, [r7, #8]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c158:	1e5a      	subs	r2, r3, #1
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c166:	429a      	cmp	r2, r3
 800c168:	d02c      	beq.n	800c1c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d128      	bne.n	800c1c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	3304      	adds	r3, #4
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe f8aa 	bl	800a2d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4b0f      	ldr	r3, [pc, #60]	; (800c1d4 <xTaskPriorityDisinherit+0xd4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d903      	bls.n	800c1a4 <xTaskPriorityDisinherit+0xa4>
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	4a0c      	ldr	r2, [pc, #48]	; (800c1d4 <xTaskPriorityDisinherit+0xd4>)
 800c1a2:	6013      	str	r3, [r2, #0]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4a09      	ldr	r2, [pc, #36]	; (800c1d8 <xTaskPriorityDisinherit+0xd8>)
 800c1b2:	441a      	add	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f7fe f82b 	bl	800a216 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1c4:	697b      	ldr	r3, [r7, #20]
	}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000ba8 	.word	0x20000ba8
 800c1d4:	20001084 	.word	0x20001084
 800c1d8:	20000bac 	.word	0x20000bac

0800c1dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d06a      	beq.n	800c2ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d902      	bls.n	800c222 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	61fb      	str	r3, [r7, #28]
 800c220:	e002      	b.n	800c228 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c226:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	69fa      	ldr	r2, [r7, #28]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d04b      	beq.n	800c2ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d146      	bne.n	800c2ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c23c:	4b25      	ldr	r3, [pc, #148]	; (800c2d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	429a      	cmp	r2, r3
 800c244:	d10a      	bne.n	800c25c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	60bb      	str	r3, [r7, #8]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	69fa      	ldr	r2, [r7, #28]
 800c266:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	db04      	blt.n	800c27a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	6959      	ldr	r1, [r3, #20]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	4613      	mov	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4a13      	ldr	r2, [pc, #76]	; (800c2d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c28a:	4413      	add	r3, r2
 800c28c:	4299      	cmp	r1, r3
 800c28e:	d11c      	bne.n	800c2ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	3304      	adds	r3, #4
 800c294:	4618      	mov	r0, r3
 800c296:	f7fe f81b 	bl	800a2d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c29e:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d903      	bls.n	800c2ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2aa:	4a0c      	ldr	r2, [pc, #48]	; (800c2dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4a07      	ldr	r2, [pc, #28]	; (800c2d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2bc:	441a      	add	r2, r3
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	f7fd ffa6 	bl	800a216 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2ca:	bf00      	nop
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20000ba8 	.word	0x20000ba8
 800c2d8:	20000bac 	.word	0x20000bac
 800c2dc:	20001084 	.word	0x20001084

0800c2e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2e0:	b480      	push	{r7}
 800c2e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c2e4:	4b07      	ldr	r3, [pc, #28]	; (800c304 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c2ec:	4b05      	ldr	r3, [pc, #20]	; (800c304 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2f2:	3201      	adds	r2, #1
 800c2f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c2f6:	4b03      	ldr	r3, [pc, #12]	; (800c304 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
	}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	20000ba8 	.word	0x20000ba8

0800c308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c312:	4b21      	ldr	r3, [pc, #132]	; (800c398 <prvAddCurrentTaskToDelayedList+0x90>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c318:	4b20      	ldr	r3, [pc, #128]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3304      	adds	r3, #4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fd ffd6 	bl	800a2d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c32a:	d10a      	bne.n	800c342 <prvAddCurrentTaskToDelayedList+0x3a>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d007      	beq.n	800c342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c332:	4b1a      	ldr	r3, [pc, #104]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3304      	adds	r3, #4
 800c338:	4619      	mov	r1, r3
 800c33a:	4819      	ldr	r0, [pc, #100]	; (800c3a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c33c:	f7fd ff6b 	bl	800a216 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c340:	e026      	b.n	800c390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4413      	add	r3, r2
 800c348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c34a:	4b14      	ldr	r3, [pc, #80]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	429a      	cmp	r2, r3
 800c358:	d209      	bcs.n	800c36e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c35a:	4b12      	ldr	r3, [pc, #72]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3304      	adds	r3, #4
 800c364:	4619      	mov	r1, r3
 800c366:	4610      	mov	r0, r2
 800c368:	f7fd ff79 	bl	800a25e <vListInsert>
}
 800c36c:	e010      	b.n	800c390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c36e:	4b0e      	ldr	r3, [pc, #56]	; (800c3a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fd ff6f 	bl	800a25e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c380:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	429a      	cmp	r2, r3
 800c388:	d202      	bcs.n	800c390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c38a:	4a08      	ldr	r2, [pc, #32]	; (800c3ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	6013      	str	r3, [r2, #0]
}
 800c390:	bf00      	nop
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	20001080 	.word	0x20001080
 800c39c:	20000ba8 	.word	0x20000ba8
 800c3a0:	20001068 	.word	0x20001068
 800c3a4:	20001038 	.word	0x20001038
 800c3a8:	20001034 	.word	0x20001034
 800c3ac:	2000109c 	.word	0x2000109c

0800c3b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08a      	sub	sp, #40	; 0x28
 800c3b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c3ba:	f000 fb07 	bl	800c9cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c3be:	4b1c      	ldr	r3, [pc, #112]	; (800c430 <xTimerCreateTimerTask+0x80>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d021      	beq.n	800c40a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3ce:	1d3a      	adds	r2, r7, #4
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	f107 030c 	add.w	r3, r7, #12
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fd fed5 	bl	800a188 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	9202      	str	r2, [sp, #8]
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	460a      	mov	r2, r1
 800c3f0:	4910      	ldr	r1, [pc, #64]	; (800c434 <xTimerCreateTimerTask+0x84>)
 800c3f2:	4811      	ldr	r0, [pc, #68]	; (800c438 <xTimerCreateTimerTask+0x88>)
 800c3f4:	f7fe ffa4 	bl	800b340 <xTaskCreateStatic>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4a10      	ldr	r2, [pc, #64]	; (800c43c <xTimerCreateTimerTask+0x8c>)
 800c3fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <xTimerCreateTimerTask+0x8c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c406:	2301      	movs	r3, #1
 800c408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	613b      	str	r3, [r7, #16]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c426:	697b      	ldr	r3, [r7, #20]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	200010d8 	.word	0x200010d8
 800c434:	0800d4f8 	.word	0x0800d4f8
 800c438:	0800c575 	.word	0x0800c575
 800c43c:	200010dc 	.word	0x200010dc

0800c440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b08a      	sub	sp, #40	; 0x28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c44e:	2300      	movs	r3, #0
 800c450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10a      	bne.n	800c46e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	623b      	str	r3, [r7, #32]
}
 800c46a:	bf00      	nop
 800c46c:	e7fe      	b.n	800c46c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c46e:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d02a      	beq.n	800c4cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b05      	cmp	r3, #5
 800c486:	dc18      	bgt.n	800c4ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c488:	f7ff fdb4 	bl	800bff4 <xTaskGetSchedulerState>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d109      	bne.n	800c4a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c492:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c494:	6818      	ldr	r0, [r3, #0]
 800c496:	f107 0110 	add.w	r1, r7, #16
 800c49a:	2300      	movs	r3, #0
 800c49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49e:	f7fe f8e9 	bl	800a674 <xQueueGenericSend>
 800c4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c4a4:	e012      	b.n	800c4cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4a6:	4b0c      	ldr	r3, [pc, #48]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c4a8:	6818      	ldr	r0, [r3, #0]
 800c4aa:	f107 0110 	add.w	r1, r7, #16
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f7fe f8df 	bl	800a674 <xQueueGenericSend>
 800c4b6:	6278      	str	r0, [r7, #36]	; 0x24
 800c4b8:	e008      	b.n	800c4cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4ba:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	f107 0110 	add.w	r1, r7, #16
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	f7fe f9d3 	bl	800a870 <xQueueGenericSendFromISR>
 800c4ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3728      	adds	r7, #40	; 0x28
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200010d8 	.word	0x200010d8

0800c4dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e6:	4b22      	ldr	r3, [pc, #136]	; (800c570 <prvProcessExpiredTimer+0x94>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fd feeb 	bl	800a2d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d022      	beq.n	800c54e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	699a      	ldr	r2, [r3, #24]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	18d1      	adds	r1, r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	6978      	ldr	r0, [r7, #20]
 800c516:	f000 f8d1 	bl	800c6bc <prvInsertTimerInActiveList>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01f      	beq.n	800c560 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c520:	2300      	movs	r3, #0
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	2100      	movs	r1, #0
 800c52a:	6978      	ldr	r0, [r7, #20]
 800c52c:	f7ff ff88 	bl	800c440 <xTimerGenericCommand>
 800c530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d113      	bne.n	800c560 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	60fb      	str	r3, [r7, #12]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c554:	f023 0301 	bic.w	r3, r3, #1
 800c558:	b2da      	uxtb	r2, r3
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	6978      	ldr	r0, [r7, #20]
 800c566:	4798      	blx	r3
}
 800c568:	bf00      	nop
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	200010d0 	.word	0x200010d0

0800c574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	4618      	mov	r0, r3
 800c582:	f000 f857 	bl	800c634 <prvGetNextExpireTime>
 800c586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	4619      	mov	r1, r3
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 f803 	bl	800c598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c592:	f000 f8d5 	bl	800c740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c596:	e7f1      	b.n	800c57c <prvTimerTask+0x8>

0800c598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5a2:	f7ff f929 	bl	800b7f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5a6:	f107 0308 	add.w	r3, r7, #8
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 f866 	bl	800c67c <prvSampleTimeNow>
 800c5b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d130      	bne.n	800c61a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <prvProcessTimerOrBlockTask+0x3c>
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d806      	bhi.n	800c5d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5c6:	f7ff f925 	bl	800b814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5ca:	68f9      	ldr	r1, [r7, #12]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff ff85 	bl	800c4dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5d2:	e024      	b.n	800c61e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d008      	beq.n	800c5ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5da:	4b13      	ldr	r3, [pc, #76]	; (800c628 <prvProcessTimerOrBlockTask+0x90>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <prvProcessTimerOrBlockTask+0x50>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e000      	b.n	800c5ea <prvProcessTimerOrBlockTask+0x52>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5ec:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <prvProcessTimerOrBlockTask+0x94>)
 800c5ee:	6818      	ldr	r0, [r3, #0]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f7fe fe6d 	bl	800b2d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5fe:	f7ff f909 	bl	800b814 <xTaskResumeAll>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c608:	4b09      	ldr	r3, [pc, #36]	; (800c630 <prvProcessTimerOrBlockTask+0x98>)
 800c60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	f3bf 8f6f 	isb	sy
}
 800c618:	e001      	b.n	800c61e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c61a:	f7ff f8fb 	bl	800b814 <xTaskResumeAll>
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	200010d4 	.word	0x200010d4
 800c62c:	200010d8 	.word	0x200010d8
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c63c:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <prvGetNextExpireTime+0x44>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <prvGetNextExpireTime+0x16>
 800c646:	2201      	movs	r2, #1
 800c648:	e000      	b.n	800c64c <prvGetNextExpireTime+0x18>
 800c64a:	2200      	movs	r2, #0
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d105      	bne.n	800c664 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <prvGetNextExpireTime+0x44>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	e001      	b.n	800c668 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c668:	68fb      	ldr	r3, [r7, #12]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	200010d0 	.word	0x200010d0

0800c67c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c684:	f7ff f964 	bl	800b950 <xTaskGetTickCount>
 800c688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c68a:	4b0b      	ldr	r3, [pc, #44]	; (800c6b8 <prvSampleTimeNow+0x3c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	429a      	cmp	r2, r3
 800c692:	d205      	bcs.n	800c6a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c694:	f000 f936 	bl	800c904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6a6:	4a04      	ldr	r2, [pc, #16]	; (800c6b8 <prvSampleTimeNow+0x3c>)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200010e0 	.word	0x200010e0

0800c6bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d812      	bhi.n	800c708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	1ad2      	subs	r2, r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d302      	bcc.n	800c6f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	e01b      	b.n	800c72e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6f6:	4b10      	ldr	r3, [pc, #64]	; (800c738 <prvInsertTimerInActiveList+0x7c>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	4619      	mov	r1, r3
 800c700:	4610      	mov	r0, r2
 800c702:	f7fd fdac 	bl	800a25e <vListInsert>
 800c706:	e012      	b.n	800c72e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d206      	bcs.n	800c71e <prvInsertTimerInActiveList+0x62>
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d302      	bcc.n	800c71e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c718:	2301      	movs	r3, #1
 800c71a:	617b      	str	r3, [r7, #20]
 800c71c:	e007      	b.n	800c72e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c71e:	4b07      	ldr	r3, [pc, #28]	; (800c73c <prvInsertTimerInActiveList+0x80>)
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3304      	adds	r3, #4
 800c726:	4619      	mov	r1, r3
 800c728:	4610      	mov	r0, r2
 800c72a:	f7fd fd98 	bl	800a25e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c72e:	697b      	ldr	r3, [r7, #20]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	200010d4 	.word	0x200010d4
 800c73c:	200010d0 	.word	0x200010d0

0800c740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08e      	sub	sp, #56	; 0x38
 800c744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c746:	e0ca      	b.n	800c8de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	da18      	bge.n	800c780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c74e:	1d3b      	adds	r3, r7, #4
 800c750:	3304      	adds	r3, #4
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10a      	bne.n	800c770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	61fb      	str	r3, [r7, #28]
}
 800c76c:	bf00      	nop
 800c76e:	e7fe      	b.n	800c76e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c776:	6850      	ldr	r0, [r2, #4]
 800c778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c77a:	6892      	ldr	r2, [r2, #8]
 800c77c:	4611      	mov	r1, r2
 800c77e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f2c0 80aa 	blt.w	800c8dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	3304      	adds	r3, #4
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fd fd99 	bl	800a2d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c79e:	463b      	mov	r3, r7
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff ff6b 	bl	800c67c <prvSampleTimeNow>
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b09      	cmp	r3, #9
 800c7ac:	f200 8097 	bhi.w	800c8de <prvProcessReceivedCommands+0x19e>
 800c7b0:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <prvProcessReceivedCommands+0x78>)
 800c7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b6:	bf00      	nop
 800c7b8:	0800c7e1 	.word	0x0800c7e1
 800c7bc:	0800c7e1 	.word	0x0800c7e1
 800c7c0:	0800c7e1 	.word	0x0800c7e1
 800c7c4:	0800c855 	.word	0x0800c855
 800c7c8:	0800c869 	.word	0x0800c869
 800c7cc:	0800c8b3 	.word	0x0800c8b3
 800c7d0:	0800c7e1 	.word	0x0800c7e1
 800c7d4:	0800c7e1 	.word	0x0800c7e1
 800c7d8:	0800c855 	.word	0x0800c855
 800c7dc:	0800c869 	.word	0x0800c869
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7e6:	f043 0301 	orr.w	r3, r3, #1
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	18d1      	adds	r1, r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c800:	f7ff ff5c 	bl	800c6bc <prvInsertTimerInActiveList>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d069      	beq.n	800c8de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d05e      	beq.n	800c8de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	441a      	add	r2, r3
 800c828:	2300      	movs	r3, #0
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2300      	movs	r3, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c832:	f7ff fe05 	bl	800c440 <xTimerGenericCommand>
 800c836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d14f      	bne.n	800c8de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61bb      	str	r3, [r7, #24]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c85a:	f023 0301 	bic.w	r3, r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c866:	e03a      	b.n	800c8de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	617b      	str	r3, [r7, #20]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	699a      	ldr	r2, [r3, #24]
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	18d1      	adds	r1, r2, r3
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ac:	f7ff ff06 	bl	800c6bc <prvInsertTimerInActiveList>
					break;
 800c8b0:	e015      	b.n	800c8de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0302 	and.w	r3, r3, #2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d103      	bne.n	800c8c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c2:	f000 fbdd 	bl	800d080 <vPortFree>
 800c8c6:	e00a      	b.n	800c8de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8da:	e000      	b.n	800c8de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8de:	4b08      	ldr	r3, [pc, #32]	; (800c900 <prvProcessReceivedCommands+0x1c0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	1d39      	adds	r1, r7, #4
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe f8ea 	bl	800aac0 <xQueueReceive>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f47f af2a 	bne.w	800c748 <prvProcessReceivedCommands+0x8>
	}
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	3730      	adds	r7, #48	; 0x30
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	200010d8 	.word	0x200010d8

0800c904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c90a:	e048      	b.n	800c99e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c90c:	4b2d      	ldr	r3, [pc, #180]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c916:	4b2b      	ldr	r3, [pc, #172]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3304      	adds	r3, #4
 800c924:	4618      	mov	r0, r3
 800c926:	f7fd fcd3 	bl	800a2d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d02e      	beq.n	800c99e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4413      	add	r3, r2
 800c948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d90e      	bls.n	800c970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c95e:	4b19      	ldr	r3, [pc, #100]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3304      	adds	r3, #4
 800c966:	4619      	mov	r1, r3
 800c968:	4610      	mov	r0, r2
 800c96a:	f7fd fc78 	bl	800a25e <vListInsert>
 800c96e:	e016      	b.n	800c99e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c970:	2300      	movs	r3, #0
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	2300      	movs	r3, #0
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	2100      	movs	r1, #0
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f7ff fd60 	bl	800c440 <xTimerGenericCommand>
 800c980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	603b      	str	r3, [r7, #0]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c99e:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1b1      	bne.n	800c90c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <prvSwitchTimerLists+0xc4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a04      	ldr	r2, [pc, #16]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c9b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c9b6:	4a04      	ldr	r2, [pc, #16]	; (800c9c8 <prvSwitchTimerLists+0xc4>)
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	6013      	str	r3, [r2, #0]
}
 800c9bc:	bf00      	nop
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	200010d0 	.word	0x200010d0
 800c9c8:	200010d4 	.word	0x200010d4

0800c9cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9d2:	f000 f967 	bl	800cca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9d6:	4b15      	ldr	r3, [pc, #84]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d120      	bne.n	800ca20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9de:	4814      	ldr	r0, [pc, #80]	; (800ca30 <prvCheckForValidListAndQueue+0x64>)
 800c9e0:	f7fd fbec 	bl	800a1bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9e4:	4813      	ldr	r0, [pc, #76]	; (800ca34 <prvCheckForValidListAndQueue+0x68>)
 800c9e6:	f7fd fbe9 	bl	800a1bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9ea:	4b13      	ldr	r3, [pc, #76]	; (800ca38 <prvCheckForValidListAndQueue+0x6c>)
 800c9ec:	4a10      	ldr	r2, [pc, #64]	; (800ca30 <prvCheckForValidListAndQueue+0x64>)
 800c9ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <prvCheckForValidListAndQueue+0x70>)
 800c9f2:	4a10      	ldr	r2, [pc, #64]	; (800ca34 <prvCheckForValidListAndQueue+0x68>)
 800c9f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	4b11      	ldr	r3, [pc, #68]	; (800ca40 <prvCheckForValidListAndQueue+0x74>)
 800c9fc:	4a11      	ldr	r2, [pc, #68]	; (800ca44 <prvCheckForValidListAndQueue+0x78>)
 800c9fe:	2110      	movs	r1, #16
 800ca00:	200a      	movs	r0, #10
 800ca02:	f7fd fcf7 	bl	800a3f4 <xQueueGenericCreateStatic>
 800ca06:	4603      	mov	r3, r0
 800ca08:	4a08      	ldr	r2, [pc, #32]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800ca0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca0c:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d005      	beq.n	800ca20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	490b      	ldr	r1, [pc, #44]	; (800ca48 <prvCheckForValidListAndQueue+0x7c>)
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fc08 	bl	800b230 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca20:	f000 f970 	bl	800cd04 <vPortExitCritical>
}
 800ca24:	bf00      	nop
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200010d8 	.word	0x200010d8
 800ca30:	200010a8 	.word	0x200010a8
 800ca34:	200010bc 	.word	0x200010bc
 800ca38:	200010d0 	.word	0x200010d0
 800ca3c:	200010d4 	.word	0x200010d4
 800ca40:	20001184 	.word	0x20001184
 800ca44:	200010e4 	.word	0x200010e4
 800ca48:	0800d500 	.word	0x0800d500

0800ca4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3b04      	subs	r3, #4
 800ca5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3b04      	subs	r3, #4
 800ca6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f023 0201 	bic.w	r2, r3, #1
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3b04      	subs	r3, #4
 800ca7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca7c:	4a0c      	ldr	r2, [pc, #48]	; (800cab0 <pxPortInitialiseStack+0x64>)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3b14      	subs	r3, #20
 800ca86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3b04      	subs	r3, #4
 800ca92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f06f 0202 	mvn.w	r2, #2
 800ca9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3b20      	subs	r3, #32
 800caa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800caa2:	68fb      	ldr	r3, [r7, #12]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr
 800cab0:	0800cab5 	.word	0x0800cab5

0800cab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cabe:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <prvTaskExitError+0x54>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cac6:	d00a      	beq.n	800cade <prvTaskExitError+0x2a>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	60fb      	str	r3, [r7, #12]
}
 800cada:	bf00      	nop
 800cadc:	e7fe      	b.n	800cadc <prvTaskExitError+0x28>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	60bb      	str	r3, [r7, #8]
}
 800caf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caf2:	bf00      	nop
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0fc      	beq.n	800caf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cafa:	bf00      	nop
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	2000000c 	.word	0x2000000c
 800cb0c:	00000000 	.word	0x00000000

0800cb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <pxCurrentTCBConst2>)
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	6808      	ldr	r0, [r1, #0]
 800cb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1a:	f380 8809 	msr	PSP, r0
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8811 	msr	BASEPRI, r0
 800cb2a:	4770      	bx	lr
 800cb2c:	f3af 8000 	nop.w

0800cb30 <pxCurrentTCBConst2>:
 800cb30:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop

0800cb38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb38:	4808      	ldr	r0, [pc, #32]	; (800cb5c <prvPortStartFirstTask+0x24>)
 800cb3a:	6800      	ldr	r0, [r0, #0]
 800cb3c:	6800      	ldr	r0, [r0, #0]
 800cb3e:	f380 8808 	msr	MSP, r0
 800cb42:	f04f 0000 	mov.w	r0, #0
 800cb46:	f380 8814 	msr	CONTROL, r0
 800cb4a:	b662      	cpsie	i
 800cb4c:	b661      	cpsie	f
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	df00      	svc	0
 800cb58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb5a:	bf00      	nop
 800cb5c:	e000ed08 	.word	0xe000ed08

0800cb60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb66:	4b46      	ldr	r3, [pc, #280]	; (800cc80 <xPortStartScheduler+0x120>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a46      	ldr	r2, [pc, #280]	; (800cc84 <xPortStartScheduler+0x124>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d10a      	bne.n	800cb86 <xPortStartScheduler+0x26>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	613b      	str	r3, [r7, #16]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb86:	4b3e      	ldr	r3, [pc, #248]	; (800cc80 <xPortStartScheduler+0x120>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a3f      	ldr	r2, [pc, #252]	; (800cc88 <xPortStartScheduler+0x128>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d10a      	bne.n	800cba6 <xPortStartScheduler+0x46>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	60fb      	str	r3, [r7, #12]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cba6:	4b39      	ldr	r3, [pc, #228]	; (800cc8c <xPortStartScheduler+0x12c>)
 800cba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	22ff      	movs	r2, #255	; 0xff
 800cbb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4b31      	ldr	r3, [pc, #196]	; (800cc90 <xPortStartScheduler+0x130>)
 800cbcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbce:	4b31      	ldr	r3, [pc, #196]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbd0:	2207      	movs	r2, #7
 800cbd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbd4:	e009      	b.n	800cbea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbd6:	4b2f      	ldr	r3, [pc, #188]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	4a2d      	ldr	r2, [pc, #180]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbea:	78fb      	ldrb	r3, [r7, #3]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbf2:	2b80      	cmp	r3, #128	; 0x80
 800cbf4:	d0ef      	beq.n	800cbd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbf6:	4b27      	ldr	r3, [pc, #156]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f1c3 0307 	rsb	r3, r3, #7
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d00a      	beq.n	800cc18 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	60bb      	str	r3, [r7, #8]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc18:	4b1e      	ldr	r3, [pc, #120]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	021b      	lsls	r3, r3, #8
 800cc1e:	4a1d      	ldr	r2, [pc, #116]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc22:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc2a:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc36:	4b18      	ldr	r3, [pc, #96]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a17      	ldr	r2, [pc, #92]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc42:	4b15      	ldr	r3, [pc, #84]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a14      	ldr	r2, [pc, #80]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc4e:	f000 f8dd 	bl	800ce0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc52:	4b12      	ldr	r3, [pc, #72]	; (800cc9c <xPortStartScheduler+0x13c>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc58:	f000 f8fc 	bl	800ce54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc5c:	4b10      	ldr	r3, [pc, #64]	; (800cca0 <xPortStartScheduler+0x140>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a0f      	ldr	r2, [pc, #60]	; (800cca0 <xPortStartScheduler+0x140>)
 800cc62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc68:	f7ff ff66 	bl	800cb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc6c:	f7fe ff4c 	bl	800bb08 <vTaskSwitchContext>
	prvTaskExitError();
 800cc70:	f7ff ff20 	bl	800cab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	e000ed00 	.word	0xe000ed00
 800cc84:	410fc271 	.word	0x410fc271
 800cc88:	410fc270 	.word	0x410fc270
 800cc8c:	e000e400 	.word	0xe000e400
 800cc90:	200011d4 	.word	0x200011d4
 800cc94:	200011d8 	.word	0x200011d8
 800cc98:	e000ed20 	.word	0xe000ed20
 800cc9c:	2000000c 	.word	0x2000000c
 800cca0:	e000ef34 	.word	0xe000ef34

0800cca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	607b      	str	r3, [r7, #4]
}
 800ccbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <vPortEnterCritical+0x58>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a0d      	ldr	r2, [pc, #52]	; (800ccfc <vPortEnterCritical+0x58>)
 800ccc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ccc8:	4b0c      	ldr	r3, [pc, #48]	; (800ccfc <vPortEnterCritical+0x58>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d10f      	bne.n	800ccf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <vPortEnterCritical+0x5c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	603b      	str	r3, [r7, #0]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <vPortEnterCritical+0x4a>
	}
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	2000000c 	.word	0x2000000c
 800cd00:	e000ed04 	.word	0xe000ed04

0800cd04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd0a:	4b12      	ldr	r3, [pc, #72]	; (800cd54 <vPortExitCritical+0x50>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10a      	bne.n	800cd28 <vPortExitCritical+0x24>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	607b      	str	r3, [r7, #4]
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd28:	4b0a      	ldr	r3, [pc, #40]	; (800cd54 <vPortExitCritical+0x50>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <vPortExitCritical+0x50>)
 800cd30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd32:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <vPortExitCritical+0x50>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d105      	bne.n	800cd46 <vPortExitCritical+0x42>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	f383 8811 	msr	BASEPRI, r3
}
 800cd44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	2000000c 	.word	0x2000000c
	...

0800cd60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd60:	f3ef 8009 	mrs	r0, PSP
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	4b15      	ldr	r3, [pc, #84]	; (800cdc0 <pxCurrentTCBConst>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	f01e 0f10 	tst.w	lr, #16
 800cd70:	bf08      	it	eq
 800cd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7a:	6010      	str	r0, [r2, #0]
 800cd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd84:	f380 8811 	msr	BASEPRI, r0
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f7fe feba 	bl	800bb08 <vTaskSwitchContext>
 800cd94:	f04f 0000 	mov.w	r0, #0
 800cd98:	f380 8811 	msr	BASEPRI, r0
 800cd9c:	bc09      	pop	{r0, r3}
 800cd9e:	6819      	ldr	r1, [r3, #0]
 800cda0:	6808      	ldr	r0, [r1, #0]
 800cda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda6:	f01e 0f10 	tst.w	lr, #16
 800cdaa:	bf08      	it	eq
 800cdac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdb0:	f380 8809 	msr	PSP, r0
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w

0800cdc0 <pxCurrentTCBConst>:
 800cdc0:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop

0800cdc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	607b      	str	r3, [r7, #4]
}
 800cde0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cde2:	f7fe fdd7 	bl	800b994 <xTaskIncrementTick>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdec:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <xPortSysTickHandler+0x40>)
 800cdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	f383 8811 	msr	BASEPRI, r3
}
 800cdfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce10:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <vPortSetupTimerInterrupt+0x34>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce16:	4b0b      	ldr	r3, [pc, #44]	; (800ce44 <vPortSetupTimerInterrupt+0x38>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce1c:	4b0a      	ldr	r3, [pc, #40]	; (800ce48 <vPortSetupTimerInterrupt+0x3c>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a0a      	ldr	r2, [pc, #40]	; (800ce4c <vPortSetupTimerInterrupt+0x40>)
 800ce22:	fba2 2303 	umull	r2, r3, r2, r3
 800ce26:	099b      	lsrs	r3, r3, #6
 800ce28:	4a09      	ldr	r2, [pc, #36]	; (800ce50 <vPortSetupTimerInterrupt+0x44>)
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce2e:	4b04      	ldr	r3, [pc, #16]	; (800ce40 <vPortSetupTimerInterrupt+0x34>)
 800ce30:	2207      	movs	r2, #7
 800ce32:	601a      	str	r2, [r3, #0]
}
 800ce34:	bf00      	nop
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	e000e010 	.word	0xe000e010
 800ce44:	e000e018 	.word	0xe000e018
 800ce48:	20000000 	.word	0x20000000
 800ce4c:	10624dd3 	.word	0x10624dd3
 800ce50:	e000e014 	.word	0xe000e014

0800ce54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce64 <vPortEnableVFP+0x10>
 800ce58:	6801      	ldr	r1, [r0, #0]
 800ce5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce5e:	6001      	str	r1, [r0, #0]
 800ce60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce62:	bf00      	nop
 800ce64:	e000ed88 	.word	0xe000ed88

0800ce68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce6e:	f3ef 8305 	mrs	r3, IPSR
 800ce72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b0f      	cmp	r3, #15
 800ce78:	d914      	bls.n	800cea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce7a:	4a17      	ldr	r2, [pc, #92]	; (800ced8 <vPortValidateInterruptPriority+0x70>)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce84:	4b15      	ldr	r3, [pc, #84]	; (800cedc <vPortValidateInterruptPriority+0x74>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	7afa      	ldrb	r2, [r7, #11]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d20a      	bcs.n	800cea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	607b      	str	r3, [r7, #4]
}
 800cea0:	bf00      	nop
 800cea2:	e7fe      	b.n	800cea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cea4:	4b0e      	ldr	r3, [pc, #56]	; (800cee0 <vPortValidateInterruptPriority+0x78>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ceac:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <vPortValidateInterruptPriority+0x7c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d90a      	bls.n	800ceca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	603b      	str	r3, [r7, #0]
}
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <vPortValidateInterruptPriority+0x60>
	}
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	e000e3f0 	.word	0xe000e3f0
 800cedc:	200011d4 	.word	0x200011d4
 800cee0:	e000ed0c 	.word	0xe000ed0c
 800cee4:	200011d8 	.word	0x200011d8

0800cee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	; 0x28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cef4:	f7fe fc80 	bl	800b7f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cef8:	4b5b      	ldr	r3, [pc, #364]	; (800d068 <pvPortMalloc+0x180>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d101      	bne.n	800cf04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf00:	f000 f920 	bl	800d144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf04:	4b59      	ldr	r3, [pc, #356]	; (800d06c <pvPortMalloc+0x184>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f040 8093 	bne.w	800d038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d01d      	beq.n	800cf54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf18:	2208      	movs	r2, #8
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f003 0307 	and.w	r3, r3, #7
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d014      	beq.n	800cf54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f023 0307 	bic.w	r3, r3, #7
 800cf30:	3308      	adds	r3, #8
 800cf32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f003 0307 	and.w	r3, r3, #7
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <pvPortMalloc+0x6c>
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	617b      	str	r3, [r7, #20]
}
 800cf50:	bf00      	nop
 800cf52:	e7fe      	b.n	800cf52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d06e      	beq.n	800d038 <pvPortMalloc+0x150>
 800cf5a:	4b45      	ldr	r3, [pc, #276]	; (800d070 <pvPortMalloc+0x188>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d869      	bhi.n	800d038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf64:	4b43      	ldr	r3, [pc, #268]	; (800d074 <pvPortMalloc+0x18c>)
 800cf66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf68:	4b42      	ldr	r3, [pc, #264]	; (800d074 <pvPortMalloc+0x18c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf6e:	e004      	b.n	800cf7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d903      	bls.n	800cf8c <pvPortMalloc+0xa4>
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1f1      	bne.n	800cf70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf8c:	4b36      	ldr	r3, [pc, #216]	; (800d068 <pvPortMalloc+0x180>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d050      	beq.n	800d038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2208      	movs	r2, #8
 800cf9c:	4413      	add	r3, r2
 800cf9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	1ad2      	subs	r2, r2, r3
 800cfb0:	2308      	movs	r3, #8
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d91f      	bls.n	800cff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <pvPortMalloc+0xf8>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	613b      	str	r3, [r7, #16]
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	1ad2      	subs	r2, r2, r3
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cff2:	69b8      	ldr	r0, [r7, #24]
 800cff4:	f000 f908 	bl	800d208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cff8:	4b1d      	ldr	r3, [pc, #116]	; (800d070 <pvPortMalloc+0x188>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	4a1b      	ldr	r2, [pc, #108]	; (800d070 <pvPortMalloc+0x188>)
 800d004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d006:	4b1a      	ldr	r3, [pc, #104]	; (800d070 <pvPortMalloc+0x188>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	4b1b      	ldr	r3, [pc, #108]	; (800d078 <pvPortMalloc+0x190>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d203      	bcs.n	800d01a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d012:	4b17      	ldr	r3, [pc, #92]	; (800d070 <pvPortMalloc+0x188>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a18      	ldr	r2, [pc, #96]	; (800d078 <pvPortMalloc+0x190>)
 800d018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685a      	ldr	r2, [r3, #4]
 800d01e:	4b13      	ldr	r3, [pc, #76]	; (800d06c <pvPortMalloc+0x184>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	431a      	orrs	r2, r3
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d02e:	4b13      	ldr	r3, [pc, #76]	; (800d07c <pvPortMalloc+0x194>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3301      	adds	r3, #1
 800d034:	4a11      	ldr	r2, [pc, #68]	; (800d07c <pvPortMalloc+0x194>)
 800d036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d038:	f7fe fbec 	bl	800b814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	f003 0307 	and.w	r3, r3, #7
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00a      	beq.n	800d05c <pvPortMalloc+0x174>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	60fb      	str	r3, [r7, #12]
}
 800d058:	bf00      	nop
 800d05a:	e7fe      	b.n	800d05a <pvPortMalloc+0x172>
	return pvReturn;
 800d05c:	69fb      	ldr	r3, [r7, #28]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3728      	adds	r7, #40	; 0x28
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20001d9c 	.word	0x20001d9c
 800d06c:	20001db0 	.word	0x20001db0
 800d070:	20001da0 	.word	0x20001da0
 800d074:	20001d94 	.word	0x20001d94
 800d078:	20001da4 	.word	0x20001da4
 800d07c:	20001da8 	.word	0x20001da8

0800d080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d04d      	beq.n	800d12e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d092:	2308      	movs	r3, #8
 800d094:	425b      	negs	r3, r3
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	4413      	add	r3, r2
 800d09a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	685a      	ldr	r2, [r3, #4]
 800d0a4:	4b24      	ldr	r3, [pc, #144]	; (800d138 <vPortFree+0xb8>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10a      	bne.n	800d0c4 <vPortFree+0x44>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	60fb      	str	r3, [r7, #12]
}
 800d0c0:	bf00      	nop
 800d0c2:	e7fe      	b.n	800d0c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00a      	beq.n	800d0e2 <vPortFree+0x62>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	60bb      	str	r3, [r7, #8]
}
 800d0de:	bf00      	nop
 800d0e0:	e7fe      	b.n	800d0e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	4b14      	ldr	r3, [pc, #80]	; (800d138 <vPortFree+0xb8>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d01e      	beq.n	800d12e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d11a      	bne.n	800d12e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	4b0e      	ldr	r3, [pc, #56]	; (800d138 <vPortFree+0xb8>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	43db      	mvns	r3, r3
 800d102:	401a      	ands	r2, r3
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d108:	f7fe fb76 	bl	800b7f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <vPortFree+0xbc>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4413      	add	r3, r2
 800d116:	4a09      	ldr	r2, [pc, #36]	; (800d13c <vPortFree+0xbc>)
 800d118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d11a:	6938      	ldr	r0, [r7, #16]
 800d11c:	f000 f874 	bl	800d208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d120:	4b07      	ldr	r3, [pc, #28]	; (800d140 <vPortFree+0xc0>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3301      	adds	r3, #1
 800d126:	4a06      	ldr	r2, [pc, #24]	; (800d140 <vPortFree+0xc0>)
 800d128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d12a:	f7fe fb73 	bl	800b814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d12e:	bf00      	nop
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20001db0 	.word	0x20001db0
 800d13c:	20001da0 	.word	0x20001da0
 800d140:	20001dac 	.word	0x20001dac

0800d144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d14a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d14e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d150:	4b27      	ldr	r3, [pc, #156]	; (800d1f0 <prvHeapInit+0xac>)
 800d152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00c      	beq.n	800d178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3307      	adds	r3, #7
 800d162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f023 0307 	bic.w	r3, r3, #7
 800d16a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	4a1f      	ldr	r2, [pc, #124]	; (800d1f0 <prvHeapInit+0xac>)
 800d174:	4413      	add	r3, r2
 800d176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d17c:	4a1d      	ldr	r2, [pc, #116]	; (800d1f4 <prvHeapInit+0xb0>)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d182:	4b1c      	ldr	r3, [pc, #112]	; (800d1f4 <prvHeapInit+0xb0>)
 800d184:	2200      	movs	r2, #0
 800d186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	4413      	add	r3, r2
 800d18e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d190:	2208      	movs	r2, #8
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	1a9b      	subs	r3, r3, r2
 800d196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f023 0307 	bic.w	r3, r3, #7
 800d19e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <prvHeapInit+0xb4>)
 800d1a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <prvHeapInit+0xb4>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1ae:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <prvHeapInit+0xb4>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	1ad2      	subs	r2, r2, r3
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1c4:	4b0c      	ldr	r3, [pc, #48]	; (800d1f8 <prvHeapInit+0xb4>)
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	4a0a      	ldr	r2, [pc, #40]	; (800d1fc <prvHeapInit+0xb8>)
 800d1d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	4a09      	ldr	r2, [pc, #36]	; (800d200 <prvHeapInit+0xbc>)
 800d1da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1dc:	4b09      	ldr	r3, [pc, #36]	; (800d204 <prvHeapInit+0xc0>)
 800d1de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d1e2:	601a      	str	r2, [r3, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	200011dc 	.word	0x200011dc
 800d1f4:	20001d94 	.word	0x20001d94
 800d1f8:	20001d9c 	.word	0x20001d9c
 800d1fc:	20001da4 	.word	0x20001da4
 800d200:	20001da0 	.word	0x20001da0
 800d204:	20001db0 	.word	0x20001db0

0800d208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d210:	4b28      	ldr	r3, [pc, #160]	; (800d2b4 <prvInsertBlockIntoFreeList+0xac>)
 800d212:	60fb      	str	r3, [r7, #12]
 800d214:	e002      	b.n	800d21c <prvInsertBlockIntoFreeList+0x14>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	60fb      	str	r3, [r7, #12]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	429a      	cmp	r2, r3
 800d224:	d8f7      	bhi.n	800d216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	68ba      	ldr	r2, [r7, #8]
 800d230:	4413      	add	r3, r2
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	429a      	cmp	r2, r3
 800d236:	d108      	bne.n	800d24a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	441a      	add	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	441a      	add	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d118      	bne.n	800d290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	4b15      	ldr	r3, [pc, #84]	; (800d2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	d00d      	beq.n	800d286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	441a      	add	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	e008      	b.n	800d298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d286:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	e003      	b.n	800d298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d002      	beq.n	800d2a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2a6:	bf00      	nop
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	20001d94 	.word	0x20001d94
 800d2b8:	20001d9c 	.word	0x20001d9c

0800d2bc <__libc_init_array>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	4d0d      	ldr	r5, [pc, #52]	; (800d2f4 <__libc_init_array+0x38>)
 800d2c0:	4c0d      	ldr	r4, [pc, #52]	; (800d2f8 <__libc_init_array+0x3c>)
 800d2c2:	1b64      	subs	r4, r4, r5
 800d2c4:	10a4      	asrs	r4, r4, #2
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	42a6      	cmp	r6, r4
 800d2ca:	d109      	bne.n	800d2e0 <__libc_init_array+0x24>
 800d2cc:	4d0b      	ldr	r5, [pc, #44]	; (800d2fc <__libc_init_array+0x40>)
 800d2ce:	4c0c      	ldr	r4, [pc, #48]	; (800d300 <__libc_init_array+0x44>)
 800d2d0:	f000 f8f2 	bl	800d4b8 <_init>
 800d2d4:	1b64      	subs	r4, r4, r5
 800d2d6:	10a4      	asrs	r4, r4, #2
 800d2d8:	2600      	movs	r6, #0
 800d2da:	42a6      	cmp	r6, r4
 800d2dc:	d105      	bne.n	800d2ea <__libc_init_array+0x2e>
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e4:	4798      	blx	r3
 800d2e6:	3601      	adds	r6, #1
 800d2e8:	e7ee      	b.n	800d2c8 <__libc_init_array+0xc>
 800d2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ee:	4798      	blx	r3
 800d2f0:	3601      	adds	r6, #1
 800d2f2:	e7f2      	b.n	800d2da <__libc_init_array+0x1e>
 800d2f4:	0800d61c 	.word	0x0800d61c
 800d2f8:	0800d61c 	.word	0x0800d61c
 800d2fc:	0800d61c 	.word	0x0800d61c
 800d300:	0800d620 	.word	0x0800d620

0800d304 <__retarget_lock_acquire_recursive>:
 800d304:	4770      	bx	lr

0800d306 <__retarget_lock_release_recursive>:
 800d306:	4770      	bx	lr

0800d308 <memcpy>:
 800d308:	440a      	add	r2, r1
 800d30a:	4291      	cmp	r1, r2
 800d30c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d310:	d100      	bne.n	800d314 <memcpy+0xc>
 800d312:	4770      	bx	lr
 800d314:	b510      	push	{r4, lr}
 800d316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d31e:	4291      	cmp	r1, r2
 800d320:	d1f9      	bne.n	800d316 <memcpy+0xe>
 800d322:	bd10      	pop	{r4, pc}

0800d324 <memset>:
 800d324:	4402      	add	r2, r0
 800d326:	4603      	mov	r3, r0
 800d328:	4293      	cmp	r3, r2
 800d32a:	d100      	bne.n	800d32e <memset+0xa>
 800d32c:	4770      	bx	lr
 800d32e:	f803 1b01 	strb.w	r1, [r3], #1
 800d332:	e7f9      	b.n	800d328 <memset+0x4>

0800d334 <cleanup_glue>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	460c      	mov	r4, r1
 800d338:	6809      	ldr	r1, [r1, #0]
 800d33a:	4605      	mov	r5, r0
 800d33c:	b109      	cbz	r1, 800d342 <cleanup_glue+0xe>
 800d33e:	f7ff fff9 	bl	800d334 <cleanup_glue>
 800d342:	4621      	mov	r1, r4
 800d344:	4628      	mov	r0, r5
 800d346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d34a:	f000 b869 	b.w	800d420 <_free_r>
	...

0800d350 <_reclaim_reent>:
 800d350:	4b2c      	ldr	r3, [pc, #176]	; (800d404 <_reclaim_reent+0xb4>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4283      	cmp	r3, r0
 800d356:	b570      	push	{r4, r5, r6, lr}
 800d358:	4604      	mov	r4, r0
 800d35a:	d051      	beq.n	800d400 <_reclaim_reent+0xb0>
 800d35c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d35e:	b143      	cbz	r3, 800d372 <_reclaim_reent+0x22>
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d14a      	bne.n	800d3fc <_reclaim_reent+0xac>
 800d366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d368:	6819      	ldr	r1, [r3, #0]
 800d36a:	b111      	cbz	r1, 800d372 <_reclaim_reent+0x22>
 800d36c:	4620      	mov	r0, r4
 800d36e:	f000 f857 	bl	800d420 <_free_r>
 800d372:	6961      	ldr	r1, [r4, #20]
 800d374:	b111      	cbz	r1, 800d37c <_reclaim_reent+0x2c>
 800d376:	4620      	mov	r0, r4
 800d378:	f000 f852 	bl	800d420 <_free_r>
 800d37c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d37e:	b111      	cbz	r1, 800d386 <_reclaim_reent+0x36>
 800d380:	4620      	mov	r0, r4
 800d382:	f000 f84d 	bl	800d420 <_free_r>
 800d386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d388:	b111      	cbz	r1, 800d390 <_reclaim_reent+0x40>
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 f848 	bl	800d420 <_free_r>
 800d390:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d392:	b111      	cbz	r1, 800d39a <_reclaim_reent+0x4a>
 800d394:	4620      	mov	r0, r4
 800d396:	f000 f843 	bl	800d420 <_free_r>
 800d39a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d39c:	b111      	cbz	r1, 800d3a4 <_reclaim_reent+0x54>
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 f83e 	bl	800d420 <_free_r>
 800d3a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d3a6:	b111      	cbz	r1, 800d3ae <_reclaim_reent+0x5e>
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f000 f839 	bl	800d420 <_free_r>
 800d3ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d3b0:	b111      	cbz	r1, 800d3b8 <_reclaim_reent+0x68>
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 f834 	bl	800d420 <_free_r>
 800d3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ba:	b111      	cbz	r1, 800d3c2 <_reclaim_reent+0x72>
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f000 f82f 	bl	800d420 <_free_r>
 800d3c2:	69a3      	ldr	r3, [r4, #24]
 800d3c4:	b1e3      	cbz	r3, 800d400 <_reclaim_reent+0xb0>
 800d3c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	4798      	blx	r3
 800d3cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3ce:	b1b9      	cbz	r1, 800d400 <_reclaim_reent+0xb0>
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3d6:	f7ff bfad 	b.w	800d334 <cleanup_glue>
 800d3da:	5949      	ldr	r1, [r1, r5]
 800d3dc:	b941      	cbnz	r1, 800d3f0 <_reclaim_reent+0xa0>
 800d3de:	3504      	adds	r5, #4
 800d3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e2:	2d80      	cmp	r5, #128	; 0x80
 800d3e4:	68d9      	ldr	r1, [r3, #12]
 800d3e6:	d1f8      	bne.n	800d3da <_reclaim_reent+0x8a>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 f819 	bl	800d420 <_free_r>
 800d3ee:	e7ba      	b.n	800d366 <_reclaim_reent+0x16>
 800d3f0:	680e      	ldr	r6, [r1, #0]
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f000 f814 	bl	800d420 <_free_r>
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	e7ef      	b.n	800d3dc <_reclaim_reent+0x8c>
 800d3fc:	2500      	movs	r5, #0
 800d3fe:	e7ef      	b.n	800d3e0 <_reclaim_reent+0x90>
 800d400:	bd70      	pop	{r4, r5, r6, pc}
 800d402:	bf00      	nop
 800d404:	20000010 	.word	0x20000010

0800d408 <__malloc_lock>:
 800d408:	4801      	ldr	r0, [pc, #4]	; (800d410 <__malloc_lock+0x8>)
 800d40a:	f7ff bf7b 	b.w	800d304 <__retarget_lock_acquire_recursive>
 800d40e:	bf00      	nop
 800d410:	20001db4 	.word	0x20001db4

0800d414 <__malloc_unlock>:
 800d414:	4801      	ldr	r0, [pc, #4]	; (800d41c <__malloc_unlock+0x8>)
 800d416:	f7ff bf76 	b.w	800d306 <__retarget_lock_release_recursive>
 800d41a:	bf00      	nop
 800d41c:	20001db4 	.word	0x20001db4

0800d420 <_free_r>:
 800d420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d422:	2900      	cmp	r1, #0
 800d424:	d044      	beq.n	800d4b0 <_free_r+0x90>
 800d426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42a:	9001      	str	r0, [sp, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f1a1 0404 	sub.w	r4, r1, #4
 800d432:	bfb8      	it	lt
 800d434:	18e4      	addlt	r4, r4, r3
 800d436:	f7ff ffe7 	bl	800d408 <__malloc_lock>
 800d43a:	4a1e      	ldr	r2, [pc, #120]	; (800d4b4 <_free_r+0x94>)
 800d43c:	9801      	ldr	r0, [sp, #4]
 800d43e:	6813      	ldr	r3, [r2, #0]
 800d440:	b933      	cbnz	r3, 800d450 <_free_r+0x30>
 800d442:	6063      	str	r3, [r4, #4]
 800d444:	6014      	str	r4, [r2, #0]
 800d446:	b003      	add	sp, #12
 800d448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d44c:	f7ff bfe2 	b.w	800d414 <__malloc_unlock>
 800d450:	42a3      	cmp	r3, r4
 800d452:	d908      	bls.n	800d466 <_free_r+0x46>
 800d454:	6825      	ldr	r5, [r4, #0]
 800d456:	1961      	adds	r1, r4, r5
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf01      	itttt	eq
 800d45c:	6819      	ldreq	r1, [r3, #0]
 800d45e:	685b      	ldreq	r3, [r3, #4]
 800d460:	1949      	addeq	r1, r1, r5
 800d462:	6021      	streq	r1, [r4, #0]
 800d464:	e7ed      	b.n	800d442 <_free_r+0x22>
 800d466:	461a      	mov	r2, r3
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	b10b      	cbz	r3, 800d470 <_free_r+0x50>
 800d46c:	42a3      	cmp	r3, r4
 800d46e:	d9fa      	bls.n	800d466 <_free_r+0x46>
 800d470:	6811      	ldr	r1, [r2, #0]
 800d472:	1855      	adds	r5, r2, r1
 800d474:	42a5      	cmp	r5, r4
 800d476:	d10b      	bne.n	800d490 <_free_r+0x70>
 800d478:	6824      	ldr	r4, [r4, #0]
 800d47a:	4421      	add	r1, r4
 800d47c:	1854      	adds	r4, r2, r1
 800d47e:	42a3      	cmp	r3, r4
 800d480:	6011      	str	r1, [r2, #0]
 800d482:	d1e0      	bne.n	800d446 <_free_r+0x26>
 800d484:	681c      	ldr	r4, [r3, #0]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	6053      	str	r3, [r2, #4]
 800d48a:	4421      	add	r1, r4
 800d48c:	6011      	str	r1, [r2, #0]
 800d48e:	e7da      	b.n	800d446 <_free_r+0x26>
 800d490:	d902      	bls.n	800d498 <_free_r+0x78>
 800d492:	230c      	movs	r3, #12
 800d494:	6003      	str	r3, [r0, #0]
 800d496:	e7d6      	b.n	800d446 <_free_r+0x26>
 800d498:	6825      	ldr	r5, [r4, #0]
 800d49a:	1961      	adds	r1, r4, r5
 800d49c:	428b      	cmp	r3, r1
 800d49e:	bf04      	itt	eq
 800d4a0:	6819      	ldreq	r1, [r3, #0]
 800d4a2:	685b      	ldreq	r3, [r3, #4]
 800d4a4:	6063      	str	r3, [r4, #4]
 800d4a6:	bf04      	itt	eq
 800d4a8:	1949      	addeq	r1, r1, r5
 800d4aa:	6021      	streq	r1, [r4, #0]
 800d4ac:	6054      	str	r4, [r2, #4]
 800d4ae:	e7ca      	b.n	800d446 <_free_r+0x26>
 800d4b0:	b003      	add	sp, #12
 800d4b2:	bd30      	pop	{r4, r5, pc}
 800d4b4:	20001db8 	.word	0x20001db8

0800d4b8 <_init>:
 800d4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ba:	bf00      	nop
 800d4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4be:	bc08      	pop	{r3}
 800d4c0:	469e      	mov	lr, r3
 800d4c2:	4770      	bx	lr

0800d4c4 <_fini>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	bf00      	nop
 800d4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ca:	bc08      	pop	{r3}
 800d4cc:	469e      	mov	lr, r3
 800d4ce:	4770      	bx	lr
