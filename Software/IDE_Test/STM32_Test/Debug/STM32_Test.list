
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d490  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7ac  0800d7ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7ac  0800d7ac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7ac  0800d7ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d94  20000074  0800d828  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e08  0800d828  00021e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000569a  00000000  00000000  0004c79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002570  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  000543b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ba9  00000000  00000000  000566c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b86a  00000000  00000000  0005d271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014fd0a  00000000  00000000  00088adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d87e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2b8  00000000  00000000  001d8838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d638 	.word	0x0800d638

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800d638 	.word	0x0800d638

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f001 f965 	bl	80014d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f84c 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 fa84 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 8000210:	f000 f9f2 	bl	80005f8 <MX_DMA_Init>
  MX_FMC_Init();
 8000214:	f000 fa1a 	bl	800064c <MX_FMC_Init>
  MX_I2C1_Init();
 8000218:	f000 f94e 	bl	80004b8 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 800021c:	f000 f98c 	bl	8000538 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000220:	f000 f9ac 	bl	800057c <MX_SPI2_Init>
  MX_CAN1_Init();
 8000224:	f000 f912 	bl	800044c <MX_CAN1_Init>
  MX_ADC1_Init();
 8000228:	f000 f88a 	bl	8000340 <MX_ADC1_Init>
  MX_FATFS_Init();
 800022c:	f009 f900 	bl	8009430 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f009 fbfc 	bl	8009a2c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000234:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x78>)
 8000236:	f009 fd27 	bl	8009c88 <osMutexNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <main+0x7c>)
 800023e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ADC_sem */
  ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x80>)
 8000242:	2101      	movs	r1, #1
 8000244:	2001      	movs	r0, #1
 8000246:	f009 fda5 	bl	8009d94 <osSemaphoreNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <main+0x84>)
 800024e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <main+0x88>)
 8000252:	2100      	movs	r1, #0
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <main+0x8c>)
 8000256:	f009 fc6a 	bl	8009b2e <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <main+0x90>)
 800025e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000260:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <main+0x94>)
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <main+0x98>)
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <main+0x9c>)
 8000266:	f009 fc62 	bl	8009b2e <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <main+0xa0>)
 800026e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000270:	f009 fc22 	bl	8009ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x74>
 8000276:	bf00      	nop
 8000278:	0800d6ac 	.word	0x0800d6ac
 800027c:	20000320 	.word	0x20000320
 8000280:	0800d6bc 	.word	0x0800d6bc
 8000284:	20000374 	.word	0x20000374
 8000288:	0800d688 	.word	0x0800d688
 800028c:	08000c09 	.word	0x08000c09
 8000290:	2000031c 	.word	0x2000031c
 8000294:	0800d6cc 	.word	0x0800d6cc
 8000298:	200000a4 	.word	0x200000a4
 800029c:	08000bd5 	.word	0x08000bd5
 80002a0:	200003c8 	.word	0x200003c8

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b096      	sub	sp, #88	; 0x58
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2244      	movs	r2, #68	; 0x44
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f00d f8f6 	bl	800d4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002c6:	2000      	movs	r0, #0
 80002c8:	f003 fb90 	bl	80039ec <HAL_PWREx_ControlVoltageScaling>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002d2:	f000 fcc5 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	2302      	movs	r3, #2
 80002e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	2303      	movs	r3, #3
 80002e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80002e8:	2302      	movs	r3, #2
 80002ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80002ec:	231e      	movs	r3, #30
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f8:	2302      	movs	r3, #2
 80002fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4618      	mov	r0, r3
 8000302:	f003 fc27 	bl	8003b54 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800030c:	f000 fca8 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2303      	movs	r3, #3
 8000316:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	2105      	movs	r1, #5
 8000328:	4618      	mov	r0, r3
 800032a:	f004 f82d 	bl	8004388 <HAL_RCC_ClockConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000334:	f000 fc94 	bl	8000c60 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3758      	adds	r7, #88	; 0x58
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	463b      	mov	r3, r7
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
 8000354:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000356:	4b38      	ldr	r3, [pc, #224]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000358:	4a38      	ldr	r2, [pc, #224]	; (800043c <MX_ADC1_Init+0xfc>)
 800035a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035c:	4b36      	ldr	r3, [pc, #216]	; (8000438 <MX_ADC1_Init+0xf8>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b35      	ldr	r3, [pc, #212]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <MX_ADC1_Init+0xf8>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800036e:	4b32      	ldr	r3, [pc, #200]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000370:	2201      	movs	r2, #1
 8000372:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000374:	4b30      	ldr	r3, [pc, #192]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000376:	2204      	movs	r2, #4
 8000378:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037a:	4b2f      	ldr	r3, [pc, #188]	; (8000438 <MX_ADC1_Init+0xf8>)
 800037c:	2200      	movs	r2, #0
 800037e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000380:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000382:	2200      	movs	r2, #0
 8000384:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000386:	4b2c      	ldr	r3, [pc, #176]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000388:	2203      	movs	r2, #3
 800038a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038c:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <MX_ADC1_Init+0xf8>)
 800038e:	2200      	movs	r2, #0
 8000390:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b28      	ldr	r3, [pc, #160]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000396:	2200      	movs	r2, #0
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_ADC1_Init+0xf8>)
 800039c:	2200      	movs	r2, #0
 800039e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <MX_ADC1_Init+0xf8>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <MX_ADC1_Init+0xf8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003ae:	4b22      	ldr	r3, [pc, #136]	; (8000438 <MX_ADC1_Init+0xf8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <MX_ADC1_Init+0xf8>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003bc:	481e      	ldr	r0, [pc, #120]	; (8000438 <MX_ADC1_Init+0xf8>)
 80003be:	f001 fad3 	bl	8001968 <HAL_ADC_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003c8:	f000 fc4a 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_ADC1_Init+0x100>)
 80003ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d0:	2306      	movs	r3, #6
 80003d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003d8:	237f      	movs	r3, #127	; 0x7f
 80003da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003dc:	2304      	movs	r3, #4
 80003de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e4:	463b      	mov	r3, r7
 80003e6:	4619      	mov	r1, r3
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_ADC1_Init+0xf8>)
 80003ea:	f001 fe5f 	bl	80020ac <HAL_ADC_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80003f4:	f000 fc34 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_ADC1_Init+0x104>)
 80003fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003fc:	230c      	movs	r3, #12
 80003fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4619      	mov	r1, r3
 8000404:	480c      	ldr	r0, [pc, #48]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000406:	f001 fe51 	bl	80020ac <HAL_ADC_ConfigChannel>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000410:	f000 fc26 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_ADC1_Init+0x108>)
 8000416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000418:	2312      	movs	r3, #18
 800041a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_ADC1_Init+0xf8>)
 8000422:	f001 fe43 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800042c:	f000 fc18 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200000a4 	.word	0x200000a4
 800043c:	50040000 	.word	0x50040000
 8000440:	14f00020 	.word	0x14f00020
 8000444:	19200040 	.word	0x19200040
 8000448:	1d500080 	.word	0x1d500080

0800044c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <MX_CAN1_Init+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000458:	2214      	movs	r2, #20
 800045a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_CAN1_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_CAN1_Init+0x64>)
 800046a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800046e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000472:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000476:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <MX_CAN1_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_CAN1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_CAN1_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_CAN1_Init+0x64>)
 800049e:	f002 fb4d 	bl	8002b3c <HAL_CAN_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80004a8:	f000 fbda 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000016c 	.word	0x2000016c
 80004b4:	40006400 	.word	0x40006400

080004b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_I2C1_Init+0x74>)
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <MX_I2C1_Init+0x78>)
 80004c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_I2C1_Init+0x74>)
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <MX_I2C1_Init+0x7c>)
 80004c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_I2C1_Init+0x74>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_I2C1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_I2C1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f2:	480e      	ldr	r0, [pc, #56]	; (800052c <MX_I2C1_Init+0x74>)
 80004f4:	f003 f934 	bl	8003760 <HAL_I2C_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004fe:	f000 fbaf 	bl	8000c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000502:	2100      	movs	r1, #0
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <MX_I2C1_Init+0x74>)
 8000506:	f003 f9ba 	bl	800387e <HAL_I2CEx_ConfigAnalogFilter>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000510:	f000 fba6 	bl	8000c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000514:	2100      	movs	r1, #0
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_I2C1_Init+0x74>)
 8000518:	f003 f9fc 	bl	8003914 <HAL_I2CEx_ConfigDigitalFilter>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f000 fb9d 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000194 	.word	0x20000194
 8000530:	40005400 	.word	0x40005400
 8000534:	307075b1 	.word	0x307075b1

08000538 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_SDMMC1_SD_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 8000550:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000554:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <MX_SDMMC1_SD_Init+0x3c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200001e8 	.word	0x200001e8
 8000578:	50062400 	.word	0x50062400

0800057c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_SPI2_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800058c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000596:	f44f 7240 	mov.w	r2, #768	; 0x300
 800059a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_SPI2_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005ca:	2207      	movs	r2, #7
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005dc:	f007 fc5f 	bl	8007e9e <HAL_SPI_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 fb3b 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000268 	.word	0x20000268
 80005f4:	40003800 	.word	0x40003800

080005f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_DMA_Init+0x50>)
 8000600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <MX_DMA_Init+0x50>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6493      	str	r3, [r2, #72]	; 0x48
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_DMA_Init+0x50>)
 800060c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DMA_Init+0x50>)
 8000618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <MX_DMA_Init+0x50>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6493      	str	r3, [r2, #72]	; 0x48
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DMA_Init+0x50>)
 8000624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	200b      	movs	r0, #11
 8000634:	f002 fc36 	bl	8002ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000638:	200b      	movs	r0, #11
 800063a:	f002 fc4f 	bl	8002edc <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2220      	movs	r2, #32
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f00c ff23 	bl	800d4a4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800065e:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <MX_FMC_Init+0xc4>)
 8000660:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000664:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <MX_FMC_Init+0xc4>)
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_FMC_Init+0xc8>)
 800066a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_FMC_Init+0xc4>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_FMC_Init+0xc4>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_FMC_Init+0xc4>)
 800067a:	2204      	movs	r2, #4
 800067c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MX_FMC_Init+0xc4>)
 8000680:	2210      	movs	r2, #16
 8000682:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_FMC_Init+0xc4>)
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_FMC_Init+0xc4>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_FMC_Init+0xc4>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_FMC_Init+0xc4>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_FMC_Init+0xc4>)
 80006a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_FMC_Init+0xc4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_FMC_Init+0xc4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_FMC_Init+0xc4>)
 80006b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_FMC_Init+0xc4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_FMC_Init+0xc4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_FMC_Init+0xc4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_FMC_Init+0xc4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80006d2:	230f      	movs	r3, #15
 80006d4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80006d6:	230f      	movs	r3, #15
 80006d8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80006da:	23ff      	movs	r3, #255	; 0xff
 80006dc:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80006e2:	230f      	movs	r3, #15
 80006e4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80006e6:	2310      	movs	r3, #16
 80006e8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_FMC_Init+0xc4>)
 80006fa:	f007 fc73 	bl	8007fe4 <HAL_SRAM_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000704:	f000 faac 	bl	8000c60 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200002cc 	.word	0x200002cc
 8000714:	a0000104 	.word	0xa0000104

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800072e:	4bb2      	ldr	r3, [pc, #712]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4ab1      	ldr	r2, [pc, #708]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4baf      	ldr	r3, [pc, #700]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000742:	623b      	str	r3, [r7, #32]
 8000744:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4bac      	ldr	r3, [pc, #688]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4aab      	ldr	r2, [pc, #684]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4ba9      	ldr	r3, [pc, #676]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4ba6      	ldr	r3, [pc, #664]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4aa5      	ldr	r2, [pc, #660]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4ba3      	ldr	r3, [pc, #652]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4ba0      	ldr	r3, [pc, #640]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a9f      	ldr	r2, [pc, #636]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b9d      	ldr	r3, [pc, #628]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b9a      	ldr	r3, [pc, #616]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a99      	ldr	r2, [pc, #612]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b97      	ldr	r3, [pc, #604]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	4b94      	ldr	r3, [pc, #592]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a93      	ldr	r2, [pc, #588]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80007be:	f003 f9b9 	bl	8003b34 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	4b8d      	ldr	r3, [pc, #564]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b8a      	ldr	r3, [pc, #552]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b87      	ldr	r3, [pc, #540]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a86      	ldr	r2, [pc, #536]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b84      	ldr	r3, [pc, #528]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b81      	ldr	r3, [pc, #516]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a80      	ldr	r2, [pc, #512]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b7e      	ldr	r3, [pc, #504]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f244 0114 	movw	r1, #16404	; 0x4014
 8000810:	487a      	ldr	r0, [pc, #488]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000812:	f002 ff8d 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	4878      	ldr	r0, [pc, #480]	; (8000a00 <MX_GPIO_Init+0x2e8>)
 800081e:	f002 ff87 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f002 ff81 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2104      	movs	r1, #4
 8000832:	4874      	ldr	r0, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 8000834:	f002 ff7c 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000838:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800084a:	2305      	movs	r3, #5
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	486c      	ldr	r0, [pc, #432]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 8000856:	f002 fdc1 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800085a:	f244 0314 	movw	r3, #16404	; 0x4014
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	4862      	ldr	r0, [pc, #392]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000874:	f002 fdb2 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000878:	2310      	movs	r3, #16
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	485c      	ldr	r0, [pc, #368]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 8000894:	f002 fda2 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008aa:	2307      	movs	r3, #7
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f002 fd90 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80008bc:	23b0      	movs	r3, #176	; 0xb0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80008cc:	230a      	movs	r3, #10
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	484c      	ldr	r0, [pc, #304]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 80008d8:	f002 fd80 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80008dc:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80008ee:	230d      	movs	r3, #13
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 80008fa:	f002 fd6f 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80008fe:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000910:	2305      	movs	r3, #5
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	483c      	ldr	r0, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x2f4>)
 800091c:	f002 fd5e 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000920:	2302      	movs	r3, #2
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	4834      	ldr	r0, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 8000936:	f002 fd51 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 800093a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800094c:	230a      	movs	r3, #10
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000958:	f002 fd40 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800096e:	2303      	movs	r3, #3
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x2e4>)
 800097a:	f002 fd2f 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 800097e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000990:	2305      	movs	r3, #5
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_GPIO_Init+0x2e4>)
 800099c:	f002 fd1e 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009b0:	230d      	movs	r3, #13
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4815      	ldr	r0, [pc, #84]	; (8000a10 <MX_GPIO_Init+0x2f8>)
 80009bc:	f002 fd0e 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 80009c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d2:	230a      	movs	r3, #10
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f002 fcfc 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
 80009f6:	e00d      	b.n	8000a14 <MX_GPIO_Init+0x2fc>
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48001c00 	.word	0x48001c00
 8000a00:	48000800 	.word	0x48000800
 8000a04:	48000400 	.word	0x48000400
 8000a08:	48002000 	.word	0x48002000
 8000a0c:	48001800 	.word	0x48001800
 8000a10:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4862      	ldr	r0, [pc, #392]	; (8000ba4 <MX_GPIO_Init+0x48c>)
 8000a1c:	f002 fcde 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000a20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a26:	2312      	movs	r3, #18
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a32:	2304      	movs	r3, #4
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	485a      	ldr	r0, [pc, #360]	; (8000ba8 <MX_GPIO_Init+0x490>)
 8000a3e:	f002 fccd 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4853      	ldr	r0, [pc, #332]	; (8000ba4 <MX_GPIO_Init+0x48c>)
 8000a58:	f002 fcc0 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000a5c:	2384      	movs	r3, #132	; 0x84
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	484b      	ldr	r0, [pc, #300]	; (8000ba4 <MX_GPIO_Init+0x48c>)
 8000a78:	f002 fcb0 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4844      	ldr	r0, [pc, #272]	; (8000bac <MX_GPIO_Init+0x494>)
 8000a9a:	f002 fc9f 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	483a      	ldr	r0, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x48c>)
 8000aba:	f002 fc8f 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000abe:	2320      	movs	r3, #32
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f002 fc82 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f002 fc73 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000af6:	2308      	movs	r3, #8
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f002 fc62 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <MX_GPIO_Init+0x498>)
 8000b36:	f002 fc51 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f002 fc40 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	480e      	ldr	r0, [pc, #56]	; (8000bac <MX_GPIO_Init+0x494>)
 8000b74:	f002 fc32 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b8a:	2306      	movs	r3, #6
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_GPIO_Init+0x494>)
 8000b96:	f002 fc21 	bl	80033dc <HAL_GPIO_Init>

}
 8000b9a:	bf00      	nop
 8000b9c:	3738      	adds	r7, #56	; 0x38
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48001800 	.word	0x48001800
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48001400 	.word	0x48001400

08000bb4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(ADC_semHandle);
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f009 f9c3 	bl	8009f4c <osSemaphoreRelease>

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000374 	.word	0x20000374

08000bd4 <ADC_collect>:
void ADC_collect(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	ADC_HandleTypeDef *hadc = argument;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer, 9);
 8000be0:	2209      	movs	r2, #9
 8000be2:	4907      	ldr	r1, [pc, #28]	; (8000c00 <ADC_collect+0x2c>)
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f001 f80b 	bl	8001c00 <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <ADC_collect+0x30>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f009 f958 	bl	8009ea8 <osSemaphoreAcquire>
    osDelay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f009 f82a 	bl	8009c52 <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 8000bfe:	e7f4      	b.n	8000bea <ADC_collect+0x16>
 8000c00:	20000090 	.word	0x20000090
 8000c04:	20000374 	.word	0x20000374

08000c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	ADC_HandleTypeDef *hadc = argument;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer, 9);
 8000c14:	2209      	movs	r2, #9
 8000c16:	4907      	ldr	r1, [pc, #28]	; (8000c34 <StartDefaultTask+0x2c>)
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 fff1 	bl	8001c00 <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <StartDefaultTask+0x30>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c26:	4618      	mov	r0, r3
 8000c28:	f009 f93e 	bl	8009ea8 <osSemaphoreAcquire>
    osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f009 f810 	bl	8009c52 <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 8000c32:	e7f4      	b.n	8000c1e <StartDefaultTask+0x16>
 8000c34:	20000090 	.word	0x20000090
 8000c38:	20000374 	.word	0x20000374

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4e:	f000 fc59 	bl	8001504 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40001000 	.word	0x40001000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	; 0x58
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f002 f8fb 	bl	8002ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b2      	sub	sp, #200	; 0xc8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	229c      	movs	r2, #156	; 0x9c
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00c fbe1 	bl	800d4a4 <memset>
  if(hadc->Instance==ADC1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a5c      	ldr	r2, [pc, #368]	; (8000e58 <HAL_ADC_MspInit+0x19c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	f040 80b1 	bne.w	8000e50 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d04:	2308      	movs	r3, #8
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 fe1e 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000d2a:	f7ff ff99 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b48      	ldr	r3, [pc, #288]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a44      	ldr	r2, [pc, #272]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a3e      	ldr	r2, [pc, #248]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a38      	ldr	r2, [pc, #224]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_ADC_MspInit+0x1a0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d8e:	2318      	movs	r3, #24
 8000d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d94:	230b      	movs	r3, #11
 8000d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000da4:	4619      	mov	r1, r3
 8000da6:	482e      	ldr	r0, [pc, #184]	; (8000e60 <HAL_ADC_MspInit+0x1a4>)
 8000da8:	f002 fb18 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000dac:	2387      	movs	r3, #135	; 0x87
 8000dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000db2:	230b      	movs	r3, #11
 8000db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f002 fb08 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000de2:	4619      	mov	r1, r3
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <HAL_ADC_MspInit+0x1a8>)
 8000de6:	f002 faf9 	bl	80033dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000dec:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_ADC_MspInit+0x1b0>)
 8000dee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000df2:	2205      	movs	r2, #5
 8000df4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e26:	f002 f867 	bl	8002ef8 <HAL_DMA_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000e30:	f7ff ff16 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e38:	651a      	str	r2, [r3, #80]	; 0x50
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_ADC_MspInit+0x1ac>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2105      	movs	r1, #5
 8000e44:	2012      	movs	r0, #18
 8000e46:	f002 f82d 	bl	8002ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e4a:	2012      	movs	r0, #18
 8000e4c:	f002 f846 	bl	8002edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	37c8      	adds	r7, #200	; 0xc8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	50040000 	.word	0x50040000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48000800 	.word	0x48000800
 8000e64:	48000400 	.word	0x48000400
 8000e68:	2000010c 	.word	0x2000010c
 8000e6c:	40020008 	.word	0x40020008

08000e70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_CAN_MspInit+0x80>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d129      	bne.n	8000ee6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_CAN_MspInit+0x84>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_CAN_MspInit+0x84>)
 8000e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_CAN_MspInit+0x84>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_CAN_MspInit+0x84>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <HAL_CAN_MspInit+0x84>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_CAN_MspInit+0x84>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000ec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ed4:	2309      	movs	r3, #9
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f002 fa7b 	bl	80033dc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40006400 	.word	0x40006400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b2      	sub	sp, #200	; 0xc8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	229c      	movs	r2, #156	; 0x9c
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00c fac3 	bl	800d4a4 <memset>
  if(hi2c->Instance==I2C1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a33      	ldr	r2, [pc, #204]	; (8000ff0 <HAL_I2C_MspInit+0xf8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d15e      	bne.n	8000fe6 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fd13 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f40:	f7ff fe8e 	bl	8000c60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	4a2a      	ldr	r2, [pc, #168]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f74:	f002 fdde 	bl	8003b34 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f90:	2304      	movs	r3, #4
 8000f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <HAL_I2C_MspInit+0x100>)
 8000f9e:	f002 fa1d 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000faa:	2312      	movs	r3, #18
 8000fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <HAL_I2C_MspInit+0x104>)
 8000fca:	f002 fa07 	bl	80033dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_I2C_MspInit+0xfc>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	37c8      	adds	r7, #200	; 0xc8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48001800 	.word	0x48001800

08001000 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0b2      	sub	sp, #200	; 0xc8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	229c      	movs	r2, #156	; 0x9c
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f00c fa3f 	bl	800d4a4 <memset>
  if(hsd->Instance==SDMMC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a37      	ldr	r2, [pc, #220]	; (8001108 <HAL_SD_MspInit+0x108>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d167      	bne.n	8001100 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001030:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001034:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800103a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fc8c 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800104e:	f7ff fe07 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a2d      	ldr	r2, [pc, #180]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_SD_MspInit+0x10c>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a27      	ldr	r2, [pc, #156]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a21      	ldr	r2, [pc, #132]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_SD_MspInit+0x10c>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800109a:	2304      	movs	r3, #4
 800109c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010b2:	230c      	movs	r3, #12
 80010b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010bc:	4619      	mov	r1, r3
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <HAL_SD_MspInit+0x110>)
 80010c0:	f002 f98c 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80010c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010de:	230c      	movs	r3, #12
 80010e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010e8:	4619      	mov	r1, r3
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <HAL_SD_MspInit+0x114>)
 80010ec:	f002 f976 	bl	80033dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2105      	movs	r1, #5
 80010f4:	2031      	movs	r0, #49	; 0x31
 80010f6:	f001 fed5 	bl	8002ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80010fa:	2031      	movs	r0, #49	; 0x31
 80010fc:	f001 feee 	bl	8002edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	37c8      	adds	r7, #200	; 0xc8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	50062400 	.word	0x50062400
 800110c:	40021000 	.word	0x40021000
 8001110:	48000c00 	.word	0x48000c00
 8001114:	48000800 	.word	0x48000800

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <HAL_SPI_MspInit+0xb4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d144      	bne.n	80011c4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6593      	str	r3, [r2, #88]	; 0x58
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_SPI_MspInit+0xb8>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001192:	2305      	movs	r3, #5
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <HAL_SPI_MspInit+0xbc>)
 800119e:	f002 f91d 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80011a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b4:	2305      	movs	r3, #5
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <HAL_SPI_MspInit+0xc0>)
 80011c0:	f002 f90c 	bl	80033dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40003800 	.word	0x40003800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48002000 	.word	0x48002000
 80011d8:	48000400 	.word	0x48000400

080011dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_FMC_MspInit+0xe0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d15d      	bne.n	80012b4 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_FMC_MspInit+0xe0>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_FMC_MspInit+0xe4>)
 8001200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_FMC_MspInit+0xe4>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6513      	str	r3, [r2, #80]	; 0x50
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_FMC_MspInit+0xe4>)
 800120c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001216:	f64f 739b 	movw	r3, #65435	; 0xff9b
 800121a:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001228:	230c      	movs	r3, #12
 800122a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4824      	ldr	r0, [pc, #144]	; (80012c4 <HAL_FMC_MspInit+0xe8>)
 8001232:	f002 f8d3 	bl	80033dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001236:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800123a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001248:	230c      	movs	r3, #12
 800124a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	481d      	ldr	r0, [pc, #116]	; (80012c8 <HAL_FMC_MspInit+0xec>)
 8001252:	f002 f8c3 	bl	80033dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_FMC_MspInit+0xf0>)
 8001270:	f002 f8b4 	bl	80033dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001274:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001278:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_FMC_MspInit+0xf4>)
 8001290:	f002 f8a4 	bl	80033dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001294:	233f      	movs	r3, #63	; 0x3f
 8001296:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a4:	230c      	movs	r3, #12
 80012a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <HAL_FMC_MspInit+0xf8>)
 80012ae:	f002 f895 	bl	80033dc <HAL_GPIO_Init>
 80012b2:	e000      	b.n	80012b6 <HAL_FMC_MspInit+0xda>
    return;
 80012b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200003cc 	.word	0x200003cc
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48001000 	.word	0x48001000
 80012c8:	48000c00 	.word	0x48000c00
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48001400 	.word	0x48001400
 80012d4:	48001800 	.word	0x48001800

080012d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012e0:	f7ff ff7c 	bl	80011dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_InitTick+0xe0>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a33      	ldr	r2, [pc, #204]	; (80013cc <HAL_InitTick+0xe0>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_InitTick+0xe0>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001312:	f107 0210 	add.w	r2, r7, #16
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fa2f 	bl	8004780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800132c:	f003 f9fc 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8001330:	6378      	str	r0, [r7, #52]	; 0x34
 8001332:	e004      	b.n	800133e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001334:	f003 f9f8 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8001338:	4603      	mov	r3, r0
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001340:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <HAL_InitTick+0xe4>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	3b01      	subs	r3, #1
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_InitTick+0xe8>)
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_InitTick+0xec>)
 8001350:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_InitTick+0xe8>)
 8001354:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001358:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_InitTick+0xe8>)
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_InitTick+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_InitTick+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_InitTick+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001372:	4818      	ldr	r0, [pc, #96]	; (80013d4 <HAL_InitTick+0xe8>)
 8001374:	f006 fe7e 	bl	8008074 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800137e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001382:	2b00      	cmp	r3, #0
 8001384:	d11b      	bne.n	80013be <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001386:	4813      	ldr	r0, [pc, #76]	; (80013d4 <HAL_InitTick+0xe8>)
 8001388:	f006 fed6 	bl	8008138 <HAL_TIM_Base_Start_IT>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001392:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800139a:	2036      	movs	r0, #54	; 0x36
 800139c:	f001 fd9e 	bl	8002edc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d808      	bhi.n	80013b8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013a6:	2200      	movs	r2, #0
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	2036      	movs	r0, #54	; 0x36
 80013ac:	f001 fd7a 	bl	8002ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_InitTick+0xf0>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e002      	b.n	80013be <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	200003d0 	.word	0x200003d0
 80013d8:	40001000 	.word	0x40001000
 80013dc:	20000004 	.word	0x20000004

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel1_IRQHandler+0x10>)
 8001412:	f001 fe94 	bl	800313e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000010c 	.word	0x2000010c

08001420 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <ADC1_IRQHandler+0x10>)
 8001426:	f000 fc6f 	bl	8001d08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200000a4 	.word	0x200000a4

08001434 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <SDMMC1_IRQHandler+0x10>)
 800143a:	f005 fab3 	bl	80069a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001e8 	.word	0x200001e8

08001448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM6_DAC_IRQHandler+0x10>)
 800144e:	f006 fee3 	bl	8008218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200003d0 	.word	0x200003d0

0800145c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001484:	f7ff ffea 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f00b ffc5 	bl	800d43c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b2:	f7fe fea5 	bl	8000200 <main>

080014b6 <LoopForever>:

LoopForever:
    b LoopForever
 80014b6:	e7fe      	b.n	80014b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014c4:	0800d7b4 	.word	0x0800d7b4
  ldr r2, =_sbss
 80014c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014cc:	20001e08 	.word	0x20001e08

080014d0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <CAN1_RX0_IRQHandler>

080014d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f001 fcd6 	bl	8002e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	200f      	movs	r0, #15
 80014e4:	f7ff ff02 	bl	80012ec <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	e001      	b.n	80014f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f4:	f7ff fbba 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	2000041c 	.word	0x2000041c

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000041c 	.word	0x2000041c

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008

0800158c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3360      	adds	r3, #96	; 0x60
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <LL_ADC_SetOffset+0x44>)
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	4313      	orrs	r3, r2
 8001624:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	03fff000 	.word	0x03fff000

0800163c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3360      	adds	r3, #96	; 0x60
 800164a:	461a      	mov	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3360      	adds	r3, #96	; 0x60
 8001678:	461a      	mov	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	615a      	str	r2, [r3, #20]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3330      	adds	r3, #48	; 0x30
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	211f      	movs	r1, #31
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0e9b      	lsrs	r3, r3, #26
 8001722:	f003 011f 	and.w	r1, r3, #31
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3314      	adds	r3, #20
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0e5b      	lsrs	r3, r3, #25
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	0d1b      	lsrs	r3, r3, #20
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2107      	movs	r1, #7
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0d1b      	lsrs	r3, r3, #20
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0318 	and.w	r3, r3, #24
 80017e2:	4908      	ldr	r1, [pc, #32]	; (8001804 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017e4:	40d9      	lsrs	r1, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	400b      	ands	r3, r1
 80017ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ee:	431a      	orrs	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	0007ffff 	.word	0x0007ffff

08001808 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6093      	str	r3, [r2, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800183c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001840:	d101      	bne.n	8001846 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001868:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001890:	d101      	bne.n	8001896 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <LL_ADC_IsEnabled+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_IsEnabled+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001902:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001906:	f043 0204 	orr.w	r2, r3, #4
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b04      	cmp	r3, #4
 800192c:	d101      	bne.n	8001932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b08      	cmp	r3, #8
 8001952:	d101      	bne.n	8001958 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e12f      	b.n	8001be2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff f993 	bl	8000cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff3f 	bl	800182c <LL_ADC_IsDeepPowerDownEnabled>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff25 	bl	8001808 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff5a 	bl	800187c <LL_ADC_IsInternalRegulatorEnabled>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff3e 	bl	8001854 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d8:	4b84      	ldr	r3, [pc, #528]	; (8001bec <HAL_ADC_Init+0x284>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	4a84      	ldr	r2, [pc, #528]	; (8001bf0 <HAL_ADC_Init+0x288>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff3c 	bl	800187c <LL_ADC_IsInternalRegulatorEnabled>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	f043 0210 	orr.w	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff75 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001a30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 80c8 	bne.w	8001bd0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 80c4 	bne.w	8001bd0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a50:	f043 0202 	orr.w	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff35 	bl	80018cc <LL_ADC_IsEnabled>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a68:	4862      	ldr	r0, [pc, #392]	; (8001bf4 <HAL_ADC_Init+0x28c>)
 8001a6a:	f7ff ff2f 	bl	80018cc <LL_ADC_IsEnabled>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	485f      	ldr	r0, [pc, #380]	; (8001bf8 <HAL_ADC_Init+0x290>)
 8001a7c:	f7ff fd86 	bl	800158c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e5b      	ldrb	r3, [r3, #25]
 8001a84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d106      	bne.n	8001abc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	045b      	lsls	r3, r3, #17
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_ADC_Init+0x294>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff12 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001af6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff1f 	bl	8001940 <LL_ADC_INJ_IsConversionOngoing>
 8001b02:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d140      	bne.n	8001b8c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d13d      	bne.n	8001b8c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e1b      	ldrb	r3, [r3, #24]
 8001b18:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b1a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b22:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b32:	f023 0306 	bic.w	r3, r3, #6
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	69b9      	ldr	r1, [r7, #24]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d118      	bne.n	8001b7c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	e007      	b.n	8001b8c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d10c      	bne.n	8001bae <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f023 010f 	bic.w	r1, r3, #15
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	1e5a      	subs	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	e007      	b.n	8001bbe <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 020f 	bic.w	r2, r2, #15
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bce:	e007      	b.n	8001be0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	053e2d63 	.word	0x053e2d63
 8001bf4:	50040000 	.word	0x50040000
 8001bf8:	50040300 	.word	0x50040300
 8001bfc:	fff0c007 	.word	0xfff0c007

08001c00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe82 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d167      	bne.n	8001cec <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x2a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e063      	b.n	8001cf2 <HAL_ADC_Start_DMA+0xf2>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fe36 	bl	80028a4 <ADC_Enable>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d14f      	bne.n	8001ce2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	f023 0206 	bic.w	r2, r3, #6
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c6e:	e002      	b.n	8001c76 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7a:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_ADC_Start_DMA+0xfc>)
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_ADC_Start_DMA+0x100>)
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_ADC_Start_DMA+0x104>)
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	221c      	movs	r2, #28
 8001c94:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0210 	orr.w	r2, r2, #16
 8001cac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3340      	adds	r3, #64	; 0x40
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f001 f9bb 	bl	8003048 <HAL_DMA_Start_IT>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fe09 	bl	80018f2 <LL_ADC_REG_StartConversion>
 8001ce0:	e006      	b.n	8001cf0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001cea:	e001      	b.n	8001cf0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
 8001cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	080029b1 	.word	0x080029b1
 8001d00:	08002a89 	.word	0x08002a89
 8001d04:	08002aa5 	.word	0x08002aa5

08001d08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d017      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x56>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fee9 	bl	8002b28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_IRQHandler+0x6a>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05e      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d059      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fc8e 	bl	80016c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03e      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d135      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d12e      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fda1 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d11a      	bne.n	8001e14 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 020c 	bic.w	r2, r2, #12
 8001dec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d112      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	659a      	str	r2, [r3, #88]	; 0x58
 8001e12:	e00b      	b.n	8001e2c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fec1 	bl	8000bb4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x146>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d072      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06d      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d105      	bne.n	8001e7a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fc5f 	bl	8001742 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e84:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fc1a 	bl	80016c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e90:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d047      	beq.n	8001f30 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_ADC_IRQHandler+0x1b2>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03f      	beq.n	8001f30 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d13a      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d133      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d12e      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd32 	bl	8001940 <LL_ADC_INJ_IsConversionOngoing>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11a      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d112      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	659a      	str	r2, [r3, #88]	; 0x58
 8001f16:	e00b      	b.n	8001f30 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f043 0210 	orr.w	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fdd1 	bl	8002ad8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2260      	movs	r2, #96	; 0x60
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d011      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x264>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f890 	bl	8002084 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <HAL_ADC_IRQHandler+0x294>
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fdb7 	bl	8002b00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x2c4>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fda9 	bl	8002b14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d02a      	beq.n	800202c <HAL_ADC_IRQHandler+0x324>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d025      	beq.n	800202c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	e008      	b.n	8002000 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10e      	bne.n	8002024 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f83a 	bl	8002098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2210      	movs	r2, #16
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d018      	beq.n	8002068 <HAL_ADC_IRQHandler+0x360>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	f043 0208 	orr.w	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002060:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fd42 	bl	8002aec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b6      	sub	sp, #216	; 0xd8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x22>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e3d5      	b.n	800287a <HAL_ADC_ConfigChannel+0x7ce>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fc1d 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 83ba 	bne.w	800285c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d824      	bhi.n	800213a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	3b02      	subs	r3, #2
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d81b      	bhi.n	8002132 <HAL_ADC_ConfigChannel+0x86>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <HAL_ADC_ConfigChannel+0x54>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002111 	.word	0x08002111
 8002104:	08002119 	.word	0x08002119
 8002108:	08002121 	.word	0x08002121
 800210c:	08002129 	.word	0x08002129
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	220c      	movs	r2, #12
 8002114:	605a      	str	r2, [r3, #4]
          break;
 8002116:	e011      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2212      	movs	r2, #18
 800211c:	605a      	str	r2, [r3, #4]
          break;
 800211e:	e00d      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2218      	movs	r2, #24
 8002124:	605a      	str	r2, [r3, #4]
          break;
 8002126:	e009      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212e:	605a      	str	r2, [r3, #4]
          break;
 8002130:	e004      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2206      	movs	r2, #6
 8002136:	605a      	str	r2, [r3, #4]
          break;
 8002138:	e000      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800213a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	f7ff face 	bl	80016ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fbe1 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8002158:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fbed 	bl	8001940 <LL_ADC_INJ_IsConversionOngoing>
 8002166:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800216a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 81c1 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 81bc 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002186:	d10f      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	f7ff fae8 	bl	8001768 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fa7c 	bl	800169e <LL_ADC_SetSamplingTimeCommonConfig>
 80021a6:	e00e      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fad7 	bl	8001768 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fa6c 	bl	800169e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00a      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6919      	ldr	r1, [r3, #16]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021f8:	f7ff f9fc 	bl	80015f4 <LL_ADC_SetOffset>
 80021fc:	e17b      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fa19 	bl	800163c <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <HAL_ADC_ConfigChannel+0x17e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fa0e 	bl	800163c <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	e01e      	b.n	8002268 <HAL_ADC_ConfigChannel+0x1bc>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa03 	bl	800163c <LL_ADC_GetOffsetChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800224c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800225c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1d4>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	e018      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x206>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800229c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80022a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f9d2 	bl	8001668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f9b6 	bl	800163c <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x244>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff f9ab 	bl	800163c <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 021f 	and.w	r2, r3, #31
 80022ee:	e01e      	b.n	800232e <HAL_ADC_ConfigChannel+0x282>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f9a0 	bl	800163c <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800230e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002312:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e004      	b.n	800232c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x29a>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	e018      	b.n	8002378 <HAL_ADC_ConfigChannel+0x2cc>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800235a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800235e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e004      	b.n	8002378 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800236e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f96f 	bl	8001668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f953 	bl	800163c <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x30a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2102      	movs	r1, #2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f948 	bl	800163c <LL_ADC_GetOffsetChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	e01e      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x348>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2102      	movs	r1, #2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f93d 	bl	800163c <LL_ADC_GetOffsetChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e004      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80023e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_ADC_ConfigChannel+0x360>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	e016      	b.n	800243a <HAL_ADC_ConfigChannel+0x38e>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800241e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e004      	b.n	800243a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	2102      	movs	r1, #2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f90e 	bl	8001668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2103      	movs	r1, #3
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f8f2 	bl	800163c <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x3cc>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2103      	movs	r1, #3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f8e7 	bl	800163c <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	e017      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x3fc>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2103      	movs	r1, #3
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f8dc 	bl	800163c <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002492:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800249e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x414>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	e011      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x438>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2103      	movs	r1, #3
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f8b9 	bl	8001668 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f9e6 	bl	80018cc <LL_ADC_IsEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8140 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	f7ff f953 	bl	80017c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a8f      	ldr	r2, [pc, #572]	; (800275c <HAL_ADC_ConfigChannel+0x6b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f040 8131 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <HAL_ADC_ConfigChannel+0x4a2>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b09      	cmp	r3, #9
 8002544:	bf94      	ite	ls
 8002546:	2301      	movls	r3, #1
 8002548:	2300      	movhi	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e019      	b.n	8002582 <HAL_ADC_ConfigChannel+0x4d6>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800255c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800256a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b09      	cmp	r3, #9
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002582:	2b00      	cmp	r3, #0
 8002584:	d079      	beq.n	800267a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x4f6>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	3301      	adds	r3, #1
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a0:	e015      	b.n	80025ce <HAL_ADC_ConfigChannel+0x522>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x542>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	e017      	b.n	800261e <HAL_ADC_ConfigChannel+0x572>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002606:	2320      	movs	r3, #32
 8002608:	e003      	b.n	8002612 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800260a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	ea42 0103 	orr.w	r1, r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x598>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	3301      	adds	r3, #1
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	e018      	b.n	8002676 <HAL_ADC_ConfigChannel+0x5ca>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	430b      	orrs	r3, r1
 8002678:	e081      	b.n	800277e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x5ea>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	069b      	lsls	r3, r3, #26
 8002690:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002694:	e015      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x616>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	069b      	lsls	r3, r3, #26
 80026be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x636>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	e017      	b.n	8002712 <HAL_ADC_ConfigChannel+0x666>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	61fb      	str	r3, [r7, #28]
  return result;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	ea42 0103 	orr.w	r1, r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_ADC_ConfigChannel+0x692>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	051b      	lsls	r3, r3, #20
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273c:	e01e      	b.n	800277c <HAL_ADC_ConfigChannel+0x6d0>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	613b      	str	r3, [r7, #16]
  return result;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e006      	b.n	8002768 <HAL_ADC_ConfigChannel+0x6bc>
 800275a:	bf00      	nop
 800275c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b1e      	subs	r3, #30
 8002776:	051b      	lsls	r3, r3, #20
 8002778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277c:	430b      	orrs	r3, r1
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe fff0 	bl	8001768 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_ADC_ConfigChannel+0x7d8>)
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d06c      	beq.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002794:	483c      	ldr	r0, [pc, #240]	; (8002888 <HAL_ADC_ConfigChannel+0x7dc>)
 8002796:	f7fe ff1f 	bl	80015d8 <LL_ADC_GetCommonPathInternalCh>
 800279a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a3a      	ldr	r2, [pc, #232]	; (800288c <HAL_ADC_ConfigChannel+0x7e0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d127      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d121      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a35      	ldr	r2, [pc, #212]	; (8002890 <HAL_ADC_ConfigChannel+0x7e4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d157      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c6:	4619      	mov	r1, r3
 80027c8:	482f      	ldr	r0, [pc, #188]	; (8002888 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ca:	f7fe fef2 	bl	80015b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_ADC_ConfigChannel+0x7e8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	4a30      	ldr	r2, [pc, #192]	; (8002898 <HAL_ADC_ConfigChannel+0x7ec>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027e8:	e002      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f9      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f6:	e03a      	b.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_ADC_ConfigChannel+0x7f0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d113      	bne.n	800282a <HAL_ADC_ConfigChannel+0x77e>
 8002802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_ADC_ConfigChannel+0x7e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d12a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002820:	4619      	mov	r1, r3
 8002822:	4819      	ldr	r0, [pc, #100]	; (8002888 <HAL_ADC_ConfigChannel+0x7dc>)
 8002824:	f7fe fec5 	bl	80015b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002828:	e021      	b.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d11c      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d116      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_ADC_ConfigChannel+0x7e4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d111      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800284a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800284e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002852:	4619      	mov	r1, r3
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <HAL_ADC_ConfigChannel+0x7dc>)
 8002856:	f7fe feac 	bl	80015b2 <LL_ADC_SetCommonPathInternalCh>
 800285a:	e008      	b.n	800286e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002876:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800287a:	4618      	mov	r0, r3
 800287c:	37d8      	adds	r7, #216	; 0xd8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	80080000 	.word	0x80080000
 8002888:	50040300 	.word	0x50040300
 800288c:	c7520000 	.word	0xc7520000
 8002890:	50040000 	.word	0x50040000
 8002894:	20000000 	.word	0x20000000
 8002898:	053e2d63 	.word	0x053e2d63
 800289c:	cb840000 	.word	0xcb840000
 80028a0:	80000001 	.word	0x80000001

080028a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f809 	bl	80018cc <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d169      	bne.n	8002994 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <ADC_Enable+0xfc>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e055      	b.n	8002996 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe ffd8 	bl	80018a4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028f4:	482b      	ldr	r0, [pc, #172]	; (80029a4 <ADC_Enable+0x100>)
 80028f6:	f7fe fe6f 	bl	80015d8 <LL_ADC_GetCommonPathInternalCh>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <ADC_Enable+0x104>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	4a28      	ldr	r2, [pc, #160]	; (80029ac <ADC_Enable+0x108>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800291e:	e002      	b.n	8002926 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3b01      	subs	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800292c:	f7fe fdfe 	bl	800152c <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002932:	e028      	b.n	8002986 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe ffc7 	bl	80018cc <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe ffab 	bl	80018a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800294e:	f7fe fded 	bl	800152c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d914      	bls.n	8002986 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d00d      	beq.n	8002986 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e007      	b.n	8002996 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d1cf      	bne.n	8002934 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	8000003f 	.word	0x8000003f
 80029a4:	50040300 	.word	0x50040300
 80029a8:	20000000 	.word	0x20000000
 80029ac:	053e2d63 	.word	0x053e2d63

080029b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d14b      	bne.n	8002a62 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fe6b 	bl	80016c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12b      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58
 8002a26:	e018      	b.n	8002a5a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d111      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe f8aa 	bl	8000bb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a60:	e00e      	b.n	8002a80 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff fb12 	bl	8002098 <HAL_ADC_ErrorCallback>
}
 8002a74:	e004      	b.n	8002a80 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff faea 	bl	8002070 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fae4 	bl	8002098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0ed      	b.n	8002d2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe f988 	bl	8000e70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b70:	f7fe fcdc 	bl	800152c <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b76:	e012      	b.n	8002b9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b78:	f7fe fcd8 	bl	800152c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b0a      	cmp	r3, #10
 8002b84:	d90b      	bls.n	8002b9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0c5      	b.n	8002d2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0e5      	beq.n	8002b78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0202 	bic.w	r2, r2, #2
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bbc:	f7fe fcb6 	bl	800152c <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bc2:	e012      	b.n	8002bea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc4:	f7fe fcb2 	bl	800152c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b0a      	cmp	r3, #10
 8002bd0:	d90b      	bls.n	8002bea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2205      	movs	r2, #5
 8002be2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e09f      	b.n	8002d2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e5      	bne.n	8002bc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e007      	b.n	8002c22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7e5b      	ldrb	r3, [r3, #25]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7e9b      	ldrb	r3, [r3, #26]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0220 	orr.w	r2, r2, #32
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e007      	b.n	8002c76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0220 	bic.w	r2, r2, #32
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7edb      	ldrb	r3, [r3, #27]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0210 	orr.w	r2, r2, #16
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7f1b      	ldrb	r3, [r3, #28]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0208 	orr.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0208 	bic.w	r2, r2, #8
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7f5b      	ldrb	r3, [r3, #29]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0204 	orr.w	r2, r2, #4
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	ea42 0103 	orr.w	r1, r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	60d3      	str	r3, [r2, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__NVIC_GetPriorityGrouping+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0307 	and.w	r3, r3, #7
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db0b      	blt.n	8002dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4907      	ldr	r1, [pc, #28]	; (8002dd0 <__NVIC_EnableIRQ+0x38>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2001      	movs	r0, #1
 8002dba:	fa00 f202 	lsl.w	r2, r0, r2
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff4c 	bl	8002d34 <__NVIC_SetPriorityGrouping>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb6:	f7ff ff61 	bl	8002d7c <__NVIC_GetPriorityGrouping>
 8002eba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	6978      	ldr	r0, [r7, #20]
 8002ec2:	f7ff ffb1 	bl	8002e28 <NVIC_EncodePriority>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff80 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff54 	bl	8002d98 <__NVIC_EnableIRQ>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e08d      	b.n	8003026 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_DMA_Init+0x138>)
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d80f      	bhi.n	8002f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b45      	ldr	r3, [pc, #276]	; (8003034 <HAL_DMA_Init+0x13c>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a45      	ldr	r2, [pc, #276]	; (8003038 <HAL_DMA_Init+0x140>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a42      	ldr	r2, [pc, #264]	; (800303c <HAL_DMA_Init+0x144>)
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
 8002f34:	e00e      	b.n	8002f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_DMA_Init+0x148>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <HAL_DMA_Init+0x140>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	009a      	lsls	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <HAL_DMA_Init+0x14c>)
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9b6 	bl	8003318 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb4:	d102      	bne.n	8002fbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fd0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_DMA_Init+0x104>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d80c      	bhi.n	8002ffc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9d6 	bl	8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e008      	b.n	800300e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40020407 	.word	0x40020407
 8003034:	bffdfff8 	.word	0xbffdfff8
 8003038:	cccccccd 	.word	0xcccccccd
 800303c:	40020000 	.word	0x40020000
 8003040:	bffdfbf8 	.word	0xbffdfbf8
 8003044:	40020400 	.word	0x40020400

08003048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Start_IT+0x20>
 8003064:	2302      	movs	r3, #2
 8003066:	e066      	b.n	8003136 <HAL_DMA_Start_IT+0xee>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d155      	bne.n	8003128 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f8fb 	bl	800329c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 020e 	orr.w	r2, r2, #14
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00f      	b.n	80030e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 020a 	orr.w	r2, r2, #10
 80030de:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003114:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e005      	b.n	8003134 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003130:	2302      	movs	r3, #2
 8003132:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f003 031c 	and.w	r3, r3, #28
 800315e:	2204      	movs	r2, #4
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d026      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7a>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d021      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0204 	bic.w	r2, r2, #4
 8003190:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 021c 	and.w	r2, r3, #28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2104      	movs	r1, #4
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d071      	beq.n	8003292 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	e06c      	b.n	8003292 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f003 031c 	and.w	r3, r3, #28
 80031c0:	2202      	movs	r2, #2
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02e      	beq.n	800322a <HAL_DMA_IRQHandler+0xec>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d029      	beq.n	800322a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 020a 	bic.w	r2, r2, #10
 80031f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	f003 021c 	and.w	r2, r3, #28
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2102      	movs	r1, #2
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d038      	beq.n	8003292 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003228:	e033      	b.n	8003292 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 031c 	and.w	r3, r3, #28
 8003232:	2208      	movs	r2, #8
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d025      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020e 	bic.w	r2, r2, #14
 8003256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	f003 021c 	and.w	r2, r3, #28
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003292:	bf00      	nop
 8003294:	bf00      	nop
}
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032b2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032c4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 021c 	and.w	r2, r3, #28
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d108      	bne.n	80032fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032fa:	e007      	b.n	800330c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003328:	429a      	cmp	r2, r3
 800332a:	d80a      	bhi.n	8003342 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003338:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6493      	str	r3, [r2, #72]	; 0x48
 8003340:	e007      	b.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800334c:	4413      	add	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3b08      	subs	r3, #8
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003368:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40020407 	.word	0x40020407
 8003388:	4002081c 	.word	0x4002081c
 800338c:	cccccccd 	.word	0xcccccccd
 8003390:	40020880 	.word	0x40020880

08003394 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2201      	movs	r2, #1
 80033c2:	409a      	lsls	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	1000823f 	.word	0x1000823f
 80033d8:	40020940 	.word	0x40020940

080033dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ea:	e166      	b.n	80036ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8158 	beq.w	80036b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d005      	beq.n	800341c <HAL_GPIO_Init+0x40>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d130      	bne.n	800347e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003452:	2201      	movs	r2, #1
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 0201 	and.w	r2, r3, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b03      	cmp	r3, #3
 8003488:	d017      	beq.n	80034ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2203      	movs	r2, #3
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d123      	bne.n	800350e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0203 	and.w	r2, r3, #3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80b2 	beq.w	80036b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <HAL_GPIO_Init+0x2fc>)
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_GPIO_Init+0x2fc>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6613      	str	r3, [r2, #96]	; 0x60
 800355c:	4b5e      	ldr	r3, [pc, #376]	; (80036d8 <HAL_GPIO_Init+0x2fc>)
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003568:	4a5c      	ldr	r2, [pc, #368]	; (80036dc <HAL_GPIO_Init+0x300>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003592:	d02b      	beq.n	80035ec <HAL_GPIO_Init+0x210>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a52      	ldr	r2, [pc, #328]	; (80036e0 <HAL_GPIO_Init+0x304>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d025      	beq.n	80035e8 <HAL_GPIO_Init+0x20c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a51      	ldr	r2, [pc, #324]	; (80036e4 <HAL_GPIO_Init+0x308>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01f      	beq.n	80035e4 <HAL_GPIO_Init+0x208>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a50      	ldr	r2, [pc, #320]	; (80036e8 <HAL_GPIO_Init+0x30c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d019      	beq.n	80035e0 <HAL_GPIO_Init+0x204>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_GPIO_Init+0x310>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_GPIO_Init+0x200>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a4e      	ldr	r2, [pc, #312]	; (80036f0 <HAL_GPIO_Init+0x314>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00d      	beq.n	80035d8 <HAL_GPIO_Init+0x1fc>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4d      	ldr	r2, [pc, #308]	; (80036f4 <HAL_GPIO_Init+0x318>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <HAL_GPIO_Init+0x1f8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a4c      	ldr	r2, [pc, #304]	; (80036f8 <HAL_GPIO_Init+0x31c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_GPIO_Init+0x1f4>
 80035cc:	2307      	movs	r3, #7
 80035ce:	e00e      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035d0:	2308      	movs	r3, #8
 80035d2:	e00c      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035d4:	2306      	movs	r3, #6
 80035d6:	e00a      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035d8:	2305      	movs	r3, #5
 80035da:	e008      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035dc:	2304      	movs	r3, #4
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e004      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e002      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_GPIO_Init+0x212>
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035fe:	4937      	ldr	r1, [pc, #220]	; (80036dc <HAL_GPIO_Init+0x300>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_GPIO_Init+0x320>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003630:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_GPIO_Init+0x320>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <HAL_GPIO_Init+0x320>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365a:	4a28      	ldr	r2, [pc, #160]	; (80036fc <HAL_GPIO_Init+0x320>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_GPIO_Init+0x320>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_GPIO_Init+0x320>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_GPIO_Init+0x320>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <HAL_GPIO_Init+0x320>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f ae91 	bne.w	80033ec <HAL_GPIO_Init+0x10>
  }
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40010000 	.word	0x40010000
 80036e0:	48000400 	.word	0x48000400
 80036e4:	48000800 	.word	0x48000800
 80036e8:	48000c00 	.word	0x48000c00
 80036ec:	48001000 	.word	0x48001000
 80036f0:	48001400 	.word	0x48001400
 80036f4:	48001800 	.word	0x48001800
 80036f8:	48001c00 	.word	0x48001c00
 80036fc:	40010400 	.word	0x40010400

08003700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e001      	b.n	8003722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
 800373c:	4613      	mov	r3, r2
 800373e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800374c:	e002      	b.n	8003754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e081      	b.n	8003876 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fbb6 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	e006      	b.n	80037e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d104      	bne.n	80037fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800381c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69d9      	ldr	r1, [r3, #28]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	d138      	bne.n	8003906 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800389e:	2302      	movs	r3, #2
 80038a0:	e032      	b.n	8003908 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2224      	movs	r2, #36	; 0x24
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	d139      	bne.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003934:	2302      	movs	r3, #2
 8003936:	e033      	b.n	80039a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003966:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d102      	bne.n	80039c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80039be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c2:	e00b      	b.n	80039dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d2:	d102      	bne.n	80039da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80039d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d8:	e000      	b.n	80039dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80039da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d141      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d131      	bne.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a08:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0e:	4a46      	ldr	r2, [pc, #280]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a20:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a28:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2232      	movs	r2, #50	; 0x32
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	4a3f      	ldr	r2, [pc, #252]	; (8003b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	0c9b      	lsrs	r3, r3, #18
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a3e:	e002      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a46:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d102      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f2      	bne.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a5a:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a66:	d158      	bne.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e057      	b.n	8003b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a72:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a7c:	e04d      	b.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a84:	d141      	bne.n	8003b0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d131      	bne.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9a:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aa4:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2232      	movs	r2, #50	; 0x32
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	0c9b      	lsrs	r3, r3, #18
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aca:	e002      	b.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d102      	bne.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f2      	bne.n	8003acc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d112      	bne.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e011      	b.n	8003b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b08:	e007      	b.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	431bde83 	.word	0x431bde83

08003b34 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b42:	6053      	str	r3, [r2, #4]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f000 bc08 	b.w	8004378 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b68:	4b96      	ldr	r3, [pc, #600]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b72:	4b94      	ldr	r3, [pc, #592]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80e4 	beq.w	8003d52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4c>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	f040 808b 	bne.w	8003cae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	f040 8087 	bne.w	8003cae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x64>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e3df      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x7e>
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd0:	e005      	b.n	8003bde <HAL_RCC_OscConfig+0x8a>
 8003bd2:	4b7c      	ldr	r3, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d223      	bcs.n	8003c2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fdfc 	bl	80047e4 <RCC_SetFlashLatencyFromMSIRange>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e3c0      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf6:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a72      	ldr	r2, [pc, #456]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	f043 0308 	orr.w	r3, r3, #8
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b70      	ldr	r3, [pc, #448]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	496d      	ldr	r1, [pc, #436]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c14:	4b6b      	ldr	r3, [pc, #428]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	4968      	ldr	r1, [pc, #416]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	e025      	b.n	8003c76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2a:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a65      	ldr	r2, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c30:	f043 0308 	orr.w	r3, r3, #8
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b63      	ldr	r3, [pc, #396]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4960      	ldr	r1, [pc, #384]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c48:	4b5e      	ldr	r3, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	495b      	ldr	r1, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fdbc 	bl	80047e4 <RCC_SetFlashLatencyFromMSIRange>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e380      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c76:	f000 fcc1 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b51      	ldr	r3, [pc, #324]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4950      	ldr	r1, [pc, #320]	; (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <HAL_RCC_OscConfig+0x278>)
 8003c94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c96:	4b4e      	ldr	r3, [pc, #312]	; (8003dd0 <HAL_RCC_OscConfig+0x27c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fb26 	bl	80012ec <HAL_InitTick>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d052      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	e364      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d032      	beq.n	8003d1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cb6:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a42      	ldr	r2, [pc, #264]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fc33 	bl	800152c <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cca:	f7fd fc2f 	bl	800152c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e34d      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce8:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a35      	ldr	r2, [pc, #212]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cee:	f043 0308 	orr.w	r3, r3, #8
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4930      	ldr	r1, [pc, #192]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	492b      	ldr	r1, [pc, #172]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
 8003d1a:	e01a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a28      	ldr	r2, [pc, #160]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d28:	f7fd fc00 	bl	800152c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d30:	f7fd fbfc 	bl	800152c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e31a      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1dc>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d073      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_OscConfig+0x21c>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d10e      	bne.n	8003d88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d063      	beq.n	8003e44 <HAL_RCC_OscConfig+0x2f0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d15f      	bne.n	8003e44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e2f7      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x24c>
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a0b      	ldr	r2, [pc, #44]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e025      	b.n	8003dec <HAL_RCC_OscConfig+0x298>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d114      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x280>
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e013      	b.n	8003dec <HAL_RCC_OscConfig+0x298>
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	0800d6f0 	.word	0x0800d6f0
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000004 	.word	0x20000004
 8003dd4:	4ba0      	ldr	r3, [pc, #640]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a9f      	ldr	r2, [pc, #636]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b9d      	ldr	r3, [pc, #628]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a9c      	ldr	r2, [pc, #624]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fb9a 	bl	800152c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fd fb96 	bl	800152c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e2b4      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0e:	4b92      	ldr	r3, [pc, #584]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x2a8>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fb86 	bl	800152c <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd fb82 	bl	800152c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e2a0      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e36:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2d0>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d060      	beq.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x310>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d119      	bne.n	8003e92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d116      	bne.n	8003e92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e64:	4b7c      	ldr	r3, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_OscConfig+0x328>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e27d      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	4973      	ldr	r1, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e90:	e040      	b.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9a:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd fb41 	bl	800152c <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fd fb3d 	bl	800152c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e25b      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	4b65      	ldr	r3, [pc, #404]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b62      	ldr	r3, [pc, #392]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	495f      	ldr	r1, [pc, #380]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
 8003ee0:	e018      	b.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	4b5d      	ldr	r3, [pc, #372]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd fb1d 	bl	800152c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7fd fb19 	bl	800152c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e237      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d03c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f28:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2e:	4a4a      	ldr	r2, [pc, #296]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd faf8 	bl	800152c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fd faf4 	bl	800152c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e212      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ef      	beq.n	8003f40 <HAL_RCC_OscConfig+0x3ec>
 8003f60:	e01b      	b.n	8003f9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f68:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fd fadb 	bl	800152c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7a:	f7fd fad7 	bl	800152c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e1f5      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8c:	4b32      	ldr	r3, [pc, #200]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ef      	bne.n	8003f7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80a6 	beq.w	80040f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10d      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	4a26      	ldr	r2, [pc, #152]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_RCC_OscConfig+0x508>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d118      	bne.n	8004012 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_OscConfig+0x508>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_RCC_OscConfig+0x508>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fec:	f7fd fa9e 	bl	800152c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fd fa9a 	bl	800152c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1b8      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RCC_OscConfig+0x508>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <HAL_RCC_OscConfig+0x4d8>
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800402a:	e029      	b.n	8004080 <HAL_RCC_OscConfig+0x52c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b05      	cmp	r3, #5
 8004032:	d115      	bne.n	8004060 <HAL_RCC_OscConfig+0x50c>
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a07      	ldr	r2, [pc, #28]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a03      	ldr	r2, [pc, #12]	; (8004058 <HAL_RCC_OscConfig+0x504>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004054:	e014      	b.n	8004080 <HAL_RCC_OscConfig+0x52c>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
 8004060:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a9c      	ldr	r2, [pc, #624]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a98      	ldr	r2, [pc, #608]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d016      	beq.n	80040b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd fa50 	bl	800152c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7fd fa4c 	bl	800152c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e168      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ed      	beq.n	8004090 <HAL_RCC_OscConfig+0x53c>
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b6:	f7fd fa39 	bl	800152c <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040be:	f7fd fa35 	bl	800152c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e151      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d4:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ed      	bne.n	80040be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e2:	7ffb      	ldrb	r3, [r7, #31]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b7b      	ldr	r3, [pc, #492]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	4a7a      	ldr	r2, [pc, #488]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03c      	beq.n	800417a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01c      	beq.n	8004142 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004108:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 800410a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800410e:	4a72      	ldr	r2, [pc, #456]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fd fa08 	bl	800152c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004120:	f7fd fa04 	bl	800152c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e122      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004132:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ef      	beq.n	8004120 <HAL_RCC_OscConfig+0x5cc>
 8004140:	e01b      	b.n	800417a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004148:	4a63      	ldr	r2, [pc, #396]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004152:	f7fd f9eb 	bl	800152c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800415a:	f7fd f9e7 	bl	800152c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e105      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800416c:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 800416e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ef      	bne.n	800415a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80f9 	beq.w	8004376 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	2b02      	cmp	r3, #2
 800418a:	f040 80cf 	bne.w	800432c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800418e:	4b52      	ldr	r3, [pc, #328]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0203 	and.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	429a      	cmp	r2, r3
 80041a0:	d12c      	bne.n	80041fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	3b01      	subs	r3, #1
 80041ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d123      	bne.n	80041fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d11b      	bne.n	80041fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d113      	bne.n	80041fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d109      	bne.n	80041fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d071      	beq.n	80042e0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d068      	beq.n	80042d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004202:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800420e:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0ac      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004228:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800422a:	f7fd f97f 	bl	800152c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004232:	f7fd f97b 	bl	800152c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e099      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_OscConfig+0x788>)
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004260:	3a01      	subs	r2, #1
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800426a:	0212      	lsls	r2, r2, #8
 800426c:	4311      	orrs	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004272:	0852      	lsrs	r2, r2, #1
 8004274:	3a01      	subs	r2, #1
 8004276:	0552      	lsls	r2, r2, #21
 8004278:	4311      	orrs	r1, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800427e:	0852      	lsrs	r2, r2, #1
 8004280:	3a01      	subs	r2, #1
 8004282:	0652      	lsls	r2, r2, #25
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800428a:	06d2      	lsls	r2, r2, #27
 800428c:	430a      	orrs	r2, r1
 800428e:	4912      	ldr	r1, [pc, #72]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0f      	ldr	r2, [pc, #60]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 800429a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80042a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ac:	f7fd f93e 	bl	800152c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd f93a 	bl	800152c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e058      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_OscConfig+0x784>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042d2:	e050      	b.n	8004376 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e04f      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
 80042d8:	40021000 	.word	0x40021000
 80042dc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d144      	bne.n	8004376 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a23      	ldr	r2, [pc, #140]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a20      	ldr	r2, [pc, #128]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004304:	f7fd f912 	bl	800152c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd f90e 	bl	800152c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e02c      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x7b8>
 800432a:	e024      	b.n	8004376 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d01f      	beq.n	8004372 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 8004338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800433c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fd f8f5 	bl	800152c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd f8f1 	bl	800152c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e00f      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4905      	ldr	r1, [pc, #20]	; (8004380 <HAL_RCC_OscConfig+0x82c>)
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_RCC_OscConfig+0x830>)
 800436c:	4013      	ands	r3, r2
 800436e:	60cb      	str	r3, [r1, #12]
 8004370:	e001      	b.n	8004376 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	feeefffc 	.word	0xfeeefffc

08004388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e11d      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043a0:	4b90      	ldr	r3, [pc, #576]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d910      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b8d      	ldr	r3, [pc, #564]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 020f 	bic.w	r2, r3, #15
 80043b6:	498b      	ldr	r1, [pc, #556]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b89      	ldr	r3, [pc, #548]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e105      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d908      	bls.n	80043fe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4b7e      	ldr	r3, [pc, #504]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	497b      	ldr	r1, [pc, #492]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d079      	beq.n	80044fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b03      	cmp	r3, #3
 8004410:	d11e      	bne.n	8004450 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004412:	4b75      	ldr	r3, [pc, #468]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0dc      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004422:	f000 fa39 	bl	8004898 <RCC_GetSysClockFreqFromPLLSource>
 8004426:	4603      	mov	r3, r0
 8004428:	4a70      	ldr	r2, [pc, #448]	; (80045ec <HAL_RCC_ClockConfig+0x264>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d946      	bls.n	80044bc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800442e:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d140      	bne.n	80044bc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800443a:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004442:	4a69      	ldr	r2, [pc, #420]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004448:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e035      	b.n	80044bc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004458:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d115      	bne.n	8004490 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b9      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004470:	4b5d      	ldr	r3, [pc, #372]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0ad      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004480:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0a5      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004490:	f000 f8b4 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8004494:	4603      	mov	r3, r0
 8004496:	4a55      	ldr	r2, [pc, #340]	; (80045ec <HAL_RCC_ClockConfig+0x264>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d90f      	bls.n	80044bc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800449c:	4b52      	ldr	r3, [pc, #328]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044a8:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044b0:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044bc:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 0203 	bic.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4947      	ldr	r1, [pc, #284]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fd f82d 	bl	800152c <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d6:	f7fd f829 	bl	800152c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e077      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ec:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 020c 	and.w	r2, r3, #12
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d1eb      	bne.n	80044d6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d105      	bne.n	8004510 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004504:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800450a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800450e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004528:	429a      	cmp	r2, r3
 800452a:	d208      	bcs.n	800453e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	492b      	ldr	r1, [pc, #172]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d210      	bcs.n	800456e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454c:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 020f 	bic.w	r2, r3, #15
 8004554:	4923      	ldr	r1, [pc, #140]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d001      	beq.n	800456e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e036      	b.n	80045dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4918      	ldr	r1, [pc, #96]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4910      	ldr	r1, [pc, #64]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045ac:	f000 f826 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	490c      	ldr	r1, [pc, #48]	; (80045f0 <HAL_RCC_ClockConfig+0x268>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x26c>)
 80045ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fc fe8b 	bl	80012ec <HAL_InitTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40022000 	.word	0x40022000
 80045e8:	40021000 	.word	0x40021000
 80045ec:	04c4b400 	.word	0x04c4b400
 80045f0:	0800d6f0 	.word	0x0800d6f0
 80045f4:	20000000 	.word	0x20000000
 80045f8:	20000004 	.word	0x20000004

080045fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	4b3b      	ldr	r3, [pc, #236]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x34>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d121      	bne.n	800466e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d11e      	bne.n	800466e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004630:	4b34      	ldr	r3, [pc, #208]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e005      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800464c:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004658:	4a2b      	ldr	r2, [pc, #172]	; (8004708 <HAL_RCC_GetSysClockFreq+0x10c>)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004660:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10d      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d102      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_GetSysClockFreq+0x110>)
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e004      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d101      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004680:	4b22      	ldr	r3, [pc, #136]	; (800470c <HAL_RCC_GetSysClockFreq+0x110>)
 8004682:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d134      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d003      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0xac>
 80046a0:	e005      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCC_GetSysClockFreq+0x110>)
 80046a4:	617b      	str	r3, [r7, #20]
      break;
 80046a6:	e005      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046a8:	4b18      	ldr	r3, [pc, #96]	; (800470c <HAL_RCC_GetSysClockFreq+0x110>)
 80046aa:	617b      	str	r3, [r7, #20]
      break;
 80046ac:	e002      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	617b      	str	r3, [r7, #20]
      break;
 80046b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b4:	4b13      	ldr	r3, [pc, #76]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3301      	adds	r3, #1
 80046c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	fb03 f202 	mul.w	r2, r3, r2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_RCC_GetSysClockFreq+0x108>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	0e5b      	lsrs	r3, r3, #25
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	3301      	adds	r3, #1
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046f4:	69bb      	ldr	r3, [r7, #24]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3724      	adds	r7, #36	; 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	0800d708 	.word	0x0800d708
 800470c:	00f42400 	.word	0x00f42400

08004710 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <HAL_RCC_GetHCLKFreq+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000000 	.word	0x20000000

08004728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800472c:	f7ff fff0 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4904      	ldr	r1, [pc, #16]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000
 8004750:	0800d700 	.word	0x0800d700

08004754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004758:	f7ff ffda 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0adb      	lsrs	r3, r3, #11
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4904      	ldr	r1, [pc, #16]	; (800477c <HAL_RCC_GetPCLK2Freq+0x28>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000
 800477c:	0800d700 	.word	0x0800d700

08004780 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	220f      	movs	r2, #15
 800478e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <HAL_RCC_GetClockConfig+0x60>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40022000 	.word	0x40022000

080047e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047ec:	2300      	movs	r3, #0
 80047ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047fc:	f7ff f8d6 	bl	80039ac <HAL_PWREx_GetVoltageRange>
 8004800:	6178      	str	r0, [r7, #20]
 8004802:	e014      	b.n	800482e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	4a21      	ldr	r2, [pc, #132]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	6593      	str	r3, [r2, #88]	; 0x58
 8004810:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800481c:	f7ff f8c6 	bl	80039ac <HAL_PWREx_GetVoltageRange>
 8004820:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d10b      	bne.n	800484e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d913      	bls.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2ba0      	cmp	r3, #160	; 0xa0
 8004840:	d902      	bls.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004842:	2302      	movs	r3, #2
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	e00d      	b.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004848:	2301      	movs	r3, #1
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	e00a      	b.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b7f      	cmp	r3, #127	; 0x7f
 8004852:	d902      	bls.n	800485a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004854:	2302      	movs	r3, #2
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	e004      	b.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b70      	cmp	r3, #112	; 0x70
 800485e:	d101      	bne.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004860:	2301      	movs	r3, #1
 8004862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 020f 	bic.w	r2, r3, #15
 800486c:	4909      	ldr	r1, [pc, #36]	; (8004894 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d001      	beq.n	8004886 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	40022000 	.word	0x40022000

08004898 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d00b      	beq.n	80048c6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d825      	bhi.n	8004900 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d008      	beq.n	80048cc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d11f      	bne.n	8004900 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048c2:	613b      	str	r3, [r7, #16]
    break;
 80048c4:	e01f      	b.n	8004906 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048c8:	613b      	str	r3, [r7, #16]
    break;
 80048ca:	e01c      	b.n	8004906 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048cc:	4b21      	ldr	r3, [pc, #132]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e005      	b.n	80048f4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	613b      	str	r3, [r7, #16]
    break;
 80048fe:	e002      	b.n	8004906 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]
    break;
 8004904:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	3301      	adds	r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	fb03 f202 	mul.w	r2, r3, r2
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	0e5b      	lsrs	r3, r3, #25
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	3301      	adds	r3, #1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004946:	683b      	ldr	r3, [r7, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40021000 	.word	0x40021000
 8004958:	00f42400 	.word	0x00f42400
 800495c:	0800d708 	.word	0x0800d708

08004960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004968:	2300      	movs	r3, #0
 800496a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800496c:	2300      	movs	r3, #0
 800496e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	2b00      	cmp	r3, #0
 800497a:	d040      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004980:	2b80      	cmp	r3, #128	; 0x80
 8004982:	d02a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d825      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d026      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800498c:	2b60      	cmp	r3, #96	; 0x60
 800498e:	d821      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d006      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d81d      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d010      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049a0:	e018      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049a2:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a88      	ldr	r2, [pc, #544]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ae:	e015      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fa82 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c0:	e00c      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3320      	adds	r3, #32
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fb6d 	bl	80060a8 <RCCEx_PLLSAI2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d2:	e003      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	74fb      	strb	r3, [r7, #19]
      break;
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80049da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e2:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f0:	4975      	ldr	r1, [pc, #468]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80049f8:	e001      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d047      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a12:	d030      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a18:	d82a      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1e:	d02a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a24:	d824      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d81e      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3a:	d010      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a3c:	e018      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a3e:	4b62      	ldr	r3, [pc, #392]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4a61      	ldr	r2, [pc, #388]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a4a:	e015      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fa34 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a5c:	e00c      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3320      	adds	r3, #32
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 fb1f 	bl	80060a8 <RCCEx_PLLSAI2_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	74fb      	strb	r3, [r7, #19]
      break;
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a7e:	4b52      	ldr	r3, [pc, #328]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	494e      	ldr	r1, [pc, #312]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a94:	e001      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 809f 	beq.w	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aac:	4b46      	ldr	r3, [pc, #280]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ada:	2301      	movs	r3, #1
 8004adc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ade:	4b3b      	ldr	r3, [pc, #236]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3a      	ldr	r2, [pc, #232]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fd1f 	bl	800152c <HAL_GetTick>
 8004aee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af0:	e009      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fc fd1b 	bl	800152c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d902      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	74fb      	strb	r3, [r7, #19]
        break;
 8004b04:	e005      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b06:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0ef      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d15b      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01f      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d019      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b42:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d016      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fc fcda 	bl	800152c <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fc fcd6 	bl	800152c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d902      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	74fb      	strb	r3, [r7, #19]
            break;
 8004b92:	e006      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ec      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba8:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	74bb      	strb	r3, [r7, #18]
 8004bc6:	e005      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd4:	7c7b      	ldrb	r3, [r7, #17]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bda:	4ba0      	ldr	r3, [pc, #640]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4a9f      	ldr	r2, [pc, #636]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf2:	4b9a      	ldr	r3, [pc, #616]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f023 0203 	bic.w	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	4996      	ldr	r1, [pc, #600]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c14:	4b91      	ldr	r3, [pc, #580]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 020c 	bic.w	r2, r3, #12
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	498e      	ldr	r1, [pc, #568]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c36:	4b89      	ldr	r3, [pc, #548]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	4985      	ldr	r1, [pc, #532]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c58:	4b80      	ldr	r3, [pc, #512]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	497d      	ldr	r1, [pc, #500]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c7a:	4b78      	ldr	r3, [pc, #480]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c88:	4974      	ldr	r1, [pc, #464]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c9c:	4b6f      	ldr	r3, [pc, #444]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	496c      	ldr	r1, [pc, #432]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cbe:	4b67      	ldr	r3, [pc, #412]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ccc:	4963      	ldr	r1, [pc, #396]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ce0:	4b5e      	ldr	r3, [pc, #376]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cee:	495b      	ldr	r1, [pc, #364]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d02:	4b56      	ldr	r3, [pc, #344]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	4952      	ldr	r1, [pc, #328]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d24:	4b4d      	ldr	r3, [pc, #308]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	494a      	ldr	r1, [pc, #296]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d46:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d54:	4941      	ldr	r1, [pc, #260]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d68:	4b3c      	ldr	r3, [pc, #240]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d76:	4939      	ldr	r1, [pc, #228]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d028      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d8a:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d98:	4930      	ldr	r1, [pc, #192]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004da8:	d106      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004daa:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db4:	60d3      	str	r3, [r2, #12]
 8004db6:	e011      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f879 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dd2:	7cfb      	ldrb	r3, [r7, #19]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d04d      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df0:	d108      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df8:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dfe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e02:	e012      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e04:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e14:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e22:	490e      	ldr	r1, [pc, #56]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	d106      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
 8004e40:	e020      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4a:	d109      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a02      	ldr	r2, [pc, #8]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e56:	60d3      	str	r3, [r2, #12]
 8004e58:	e014      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 f825 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d028      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e90:	4b7a      	ldr	r3, [pc, #488]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e9e:	4977      	ldr	r1, [pc, #476]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eae:	d106      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb0:	4b72      	ldr	r3, [pc, #456]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a71      	ldr	r2, [pc, #452]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eba:	60d3      	str	r3, [r2, #12]
 8004ebc:	e011      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec6:	d10c      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fff6 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eee:	4b63      	ldr	r3, [pc, #396]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004efe:	495f      	ldr	r1, [pc, #380]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2102      	movs	r1, #2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 ffd1 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f38:	4b50      	ldr	r3, [pc, #320]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f3e:	f023 0204 	bic.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	494c      	ldr	r1, [pc, #304]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f5c:	4b47      	ldr	r3, [pc, #284]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f62:	f023 0218 	bic.w	r2, r3, #24
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	4943      	ldr	r1, [pc, #268]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d035      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f80:	4b3e      	ldr	r3, [pc, #248]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a3d      	ldr	r2, [pc, #244]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fc face 	bl	800152c <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f92:	e009      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f94:	f7fc faca 	bl	800152c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	74fb      	strb	r3, [r7, #19]
        break;
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa8:	4b34      	ldr	r3, [pc, #208]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ef      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d113      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004fba:	4b30      	ldr	r3, [pc, #192]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fca:	492c      	ldr	r1, [pc, #176]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3320      	adds	r3, #32
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 f865 	bl	80060a8 <RCCEx_PLLSAI2_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004ff8:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	491c      	ldr	r1, [pc, #112]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501a:	d10c      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3320      	adds	r3, #32
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f840 	bl	80060a8 <RCCEx_PLLSAI2_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d017      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005052:	490a      	ldr	r1, [pc, #40]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a04      	ldr	r2, [pc, #16]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800506c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005070:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005072:	7cbb      	ldrb	r3, [r7, #18]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000

08005080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005092:	d13e      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005094:	4bb6      	ldr	r3, [pc, #728]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a6:	d028      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ae:	f200 86f2 	bhi.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b8:	d005      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d00e      	beq.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80050c2:	f000 bee8 	b.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050c6:	4baa      	ldr	r3, [pc, #680]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f040 86e2 	bne.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80050d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050da:	61fb      	str	r3, [r7, #28]
      break;
 80050dc:	f000 bedd 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050e0:	4ba3      	ldr	r3, [pc, #652]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	f040 86d7 	bne.w	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80050f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050f4:	61fb      	str	r3, [r7, #28]
      break;
 80050f6:	f000 bed2 	b.w	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050fa:	4b9d      	ldr	r3, [pc, #628]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005106:	f040 86cc 	bne.w	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800510a:	4b9a      	ldr	r3, [pc, #616]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800510c:	61fb      	str	r3, [r7, #28]
      break;
 800510e:	f000 bec8 	b.w	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005112:	4b97      	ldr	r3, [pc, #604]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d036      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d840      	bhi.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d003      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d020      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005134:	e039      	b.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005136:	4b8e      	ldr	r3, [pc, #568]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d116      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005142:	4b8b      	ldr	r3, [pc, #556]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800514e:	4b88      	ldr	r3, [pc, #544]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	e005      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800515a:	4b85      	ldr	r3, [pc, #532]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800515c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	4a84      	ldr	r2, [pc, #528]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800516e:	e01f      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
      break;
 8005174:	e01c      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005176:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d102      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005184:	4b7d      	ldr	r3, [pc, #500]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005186:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005188:	e012      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
      break;
 800518e:	e00f      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005190:	4b77      	ldr	r3, [pc, #476]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800519c:	d102      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800519e:	4b77      	ldr	r3, [pc, #476]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051a2:	e005      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
      break;
 80051a8:	e002      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
      break;
 80051ae:	bf00      	nop
    }

    switch(PeriphClk)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b6:	f000 8604 	beq.w	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c0:	f200 8671 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ca:	f000 8467 	beq.w	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051d4:	f200 8667 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051de:	f000 852f 	beq.w	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e8:	f200 865d 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051f2:	f000 8185 	beq.w	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051fc:	f200 8653 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005206:	f000 80cb 	beq.w	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005210:	f200 8649 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	f000 842e 	beq.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005224:	f200 863f 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800522e:	f000 83e2 	beq.w	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005238:	f200 8635 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f000 80ad 	beq.w	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524c:	f200 862b 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	f000 809b 	beq.w	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	f200 8621 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526a:	f000 8089 	beq.w	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005274:	f200 8617 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527e:	f000 8552 	beq.w	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005288:	f200 860d 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005292:	f000 84fe 	beq.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529c:	f200 8603 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a6:	f000 849f 	beq.w	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	f200 85f9 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b80      	cmp	r3, #128	; 0x80
 80052b8:	f000 846a 	beq.w	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b80      	cmp	r3, #128	; 0x80
 80052c0:	f200 85f1 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d84c      	bhi.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 85ea 	beq.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	2b1f      	cmp	r3, #31
 80052d8:	f200 85e5 	bhi.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080056f5 	.word	0x080056f5
 80052e8:	08005763 	.word	0x08005763
 80052ec:	08005ea7 	.word	0x08005ea7
 80052f0:	080057f7 	.word	0x080057f7
 80052f4:	08005ea7 	.word	0x08005ea7
 80052f8:	08005ea7 	.word	0x08005ea7
 80052fc:	08005ea7 	.word	0x08005ea7
 8005300:	0800586f 	.word	0x0800586f
 8005304:	08005ea7 	.word	0x08005ea7
 8005308:	08005ea7 	.word	0x08005ea7
 800530c:	08005ea7 	.word	0x08005ea7
 8005310:	08005ea7 	.word	0x08005ea7
 8005314:	08005ea7 	.word	0x08005ea7
 8005318:	08005ea7 	.word	0x08005ea7
 800531c:	08005ea7 	.word	0x08005ea7
 8005320:	080058f3 	.word	0x080058f3
 8005324:	08005ea7 	.word	0x08005ea7
 8005328:	08005ea7 	.word	0x08005ea7
 800532c:	08005ea7 	.word	0x08005ea7
 8005330:	08005ea7 	.word	0x08005ea7
 8005334:	08005ea7 	.word	0x08005ea7
 8005338:	08005ea7 	.word	0x08005ea7
 800533c:	08005ea7 	.word	0x08005ea7
 8005340:	08005ea7 	.word	0x08005ea7
 8005344:	08005ea7 	.word	0x08005ea7
 8005348:	08005ea7 	.word	0x08005ea7
 800534c:	08005ea7 	.word	0x08005ea7
 8005350:	08005ea7 	.word	0x08005ea7
 8005354:	08005ea7 	.word	0x08005ea7
 8005358:	08005ea7 	.word	0x08005ea7
 800535c:	08005ea7 	.word	0x08005ea7
 8005360:	08005975 	.word	0x08005975
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	f000 83e6 	beq.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800536c:	f000 bd9b 	b.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005370:	40021000 	.word	0x40021000
 8005374:	0007a120 	.word	0x0007a120
 8005378:	0800d708 	.word	0x0800d708
 800537c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005386:	f000 ff83 	bl	8006290 <RCCEx_GetSAIxPeriphCLKFreq>
 800538a:	61f8      	str	r0, [r7, #28]
      break;
 800538c:	f000 bd8e 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005396:	f000 ff7b 	bl	8006290 <RCCEx_GetSAIxPeriphCLKFreq>
 800539a:	61f8      	str	r0, [r7, #28]
      break;
 800539c:	f000 bd86 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80053a0:	4b9a      	ldr	r3, [pc, #616]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053b2:	d015      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053ba:	f200 8092 	bhi.w	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c4:	d029      	beq.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	f200 8089 	bhi.w	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d07b      	beq.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053dc:	d04a      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80053de:	e080      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80053e0:	4b8a      	ldr	r3, [pc, #552]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d17d      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80053ec:	4b87      	ldr	r3, [pc, #540]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80053f8:	4b84      	ldr	r3, [pc, #528]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	e005      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005404:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	4a7f      	ldr	r2, [pc, #508]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	61fb      	str	r3, [r7, #28]
          break;
 8005418:	e066      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800541a:	4b7c      	ldr	r3, [pc, #496]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005426:	d162      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005428:	4b78      	ldr	r3, [pc, #480]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005434:	d15b      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005436:	4b75      	ldr	r3, [pc, #468]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005440:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	fb03 f202 	mul.w	r2, r3, r2
 800544a:	4b70      	ldr	r3, [pc, #448]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	3301      	adds	r3, #1
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800545c:	4b6b      	ldr	r3, [pc, #428]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	0d5b      	lsrs	r3, r3, #21
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	3301      	adds	r3, #1
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	61fb      	str	r3, [r7, #28]
          break;
 8005472:	e03c      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005480:	d138      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005482:	4b62      	ldr	r3, [pc, #392]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800548a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548e:	d131      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005490:	4b5e      	ldr	r3, [pc, #376]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	0a1b      	lsrs	r3, r3, #8
 8005496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	fb03 f202 	mul.w	r2, r3, r2
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	3301      	adds	r3, #1
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80054b6:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	0d5b      	lsrs	r3, r3, #21
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	3301      	adds	r3, #1
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	61fb      	str	r3, [r7, #28]
          break;
 80054cc:	e012      	b.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80054ce:	4b4f      	ldr	r3, [pc, #316]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d10e      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80054dc:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80054de:	61fb      	str	r3, [r7, #28]
          break;
 80054e0:	e00b      	b.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80054e2:	bf00      	nop
 80054e4:	f000 bce2 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80054e8:	bf00      	nop
 80054ea:	f000 bcdf 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80054ee:	bf00      	nop
 80054f0:	f000 bcdc 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80054f4:	bf00      	nop
 80054f6:	f000 bcd9 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80054fa:	bf00      	nop
        break;
 80054fc:	f000 bcd6 	b.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005500:	4b42      	ldr	r3, [pc, #264]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800550e:	d13d      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005510:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800551c:	f040 84c5 	bne.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005520:	4b3a      	ldr	r3, [pc, #232]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	f040 84bd 	bne.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005530:	4b36      	ldr	r3, [pc, #216]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	fb03 f202 	mul.w	r2, r3, r2
 8005544:	4b31      	ldr	r3, [pc, #196]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	3301      	adds	r3, #1
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005556:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	0edb      	lsrs	r3, r3, #27
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005568:	4b28      	ldr	r3, [pc, #160]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005574:	2311      	movs	r3, #17
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e001      	b.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800557a:	2307      	movs	r3, #7
 800557c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	61fb      	str	r3, [r7, #28]
      break;
 8005588:	f000 bc8f 	b.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800559e:	d016      	beq.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055a6:	f200 809b 	bhi.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b0:	d032      	beq.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b8:	f200 8092 	bhi.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8084 	beq.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ca:	d052      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80055cc:	e088      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055ce:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	f040 8084 	bne.w	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80055e8:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	e005      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	4a03      	ldr	r2, [pc, #12]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005606:	61fb      	str	r3, [r7, #28]
          break;
 8005608:	e06c      	b.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	0800d708 	.word	0x0800d708
 8005614:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005618:	4ba5      	ldr	r3, [pc, #660]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005624:	d160      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005626:	4ba2      	ldr	r3, [pc, #648]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005632:	d159      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005634:	4b9e      	ldr	r3, [pc, #632]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	fb03 f202 	mul.w	r2, r3, r2
 8005648:	4b99      	ldr	r3, [pc, #612]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	3301      	adds	r3, #1
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800565a:	4b95      	ldr	r3, [pc, #596]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	0d5b      	lsrs	r3, r3, #21
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	3301      	adds	r3, #1
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	61fb      	str	r3, [r7, #28]
          break;
 8005670:	e03a      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005672:	4b8f      	ldr	r3, [pc, #572]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800567e:	d135      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005680:	4b8b      	ldr	r3, [pc, #556]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568c:	d12e      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800568e:	4b88      	ldr	r3, [pc, #544]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005698:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	fb03 f202 	mul.w	r2, r3, r2
 80056a2:	4b83      	ldr	r3, [pc, #524]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	3301      	adds	r3, #1
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80056b4:	4b7e      	ldr	r3, [pc, #504]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	0d5b      	lsrs	r3, r3, #21
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	3301      	adds	r3, #1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	61fb      	str	r3, [r7, #28]
          break;
 80056ca:	e00f      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80056cc:	4b78      	ldr	r3, [pc, #480]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80056da:	4b76      	ldr	r3, [pc, #472]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056dc:	61fb      	str	r3, [r7, #28]
          break;
 80056de:	e007      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80056e0:	bf00      	nop
 80056e2:	e3e2      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80056e4:	bf00      	nop
 80056e6:	e3e0      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80056e8:	bf00      	nop
 80056ea:	e3de      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80056ec:	bf00      	nop
 80056ee:	e3dc      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80056f0:	bf00      	nop
      break;
 80056f2:	e3da      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056f4:	4b6e      	ldr	r3, [pc, #440]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d827      	bhi.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	0800571d 	.word	0x0800571d
 8005710:	08005725 	.word	0x08005725
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005741 	.word	0x08005741
          frequency = HAL_RCC_GetPCLK2Freq();
 800571c:	f7ff f81a 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 8005720:	61f8      	str	r0, [r7, #28]
          break;
 8005722:	e01d      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005724:	f7fe ff6a 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005728:	61f8      	str	r0, [r7, #28]
          break;
 800572a:	e019      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800572c:	4b60      	ldr	r3, [pc, #384]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005738:	d10f      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800573a:	4b5f      	ldr	r3, [pc, #380]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800573c:	61fb      	str	r3, [r7, #28]
          break;
 800573e:	e00c      	b.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005740:	4b5b      	ldr	r3, [pc, #364]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005752:	61fb      	str	r3, [r7, #28]
          break;
 8005754:	e003      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8005756:	bf00      	nop
 8005758:	e3a8      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800575a:	bf00      	nop
 800575c:	e3a6      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800575e:	bf00      	nop
        break;
 8005760:	e3a4      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005762:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d83a      	bhi.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057eb 	.word	0x080057eb
 8005784:	080057eb 	.word	0x080057eb
 8005788:	080057eb 	.word	0x080057eb
 800578c:	080057b9 	.word	0x080057b9
 8005790:	080057eb 	.word	0x080057eb
 8005794:	080057eb 	.word	0x080057eb
 8005798:	080057eb 	.word	0x080057eb
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057eb 	.word	0x080057eb
 80057a4:	080057eb 	.word	0x080057eb
 80057a8:	080057eb 	.word	0x080057eb
 80057ac:	080057d5 	.word	0x080057d5
          frequency = HAL_RCC_GetPCLK1Freq();
 80057b0:	f7fe ffba 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 80057b4:	61f8      	str	r0, [r7, #28]
          break;
 80057b6:	e01d      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80057b8:	f7fe ff20 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80057bc:	61f8      	str	r0, [r7, #28]
          break;
 80057be:	e019      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057c0:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d10f      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80057ce:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80057d0:	61fb      	str	r3, [r7, #28]
          break;
 80057d2:	e00c      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d107      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	61fb      	str	r3, [r7, #28]
          break;
 80057e8:	e003      	b.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80057ea:	bf00      	nop
 80057ec:	e35e      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057ee:	bf00      	nop
 80057f0:	e35c      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057f2:	bf00      	nop
        break;
 80057f4:	e35a      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b30      	cmp	r3, #48	; 0x30
 8005806:	d021      	beq.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b30      	cmp	r3, #48	; 0x30
 800580c:	d829      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b20      	cmp	r3, #32
 8005812:	d011      	beq.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b20      	cmp	r3, #32
 8005818:	d823      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b10      	cmp	r3, #16
 8005824:	d004      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8005826:	e01c      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe ff7e 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 800582c:	61f8      	str	r0, [r7, #28]
          break;
 800582e:	e01d      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005830:	f7fe fee4 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005834:	61f8      	str	r0, [r7, #28]
          break;
 8005836:	e019      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005844:	d10f      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8005846:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005848:	61fb      	str	r3, [r7, #28]
          break;
 800584a:	e00c      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d107      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800585a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800585e:	61fb      	str	r3, [r7, #28]
          break;
 8005860:	e003      	b.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8005862:	bf00      	nop
 8005864:	e322      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005866:	bf00      	nop
 8005868:	e320      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800586a:	bf00      	nop
        break;
 800586c:	e31e      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2bc0      	cmp	r3, #192	; 0xc0
 800587e:	d027      	beq.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2bc0      	cmp	r3, #192	; 0xc0
 8005884:	d82f      	bhi.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b80      	cmp	r3, #128	; 0x80
 800588a:	d017      	beq.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d829      	bhi.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d004      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800589e:	e022      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7fe ff42 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 80058a4:	61f8      	str	r0, [r7, #28]
          break;
 80058a6:	e023      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80058a8:	f7fe fea8 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80058ac:	61f8      	str	r0, [r7, #28]
          break;
 80058ae:	e01f      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	02dc6c00 	.word	0x02dc6c00
 80058b8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058bc:	4b9b      	ldr	r3, [pc, #620]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c8:	d10f      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80058ca:	4b99      	ldr	r3, [pc, #612]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058cc:	61fb      	str	r3, [r7, #28]
          break;
 80058ce:	e00c      	b.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058d0:	4b96      	ldr	r3, [pc, #600]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d107      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e2:	61fb      	str	r3, [r7, #28]
          break;
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80058e6:	bf00      	nop
 80058e8:	e2e0      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058ea:	bf00      	nop
 80058ec:	e2de      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058ee:	bf00      	nop
        break;
 80058f0:	e2dc      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80058f2:	4b8e      	ldr	r3, [pc, #568]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005904:	d025      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590c:	d82c      	bhi.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005914:	d013      	beq.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591c:	d824      	bhi.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592a:	d004      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800592c:	e01c      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800592e:	f7fe fefb 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005932:	61f8      	str	r0, [r7, #28]
          break;
 8005934:	e01d      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005936:	f7fe fe61 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 800593a:	61f8      	str	r0, [r7, #28]
          break;
 800593c:	e019      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800593e:	4b7b      	ldr	r3, [pc, #492]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594a:	d10f      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 800594c:	4b78      	ldr	r3, [pc, #480]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800594e:	61fb      	str	r3, [r7, #28]
          break;
 8005950:	e00c      	b.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005952:	4b76      	ldr	r3, [pc, #472]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d107      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005964:	61fb      	str	r3, [r7, #28]
          break;
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005968:	bf00      	nop
 800596a:	e29f      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800596c:	bf00      	nop
 800596e:	e29d      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005970:	bf00      	nop
        break;
 8005972:	e29b      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005974:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005986:	d025      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800598e:	d82c      	bhi.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005996:	d013      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599e:	d824      	bhi.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d004      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80059ae:	e01c      	b.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe feba 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 80059b4:	61f8      	str	r0, [r7, #28]
          break;
 80059b6:	e01d      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80059b8:	f7fe fe20 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80059bc:	61f8      	str	r0, [r7, #28]
          break;
 80059be:	e019      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c0:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059cc:	d10f      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80059ce:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059d0:	61fb      	str	r3, [r7, #28]
          break;
 80059d2:	e00c      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059d4:	4b55      	ldr	r3, [pc, #340]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d107      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	61fb      	str	r3, [r7, #28]
          break;
 80059e8:	e003      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80059ea:	bf00      	nop
 80059ec:	e25e      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059ee:	bf00      	nop
 80059f0:	e25c      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059f2:	bf00      	nop
        break;
 80059f4:	e25a      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059f6:	4b4d      	ldr	r3, [pc, #308]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a08:	d007      	beq.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a10:	d12f      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a12:	f7fe fdf3 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005a16:	61f8      	str	r0, [r7, #28]
          break;
 8005a18:	e02e      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005a1a:	4b44      	ldr	r3, [pc, #272]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a26:	d126      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005a28:	4b40      	ldr	r3, [pc, #256]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d020      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a34:	4b3d      	ldr	r3, [pc, #244]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	fb03 f202 	mul.w	r2, r3, r2
 8005a48:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	3301      	adds	r3, #1
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a5a:	4b34      	ldr	r3, [pc, #208]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	0e5b      	lsrs	r3, r3, #25
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	3301      	adds	r3, #1
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	61fb      	str	r3, [r7, #28]
          break;
 8005a70:	e001      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005a72:	bf00      	nop
 8005a74:	e21a      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a76:	bf00      	nop
        break;
 8005a78:	e218      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fe62 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 8005a90:	61f8      	str	r0, [r7, #28]
        break;
 8005a92:	e20b      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a94:	f7fe fdb2 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005a98:	61f8      	str	r0, [r7, #28]
        break;
 8005a9a:	e207      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005a9c:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aa2:	f003 0318 	and.w	r3, r3, #24
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d010      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d834      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d024      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005ac0:	e02d      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ac8:	f000 fbe2 	bl	8006290 <RCCEx_GetSAIxPeriphCLKFreq>
 8005acc:	61f8      	str	r0, [r7, #28]
          break;
 8005ace:	e02b      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ad0:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d122      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005ae8:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	e005      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b06:	61fb      	str	r3, [r7, #28]
          break;
 8005b08:	e00b      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d106      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b1a:	61fb      	str	r3, [r7, #28]
          break;
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005b1e:	bf00      	nop
 8005b20:	e1c4      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b22:	bf00      	nop
 8005b24:	e1c2      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b26:	bf00      	nop
        break;
 8005b28:	e1c0      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	0800d708 	.word	0x0800d708
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b38:	4b96      	ldr	r3, [pc, #600]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4a:	d013      	beq.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b52:	d819      	bhi.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d004      	beq.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005b62:	e011      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fe fde0 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005b68:	61f8      	str	r0, [r7, #28]
          break;
 8005b6a:	e010      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b6c:	f7fe fd46 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005b70:	61f8      	str	r0, [r7, #28]
          break;
 8005b72:	e00c      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b74:	4b87      	ldr	r3, [pc, #540]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b80:	d104      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b84:	61fb      	str	r3, [r7, #28]
          break;
 8005b86:	e001      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005b88:	bf00      	nop
 8005b8a:	e18f      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b8c:	bf00      	nop
        break;
 8005b8e:	e18d      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b90:	4b80      	ldr	r3, [pc, #512]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005baa:	d819      	bhi.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bb8:	d004      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005bba:	e011      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fe fdb4 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
          break;
 8005bc2:	e010      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc4:	f7fe fd1a 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005bc8:	61f8      	str	r0, [r7, #28]
          break;
 8005bca:	e00c      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bcc:	4b71      	ldr	r3, [pc, #452]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d104      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005bda:	4b6f      	ldr	r3, [pc, #444]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bdc:	61fb      	str	r3, [r7, #28]
          break;
 8005bde:	e001      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005be0:	bf00      	nop
 8005be2:	e163      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005be4:	bf00      	nop
        break;
 8005be6:	e161      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005be8:	4b6a      	ldr	r3, [pc, #424]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c02:	d819      	bhi.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d004      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005c12:	e011      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe fd88 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005c18:	61f8      	str	r0, [r7, #28]
          break;
 8005c1a:	e010      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c1c:	f7fe fcee 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005c20:	61f8      	str	r0, [r7, #28]
          break;
 8005c22:	e00c      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c24:	4b5b      	ldr	r3, [pc, #364]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d104      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005c32:	4b59      	ldr	r3, [pc, #356]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c34:	61fb      	str	r3, [r7, #28]
          break;
 8005c36:	e001      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005c38:	bf00      	nop
 8005c3a:	e137      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c3c:	bf00      	nop
        break;
 8005c3e:	e135      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c40:	4b54      	ldr	r3, [pc, #336]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d011      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d818      	bhi.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d004      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005c64:	e011      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c66:	f7fe fd5f 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005c6a:	61f8      	str	r0, [r7, #28]
          break;
 8005c6c:	e010      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c6e:	f7fe fcc5 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005c72:	61f8      	str	r0, [r7, #28]
          break;
 8005c74:	e00c      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c76:	4b47      	ldr	r3, [pc, #284]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c82:	d104      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005c84:	4b44      	ldr	r3, [pc, #272]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c86:	61fb      	str	r3, [r7, #28]
          break;
 8005c88:	e001      	b.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005c8a:	bf00      	nop
 8005c8c:	e10e      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c8e:	bf00      	nop
        break;
 8005c90:	e10c      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c92:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ca4:	d02c      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cac:	d833      	bhi.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cb4:	d01a      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cbc:	d82b      	bhi.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cca:	d004      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005ccc:	e023      	b.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cce:	f7fe fd2b 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005cd2:	61f8      	str	r0, [r7, #28]
          break;
 8005cd4:	e026      	b.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d11a      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005ce4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ce8:	61fb      	str	r3, [r7, #28]
          break;
 8005cea:	e016      	b.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cec:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d111      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005cfa:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cfc:	61fb      	str	r3, [r7, #28]
          break;
 8005cfe:	e00e      	b.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d12:	61fb      	str	r3, [r7, #28]
          break;
 8005d14:	e005      	b.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005d16:	bf00      	nop
 8005d18:	e0c8      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d1a:	bf00      	nop
 8005d1c:	e0c6      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d1e:	bf00      	nop
 8005d20:	e0c4      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d22:	bf00      	nop
        break;
 8005d24:	e0c2      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d38:	d030      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d40:	d837      	bhi.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d48:	d01a      	beq.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d50:	d82f      	bhi.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5e:	d004      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005d60:	e027      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fe fce1 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005d66:	61f8      	str	r0, [r7, #28]
          break;
 8005d68:	e02a      	b.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d11e      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005d78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d7c:	61fb      	str	r3, [r7, #28]
          break;
 8005d7e:	e01a      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8c:	d115      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005d8e:	4b02      	ldr	r3, [pc, #8]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d90:	61fb      	str	r3, [r7, #28]
          break;
 8005d92:	e012      	b.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005d94:	40021000 	.word	0x40021000
 8005d98:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d9c:	4b46      	ldr	r3, [pc, #280]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d109      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	61fb      	str	r3, [r7, #28]
          break;
 8005db0:	e005      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005db2:	bf00      	nop
 8005db4:	e07a      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005db6:	bf00      	nop
 8005db8:	e078      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dba:	bf00      	nop
 8005dbc:	e076      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dbe:	bf00      	nop
        break;
 8005dc0:	e074      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005dc2:	4b3d      	ldr	r3, [pc, #244]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd4:	d02c      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ddc:	d855      	bhi.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dea:	d004      	beq.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005dec:	e04d      	b.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fe fc05 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8005df2:	61f8      	str	r0, [r7, #28]
          break;
 8005df4:	e04e      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005df6:	4b30      	ldr	r3, [pc, #192]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d145      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e02:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	e005      	b.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005e1a:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e2c:	61fb      	str	r3, [r7, #28]
          break;
 8005e2e:	e02e      	b.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e30:	4b21      	ldr	r3, [pc, #132]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e3c:	d129      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d122      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e4c:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e56:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	fb03 f202 	mul.w	r2, r3, r2
 8005e60:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	0d5b      	lsrs	r3, r3, #21
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	61fb      	str	r3, [r7, #28]
          break;
 8005e88:	e003      	b.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005e8a:	bf00      	nop
 8005e8c:	e00e      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e8e:	bf00      	nop
 8005e90:	e00c      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e92:	bf00      	nop
        break;
 8005e94:	e00a      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005e96:	bf00      	nop
 8005e98:	e008      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005e9a:	bf00      	nop
 8005e9c:	e006      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005e9e:	bf00      	nop
 8005ea0:	e004      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005eaa:	bf00      	nop
    }
  }

  return(frequency);
 8005eac:	69fb      	ldr	r3, [r7, #28]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	0800d708 	.word	0x0800d708

08005ec0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ece:	4b72      	ldr	r3, [pc, #456]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005eda:	4b6f      	ldr	r3, [pc, #444]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0203 	and.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d103      	bne.n	8005ef2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
       ||
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d142      	bne.n	8005f78 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e03f      	b.n	8005f78 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d018      	beq.n	8005f32 <RCCEx_PLLSAI1_Config+0x72>
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d825      	bhi.n	8005f50 <RCCEx_PLLSAI1_Config+0x90>
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d002      	beq.n	8005f0e <RCCEx_PLLSAI1_Config+0x4e>
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d009      	beq.n	8005f20 <RCCEx_PLLSAI1_Config+0x60>
 8005f0c:	e020      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f0e:	4b62      	ldr	r3, [pc, #392]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d11d      	bne.n	8005f56 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1e:	e01a      	b.n	8005f56 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f20:	4b5d      	ldr	r3, [pc, #372]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d116      	bne.n	8005f5a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f30:	e013      	b.n	8005f5a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f32:	4b59      	ldr	r3, [pc, #356]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f3e:	4b56      	ldr	r3, [pc, #344]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f4e:	e006      	b.n	8005f5e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
      break;
 8005f54:	e004      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d108      	bne.n	8005f78 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f66:	4b4c      	ldr	r3, [pc, #304]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f023 0203 	bic.w	r2, r3, #3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4949      	ldr	r1, [pc, #292]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 8086 	bne.w	800608c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f80:	4b45      	ldr	r3, [pc, #276]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a44      	ldr	r2, [pc, #272]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f8c:	f7fb face 	bl	800152c <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f92:	e009      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f94:	f7fb faca 	bl	800152c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d902      	bls.n	8005fa8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8005fa6:	e005      	b.n	8005fb4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fa8:	4b3b      	ldr	r3, [pc, #236]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ef      	bne.n	8005f94 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d168      	bne.n	800608c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d113      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fc0:	4b35      	ldr	r3, [pc, #212]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6892      	ldr	r2, [r2, #8]
 8005fcc:	0211      	lsls	r1, r2, #8
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68d2      	ldr	r2, [r2, #12]
 8005fd2:	06d2      	lsls	r2, r2, #27
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6852      	ldr	r2, [r2, #4]
 8005fda:	3a01      	subs	r2, #1
 8005fdc:	0112      	lsls	r2, r2, #4
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	492d      	ldr	r1, [pc, #180]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]
 8005fe6:	e02d      	b.n	8006044 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d115      	bne.n	800601a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fee:	4b2a      	ldr	r3, [pc, #168]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6892      	ldr	r2, [r2, #8]
 8005ffa:	0211      	lsls	r1, r2, #8
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6912      	ldr	r2, [r2, #16]
 8006000:	0852      	lsrs	r2, r2, #1
 8006002:	3a01      	subs	r2, #1
 8006004:	0552      	lsls	r2, r2, #21
 8006006:	4311      	orrs	r1, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6852      	ldr	r2, [r2, #4]
 800600c:	3a01      	subs	r2, #1
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	430a      	orrs	r2, r1
 8006012:	4921      	ldr	r1, [pc, #132]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006014:	4313      	orrs	r3, r2
 8006016:	610b      	str	r3, [r1, #16]
 8006018:	e014      	b.n	8006044 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800601a:	4b1f      	ldr	r3, [pc, #124]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	0211      	lsls	r1, r2, #8
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6952      	ldr	r2, [r2, #20]
 800602c:	0852      	lsrs	r2, r2, #1
 800602e:	3a01      	subs	r2, #1
 8006030:	0652      	lsls	r2, r2, #25
 8006032:	4311      	orrs	r1, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6852      	ldr	r2, [r2, #4]
 8006038:	3a01      	subs	r2, #1
 800603a:	0112      	lsls	r2, r2, #4
 800603c:	430a      	orrs	r2, r1
 800603e:	4916      	ldr	r1, [pc, #88]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006040:	4313      	orrs	r3, r2
 8006042:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006044:	4b14      	ldr	r3, [pc, #80]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a13      	ldr	r2, [pc, #76]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 800604a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800604e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fb fa6c 	bl	800152c <HAL_GetTick>
 8006054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006056:	e009      	b.n	800606c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006058:	f7fb fa68 	bl	800152c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d902      	bls.n	800606c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	73fb      	strb	r3, [r7, #15]
          break;
 800606a:	e005      	b.n	8006078 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ef      	beq.n	8006058 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	4904      	ldr	r1, [pc, #16]	; (8006098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006088:	4313      	orrs	r3, r2
 800608a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40021000 	.word	0x40021000
 800609c:	07ff800f 	.word	0x07ff800f
 80060a0:	ff9f800f 	.word	0xff9f800f
 80060a4:	f9ff800f 	.word	0xf9ff800f

080060a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060b6:	4b72      	ldr	r3, [pc, #456]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00e      	beq.n	80060e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060c2:	4b6f      	ldr	r3, [pc, #444]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0203 	and.w	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d103      	bne.n	80060da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
       ||
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d142      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e03f      	b.n	8006160 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d018      	beq.n	800611a <RCCEx_PLLSAI2_Config+0x72>
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d825      	bhi.n	8006138 <RCCEx_PLLSAI2_Config+0x90>
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d002      	beq.n	80060f6 <RCCEx_PLLSAI2_Config+0x4e>
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d009      	beq.n	8006108 <RCCEx_PLLSAI2_Config+0x60>
 80060f4:	e020      	b.n	8006138 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060f6:	4b62      	ldr	r3, [pc, #392]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11d      	bne.n	800613e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006106:	e01a      	b.n	800613e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006118:	e013      	b.n	8006142 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800611a:	4b59      	ldr	r3, [pc, #356]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006126:	4b56      	ldr	r3, [pc, #344]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006136:	e006      	b.n	8006146 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e004      	b.n	8006148 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800613e:	bf00      	nop
 8006140:	e002      	b.n	8006148 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006142:	bf00      	nop
 8006144:	e000      	b.n	8006148 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006146:	bf00      	nop
    }

    if(status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800614e:	4b4c      	ldr	r3, [pc, #304]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 0203 	bic.w	r2, r3, #3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4949      	ldr	r1, [pc, #292]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800615c:	4313      	orrs	r3, r2
 800615e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 8086 	bne.w	8006274 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006168:	4b45      	ldr	r3, [pc, #276]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a44      	ldr	r2, [pc, #272]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006174:	f7fb f9da 	bl	800152c <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800617a:	e009      	b.n	8006190 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800617c:	f7fb f9d6 	bl	800152c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d902      	bls.n	8006190 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
        break;
 800618e:	e005      	b.n	800619c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006190:	4b3b      	ldr	r3, [pc, #236]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ef      	bne.n	800617c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d168      	bne.n	8006274 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d113      	bne.n	80061d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061a8:	4b35      	ldr	r3, [pc, #212]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <RCCEx_PLLSAI2_Config+0x1dc>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	0211      	lsls	r1, r2, #8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68d2      	ldr	r2, [r2, #12]
 80061ba:	06d2      	lsls	r2, r2, #27
 80061bc:	4311      	orrs	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6852      	ldr	r2, [r2, #4]
 80061c2:	3a01      	subs	r2, #1
 80061c4:	0112      	lsls	r2, r2, #4
 80061c6:	430a      	orrs	r2, r1
 80061c8:	492d      	ldr	r1, [pc, #180]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	614b      	str	r3, [r1, #20]
 80061ce:	e02d      	b.n	800622c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d115      	bne.n	8006202 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061d6:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <RCCEx_PLLSAI2_Config+0x1e0>)
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6892      	ldr	r2, [r2, #8]
 80061e2:	0211      	lsls	r1, r2, #8
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6912      	ldr	r2, [r2, #16]
 80061e8:	0852      	lsrs	r2, r2, #1
 80061ea:	3a01      	subs	r2, #1
 80061ec:	0552      	lsls	r2, r2, #21
 80061ee:	4311      	orrs	r1, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6852      	ldr	r2, [r2, #4]
 80061f4:	3a01      	subs	r2, #1
 80061f6:	0112      	lsls	r2, r2, #4
 80061f8:	430a      	orrs	r2, r1
 80061fa:	4921      	ldr	r1, [pc, #132]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	614b      	str	r3, [r1, #20]
 8006200:	e014      	b.n	800622c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006202:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	4b21      	ldr	r3, [pc, #132]	; (800628c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6892      	ldr	r2, [r2, #8]
 800620e:	0211      	lsls	r1, r2, #8
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6952      	ldr	r2, [r2, #20]
 8006214:	0852      	lsrs	r2, r2, #1
 8006216:	3a01      	subs	r2, #1
 8006218:	0652      	lsls	r2, r2, #25
 800621a:	4311      	orrs	r1, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6852      	ldr	r2, [r2, #4]
 8006220:	3a01      	subs	r2, #1
 8006222:	0112      	lsls	r2, r2, #4
 8006224:	430a      	orrs	r2, r1
 8006226:	4916      	ldr	r1, [pc, #88]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800622c:	4b14      	ldr	r3, [pc, #80]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fb f978 	bl	800152c <HAL_GetTick>
 800623c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800623e:	e009      	b.n	8006254 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006240:	f7fb f974 	bl	800152c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d902      	bls.n	8006254 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	73fb      	strb	r3, [r7, #15]
          break;
 8006252:	e005      	b.n	8006260 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ef      	beq.n	8006240 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006268:	695a      	ldr	r2, [r3, #20]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	4904      	ldr	r1, [pc, #16]	; (8006280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006270:	4313      	orrs	r3, r2
 8006272:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	07ff800f 	.word	0x07ff800f
 8006288:	ff9f800f 	.word	0xff9f800f
 800628c:	f9ff800f 	.word	0xf9ff800f

08006290 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	; 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ac:	d10b      	bne.n	80062c6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80062ae:	4b7e      	ldr	r3, [pc, #504]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062b8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b60      	cmp	r3, #96	; 0x60
 80062be:	d112      	bne.n	80062e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062c0:	4b7a      	ldr	r3, [pc, #488]	; (80064ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	e00f      	b.n	80062e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062cc:	d10b      	bne.n	80062e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80062ce:	4b76      	ldr	r3, [pc, #472]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062d8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062e0:	d101      	bne.n	80062e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80062e2:	4b72      	ldr	r3, [pc, #456]	; (80064ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80062e4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 80d6 	bne.w	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d003      	beq.n	8006300 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fe:	d13b      	bne.n	8006378 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006300:	4b69      	ldr	r3, [pc, #420]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800630c:	f040 80c4 	bne.w	8006498 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006310:	4b65      	ldr	r3, [pc, #404]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80bd 	beq.w	8006498 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800631e:	4b62      	ldr	r3, [pc, #392]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	3301      	adds	r3, #1
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006332:	4b5d      	ldr	r3, [pc, #372]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800633e:	4b5a      	ldr	r3, [pc, #360]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	0edb      	lsrs	r3, r3, #27
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006350:	4b55      	ldr	r3, [pc, #340]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800635c:	2311      	movs	r3, #17
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e001      	b.n	8006366 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006362:	2307      	movs	r3, #7
 8006364:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	fb03 f202 	mul.w	r2, r3, r2
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006376:	e08f      	b.n	8006498 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d13a      	bne.n	80063f4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800637e:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800638a:	f040 8086 	bne.w	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800638e:	4b46      	ldr	r3, [pc, #280]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d07f      	beq.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800639a:	4b43      	ldr	r3, [pc, #268]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	3301      	adds	r3, #1
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063ae:	4b3e      	ldr	r3, [pc, #248]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80063ba:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	0edb      	lsrs	r3, r3, #27
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80063d8:	2311      	movs	r3, #17
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e001      	b.n	80063e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80063de:	2307      	movs	r3, #7
 80063e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	fb03 f202 	mul.w	r2, r3, r2
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e052      	b.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b80      	cmp	r3, #128	; 0x80
 80063f8:	d003      	beq.n	8006402 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d109      	bne.n	8006416 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006402:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640e:	d144      	bne.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006412:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006414:	e041      	b.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b20      	cmp	r3, #32
 800641a:	d003      	beq.n	8006424 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	d13a      	bne.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006430:	d133      	bne.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006432:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d02d      	beq.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	3301      	adds	r3, #1
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	0edb      	lsrs	r3, r3, #27
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800647c:	2311      	movs	r3, #17
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e001      	b.n	8006486 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006482:	2307      	movs	r3, #7
 8006484:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	fb03 f202 	mul.w	r2, r3, r2
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e000      	b.n	800649a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006498:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800649a:	69fb      	ldr	r3, [r7, #28]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3724      	adds	r7, #36	; 0x24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40021000 	.word	0x40021000
 80064ac:	001fff68 	.word	0x001fff68
 80064b0:	00f42400 	.word	0x00f42400

080064b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e078      	b.n	80065b8 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7fa fd91 	bl	8001000 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2203      	movs	r2, #3
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f86a 	bl	80065c0 <HAL_SD_InitCard>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e060      	b.n	80065b8 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fdb5 	bl	800706c <HAL_SD_GetCardStatus>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e055      	b.n	80065b8 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800650c:	7e3b      	ldrb	r3, [r7, #24]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006512:	7e7b      	ldrb	r3, [r7, #25]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10a      	bne.n	8006536 <HAL_SD_Init+0x82>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_SD_Init+0x78>
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006532:	65da      	str	r2, [r3, #92]	; 0x5c
 8006534:	e00b      	b.n	800654e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d104      	bne.n	8006548 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006544:	65da      	str	r2, [r3, #92]	; 0x5c
 8006546:	e002      	b.n	800654e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fe6b 	bl	8007230 <HAL_SD_ConfigWideBusOperation>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e029      	b.n	80065b8 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006564:	f7fa ffe2 	bl	800152c <HAL_GetTick>
 8006568:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800656a:	e014      	b.n	8006596 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800656c:	f7fa ffde 	bl	800152c <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800657a:	d10c      	bne.n	8006596 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e010      	b.n	80065b8 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 ff5e 	bl	8007458 <HAL_SD_GetCardState>
 800659c:	4603      	mov	r3, r0
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d1e4      	bne.n	800656c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3728      	adds	r7, #40	; 0x28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065c0:	b5b0      	push	{r4, r5, r7, lr}
 80065c2:	b08e      	sub	sp, #56	; 0x38
 80065c4:	af04      	add	r7, sp, #16
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80065d0:	2300      	movs	r3, #0
 80065d2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80065d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80065dc:	f7fe fd50 	bl	8005080 <HAL_RCCEx_GetPeriphCLKFreq>
 80065e0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e079      	b.n	80066f0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	4a3d      	ldr	r2, [pc, #244]	; (80066f8 <HAL_SD_InitCard+0x138>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0210 	orr.w	r2, r2, #16
 8006626:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681d      	ldr	r5, [r3, #0]
 800662c:	466c      	mov	r4, sp
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800663a:	f107 0308 	add.w	r3, r7, #8
 800663e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006640:	4628      	mov	r0, r5
 8006642:	f002 f90f 	bl	8008864 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f002 f952 	bl	80088f4 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006656:	fbb2 f3f3 	udiv	r3, r2, r3
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800665c:	4a27      	ldr	r2, [pc, #156]	; (80066fc <HAL_SD_InitCard+0x13c>)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	3301      	adds	r3, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f7fa ff6c 	bl	8001544 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 ffd3 	bl	8007618 <SD_PowerON>
 8006672:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e02e      	b.n	80066f0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 ff00 	bl	8007498 <SD_InitCard>
 8006698:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e01b      	b.n	80066f0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066c0:	4618      	mov	r0, r3
 80066c2:	f002 f9ad 	bl	8008a20 <SDMMC_CmdBlockLength>
 80066c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00f      	beq.n	80066ee <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a0b      	ldr	r2, [pc, #44]	; (8006700 <HAL_SD_InitCard+0x140>)
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bdb0      	pop	{r4, r5, r7, pc}
 80066f8:	014f8b59 	.word	0x014f8b59
 80066fc:	00012110 	.word	0x00012110
 8006700:	1fe00fff 	.word	0x1fe00fff

08006704 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d107      	bne.n	800672c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e08d      	b.n	8006848 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	f040 8086 	bne.w	8006846 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	441a      	add	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	429a      	cmp	r2, r3
 800674c:	d907      	bls.n	800675e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e074      	b.n	8006848 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2203      	movs	r2, #3
 8006762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	025a      	lsls	r2, r3, #9
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d002      	beq.n	800678a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	025b      	lsls	r3, r3, #9
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800678e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	025b      	lsls	r3, r3, #9
 8006794:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006796:	2390      	movs	r3, #144	; 0x90
 8006798:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800679a:	2302      	movs	r3, #2
 800679c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800679e:	2300      	movs	r3, #0
 80067a0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f107 0210 	add.w	r2, r7, #16
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f002 f909 	bl	80089c8 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c4:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2201      	movs	r2, #1
 80067d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d90a      	bls.n	80067f2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2282      	movs	r2, #130	; 0x82
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 f95f 	bl	8008aac <SDMMC_CmdReadMultiBlock>
 80067ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80067f0:	e009      	b.n	8006806 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2281      	movs	r2, #129	; 0x81
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067fe:	4618      	mov	r0, r3
 8006800:	f002 f931 	bl	8008a66 <SDMMC_CmdReadSingleBlock>
 8006804:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d012      	beq.n	8006832 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006812:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	431a      	orrs	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e00a      	b.n	8006848 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006840:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	e000      	b.n	8006848 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006846:	2302      	movs	r3, #2
  }
}
 8006848:	4618      	mov	r0, r3
 800684a:	3730      	adds	r7, #48	; 0x30
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	1fe00fff 	.word	0x1fe00fff

08006854 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e08d      	b.n	8006998 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 8086 	bne.w	8006996 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	429a      	cmp	r2, r3
 800689c:	d907      	bls.n	80068ae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e074      	b.n	8006998 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2203      	movs	r2, #3
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2200      	movs	r2, #0
 80068bc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	025a      	lsls	r2, r3, #9
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d002      	beq.n	80068da <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	025b      	lsls	r3, r3, #9
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	025b      	lsls	r3, r3, #9
 80068e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80068e6:	2390      	movs	r3, #144	; 0x90
 80068e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f107 0210 	add.w	r2, r7, #16
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f002 f861 	bl	80089c8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006914:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d90a      	bls.n	8006942 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	22a0      	movs	r2, #160	; 0xa0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006938:	4618      	mov	r0, r3
 800693a:	f002 f8fd 	bl	8008b38 <SDMMC_CmdWriteMultiBlock>
 800693e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006940:	e009      	b.n	8006956 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2290      	movs	r2, #144	; 0x90
 8006946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694e:	4618      	mov	r0, r3
 8006950:	f002 f8cf 	bl	8008af2 <SDMMC_CmdWriteSingleBlock>
 8006954:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d012      	beq.n	8006982 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	431a      	orrs	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e00a      	b.n	8006998 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3730      	adds	r7, #48	; 0x30
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	1fe00fff 	.word	0x1fe00fff

080069a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_SD_IRQHandler+0x2e>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f98e 	bl	8007cec <SD_Read_IT>
 80069d0:	e199      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80ae 	beq.w	8006b3e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80069fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80069fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d038      	beq.n	8006a9c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <HAL_SD_IRQHandler+0x9a>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d011      	beq.n	8006a62 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 f89c 	bl	8008b80 <SDMMC_CmdStopTransfer>
 8006a48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f957 	bl	8006d10 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a90      	ldr	r2, [pc, #576]	; (8006ca8 <HAL_SD_IRQHandler+0x304>)
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <HAL_SD_IRQHandler+0xe8>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f002 fd63 	bl	8009558 <HAL_SD_RxCpltCallback>
 8006a92:	e138      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f002 fd55 	bl	8009544 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006a9a:	e134      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 812f 	beq.w	8006d06 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2200      	movs	r2, #0
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2200      	movs	r2, #0
 8006abe:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <HAL_SD_IRQHandler+0x130>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d011      	beq.n	8006af8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 f851 	bl	8008b80 <SDMMC_CmdStopTransfer>
 8006ade:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f90c 	bl	8006d10 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <HAL_SD_IRQHandler+0x176>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f002 fd12 	bl	8009544 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d105      	bne.n	8006b36 <HAL_SD_IRQHandler+0x192>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80e8 	beq.w	8006d06 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f002 fd0e 	bl	8009558 <HAL_SD_RxCpltCallback>
}
 8006b3c:	e0e3      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <HAL_SD_IRQHandler+0x1ba>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f919 	bl	8007d8e <SD_Write_IT>
 8006b5c:	e0d3      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 809f 	beq.w	8006cac <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	f043 0202 	orr.w	r2, r3, #2
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f043 0208 	orr.w	r2, r3, #8
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	f043 0220 	orr.w	r2, r3, #32
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	f043 0210 	orr.w	r2, r3, #16
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a33      	ldr	r2, [pc, #204]	; (8006ca8 <HAL_SD_IRQHandler+0x304>)
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006bec:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bfc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c1c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 ffac 	bl	8008b80 <SDMMC_CmdStopTransfer>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c42:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f852 	bl	8006d10 <HAL_SD_ErrorCallback>
}
 8006c6c:	e04b      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d046      	beq.n	8006d06 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d042      	beq.n	8006d06 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f835 	bl	8006d10 <HAL_SD_ErrorCallback>
}
 8006ca6:	e02e      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
 8006ca8:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d025      	beq.n	8006d06 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10c      	bne.n	8006cec <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 f8d4 	bl	8007e8a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006ce2:	e010      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f8bc 	bl	8007e62 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006cea:	e00c      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 f8bd 	bl	8007e76 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006cfc:	e003      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f8a5 	bl	8007e4e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006d04:	e7ff      	b.n	8006d06 <HAL_SD_IRQHandler+0x362>
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop

08006d10 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d32:	0f9b      	lsrs	r3, r3, #30
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	0e9b      	lsrs	r3, r3, #26
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	0e1b      	lsrs	r3, r3, #24
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d84:	0d1b      	lsrs	r3, r3, #20
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da2:	0bdb      	lsrs	r3, r3, #15
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db4:	0b9b      	lsrs	r3, r3, #14
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc6:	0b5b      	lsrs	r3, r3, #13
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd8:	0b1b      	lsrs	r3, r3, #12
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d163      	bne.n	8006ebc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df8:	009a      	lsls	r2, r3, #2
 8006dfa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006dfe:	4013      	ands	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e04:	0f92      	lsrs	r2, r2, #30
 8006e06:	431a      	orrs	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e10:	0edb      	lsrs	r3, r3, #27
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e22:	0e1b      	lsrs	r3, r3, #24
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e34:	0d5b      	lsrs	r3, r3, #21
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e46:	0c9b      	lsrs	r3, r3, #18
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e58:	0bdb      	lsrs	r3, r3, #15
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	7e1b      	ldrb	r3, [r3, #24]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	3302      	adds	r3, #2
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e86:	fb03 f202 	mul.w	r2, r3, r2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	7a1b      	ldrb	r3, [r3, #8]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	2201      	movs	r2, #1
 8006e9a:	409a      	lsls	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ea8:	0a52      	lsrs	r2, r2, #9
 8006eaa:	fb03 f202 	mul.w	r2, r3, r2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb8:	659a      	str	r2, [r3, #88]	; 0x58
 8006eba:	e031      	b.n	8006f20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d11d      	bne.n	8006f00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	029a      	lsls	r2, r3, #10
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	659a      	str	r2, [r3, #88]	; 0x58
 8006efe:	e00f      	b.n	8006f20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a58      	ldr	r2, [pc, #352]	; (8007068 <HAL_SD_GetCardCSD+0x344>)
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e09d      	b.n	800705c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f24:	0b9b      	lsrs	r3, r3, #14
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f36:	09db      	lsrs	r3, r3, #7
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f58:	0fdb      	lsrs	r3, r3, #31
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f64:	0f5b      	lsrs	r3, r3, #29
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f76:	0e9b      	lsrs	r3, r3, #26
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f88:	0d9b      	lsrs	r3, r3, #22
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9a:	0d5b      	lsrs	r3, r3, #21
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb6:	0c1b      	lsrs	r3, r3, #16
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fca:	0bdb      	lsrs	r3, r3, #15
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	0b9b      	lsrs	r3, r3, #14
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff2:	0b5b      	lsrs	r3, r3, #13
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007006:	0b1b      	lsrs	r3, r3, #12
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	b2da      	uxtb	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701a:	0a9b      	lsrs	r3, r3, #10
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	b2da      	uxtb	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704a:	b2da      	uxtb	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	1fe00fff 	.word	0x1fe00fff

0800706c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b094      	sub	sp, #80	; 0x50
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fbd4 	bl	8007830 <SD_SendSDStatus>
 8007088:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800708a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800708c:	2b00      	cmp	r3, #0
 800708e:	d011      	beq.n	80070b4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a4f      	ldr	r2, [pc, #316]	; (80071d4 <HAL_SD_GetCardStatus+0x168>)
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80070b2:	e070      	b.n	8007196 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	061a      	lsls	r2, r3, #24
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007104:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	0e1b      	lsrs	r3, r3, #24
 800710a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	b2da      	uxtb	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b2da      	uxtb	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	0d1b      	lsrs	r3, r3, #20
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	b2da      	uxtb	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b29b      	uxth	r3, r3
 8007138:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800713c:	b29a      	uxth	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	b29b      	uxth	r3, r3
 8007142:	b2db      	uxtb	r3, r3
 8007144:	b29b      	uxth	r3, r3
 8007146:	4313      	orrs	r3, r2
 8007148:	b29a      	uxth	r2, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	0a9b      	lsrs	r3, r3, #10
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007158:	b2da      	uxtb	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	b2da      	uxtb	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	b2db      	uxtb	r3, r3
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	b2da      	uxtb	r2, r3
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	b2da      	uxtb	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	0e1b      	lsrs	r3, r3, #24
 8007190:	b2da      	uxtb	r2, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fc3e 	bl	8008a20 <SDMMC_CmdBlockLength>
 80071a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80071a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00d      	beq.n	80071c8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_SD_GetCardStatus+0x168>)
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80071c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3750      	adds	r7, #80	; 0x50
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	1fe00fff 	.word	0x1fe00fff

080071d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007230:	b5b0      	push	{r4, r5, r7, lr}
 8007232:	b090      	sub	sp, #64	; 0x40
 8007234:	af04      	add	r7, sp, #16
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2203      	movs	r2, #3
 8007244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	2b03      	cmp	r3, #3
 800724e:	d02e      	beq.n	80072ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007256:	d106      	bne.n	8007266 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
 8007264:	e029      	b.n	80072ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800726c:	d10a      	bne.n	8007284 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fbd6 	bl	8007a20 <SD_WideBus_Enable>
 8007274:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	639a      	str	r2, [r3, #56]	; 0x38
 8007282:	e01a      	b.n	80072ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fc13 	bl	8007ab6 <SD_WideBus_Disable>
 8007290:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
 800729e:	e00c      	b.n	80072ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
 80072ac:	e005      	b.n	80072ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a60      	ldr	r2, [pc, #384]	; (8007448 <HAL_SD_ConfigWideBusOperation+0x218>)
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80072d0:	e097      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80072d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80072d6:	f7fd fed3 	bl	8005080 <HAL_RCCEx_GetPeriphCLKFreq>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8086 	beq.w	80073f0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695a      	ldr	r2, [r3, #20]
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	4952      	ldr	r1, [pc, #328]	; (800744c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007302:	fba1 1303 	umull	r1, r3, r1, r3
 8007306:	0e1b      	lsrs	r3, r3, #24
 8007308:	429a      	cmp	r2, r3
 800730a:	d303      	bcc.n	8007314 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	e05a      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800731c:	d103      	bne.n	8007326 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	e051      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732e:	d126      	bne.n	800737e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10e      	bne.n	8007356 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	4a45      	ldr	r2, [pc, #276]	; (8007450 <HAL_SD_ConfigWideBusOperation+0x220>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d906      	bls.n	800734e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	4a42      	ldr	r2, [pc, #264]	; (800744c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	0e5b      	lsrs	r3, r3, #25
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	e03d      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	e039      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d906      	bls.n	8007376 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	4a38      	ldr	r2, [pc, #224]	; (800744c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	0e5b      	lsrs	r3, r3, #25
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e029      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e025      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10e      	bne.n	80073a4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	4a32      	ldr	r2, [pc, #200]	; (8007454 <HAL_SD_ConfigWideBusOperation+0x224>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d906      	bls.n	800739c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	4a2e      	ldr	r2, [pc, #184]	; (800744c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	0e1b      	lsrs	r3, r3, #24
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	e016      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	e012      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	4a28      	ldr	r2, [pc, #160]	; (8007454 <HAL_SD_ConfigWideBusOperation+0x224>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d906      	bls.n	80073c4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	4a24      	ldr	r2, [pc, #144]	; (800744c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	0e1b      	lsrs	r3, r3, #24
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e002      	b.n	80073ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681d      	ldr	r5, [r3, #0]
 80073d4:	466c      	mov	r4, sp
 80073d6:	f107 0318 	add.w	r3, r7, #24
 80073da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073e2:	f107 030c 	add.w	r3, r7, #12
 80073e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073e8:	4628      	mov	r0, r5
 80073ea:	f001 fa3b 	bl	8008864 <SDMMC_Init>
 80073ee:	e008      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fb08 	bl	8008a20 <SDMMC_CmdBlockLength>
 8007410:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <HAL_SD_ConfigWideBusOperation+0x218>)
 800741e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800743a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800743e:	4618      	mov	r0, r3
 8007440:	3730      	adds	r7, #48	; 0x30
 8007442:	46bd      	mov	sp, r7
 8007444:	bdb0      	pop	{r4, r5, r7, pc}
 8007446:	bf00      	nop
 8007448:	1fe00fff 	.word	0x1fe00fff
 800744c:	55e63b89 	.word	0x55e63b89
 8007450:	02faf080 	.word	0x02faf080
 8007454:	017d7840 	.word	0x017d7840

08007458 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fab0 	bl	80079d0 <SD_SendStatus>
 8007470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0a5b      	lsrs	r3, r3, #9
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800748e:	693b      	ldr	r3, [r7, #16]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007498:	b5b0      	push	{r4, r5, r7, lr}
 800749a:	b090      	sub	sp, #64	; 0x40
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80074a0:	2301      	movs	r3, #1
 80074a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fa35 	bl	8008918 <SDMMC_GetPowerState>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074b8:	e0a9      	b.n	800760e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d02e      	beq.n	8007520 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 fc7a 	bl	8008dc0 <SDMMC_CmdSendCID>
 80074cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	e09a      	b.n	800760e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 fa5f 	bl	80089a2 <SDMMC_GetResponse>
 80074e4:	4602      	mov	r2, r0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2104      	movs	r1, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fa56 	bl	80089a2 <SDMMC_GetResponse>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2108      	movs	r1, #8
 8007502:	4618      	mov	r0, r3
 8007504:	f001 fa4d 	bl	80089a2 <SDMMC_GetResponse>
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	210c      	movs	r1, #12
 8007514:	4618      	mov	r0, r3
 8007516:	f001 fa44 	bl	80089a2 <SDMMC_GetResponse>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	2b03      	cmp	r3, #3
 8007526:	d00d      	beq.n	8007544 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f107 020e 	add.w	r2, r7, #14
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fc83 	bl	8008e3e <SDMMC_CmdSetRelAdd>
 8007538:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800753a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <SD_InitCard+0xac>
    {
      return errorstate;
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	e064      	b.n	800760e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007548:	2b03      	cmp	r3, #3
 800754a:	d036      	beq.n	80075ba <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f001 fc4c 	bl	8008dfe <SDMMC_CmdSendCSD>
 8007566:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <SD_InitCard+0xda>
    {
      return errorstate;
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007570:	e04d      	b.n	800760e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2100      	movs	r1, #0
 8007578:	4618      	mov	r0, r3
 800757a:	f001 fa12 	bl	80089a2 <SDMMC_GetResponse>
 800757e:	4602      	mov	r2, r0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2104      	movs	r1, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fa09 	bl	80089a2 <SDMMC_GetResponse>
 8007590:	4602      	mov	r2, r0
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2108      	movs	r1, #8
 800759c:	4618      	mov	r0, r3
 800759e:	f001 fa00 	bl	80089a2 <SDMMC_GetResponse>
 80075a2:	4602      	mov	r2, r0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	210c      	movs	r1, #12
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f9f7 	bl	80089a2 <SDMMC_GetResponse>
 80075b4:	4602      	mov	r2, r0
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2104      	movs	r1, #4
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 f9ee 	bl	80089a2 <SDMMC_GetResponse>
 80075c6:	4603      	mov	r3, r0
 80075c8:	0d1a      	lsrs	r2, r3, #20
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80075ce:	f107 0310 	add.w	r3, r7, #16
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fba5 	bl	8006d24 <HAL_SD_GetCardCSD>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075e4:	e013      	b.n	800760e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	2200      	movs	r2, #0
 80075f2:	461c      	mov	r4, r3
 80075f4:	4615      	mov	r5, r2
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	4608      	mov	r0, r1
 80075fc:	f001 faf6 	bl	8008bec <SDMMC_CmdSelDesel>
 8007600:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <SD_InitCard+0x174>
  {
    return errorstate;
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	e000      	b.n	800760e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3740      	adds	r7, #64	; 0x40
 8007612:	46bd      	mov	sp, r7
 8007614:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007618 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	2300      	movs	r3, #0
 800762a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800762c:	f7f9 ff7e 	bl	800152c <HAL_GetTick>
 8007630:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fafc 	bl	8008c34 <SDMMC_CmdGoIdleState>
 800763c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <SD_PowerON+0x30>
  {
    return errorstate;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	e0ed      	b.n	8007824 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f001 fb0f 	bl	8008c70 <SDMMC_CmdOperCond>
 8007652:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4618      	mov	r0, r3
 8007666:	f001 fae5 	bl	8008c34 <SDMMC_CmdGoIdleState>
 800766a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <SD_PowerON+0x64>
    {
      return errorstate;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	e0d6      	b.n	8007824 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	2b01      	cmp	r3, #1
 8007682:	d137      	bne.n	80076f4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fb10 	bl	8008cb0 <SDMMC_CmdAppCommand>
 8007690:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d02d      	beq.n	80076f4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800769c:	e0c2      	b.n	8007824 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fb03 	bl	8008cb0 <SDMMC_CmdAppCommand>
 80076aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	e0b6      	b.n	8007824 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	495c      	ldr	r1, [pc, #368]	; (800782c <SD_PowerON+0x214>)
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fb1a 	bl	8008cf6 <SDMMC_CmdAppOperCommand>
 80076c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076ce:	e0a9      	b.n	8007824 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 f963 	bl	80089a2 <SDMMC_GetResponse>
 80076dc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	0fdb      	lsrs	r3, r3, #31
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <SD_PowerON+0xd2>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <SD_PowerON+0xd4>
 80076ea:	2300      	movs	r3, #0
 80076ec:	61bb      	str	r3, [r7, #24]

    count++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d802      	bhi.n	8007704 <SD_PowerON+0xec>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0cc      	beq.n	800769e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800770a:	4293      	cmp	r3, r2
 800770c:	d902      	bls.n	8007714 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800770e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007712:	e087      	b.n	8007824 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d07e      	beq.n	800781c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d17a      	bne.n	8007822 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d075      	beq.n	8007822 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0208 	orr.w	r2, r2, #8
 800774c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fbda 	bl	8008f0c <SDMMC_CmdVoltageSwitch>
 8007758:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00c      	beq.n	800777a <SD_PowerON+0x162>
        {
          return errorstate;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	e05f      	b.n	8007824 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007764:	f7f9 fee2 	bl	800152c <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007772:	d102      	bne.n	800777a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007778:	e054      	b.n	8007824 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007788:	d1ec      	bne.n	8007764 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007792:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800779e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a2:	d002      	beq.n	80077aa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80077a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077a8:	e03c      	b.n	8007824 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80077aa:	2001      	movs	r0, #1
 80077ac:	f000 fb44 	bl	8007e38 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0204 	orr.w	r2, r2, #4
 80077be:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80077c0:	e00a      	b.n	80077d8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077c2:	f7f9 feb3 	bl	800152c <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d0:	d102      	bne.n	80077d8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80077d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077d6:	e025      	b.n	8007824 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077e6:	d1ec      	bne.n	80077c2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007800:	d102      	bne.n	8007808 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007806:	e00d      	b.n	8007824 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2213      	movs	r2, #19
 800780e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
 800781a:	e002      	b.n	8007822 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	c1100000 	.word	0xc1100000

08007830 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08c      	sub	sp, #48	; 0x30
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800783a:	f7f9 fe77 	bl	800152c <HAL_GetTick>
 800783e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2100      	movs	r1, #0
 800784a:	4618      	mov	r0, r3
 800784c:	f001 f8a9 	bl	80089a2 <SDMMC_GetResponse>
 8007850:	4603      	mov	r3, r0
 8007852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800785a:	d102      	bne.n	8007862 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800785c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007860:	e0b0      	b.n	80079c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2140      	movs	r1, #64	; 0x40
 8007868:	4618      	mov	r0, r3
 800786a:	f001 f8d9 	bl	8008a20 <SDMMC_CmdBlockLength>
 800786e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	e0a0      	b.n	80079c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788a:	041b      	lsls	r3, r3, #16
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f001 fa0e 	bl	8008cb0 <SDMMC_CmdAppCommand>
 8007894:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	e08d      	b.n	80079c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80078b2:	2360      	movs	r3, #96	; 0x60
 80078b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078b6:	2302      	movs	r3, #2
 80078b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80078be:	2301      	movs	r3, #1
 80078c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f107 0208 	add.w	r2, r7, #8
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 f87b 	bl	80089c8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 faf6 	bl	8008ec8 <SDMMC_CmdStatusRegister>
 80078dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d02b      	beq.n	800793c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	e069      	b.n	80079c4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d013      	beq.n	8007926 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80078fe:	2300      	movs	r3, #0
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007902:	e00d      	b.n	8007920 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 ffd5 	bl	80088b8 <SDMMC_ReadFIFO>
 800790e:	4602      	mov	r2, r0
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	601a      	str	r2, [r3, #0]
        pData++;
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	3304      	adds	r3, #4
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	3301      	adds	r3, #1
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	2b07      	cmp	r3, #7
 8007924:	d9ee      	bls.n	8007904 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007926:	f7f9 fe01 	bl	800152c <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007934:	d102      	bne.n	800793c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007936:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800793a:	e043      	b.n	80079c4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007942:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0d2      	beq.n	80078f0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007950:	f003 0308 	and.w	r3, r3, #8
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007958:	2308      	movs	r3, #8
 800795a:	e033      	b.n	80079c4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800796a:	2302      	movs	r3, #2
 800796c:	e02a      	b.n	80079c4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d017      	beq.n	80079ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800797c:	2320      	movs	r3, #32
 800797e:	e021      	b.n	80079c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 ff97 	bl	80088b8 <SDMMC_ReadFIFO>
 800798a:	4602      	mov	r2, r0
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	601a      	str	r2, [r3, #0]
    pData++;
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	3304      	adds	r3, #4
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007996:	f7f9 fdc9 	bl	800152c <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a4:	d102      	bne.n	80079ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079aa:	e00b      	b.n	80079c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e2      	bne.n	8007980 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a03      	ldr	r2, [pc, #12]	; (80079cc <SD_SendSDStatus+0x19c>)
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3730      	adds	r7, #48	; 0x30
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	18000f3a 	.word	0x18000f3a

080079d0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d102      	bne.n	80079e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80079e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079e4:	e018      	b.n	8007a18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f001 fa45 	bl	8008e82 <SDMMC_CmdSendStatus>
 80079f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	e009      	b.n	8007a18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 ffc9 	bl	80089a2 <SDMMC_GetResponse>
 8007a10:	4602      	mov	r2, r0
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2100      	movs	r1, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 ffb3 	bl	80089a2 <SDMMC_GetResponse>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a46:	d102      	bne.n	8007a4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a4c:	e02f      	b.n	8007aae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a4e:	f107 030c 	add.w	r3, r7, #12
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f879 	bl	8007b4c <SD_FindSCR>
 8007a5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	e023      	b.n	8007aae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01c      	beq.n	8007aaa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a78:	041b      	lsls	r3, r3, #16
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f001 f917 	bl	8008cb0 <SDMMC_CmdAppCommand>
 8007a82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	e00f      	b.n	8007aae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2102      	movs	r1, #2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 f94e 	bl	8008d36 <SDMMC_CmdBusWidth>
 8007a9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	e003      	b.n	8007aae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e001      	b.n	8007aae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007aaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 ff68 	bl	80089a2 <SDMMC_GetResponse>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007adc:	d102      	bne.n	8007ae4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ae2:	e02f      	b.n	8007b44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ae4:	f107 030c 	add.w	r3, r7, #12
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f82e 	bl	8007b4c <SD_FindSCR>
 8007af0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	e023      	b.n	8007b44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01c      	beq.n	8007b40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0e:	041b      	lsls	r3, r3, #16
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f001 f8cc 	bl	8008cb0 <SDMMC_CmdAppCommand>
 8007b18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	e00f      	b.n	8007b44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 f903 	bl	8008d36 <SDMMC_CmdBusWidth>
 8007b30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	e003      	b.n	8007b44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e001      	b.n	8007b44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08e      	sub	sp, #56	; 0x38
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b56:	f7f9 fce9 	bl	800152c <HAL_GetTick>
 8007b5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007b60:	2300      	movs	r3, #0
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2108      	movs	r1, #8
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 ff54 	bl	8008a20 <SDMMC_CmdBlockLength>
 8007b78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e0ad      	b.n	8007ce0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8c:	041b      	lsls	r3, r3, #16
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f001 f88d 	bl	8008cb0 <SDMMC_CmdAppCommand>
 8007b96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	e09e      	b.n	8007ce0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ba6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007ba8:	2308      	movs	r3, #8
 8007baa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007bac:	2330      	movs	r3, #48	; 0x30
 8007bae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f107 0210 	add.w	r2, r7, #16
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fefe 	bl	80089c8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 f8d3 	bl	8008d7c <SDMMC_CmdSendSCR>
 8007bd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d027      	beq.n	8007c2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	e07e      	b.n	8007ce0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d113      	bne.n	8007c18 <SD_FindSCR+0xcc>
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d110      	bne.n	8007c18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fe5c 	bl	80088b8 <SDMMC_ReadFIFO>
 8007c00:	4603      	mov	r3, r0
 8007c02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fe55 	bl	80088b8 <SDMMC_ReadFIFO>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	60fb      	str	r3, [r7, #12]
      index++;
 8007c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c14:	3301      	adds	r3, #1
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c18:	f7f9 fc88 	bl	800152c <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c26:	d102      	bne.n	8007c2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c2c:	e058      	b.n	8007ce0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c34:	f240 532a 	movw	r3, #1322	; 0x52a
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0d1      	beq.n	8007be2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2208      	movs	r2, #8
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c54:	2308      	movs	r3, #8
 8007c56:	e043      	b.n	8007ce0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e036      	b.n	8007ce0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2220      	movs	r2, #32
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c88:	2320      	movs	r3, #32
 8007c8a:	e029      	b.n	8007ce0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <SD_FindSCR+0x19c>)
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	061a      	lsls	r2, r3, #24
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ca0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	0a1b      	lsrs	r3, r3, #8
 8007ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007caa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	0e1b      	lsrs	r3, r3, #24
 8007cb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	601a      	str	r2, [r3, #0]
    scr++;
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	3304      	adds	r3, #4
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	061a      	lsls	r2, r3, #24
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cc8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	0a1b      	lsrs	r3, r3, #8
 8007cce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cd2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	0e1b      	lsrs	r3, r3, #24
 8007cd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3738      	adds	r7, #56	; 0x38
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	18000f3a 	.word	0x18000f3a

08007cec <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d03f      	beq.n	8007d86 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e033      	b.n	8007d74 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fdd1 	bl	80088b8 <SDMMC_ReadFIFO>
 8007d16:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	0e1b      	lsrs	r3, r3, #24
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3301      	adds	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b07      	cmp	r3, #7
 8007d78:	d9c8      	bls.n	8007d0c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007d86:	bf00      	nop
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d043      	beq.n	8007e30 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e037      	b.n	8007e1e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	021a      	lsls	r2, r3, #8
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	041a      	lsls	r2, r3, #16
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	061a      	lsls	r2, r3, #24
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f107 0208 	add.w	r2, r7, #8
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fd5d 	bl	80088d2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b07      	cmp	r3, #7
 8007e22:	d9c4      	bls.n	8007dae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e30:	bf00      	nop
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e095      	b.n	8007fdc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d108      	bne.n	8007eca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ec0:	d009      	beq.n	8007ed6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	61da      	str	r2, [r3, #28]
 8007ec8:	e005      	b.n	8007ed6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7f9 f911 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f16:	d902      	bls.n	8007f1e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	e002      	b.n	8007f24 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f2c:	d007      	beq.n	8007f3e <HAL_SPI_Init+0xa0>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f36:	d002      	beq.n	8007f3e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	ea42 0103 	orr.w	r1, r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	f003 0204 	and.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	f003 0310 	and.w	r3, r3, #16
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fba:	ea42 0103 	orr.w	r1, r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e038      	b.n	800806c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7f9 f962 	bl	80012d8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3308      	adds	r3, #8
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f000 fafa 	bl	8008618 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	461a      	mov	r2, r3
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	f000 fb8c 	bl	800874c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6858      	ldr	r0, [r3, #4]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	f000 fbd5 	bl	80087f0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	6892      	ldr	r2, [r2, #8]
 800804e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	6892      	ldr	r2, [r2, #8]
 800805a:	f041 0101 	orr.w	r1, r1, #1
 800805e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e049      	b.n	800811a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f841 	bl	8008122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f000 f9f8 	bl	80084a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d001      	beq.n	8008150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e04f      	b.n	80081f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a23      	ldr	r2, [pc, #140]	; (80081fc <HAL_TIM_Base_Start_IT+0xc4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01d      	beq.n	80081ae <HAL_TIM_Base_Start_IT+0x76>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817a:	d018      	beq.n	80081ae <HAL_TIM_Base_Start_IT+0x76>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1f      	ldr	r2, [pc, #124]	; (8008200 <HAL_TIM_Base_Start_IT+0xc8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d013      	beq.n	80081ae <HAL_TIM_Base_Start_IT+0x76>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1e      	ldr	r2, [pc, #120]	; (8008204 <HAL_TIM_Base_Start_IT+0xcc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00e      	beq.n	80081ae <HAL_TIM_Base_Start_IT+0x76>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1c      	ldr	r2, [pc, #112]	; (8008208 <HAL_TIM_Base_Start_IT+0xd0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_TIM_Base_Start_IT+0x76>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1b      	ldr	r2, [pc, #108]	; (800820c <HAL_TIM_Base_Start_IT+0xd4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d004      	beq.n	80081ae <HAL_TIM_Base_Start_IT+0x76>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a19      	ldr	r2, [pc, #100]	; (8008210 <HAL_TIM_Base_Start_IT+0xd8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d115      	bne.n	80081da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	4b17      	ldr	r3, [pc, #92]	; (8008214 <HAL_TIM_Base_Start_IT+0xdc>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b06      	cmp	r3, #6
 80081be:	d015      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0xb4>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c6:	d011      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d8:	e008      	b.n	80081ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0201 	orr.w	r2, r2, #1
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	e000      	b.n	80081ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40013400 	.word	0x40013400
 8008210:	40014000 	.word	0x40014000
 8008214:	00010007 	.word	0x00010007

08008218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b02      	cmp	r3, #2
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b02      	cmp	r3, #2
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0202 	mvn.w	r2, #2
 8008244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f905 	bl	800846a <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8f7 	bl	8008456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f908 	bl	800847e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b04      	cmp	r3, #4
 8008280:	d122      	bne.n	80082c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b04      	cmp	r3, #4
 800828e:	d11b      	bne.n	80082c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0204 	mvn.w	r2, #4
 8008298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8db 	bl	800846a <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8cd 	bl	8008456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8de 	bl	800847e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d122      	bne.n	800831c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d11b      	bne.n	800831c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0208 	mvn.w	r2, #8
 80082ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8b1 	bl	800846a <HAL_TIM_IC_CaptureCallback>
 8008308:	e005      	b.n	8008316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f8a3 	bl	8008456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f8b4 	bl	800847e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b10      	cmp	r3, #16
 8008328:	d122      	bne.n	8008370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b10      	cmp	r3, #16
 8008336:	d11b      	bne.n	8008370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0210 	mvn.w	r2, #16
 8008340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2208      	movs	r2, #8
 8008346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f887 	bl	800846a <HAL_TIM_IC_CaptureCallback>
 800835c:	e005      	b.n	800836a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f879 	bl	8008456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f88a 	bl	800847e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	d10e      	bne.n	800839c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b01      	cmp	r3, #1
 800838a:	d107      	bne.n	800839c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0201 	mvn.w	r2, #1
 8008394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7f8 fc50 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a6:	2b80      	cmp	r3, #128	; 0x80
 80083a8:	d10e      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b4:	2b80      	cmp	r3, #128	; 0x80
 80083b6:	d107      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f914 	bl	80085f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d6:	d10e      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d107      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f907 	bl	8008604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d10e      	bne.n	8008422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	d107      	bne.n	8008422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800841a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f838 	bl	8008492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b20      	cmp	r3, #32
 800842e:	d10e      	bne.n	800844e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b20      	cmp	r3, #32
 800843c:	d107      	bne.n	800844e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f06f 0220 	mvn.w	r2, #32
 8008446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f8c7 	bl	80085dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
	...

080084a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a40      	ldr	r2, [pc, #256]	; (80085bc <TIM_Base_SetConfig+0x114>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d013      	beq.n	80084e8 <TIM_Base_SetConfig+0x40>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c6:	d00f      	beq.n	80084e8 <TIM_Base_SetConfig+0x40>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a3d      	ldr	r2, [pc, #244]	; (80085c0 <TIM_Base_SetConfig+0x118>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00b      	beq.n	80084e8 <TIM_Base_SetConfig+0x40>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a3c      	ldr	r2, [pc, #240]	; (80085c4 <TIM_Base_SetConfig+0x11c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d007      	beq.n	80084e8 <TIM_Base_SetConfig+0x40>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a3b      	ldr	r2, [pc, #236]	; (80085c8 <TIM_Base_SetConfig+0x120>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d003      	beq.n	80084e8 <TIM_Base_SetConfig+0x40>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a3a      	ldr	r2, [pc, #232]	; (80085cc <TIM_Base_SetConfig+0x124>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d108      	bne.n	80084fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a2f      	ldr	r2, [pc, #188]	; (80085bc <TIM_Base_SetConfig+0x114>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01f      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d01b      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a2c      	ldr	r2, [pc, #176]	; (80085c0 <TIM_Base_SetConfig+0x118>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d017      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a2b      	ldr	r2, [pc, #172]	; (80085c4 <TIM_Base_SetConfig+0x11c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a2a      	ldr	r2, [pc, #168]	; (80085c8 <TIM_Base_SetConfig+0x120>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00f      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a29      	ldr	r2, [pc, #164]	; (80085cc <TIM_Base_SetConfig+0x124>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00b      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a28      	ldr	r2, [pc, #160]	; (80085d0 <TIM_Base_SetConfig+0x128>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a27      	ldr	r2, [pc, #156]	; (80085d4 <TIM_Base_SetConfig+0x12c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d003      	beq.n	8008542 <TIM_Base_SetConfig+0x9a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a26      	ldr	r2, [pc, #152]	; (80085d8 <TIM_Base_SetConfig+0x130>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d108      	bne.n	8008554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a10      	ldr	r2, [pc, #64]	; (80085bc <TIM_Base_SetConfig+0x114>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00f      	beq.n	80085a0 <TIM_Base_SetConfig+0xf8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a12      	ldr	r2, [pc, #72]	; (80085cc <TIM_Base_SetConfig+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00b      	beq.n	80085a0 <TIM_Base_SetConfig+0xf8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a11      	ldr	r2, [pc, #68]	; (80085d0 <TIM_Base_SetConfig+0x128>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <TIM_Base_SetConfig+0xf8>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a10      	ldr	r2, [pc, #64]	; (80085d4 <TIM_Base_SetConfig+0x12c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_Base_SetConfig+0xf8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a0f      	ldr	r2, [pc, #60]	; (80085d8 <TIM_Base_SetConfig+0x130>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d103      	bne.n	80085a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	615a      	str	r2, [r3, #20]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40012c00 	.word	0x40012c00
 80085c0:	40000400 	.word	0x40000400
 80085c4:	40000800 	.word	0x40000800
 80085c8:	40000c00 	.word	0x40000c00
 80085cc:	40013400 	.word	0x40013400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	f023 0101 	bic.w	r1, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b08      	cmp	r3, #8
 8008640:	d102      	bne.n	8008648 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008642:	2340      	movs	r3, #64	; 0x40
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	e001      	b.n	800864c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008658:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800865e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008664:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800866a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008670:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008676:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800867c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008682:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008688:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <FMC_NORSRAM_Init+0x130>)
 80086bc:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c4:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086cc:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80086d4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80086dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	43db      	mvns	r3, r3
 80086ec:	ea02 0103 	and.w	r1, r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4319      	orrs	r1, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008706:	d10c      	bne.n	8008722 <FMC_NORSRAM_Init+0x10a>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d006      	beq.n	8008738 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	0008fb7f 	.word	0x0008fb7f

0800874c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	431a      	orrs	r2, r3
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	431a      	orrs	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	079b      	lsls	r3, r3, #30
 800877c:	431a      	orrs	r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	431a      	orrs	r2, r3
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	3b01      	subs	r3, #1
 800878c:	051b      	lsls	r3, r3, #20
 800878e:	431a      	orrs	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	3b02      	subs	r3, #2
 8008796:	061b      	lsls	r3, r3, #24
 8008798:	ea42 0103 	orr.w	r1, r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	3201      	adds	r2, #1
 80087a4:	4319      	orrs	r1, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b8:	d113      	bne.n	80087e2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087c2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	051b      	lsls	r3, r3, #20
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	431a      	orrs	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	371c      	adds	r7, #28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008804:	d121      	bne.n	800884a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6819      	ldr	r1, [r3, #0]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	4319      	orrs	r1, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	4319      	orrs	r1, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	079b      	lsls	r3, r3, #30
 800882c:	4319      	orrs	r1, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	4319      	orrs	r1, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	430b      	orrs	r3, r1
 800883c:	ea42 0103 	orr.w	r1, r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008848:	e005      	b.n	8008856 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008864:	b084      	sub	sp, #16
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	f107 001c 	add.w	r0, r7, #28
 8008872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800887a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800887c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800887e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008882:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008886:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800888a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <SDMMC_Init+0x50>)
 8008898:	4013      	ands	r3, r2
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	b004      	add	sp, #16
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	ffc02c00 	.word	0xffc02c00

080088b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f043 0203 	orr.w	r2, r3, #3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008908:	2002      	movs	r0, #2
 800890a:	f7f8 fe1b 	bl	8001544 <HAL_Delay>

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0303 	and.w	r3, r3, #3
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008952:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008958:	431a      	orrs	r2, r3
                       Command->CPSM);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800895e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <SDMMC_SendCommand+0x50>)
 800896c:	4013      	ands	r3, r2
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	fffee0c0 	.word	0xfffee0c0

08008988 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	b2db      	uxtb	r3, r3
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3314      	adds	r3, #20
 80089b0:	461a      	mov	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	4413      	add	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80089f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80089fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0

}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a2e:	2310      	movs	r3, #16
 8008a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a42:	f107 0308 	add.w	r3, r7, #8
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ff73 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a52:	2110      	movs	r1, #16
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fa7b 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b088      	sub	sp, #32
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a74:	2311      	movs	r3, #17
 8008a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff ff50 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a98:	2111      	movs	r1, #17
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa58 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008aba:	2312      	movs	r3, #18
 8008abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008acc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ff2d 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ade:	2112      	movs	r1, #18
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fa35 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008ae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b088      	sub	sp, #32
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b00:	2318      	movs	r3, #24
 8008b02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ff0a 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b24:	2118      	movs	r1, #24
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa12 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3720      	adds	r7, #32
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b46:	2319      	movs	r3, #25
 8008b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fee7 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6a:	2119      	movs	r1, #25
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9ef 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b74:	69fb      	ldr	r3, [r7, #28]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b8c:	230c      	movs	r3, #12
 8008b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b9e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bb8:	f107 0308 	add.w	r3, r7, #8
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff feb8 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008bc4:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <SDMMC_CmdStopTransfer+0x68>)
 8008bc6:	210c      	movs	r1, #12
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f9c1 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008bce:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3720      	adds	r7, #32
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	05f5e100 	.word	0x05f5e100

08008bec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	; 0x28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008bfc:	2307      	movs	r3, #7
 8008bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c04:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c0e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c10:	f107 0310 	add.w	r3, r7, #16
 8008c14:	4619      	mov	r1, r3
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff fe8c 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c20:	2107      	movs	r1, #7
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f994 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3728      	adds	r7, #40	; 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff fe6b 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fbb8 	bl	80093d4 <SDMMC_GetCmdError>
 8008c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c66:	69fb      	ldr	r3, [r7, #28]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3720      	adds	r7, #32
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c78:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c7e:	2308      	movs	r3, #8
 8008c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c92:	f107 0308 	add.w	r3, r7, #8
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff fe4b 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb4a 	bl	8009338 <SDMMC_GetCmdResp7>
 8008ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3720      	adds	r7, #32
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008cbe:	2337      	movs	r3, #55	; 0x37
 8008cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cd2:	f107 0308 	add.w	r3, r7, #8
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff fe2b 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce2:	2137      	movs	r1, #55	; 0x37
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f933 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cec:	69fb      	ldr	r3, [r7, #28]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b088      	sub	sp, #32
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d04:	2329      	movs	r3, #41	; 0x29
 8008d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d18:	f107 0308 	add.w	r3, r7, #8
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7ff fe08 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fa4f 	bl	80091c8 <SDMMC_GetCmdResp3>
 8008d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b088      	sub	sp, #32
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d44:	2306      	movs	r3, #6
 8008d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d58:	f107 0308 	add.w	r3, r7, #8
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fde8 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d68:	2106      	movs	r1, #6
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f8f0 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d72:	69fb      	ldr	r3, [r7, #28]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d88:	2333      	movs	r3, #51	; 0x33
 8008d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d9c:	f107 0308 	add.w	r3, r7, #8
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff fdc6 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dac:	2133      	movs	r1, #51	; 0x33
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8ce 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de0:	f107 0308 	add.w	r3, r7, #8
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fda4 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9a1 	bl	8009134 <SDMMC_GetCmdResp2>
 8008df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df4:	69fb      	ldr	r3, [r7, #28]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b088      	sub	sp, #32
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e0c:	2309      	movs	r3, #9
 8008e0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e20:	f107 0308 	add.w	r3, r7, #8
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fd84 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f981 	bl	8009134 <SDMMC_GetCmdResp2>
 8008e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e34:	69fb      	ldr	r3, [r7, #28]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b088      	sub	sp, #32
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e60:	f107 0308 	add.w	r3, r7, #8
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fd64 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	2103      	movs	r1, #3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f9e9 	bl	8009248 <SDMMC_GetCmdResp6>
 8008e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e78:	69fb      	ldr	r3, [r7, #28]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e90:	230d      	movs	r3, #13
 8008e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fd42 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb4:	210d      	movs	r1, #13
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f84a 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008ed4:	230d      	movs	r3, #13
 8008ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ee8:	f107 0308 	add.w	r3, r7, #8
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff fd20 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef8:	210d      	movs	r1, #13
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f828 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f02:	69fb      	ldr	r3, [r7, #28]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008f18:	230b      	movs	r3, #11
 8008f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff fcfe 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f3c:	210b      	movs	r1, #11
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f806 	bl	8008f50 <SDMMC_GetCmdResp1>
 8008f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f46:	69fb      	ldr	r3, [r7, #28]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008f5e:	4b70      	ldr	r3, [pc, #448]	; (8009120 <SDMMC_GetCmdResp1+0x1d0>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a70      	ldr	r2, [pc, #448]	; (8009124 <SDMMC_GetCmdResp1+0x1d4>)
 8008f64:	fba2 2303 	umull	r2, r3, r2, r3
 8008f68:	0a5a      	lsrs	r2, r3, #9
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	fb02 f303 	mul.w	r3, r2, r3
 8008f70:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	1e5a      	subs	r2, r3, #1
 8008f76:	61fa      	str	r2, [r7, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f80:	e0c9      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f86:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	4b67      	ldr	r3, [pc, #412]	; (8009128 <SDMMC_GetCmdResp1+0x1d8>)
 8008f8c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0ef      	beq.n	8008f72 <SDMMC_GetCmdResp1+0x22>
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1ea      	bne.n	8008f72 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d004      	beq.n	8008fb2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2204      	movs	r2, #4
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fae:	2304      	movs	r3, #4
 8008fb0:	e0b1      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0a6      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4a58      	ldr	r2, [pc, #352]	; (800912c <SDMMC_GetCmdResp1+0x1dc>)
 8008fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff fcda 	bl	8008988 <SDMMC_GetCommandResponse>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d001      	beq.n	8008fe2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e099      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff fcdc 	bl	80089a2 <SDMMC_GetResponse>
 8008fea:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4b50      	ldr	r3, [pc, #320]	; (8009130 <SDMMC_GetCmdResp1+0x1e0>)
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e08d      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da02      	bge.n	8009006 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009004:	e087      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	e080      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800901e:	2380      	movs	r3, #128	; 0x80
 8009020:	e079      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800902c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009030:	e071      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800903c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009040:	e069      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800904c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009050:	e061      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800905c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009060:	e059      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800906c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009070:	e051      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800907c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009080:	e049      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800908c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009090:	e041      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800909c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a0:	e039      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090b0:	e031      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090c0:	e029      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090d0:	e021      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090e0:	e019      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80090ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80090f0:	e011      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80090fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009100:	e009      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800910c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009110:	e001      	b.n	8009116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009116:	4618      	mov	r0, r3
 8009118:	3720      	adds	r7, #32
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000000 	.word	0x20000000
 8009124:	10624dd3 	.word	0x10624dd3
 8009128:	00200045 	.word	0x00200045
 800912c:	002000c5 	.word	0x002000c5
 8009130:	fdffe008 	.word	0xfdffe008

08009134 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800913c:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <SDMMC_GetCmdResp2+0x88>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <SDMMC_GetCmdResp2+0x8c>)
 8009142:	fba2 2303 	umull	r2, r3, r2, r3
 8009146:	0a5b      	lsrs	r3, r3, #9
 8009148:	f241 3288 	movw	r2, #5000	; 0x1388
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1e5a      	subs	r2, r3, #1
 8009156:	60fa      	str	r2, [r7, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800915c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009160:	e026      	b.n	80091b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0ef      	beq.n	8009152 <SDMMC_GetCmdResp2+0x1e>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1ea      	bne.n	8009152 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2204      	movs	r2, #4
 800918c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800918e:	2304      	movs	r3, #4
 8009190:	e00e      	b.n	80091b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e003      	b.n	80091b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a06      	ldr	r2, [pc, #24]	; (80091c4 <SDMMC_GetCmdResp2+0x90>)
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20000000 	.word	0x20000000
 80091c0:	10624dd3 	.word	0x10624dd3
 80091c4:	002000c5 	.word	0x002000c5

080091c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <SDMMC_GetCmdResp3+0x74>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1a      	ldr	r2, [pc, #104]	; (8009240 <SDMMC_GetCmdResp3+0x78>)
 80091d6:	fba2 2303 	umull	r2, r3, r2, r3
 80091da:	0a5b      	lsrs	r3, r3, #9
 80091dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1e5a      	subs	r2, r3, #1
 80091ea:	60fa      	str	r2, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f4:	e01b      	b.n	800922e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0ef      	beq.n	80091e6 <SDMMC_GetCmdResp3+0x1e>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1ea      	bne.n	80091e6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2204      	movs	r2, #4
 8009220:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009222:	2304      	movs	r3, #4
 8009224:	e003      	b.n	800922e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a06      	ldr	r2, [pc, #24]	; (8009244 <SDMMC_GetCmdResp3+0x7c>)
 800922a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000000 	.word	0x20000000
 8009240:	10624dd3 	.word	0x10624dd3
 8009244:	002000c5 	.word	0x002000c5

08009248 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	460b      	mov	r3, r1
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009256:	4b35      	ldr	r3, [pc, #212]	; (800932c <SDMMC_GetCmdResp6+0xe4>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a35      	ldr	r2, [pc, #212]	; (8009330 <SDMMC_GetCmdResp6+0xe8>)
 800925c:	fba2 2303 	umull	r2, r3, r2, r3
 8009260:	0a5b      	lsrs	r3, r3, #9
 8009262:	f241 3288 	movw	r2, #5000	; 0x1388
 8009266:	fb02 f303 	mul.w	r3, r2, r3
 800926a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	1e5a      	subs	r2, r3, #1
 8009270:	61fa      	str	r2, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800927a:	e052      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0ef      	beq.n	800926c <SDMMC_GetCmdResp6+0x24>
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1ea      	bne.n	800926c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	f003 0304 	and.w	r3, r3, #4
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d004      	beq.n	80092ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2204      	movs	r2, #4
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092a8:	2304      	movs	r3, #4
 80092aa:	e03a      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092be:	2301      	movs	r3, #1
 80092c0:	e02f      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7ff fb60 	bl	8008988 <SDMMC_GetCommandResponse>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d001      	beq.n	80092d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e025      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4a16      	ldr	r2, [pc, #88]	; (8009334 <SDMMC_GetCmdResp6+0xec>)
 80092da:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff fb5f 	bl	80089a2 <SDMMC_GetResponse>
 80092e4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	0c1b      	lsrs	r3, r3, #16
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e011      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800930c:	e009      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800931c:	e001      	b.n	8009322 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800931e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000000 	.word	0x20000000
 8009330:	10624dd3 	.word	0x10624dd3
 8009334:	002000c5 	.word	0x002000c5

08009338 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009340:	4b22      	ldr	r3, [pc, #136]	; (80093cc <SDMMC_GetCmdResp7+0x94>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a22      	ldr	r2, [pc, #136]	; (80093d0 <SDMMC_GetCmdResp7+0x98>)
 8009346:	fba2 2303 	umull	r2, r3, r2, r3
 800934a:	0a5b      	lsrs	r3, r3, #9
 800934c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009350:	fb02 f303 	mul.w	r3, r2, r3
 8009354:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	1e5a      	subs	r2, r3, #1
 800935a:	60fa      	str	r2, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009364:	e02c      	b.n	80093c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0ef      	beq.n	8009356 <SDMMC_GetCmdResp7+0x1e>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ea      	bne.n	8009356 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2204      	movs	r2, #4
 8009390:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009392:	2304      	movs	r3, #4
 8009394:	e014      	b.n	80093c0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e009      	b.n	80093c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2240      	movs	r2, #64	; 0x40
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80093be:	2300      	movs	r3, #0

}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	20000000 	.word	0x20000000
 80093d0:	10624dd3 	.word	0x10624dd3

080093d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <SDMMC_GetCmdError+0x50>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a11      	ldr	r2, [pc, #68]	; (8009428 <SDMMC_GetCmdError+0x54>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	0a5b      	lsrs	r3, r3, #9
 80093e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ec:	fb02 f303 	mul.w	r3, r2, r3
 80093f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1e5a      	subs	r2, r3, #1
 80093f6:	60fa      	str	r2, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009400:	e009      	b.n	8009416 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f1      	beq.n	80093f2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a06      	ldr	r2, [pc, #24]	; (800942c <SDMMC_GetCmdError+0x58>)
 8009412:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000000 	.word	0x20000000
 8009428:	10624dd3 	.word	0x10624dd3
 800942c:	002000c5 	.word	0x002000c5

08009430 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009434:	4904      	ldr	r1, [pc, #16]	; (8009448 <MX_FATFS_Init+0x18>)
 8009436:	4805      	ldr	r0, [pc, #20]	; (800944c <MX_FATFS_Init+0x1c>)
 8009438:	f000 faa4 	bl	8009984 <FATFS_LinkDriver>
 800943c:	4603      	mov	r3, r0
 800943e:	461a      	mov	r2, r3
 8009440:	4b03      	ldr	r3, [pc, #12]	; (8009450 <MX_FATFS_Init+0x20>)
 8009442:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009444:	bf00      	nop
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000424 	.word	0x20000424
 800944c:	0800d738 	.word	0x0800d738
 8009450:	20000420 	.word	0x20000420

08009454 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800945e:	f000 f885 	bl	800956c <BSP_SD_IsDetected>
 8009462:	4603      	mov	r3, r0
 8009464:	2b01      	cmp	r3, #1
 8009466:	d001      	beq.n	800946c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009468:	2302      	movs	r3, #2
 800946a:	e012      	b.n	8009492 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800946c:	480b      	ldr	r0, [pc, #44]	; (800949c <BSP_SD_Init+0x48>)
 800946e:	f7fd f821 	bl	80064b4 <HAL_SD_Init>
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800947c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009480:	4806      	ldr	r0, [pc, #24]	; (800949c <BSP_SD_Init+0x48>)
 8009482:	f7fd fed5 	bl	8007230 <HAL_SD_ConfigWideBusOperation>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009490:	79fb      	ldrb	r3, [r7, #7]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200001e8 	.word	0x200001e8

080094a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	68f9      	ldr	r1, [r7, #12]
 80094b6:	4806      	ldr	r0, [pc, #24]	; (80094d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80094b8:	f7fd f924 	bl	8006704 <HAL_SD_ReadBlocks_DMA>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	200001e8 	.word	0x200001e8

080094d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	68f9      	ldr	r1, [r7, #12]
 80094ea:	4806      	ldr	r0, [pc, #24]	; (8009504 <BSP_SD_WriteBlocks_DMA+0x30>)
 80094ec:	f7fd f9b2 	bl	8006854 <HAL_SD_WriteBlocks_DMA>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	200001e8 	.word	0x200001e8

08009508 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800950c:	4805      	ldr	r0, [pc, #20]	; (8009524 <BSP_SD_GetCardState+0x1c>)
 800950e:	f7fd ffa3 	bl	8007458 <HAL_SD_GetCardState>
 8009512:	4603      	mov	r3, r0
 8009514:	2b04      	cmp	r3, #4
 8009516:	bf14      	ite	ne
 8009518:	2301      	movne	r3, #1
 800951a:	2300      	moveq	r3, #0
 800951c:	b2db      	uxtb	r3, r3
}
 800951e:	4618      	mov	r0, r3
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200001e8 	.word	0x200001e8

08009528 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4803      	ldr	r0, [pc, #12]	; (8009540 <BSP_SD_GetCardInfo+0x18>)
 8009534:	f7fd fe50 	bl	80071d8 <HAL_SD_GetCardInfo>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	200001e8 	.word	0x200001e8

08009544 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800954c:	f000 f9aa 	bl	80098a4 <BSP_SD_WriteCpltCallback>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009560:	f000 f9b2 	bl	80098c8 <BSP_SD_ReadCpltCallback>
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009572:	2301      	movs	r3, #1
 8009574:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009576:	f000 f80b 	bl	8009590 <BSP_PlatformIsDetected>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009580:	2300      	movs	r3, #0
 8009582:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	b2db      	uxtb	r3, r3
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009596:	2301      	movs	r3, #1
 8009598:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800959a:	2120      	movs	r1, #32
 800959c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095a0:	f7fa f8ae 	bl	8003700 <HAL_GPIO_ReadPin>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80095aa:	2300      	movs	r3, #0
 80095ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80095ae:	79fb      	ldrb	r3, [r7, #7]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80095c0:	f000 faa0 	bl	8009b04 <osKernelGetTickCount>
 80095c4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80095c6:	e006      	b.n	80095d6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095c8:	f7ff ff9e 	bl	8009508 <BSP_SD_GetCardState>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e009      	b.n	80095ea <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80095d6:	f000 fa95 	bl	8009b04 <osKernelGetTickCount>
 80095da:	4602      	mov	r2, r0
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d8f0      	bhi.n	80095c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80095e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80095fe:	4b0b      	ldr	r3, [pc, #44]	; (800962c <SD_CheckStatus+0x38>)
 8009600:	2201      	movs	r2, #1
 8009602:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009604:	f7ff ff80 	bl	8009508 <BSP_SD_GetCardState>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d107      	bne.n	800961e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800960e:	4b07      	ldr	r3, [pc, #28]	; (800962c <SD_CheckStatus+0x38>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	b2da      	uxtb	r2, r3
 800961a:	4b04      	ldr	r3, [pc, #16]	; (800962c <SD_CheckStatus+0x38>)
 800961c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <SD_CheckStatus+0x38>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	b2db      	uxtb	r3, r3
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000009 	.word	0x20000009

08009630 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800963a:	4b1c      	ldr	r3, [pc, #112]	; (80096ac <SD_initialize+0x7c>)
 800963c:	2201      	movs	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009640:	f000 fa18 	bl	8009a74 <osKernelGetState>
 8009644:	4603      	mov	r3, r0
 8009646:	2b02      	cmp	r3, #2
 8009648:	d129      	bne.n	800969e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800964a:	f7ff ff03 	bl	8009454 <BSP_SD_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d107      	bne.n	8009664 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff ffcc 	bl	80095f4 <SD_CheckStatus>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	4b12      	ldr	r3, [pc, #72]	; (80096ac <SD_initialize+0x7c>)
 8009662:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009664:	4b11      	ldr	r3, [pc, #68]	; (80096ac <SD_initialize+0x7c>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b01      	cmp	r3, #1
 800966c:	d017      	beq.n	800969e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800966e:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <SD_initialize+0x80>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d107      	bne.n	8009686 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009676:	2200      	movs	r2, #0
 8009678:	2102      	movs	r1, #2
 800967a:	200a      	movs	r0, #10
 800967c:	f000 fcaa 	bl	8009fd4 <osMessageQueueNew>
 8009680:	4603      	mov	r3, r0
 8009682:	4a0b      	ldr	r2, [pc, #44]	; (80096b0 <SD_initialize+0x80>)
 8009684:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009686:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <SD_initialize+0x80>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d107      	bne.n	800969e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800968e:	4b07      	ldr	r3, [pc, #28]	; (80096ac <SD_initialize+0x7c>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f043 0301 	orr.w	r3, r3, #1
 8009698:	b2da      	uxtb	r2, r3
 800969a:	4b04      	ldr	r3, [pc, #16]	; (80096ac <SD_initialize+0x7c>)
 800969c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800969e:	4b03      	ldr	r3, [pc, #12]	; (80096ac <SD_initialize+0x7c>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b2db      	uxtb	r3, r3
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20000009 	.word	0x20000009
 80096b0:	20000428 	.word	0x20000428

080096b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ff97 	bl	80095f4 <SD_CheckStatus>
 80096c6:	4603      	mov	r3, r0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80096e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80096e8:	f7ff ff66 	bl	80095b8 <SD_CheckStatusWithTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da01      	bge.n	80096f6 <SD_read+0x26>
  {
    return res;
 80096f2:	7ffb      	ldrb	r3, [r7, #31]
 80096f4:	e02f      	b.n	8009756 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	68b8      	ldr	r0, [r7, #8]
 80096fc:	f7ff fed0 	bl	80094a0 <BSP_SD_ReadBlocks_DMA>
 8009700:	4603      	mov	r3, r0
 8009702:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009704:	7fbb      	ldrb	r3, [r7, #30]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d124      	bne.n	8009754 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800970a:	4b15      	ldr	r3, [pc, #84]	; (8009760 <SD_read+0x90>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f107 0112 	add.w	r1, r7, #18
 8009712:	f247 5330 	movw	r3, #30000	; 0x7530
 8009716:	2200      	movs	r2, #0
 8009718:	f000 fd30 	bl	800a17c <osMessageQueueGet>
 800971c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d117      	bne.n	8009754 <SD_read+0x84>
 8009724:	8a7b      	ldrh	r3, [r7, #18]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d114      	bne.n	8009754 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800972a:	f000 f9eb 	bl	8009b04 <osKernelGetTickCount>
 800972e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009730:	e007      	b.n	8009742 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009732:	f7ff fee9 	bl	8009508 <BSP_SD_GetCardState>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <SD_read+0x72>
              {
                res = RES_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009740:	e008      	b.n	8009754 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009742:	f000 f9df 	bl	8009b04 <osKernelGetTickCount>
 8009746:	4602      	mov	r2, r0
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009750:	4293      	cmp	r3, r2
 8009752:	d9ee      	bls.n	8009732 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009754:	7ffb      	ldrb	r3, [r7, #31]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20000428 	.word	0x20000428

08009764 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009778:	f247 5030 	movw	r0, #30000	; 0x7530
 800977c:	f7ff ff1c 	bl	80095b8 <SD_CheckStatusWithTimeout>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	da01      	bge.n	800978a <SD_write+0x26>
  {
    return res;
 8009786:	7ffb      	ldrb	r3, [r7, #31]
 8009788:	e02d      	b.n	80097e6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	68b8      	ldr	r0, [r7, #8]
 8009790:	f7ff fea0 	bl	80094d4 <BSP_SD_WriteBlocks_DMA>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d124      	bne.n	80097e4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800979a:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <SD_write+0x8c>)
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f107 0112 	add.w	r1, r7, #18
 80097a2:	f247 5330 	movw	r3, #30000	; 0x7530
 80097a6:	2200      	movs	r2, #0
 80097a8:	f000 fce8 	bl	800a17c <osMessageQueueGet>
 80097ac:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d117      	bne.n	80097e4 <SD_write+0x80>
 80097b4:	8a7b      	ldrh	r3, [r7, #18]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d114      	bne.n	80097e4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80097ba:	f000 f9a3 	bl	8009b04 <osKernelGetTickCount>
 80097be:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80097c0:	e007      	b.n	80097d2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097c2:	f7ff fea1 	bl	8009508 <BSP_SD_GetCardState>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <SD_write+0x6e>
          {
            res = RES_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	77fb      	strb	r3, [r7, #31]
            break;
 80097d0:	e008      	b.n	80097e4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80097d2:	f000 f997 	bl	8009b04 <osKernelGetTickCount>
 80097d6:	4602      	mov	r2, r0
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d9ee      	bls.n	80097c2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80097e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000428 	.word	0x20000428

080097f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08c      	sub	sp, #48	; 0x30
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	603a      	str	r2, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
 8009800:	460b      	mov	r3, r1
 8009802:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800980a:	4b25      	ldr	r3, [pc, #148]	; (80098a0 <SD_ioctl+0xac>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <SD_ioctl+0x28>
 8009818:	2303      	movs	r3, #3
 800981a:	e03c      	b.n	8009896 <SD_ioctl+0xa2>

  switch (cmd)
 800981c:	79bb      	ldrb	r3, [r7, #6]
 800981e:	2b03      	cmp	r3, #3
 8009820:	d834      	bhi.n	800988c <SD_ioctl+0x98>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <SD_ioctl+0x34>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	08009839 	.word	0x08009839
 800982c:	08009841 	.word	0x08009841
 8009830:	08009859 	.word	0x08009859
 8009834:	08009873 	.word	0x08009873
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800983e:	e028      	b.n	8009892 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009840:	f107 0308 	add.w	r3, r7, #8
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fe6f 	bl	8009528 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800984a:	6a3a      	ldr	r2, [r7, #32]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009856:	e01c      	b.n	8009892 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009858:	f107 0308 	add.w	r3, r7, #8
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff fe63 	bl	8009528 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	b29a      	uxth	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009870:	e00f      	b.n	8009892 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009872:	f107 0308 	add.w	r3, r7, #8
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff fe56 	bl	8009528 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	0a5a      	lsrs	r2, r3, #9
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800988a:	e002      	b.n	8009892 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800988c:	2304      	movs	r3, #4
 800988e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009896:	4618      	mov	r0, r3
 8009898:	3730      	adds	r7, #48	; 0x30
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000009 	.word	0x20000009

080098a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80098aa:	2302      	movs	r3, #2
 80098ac:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <BSP_SD_WriteCpltCallback+0x20>)
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	1db9      	adds	r1, r7, #6
 80098b4:	2300      	movs	r3, #0
 80098b6:	2200      	movs	r2, #0
 80098b8:	f000 fc00 	bl	800a0bc <osMessageQueuePut>
#endif
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000428 	.word	0x20000428

080098c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80098ce:	2301      	movs	r3, #1
 80098d0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <BSP_SD_ReadCpltCallback+0x20>)
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	1db9      	adds	r1, r7, #6
 80098d8:	2300      	movs	r3, #0
 80098da:	2200      	movs	r2, #0
 80098dc:	f000 fbee 	bl	800a0bc <osMessageQueuePut>
#endif
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000428 	.word	0x20000428

080098ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009902:	4b1f      	ldr	r3, [pc, #124]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009904:	7a5b      	ldrb	r3, [r3, #9]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d131      	bne.n	8009970 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800990c:	4b1c      	ldr	r3, [pc, #112]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800990e:	7a5b      	ldrb	r3, [r3, #9]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009916:	2100      	movs	r1, #0
 8009918:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800991a:	4b19      	ldr	r3, [pc, #100]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800991c:	7a5b      	ldrb	r3, [r3, #9]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4a17      	ldr	r2, [pc, #92]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800992c:	7a5b      	ldrb	r3, [r3, #9]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	4b13      	ldr	r3, [pc, #76]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009934:	4413      	add	r3, r2
 8009936:	79fa      	ldrb	r2, [r7, #7]
 8009938:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800993a:	4b11      	ldr	r3, [pc, #68]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800993c:	7a5b      	ldrb	r3, [r3, #9]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	b2d1      	uxtb	r1, r2
 8009944:	4a0e      	ldr	r2, [pc, #56]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009946:	7251      	strb	r1, [r2, #9]
 8009948:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800994a:	7dbb      	ldrb	r3, [r7, #22]
 800994c:	3330      	adds	r3, #48	; 0x30
 800994e:	b2da      	uxtb	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	3301      	adds	r3, #1
 8009958:	223a      	movs	r2, #58	; 0x3a
 800995a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	3302      	adds	r3, #2
 8009960:	222f      	movs	r2, #47	; 0x2f
 8009962:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3303      	adds	r3, #3
 8009968:	2200      	movs	r2, #0
 800996a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	2000042c 	.word	0x2000042c

08009984 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800998e:	2200      	movs	r2, #0
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff ffaa 	bl	80098ec <FATFS_LinkDriverEx>
 8009998:	4603      	mov	r3, r0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <__NVIC_SetPriority>:
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	db0a      	blt.n	80099ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	490c      	ldr	r1, [pc, #48]	; (80099f0 <__NVIC_SetPriority+0x4c>)
 80099be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099c2:	0112      	lsls	r2, r2, #4
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	440b      	add	r3, r1
 80099c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099cc:	e00a      	b.n	80099e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	4908      	ldr	r1, [pc, #32]	; (80099f4 <__NVIC_SetPriority+0x50>)
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	f003 030f 	and.w	r3, r3, #15
 80099da:	3b04      	subs	r3, #4
 80099dc:	0112      	lsls	r2, r2, #4
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	440b      	add	r3, r1
 80099e2:	761a      	strb	r2, [r3, #24]
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	e000e100 	.word	0xe000e100
 80099f4:	e000ed00 	.word	0xe000ed00

080099f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <SysTick_Handler+0x1c>)
 80099fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a00:	f002 fbb6 	bl	800c170 <xTaskGetSchedulerState>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d001      	beq.n	8009a0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a0a:	f003 fa9d 	bl	800cf48 <xPortSysTickHandler>
  }
}
 8009a0e:	bf00      	nop
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	e000e010 	.word	0xe000e010

08009a18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	f06f 0004 	mvn.w	r0, #4
 8009a22:	f7ff ffbf 	bl	80099a4 <__NVIC_SetPriority>
#endif
}
 8009a26:	bf00      	nop
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a32:	f3ef 8305 	mrs	r3, IPSR
 8009a36:	603b      	str	r3, [r7, #0]
  return(result);
 8009a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a3e:	f06f 0305 	mvn.w	r3, #5
 8009a42:	607b      	str	r3, [r7, #4]
 8009a44:	e00c      	b.n	8009a60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a46:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <osKernelInitialize+0x44>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a4e:	4b08      	ldr	r3, [pc, #32]	; (8009a70 <osKernelInitialize+0x44>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	607b      	str	r3, [r7, #4]
 8009a58:	e002      	b.n	8009a60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a60:	687b      	ldr	r3, [r7, #4]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20000438 	.word	0x20000438

08009a74 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009a7a:	f002 fb79 	bl	800c170 <xTaskGetSchedulerState>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <osKernelGetState+0x1a>
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d105      	bne.n	8009a94 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009a88:	2302      	movs	r3, #2
 8009a8a:	607b      	str	r3, [r7, #4]
      break;
 8009a8c:	e00c      	b.n	8009aa8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	607b      	str	r3, [r7, #4]
      break;
 8009a92:	e009      	b.n	8009aa8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009a94:	4b07      	ldr	r3, [pc, #28]	; (8009ab4 <osKernelGetState+0x40>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d102      	bne.n	8009aa2 <osKernelGetState+0x2e>
        state = osKernelReady;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009aa0:	e001      	b.n	8009aa6 <osKernelGetState+0x32>
        state = osKernelInactive;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
      break;
 8009aa6:	bf00      	nop
  }

  return (state);
 8009aa8:	687b      	ldr	r3, [r7, #4]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000438 	.word	0x20000438

08009ab8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009abe:	f3ef 8305 	mrs	r3, IPSR
 8009ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009aca:	f06f 0305 	mvn.w	r3, #5
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	e010      	b.n	8009af4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <osKernelStart+0x48>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d109      	bne.n	8009aee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ada:	f7ff ff9d 	bl	8009a18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ade:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <osKernelStart+0x48>)
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ae4:	f001 fed6 	bl	800b894 <vTaskStartScheduler>
      stat = osOK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	607b      	str	r3, [r7, #4]
 8009aec:	e002      	b.n	8009af4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009af4:	687b      	ldr	r3, [r7, #4]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000438 	.word	0x20000438

08009b04 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b0a:	f3ef 8305 	mrs	r3, IPSR
 8009b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b10:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009b16:	f001 ffe9 	bl	800baec <xTaskGetTickCountFromISR>
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	e002      	b.n	8009b24 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009b1e:	f001 ffd5 	bl	800bacc <xTaskGetTickCount>
 8009b22:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009b24:	687b      	ldr	r3, [r7, #4]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b08e      	sub	sp, #56	; 0x38
 8009b32:	af04      	add	r7, sp, #16
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b3e:	f3ef 8305 	mrs	r3, IPSR
 8009b42:	617b      	str	r3, [r7, #20]
  return(result);
 8009b44:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d17e      	bne.n	8009c48 <osThreadNew+0x11a>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d07b      	beq.n	8009c48 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b50:	2380      	movs	r3, #128	; 0x80
 8009b52:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b54:	2318      	movs	r3, #24
 8009b56:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d045      	beq.n	8009bf4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <osThreadNew+0x48>
        name = attr->name;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d008      	beq.n	8009b9c <osThreadNew+0x6e>
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	2b38      	cmp	r3, #56	; 0x38
 8009b8e:	d805      	bhi.n	8009b9c <osThreadNew+0x6e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <osThreadNew+0x72>
        return (NULL);
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e054      	b.n	8009c4a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	089b      	lsrs	r3, r3, #2
 8009bae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00e      	beq.n	8009bd6 <osThreadNew+0xa8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	2bbb      	cmp	r3, #187	; 0xbb
 8009bbe:	d90a      	bls.n	8009bd6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d006      	beq.n	8009bd6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <osThreadNew+0xa8>
        mem = 1;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	e010      	b.n	8009bf8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10c      	bne.n	8009bf8 <osThreadNew+0xca>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d108      	bne.n	8009bf8 <osThreadNew+0xca>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <osThreadNew+0xca>
          mem = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61bb      	str	r3, [r7, #24]
 8009bf2:	e001      	b.n	8009bf8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d110      	bne.n	8009c20 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c06:	9202      	str	r2, [sp, #8]
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6a3a      	ldr	r2, [r7, #32]
 8009c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f001 fc51 	bl	800b4bc <xTaskCreateStatic>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	e013      	b.n	8009c48 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d110      	bne.n	8009c48 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	f107 0310 	add.w	r3, r7, #16
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f001 fc9c 	bl	800b576 <xTaskCreate>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d001      	beq.n	8009c48 <osThreadNew+0x11a>
            hTask = NULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c48:	693b      	ldr	r3, [r7, #16]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3728      	adds	r7, #40	; 0x28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c5a:	f3ef 8305 	mrs	r3, IPSR
 8009c5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <osDelay+0x1c>
    stat = osErrorISR;
 8009c66:	f06f 0305 	mvn.w	r3, #5
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e007      	b.n	8009c7e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 fdd7 	bl	800b82c <vTaskDelay>
    }
  }

  return (stat);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c94:	f3ef 8305 	mrs	r3, IPSR
 8009c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c9a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d174      	bne.n	8009d8a <osMutexNew+0x102>
    if (attr != NULL) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <osMutexNew+0x26>
      type = attr->attr_bits;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	61bb      	str	r3, [r7, #24]
 8009cac:	e001      	b.n	8009cb2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <osMutexNew+0x3a>
      rmtx = 1U;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	e001      	b.n	8009cc6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d15c      	bne.n	8009d8a <osMutexNew+0x102>
      mem = -1;
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cd4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d015      	beq.n	8009d08 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d006      	beq.n	8009cf2 <osMutexNew+0x6a>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	2b4f      	cmp	r3, #79	; 0x4f
 8009cea:	d902      	bls.n	8009cf2 <osMutexNew+0x6a>
          mem = 1;
 8009cec:	2301      	movs	r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	e00c      	b.n	8009d0c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d108      	bne.n	8009d0c <osMutexNew+0x84>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <osMutexNew+0x84>
            mem = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	613b      	str	r3, [r7, #16]
 8009d06:	e001      	b.n	8009d0c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d112      	bne.n	8009d38 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d007      	beq.n	8009d28 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	2004      	movs	r0, #4
 8009d20:	f000 fce1 	bl	800a6e6 <xQueueCreateMutexStatic>
 8009d24:	61f8      	str	r0, [r7, #28]
 8009d26:	e016      	b.n	8009d56 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	2001      	movs	r0, #1
 8009d30:	f000 fcd9 	bl	800a6e6 <xQueueCreateMutexStatic>
 8009d34:	61f8      	str	r0, [r7, #28]
 8009d36:	e00e      	b.n	8009d56 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10b      	bne.n	8009d56 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d44:	2004      	movs	r0, #4
 8009d46:	f000 fcb6 	bl	800a6b6 <xQueueCreateMutex>
 8009d4a:	61f8      	str	r0, [r7, #28]
 8009d4c:	e003      	b.n	8009d56 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009d4e:	2001      	movs	r0, #1
 8009d50:	f000 fcb1 	bl	800a6b6 <xQueueCreateMutex>
 8009d54:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00c      	beq.n	8009d76 <osMutexNew+0xee>
        if (attr != NULL) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <osMutexNew+0xe2>
          name = attr->name;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e001      	b.n	8009d6e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	69f8      	ldr	r0, [r7, #28]
 8009d72:	f001 fb1b 	bl	800b3ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d006      	beq.n	8009d8a <osMutexNew+0x102>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3720      	adds	r7, #32
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af02      	add	r7, sp, #8
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da4:	f3ef 8305 	mrs	r3, IPSR
 8009da8:	613b      	str	r3, [r7, #16]
  return(result);
 8009daa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d175      	bne.n	8009e9c <osSemaphoreNew+0x108>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d072      	beq.n	8009e9c <osSemaphoreNew+0x108>
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d86e      	bhi.n	8009e9c <osSemaphoreNew+0x108>
    mem = -1;
 8009dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d015      	beq.n	8009df6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d006      	beq.n	8009de0 <osSemaphoreNew+0x4c>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b4f      	cmp	r3, #79	; 0x4f
 8009dd8:	d902      	bls.n	8009de0 <osSemaphoreNew+0x4c>
        mem = 1;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	61bb      	str	r3, [r7, #24]
 8009dde:	e00c      	b.n	8009dfa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d108      	bne.n	8009dfa <osSemaphoreNew+0x66>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <osSemaphoreNew+0x66>
          mem = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	61bb      	str	r3, [r7, #24]
 8009df4:	e001      	b.n	8009dfa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e00:	d04c      	beq.n	8009e9c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d128      	bne.n	8009e5a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d10a      	bne.n	8009e24 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	2203      	movs	r2, #3
 8009e14:	9200      	str	r2, [sp, #0]
 8009e16:	2200      	movs	r2, #0
 8009e18:	2100      	movs	r1, #0
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	f000 fb5c 	bl	800a4d8 <xQueueGenericCreateStatic>
 8009e20:	61f8      	str	r0, [r7, #28]
 8009e22:	e005      	b.n	8009e30 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009e24:	2203      	movs	r2, #3
 8009e26:	2100      	movs	r1, #0
 8009e28:	2001      	movs	r0, #1
 8009e2a:	f000 fbcd 	bl	800a5c8 <xQueueGenericCreate>
 8009e2e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d022      	beq.n	8009e7c <osSemaphoreNew+0xe8>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01f      	beq.n	8009e7c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	69f8      	ldr	r0, [r7, #28]
 8009e44:	f000 fcd4 	bl	800a7f0 <xQueueGenericSend>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d016      	beq.n	8009e7c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009e4e:	69f8      	ldr	r0, [r7, #28]
 8009e50:	f001 f960 	bl	800b114 <vQueueDelete>
            hSemaphore = NULL;
 8009e54:	2300      	movs	r3, #0
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	e010      	b.n	8009e7c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d108      	bne.n	8009e72 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	461a      	mov	r2, r3
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 fc57 	bl	800a71c <xQueueCreateCountingSemaphoreStatic>
 8009e6e:	61f8      	str	r0, [r7, #28]
 8009e70:	e004      	b.n	8009e7c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fc88 	bl	800a78a <xQueueCreateCountingSemaphore>
 8009e7a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00c      	beq.n	8009e9c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	e001      	b.n	8009e94 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009e94:	6979      	ldr	r1, [r7, #20]
 8009e96:	69f8      	ldr	r0, [r7, #28]
 8009e98:	f001 fa88 	bl	800b3ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009e9c:	69fb      	ldr	r3, [r7, #28]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009ec0:	f06f 0303 	mvn.w	r3, #3
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e039      	b.n	8009f3c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec8:	f3ef 8305 	mrs	r3, IPSR
 8009ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ece:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d022      	beq.n	8009f1a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009eda:	f06f 0303 	mvn.w	r3, #3
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e02c      	b.n	8009f3c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	461a      	mov	r2, r3
 8009eec:	2100      	movs	r1, #0
 8009eee:	6938      	ldr	r0, [r7, #16]
 8009ef0:	f001 f890 	bl	800b014 <xQueueReceiveFromISR>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d003      	beq.n	8009f02 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009efa:	f06f 0302 	mvn.w	r3, #2
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	e01c      	b.n	8009f3c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d019      	beq.n	8009f3c <osSemaphoreAcquire+0x94>
 8009f08:	4b0f      	ldr	r3, [pc, #60]	; (8009f48 <osSemaphoreAcquire+0xa0>)
 8009f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	e010      	b.n	8009f3c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6938      	ldr	r0, [r7, #16]
 8009f1e:	f000 ff6d 	bl	800adfc <xQueueSemaphoreTake>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d009      	beq.n	8009f3c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009f2e:	f06f 0301 	mvn.w	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	e002      	b.n	8009f3c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009f36:	f06f 0302 	mvn.w	r3, #2
 8009f3a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009f3c:	697b      	ldr	r3, [r7, #20]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009f62:	f06f 0303 	mvn.w	r3, #3
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e02c      	b.n	8009fc4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f6a:	f3ef 8305 	mrs	r3, IPSR
 8009f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f70:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d01a      	beq.n	8009fac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6938      	ldr	r0, [r7, #16]
 8009f82:	f000 fdce 	bl	800ab22 <xQueueGiveFromISR>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d003      	beq.n	8009f94 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009f8c:	f06f 0302 	mvn.w	r3, #2
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e017      	b.n	8009fc4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d014      	beq.n	8009fc4 <osSemaphoreRelease+0x78>
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <osSemaphoreRelease+0x84>)
 8009f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	e00b      	b.n	8009fc4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009fac:	2300      	movs	r3, #0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	6938      	ldr	r0, [r7, #16]
 8009fb4:	f000 fc1c 	bl	800a7f0 <xQueueGenericSend>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d002      	beq.n	8009fc4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009fbe:	f06f 0302 	mvn.w	r3, #2
 8009fc2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009fc4:	697b      	ldr	r3, [r7, #20]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	e000ed04 	.word	0xe000ed04

08009fd4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08a      	sub	sp, #40	; 0x28
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fe4:	f3ef 8305 	mrs	r3, IPSR
 8009fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8009fea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d15f      	bne.n	800a0b0 <osMessageQueueNew+0xdc>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d05c      	beq.n	800a0b0 <osMessageQueueNew+0xdc>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d059      	beq.n	800a0b0 <osMessageQueueNew+0xdc>
    mem = -1;
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a000:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d029      	beq.n	800a05c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d012      	beq.n	800a036 <osMessageQueueNew+0x62>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	2b4f      	cmp	r3, #79	; 0x4f
 800a016:	d90e      	bls.n	800a036 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00a      	beq.n	800a036 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	695a      	ldr	r2, [r3, #20]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d302      	bcc.n	800a036 <osMessageQueueNew+0x62>
        mem = 1;
 800a030:	2301      	movs	r3, #1
 800a032:	61bb      	str	r3, [r7, #24]
 800a034:	e014      	b.n	800a060 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d110      	bne.n	800a060 <osMessageQueueNew+0x8c>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10c      	bne.n	800a060 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d108      	bne.n	800a060 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d104      	bne.n	800a060 <osMessageQueueNew+0x8c>
          mem = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	e001      	b.n	800a060 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d10b      	bne.n	800a07e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2100      	movs	r1, #0
 800a070:	9100      	str	r1, [sp, #0]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fa2f 	bl	800a4d8 <xQueueGenericCreateStatic>
 800a07a:	61f8      	str	r0, [r7, #28]
 800a07c:	e008      	b.n	800a090 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a084:	2200      	movs	r2, #0
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fa9d 	bl	800a5c8 <xQueueGenericCreate>
 800a08e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00c      	beq.n	800a0b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	e001      	b.n	800a0a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a0a8:	6979      	ldr	r1, [r7, #20]
 800a0aa:	69f8      	ldr	r0, [r7, #28]
 800a0ac:	f001 f97e 	bl	800b3ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a0b0:	69fb      	ldr	r3, [r7, #28]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3720      	adds	r7, #32
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0d4:	f3ef 8305 	mrs	r3, IPSR
 800a0d8:	617b      	str	r3, [r7, #20]
  return(result);
 800a0da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d028      	beq.n	800a132 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <osMessageQueuePut+0x36>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <osMessageQueuePut+0x36>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a0f2:	f06f 0303 	mvn.w	r3, #3
 800a0f6:	61fb      	str	r3, [r7, #28]
 800a0f8:	e038      	b.n	800a16c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a0fe:	f107 0210 	add.w	r2, r7, #16
 800a102:	2300      	movs	r3, #0
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	69b8      	ldr	r0, [r7, #24]
 800a108:	f000 fc70 	bl	800a9ec <xQueueGenericSendFromISR>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d003      	beq.n	800a11a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a112:	f06f 0302 	mvn.w	r3, #2
 800a116:	61fb      	str	r3, [r7, #28]
 800a118:	e028      	b.n	800a16c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d025      	beq.n	800a16c <osMessageQueuePut+0xb0>
 800a120:	4b15      	ldr	r3, [pc, #84]	; (800a178 <osMessageQueuePut+0xbc>)
 800a122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	e01c      	b.n	800a16c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <osMessageQueuePut+0x82>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d103      	bne.n	800a146 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a13e:	f06f 0303 	mvn.w	r3, #3
 800a142:	61fb      	str	r3, [r7, #28]
 800a144:	e012      	b.n	800a16c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a146:	2300      	movs	r3, #0
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	69b8      	ldr	r0, [r7, #24]
 800a14e:	f000 fb4f 	bl	800a7f0 <xQueueGenericSend>
 800a152:	4603      	mov	r3, r0
 800a154:	2b01      	cmp	r3, #1
 800a156:	d009      	beq.n	800a16c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a15e:	f06f 0301 	mvn.w	r3, #1
 800a162:	61fb      	str	r3, [r7, #28]
 800a164:	e002      	b.n	800a16c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a166:	f06f 0302 	mvn.w	r3, #2
 800a16a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a16c:	69fb      	ldr	r3, [r7, #28]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3720      	adds	r7, #32
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a18e:	2300      	movs	r3, #0
 800a190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a192:	f3ef 8305 	mrs	r3, IPSR
 800a196:	617b      	str	r3, [r7, #20]
  return(result);
 800a198:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d028      	beq.n	800a1f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <osMessageQueueGet+0x34>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <osMessageQueueGet+0x34>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d003      	beq.n	800a1b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a1b0:	f06f 0303 	mvn.w	r3, #3
 800a1b4:	61fb      	str	r3, [r7, #28]
 800a1b6:	e037      	b.n	800a228 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a1bc:	f107 0310 	add.w	r3, r7, #16
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	69b8      	ldr	r0, [r7, #24]
 800a1c6:	f000 ff25 	bl	800b014 <xQueueReceiveFromISR>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d003      	beq.n	800a1d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a1d0:	f06f 0302 	mvn.w	r3, #2
 800a1d4:	61fb      	str	r3, [r7, #28]
 800a1d6:	e027      	b.n	800a228 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d024      	beq.n	800a228 <osMessageQueueGet+0xac>
 800a1de:	4b15      	ldr	r3, [pc, #84]	; (800a234 <osMessageQueueGet+0xb8>)
 800a1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	e01b      	b.n	800a228 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <osMessageQueueGet+0x80>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a1fc:	f06f 0303 	mvn.w	r3, #3
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	e011      	b.n	800a228 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	69b8      	ldr	r0, [r7, #24]
 800a20a:	f000 fd17 	bl	800ac3c <xQueueReceive>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b01      	cmp	r3, #1
 800a212:	d009      	beq.n	800a228 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a21a:	f06f 0301 	mvn.w	r3, #1
 800a21e:	61fb      	str	r3, [r7, #28]
 800a220:	e002      	b.n	800a228 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a222:	f06f 0302 	mvn.w	r3, #2
 800a226:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a228:	69fb      	ldr	r3, [r7, #28]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4a07      	ldr	r2, [pc, #28]	; (800a264 <vApplicationGetIdleTaskMemory+0x2c>)
 800a248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	4a06      	ldr	r2, [pc, #24]	; (800a268 <vApplicationGetIdleTaskMemory+0x30>)
 800a24e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2280      	movs	r2, #128	; 0x80
 800a254:	601a      	str	r2, [r3, #0]
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	2000043c 	.word	0x2000043c
 800a268:	200004f8 	.word	0x200004f8

0800a26c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4a07      	ldr	r2, [pc, #28]	; (800a298 <vApplicationGetTimerTaskMemory+0x2c>)
 800a27c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4a06      	ldr	r2, [pc, #24]	; (800a29c <vApplicationGetTimerTaskMemory+0x30>)
 800a282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a28a:	601a      	str	r2, [r3, #0]
}
 800a28c:	bf00      	nop
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	200006f8 	.word	0x200006f8
 800a29c:	200007b4 	.word	0x200007b4

0800a2a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f103 0208 	add.w	r2, r3, #8
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f103 0208 	add.w	r2, r3, #8
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f103 0208 	add.w	r2, r3, #8
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	601a      	str	r2, [r3, #0]
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a342:	b480      	push	{r7}
 800a344:	b085      	sub	sp, #20
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a358:	d103      	bne.n	800a362 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e00c      	b.n	800a37c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3308      	adds	r3, #8
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	e002      	b.n	800a370 <vListInsert+0x2e>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d2f6      	bcs.n	800a36a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	601a      	str	r2, [r3, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6892      	ldr	r2, [r2, #8]
 800a3ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6852      	ldr	r2, [r2, #4]
 800a3d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d103      	bne.n	800a3e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	1e5a      	subs	r2, r3, #1
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a432:	f002 fcf7 	bl	800ce24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43e:	68f9      	ldr	r1, [r7, #12]
 800a440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a442:	fb01 f303 	mul.w	r3, r1, r3
 800a446:	441a      	add	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a462:	3b01      	subs	r3, #1
 800a464:	68f9      	ldr	r1, [r7, #12]
 800a466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	441a      	add	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	22ff      	movs	r2, #255	; 0xff
 800a47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d114      	bne.n	800a4b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01a      	beq.n	800a4c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3310      	adds	r3, #16
 800a494:	4618      	mov	r0, r3
 800a496:	f001 fca9 	bl	800bdec <xTaskRemoveFromEventList>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d012      	beq.n	800a4c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4a0:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <xQueueGenericReset+0xcc>)
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	e009      	b.n	800a4c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fef2 	bl	800a2a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3324      	adds	r3, #36	; 0x24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff feed 	bl	800a2a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4c6:	f002 fcdd 	bl	800ce84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ca:	2301      	movs	r3, #1
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed04 	.word	0xe000ed04

0800a4d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08e      	sub	sp, #56	; 0x38
 800a4dc:	af02      	add	r7, sp, #8
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <xQueueGenericCreateStatic+0x52>
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <xQueueGenericCreateStatic+0x56>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xQueueGenericCreateStatic+0x58>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	623b      	str	r3, [r7, #32]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <xQueueGenericCreateStatic+0x7e>
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <xQueueGenericCreateStatic+0x82>
 800a556:	2301      	movs	r3, #1
 800a558:	e000      	b.n	800a55c <xQueueGenericCreateStatic+0x84>
 800a55a:	2300      	movs	r3, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	61fb      	str	r3, [r7, #28]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a576:	2350      	movs	r3, #80	; 0x50
 800a578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b50      	cmp	r3, #80	; 0x50
 800a57e:	d00a      	beq.n	800a596 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61bb      	str	r3, [r7, #24]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a596:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00d      	beq.n	800a5be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f83f 	bl	800a63c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3730      	adds	r7, #48	; 0x30
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	613b      	str	r3, [r7, #16]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	fb02 f303 	mul.w	r3, r2, r3
 800a5fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	3350      	adds	r3, #80	; 0x50
 800a600:	4618      	mov	r0, r3
 800a602:	f002 fd31 	bl	800d068 <pvPortMalloc>
 800a606:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d011      	beq.n	800a632 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	3350      	adds	r3, #80	; 0x50
 800a616:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a620:	79fa      	ldrb	r2, [r7, #7]
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f805 	bl	800a63c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a632:	69bb      	ldr	r3, [r7, #24]
	}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d103      	bne.n	800a658 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	e002      	b.n	800a65e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a66a:	2101      	movs	r1, #1
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	f7ff fecb 	bl	800a408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00e      	beq.n	800a6ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f8a1 	bl	800a7f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	6939      	ldr	r1, [r7, #16]
 800a6ce:	6978      	ldr	r0, [r7, #20]
 800a6d0:	f7ff ff7a 	bl	800a5c8 <xQueueGenericCreate>
 800a6d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff ffd3 	bl	800a682 <prvInitialiseMutex>

		return xNewQueue;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
	}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b088      	sub	sp, #32
 800a6ea:	af02      	add	r7, sp, #8
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	6039      	str	r1, [r7, #0]
 800a6f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2200      	movs	r2, #0
 800a702:	6939      	ldr	r1, [r7, #16]
 800a704:	6978      	ldr	r0, [r7, #20]
 800a706:	f7ff fee7 	bl	800a4d8 <xQueueGenericCreateStatic>
 800a70a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7ff ffb8 	bl	800a682 <prvInitialiseMutex>

		return xNewQueue;
 800a712:	68fb      	ldr	r3, [r7, #12]
	}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08a      	sub	sp, #40	; 0x28
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	61bb      	str	r3, [r7, #24]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d90a      	bls.n	800a762 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	617b      	str	r3, [r7, #20]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a762:	2302      	movs	r3, #2
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	2100      	movs	r1, #0
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff feb3 	bl	800a4d8 <xQueueGenericCreateStatic>
 800a772:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a780:	69fb      	ldr	r3, [r7, #28]
	}
 800a782:	4618      	mov	r0, r3
 800a784:	3720      	adds	r7, #32
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b086      	sub	sp, #24
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10a      	bne.n	800a7b0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	613b      	str	r3, [r7, #16]
}
 800a7ac:	bf00      	nop
 800a7ae:	e7fe      	b.n	800a7ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d90a      	bls.n	800a7ce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	60fb      	str	r3, [r7, #12]
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fef8 	bl	800a5c8 <xQueueGenericCreate>
 800a7d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7e6:	697b      	ldr	r3, [r7, #20]
	}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08e      	sub	sp, #56	; 0x38
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7fe:	2300      	movs	r3, #0
 800a800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <xQueueGenericSend+0x32>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d103      	bne.n	800a830 <xQueueGenericSend+0x40>
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <xQueueGenericSend+0x44>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <xQueueGenericSend+0x46>
 800a834:	2300      	movs	r3, #0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <xQueueGenericSend+0x60>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d103      	bne.n	800a85e <xQueueGenericSend+0x6e>
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <xQueueGenericSend+0x72>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <xQueueGenericSend+0x74>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xQueueGenericSend+0x8e>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	623b      	str	r3, [r7, #32]
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a87e:	f001 fc77 	bl	800c170 <xTaskGetSchedulerState>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <xQueueGenericSend+0x9e>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <xQueueGenericSend+0xa2>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueGenericSend+0xa4>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	61fb      	str	r3, [r7, #28]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8ae:	f002 fab9 	bl	800ce24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d302      	bcc.n	800a8c4 <xQueueGenericSend+0xd4>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d129      	bne.n	800a918 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	68b9      	ldr	r1, [r7, #8]
 800a8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ca:	f000 fc5e 	bl	800b18a <prvCopyDataToQueue>
 800a8ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d010      	beq.n	800a8fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	3324      	adds	r3, #36	; 0x24
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f001 fa85 	bl	800bdec <xTaskRemoveFromEventList>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d013      	beq.n	800a910 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8e8:	4b3f      	ldr	r3, [pc, #252]	; (800a9e8 <xQueueGenericSend+0x1f8>)
 800a8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	e00a      	b.n	800a910 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d007      	beq.n	800a910 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a900:	4b39      	ldr	r3, [pc, #228]	; (800a9e8 <xQueueGenericSend+0x1f8>)
 800a902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a910:	f002 fab8 	bl	800ce84 <vPortExitCritical>
				return pdPASS;
 800a914:	2301      	movs	r3, #1
 800a916:	e063      	b.n	800a9e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a91e:	f002 fab1 	bl	800ce84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a922:	2300      	movs	r3, #0
 800a924:	e05c      	b.n	800a9e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d106      	bne.n	800a93a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a92c:	f107 0314 	add.w	r3, r7, #20
 800a930:	4618      	mov	r0, r3
 800a932:	f001 fabf 	bl	800beb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a936:	2301      	movs	r3, #1
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a93a:	f002 faa3 	bl	800ce84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a93e:	f001 f819 	bl	800b974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a942:	f002 fa6f 	bl	800ce24 <vPortEnterCritical>
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a94c:	b25b      	sxtb	r3, r3
 800a94e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a952:	d103      	bne.n	800a95c <xQueueGenericSend+0x16c>
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a962:	b25b      	sxtb	r3, r3
 800a964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a968:	d103      	bne.n	800a972 <xQueueGenericSend+0x182>
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a972:	f002 fa87 	bl	800ce84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a976:	1d3a      	adds	r2, r7, #4
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	4611      	mov	r1, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 faae 	bl	800bee0 <xTaskCheckForTimeOut>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d124      	bne.n	800a9d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a98a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a98c:	f000 fcf5 	bl	800b37a <prvIsQueueFull>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d018      	beq.n	800a9c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	3310      	adds	r3, #16
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	4611      	mov	r1, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 f9d4 	bl	800bd4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a6:	f000 fc80 	bl	800b2aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9aa:	f000 fff1 	bl	800b990 <xTaskResumeAll>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f47f af7c 	bne.w	800a8ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <xQueueGenericSend+0x1f8>)
 800a9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	e772      	b.n	800a8ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ca:	f000 fc6e 	bl	800b2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ce:	f000 ffdf 	bl	800b990 <xTaskResumeAll>
 800a9d2:	e76c      	b.n	800a8ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d6:	f000 fc68 	bl	800b2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9da:	f000 ffd9 	bl	800b990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3738      	adds	r7, #56	; 0x38
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b090      	sub	sp, #64	; 0x40
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d103      	bne.n	800aa28 <xQueueGenericSendFromISR+0x3c>
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <xQueueGenericSendFromISR+0x40>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e000      	b.n	800aa2e <xQueueGenericSendFromISR+0x42>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa44:	bf00      	nop
 800aa46:	e7fe      	b.n	800aa46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d103      	bne.n	800aa56 <xQueueGenericSendFromISR+0x6a>
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <xQueueGenericSendFromISR+0x6e>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <xQueueGenericSendFromISR+0x70>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	623b      	str	r3, [r7, #32]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa76:	f002 fab7 	bl	800cfe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa7a:	f3ef 8211 	mrs	r2, BASEPRI
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	61fa      	str	r2, [r7, #28]
 800aa90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d302      	bcc.n	800aaa8 <xQueueGenericSendFromISR+0xbc>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d12f      	bne.n	800ab08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aabe:	f000 fb64 	bl	800b18a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aac2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaca:	d112      	bne.n	800aaf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d016      	beq.n	800ab02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	3324      	adds	r3, #36	; 0x24
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f987 	bl	800bdec <xTaskRemoveFromEventList>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00e      	beq.n	800ab02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00b      	beq.n	800ab02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e007      	b.n	800ab02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aaf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	b25a      	sxtb	r2, r3
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab02:	2301      	movs	r3, #1
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab06:	e001      	b.n	800ab0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3740      	adds	r7, #64	; 0x40
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b08e      	sub	sp, #56	; 0x38
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	623b      	str	r3, [r7, #32]
}
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	61fb      	str	r3, [r7, #28]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <xQueueGiveFromISR+0x58>
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <xQueueGiveFromISR+0x5c>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <xQueueGiveFromISR+0x5e>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	61bb      	str	r3, [r7, #24]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab9a:	f002 fa25 	bl	800cfe8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab9e:	f3ef 8211 	mrs	r2, BASEPRI
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	617a      	str	r2, [r7, #20]
 800abb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800abb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d22b      	bcs.n	800ac22 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abda:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abe4:	d112      	bne.n	800ac0c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d016      	beq.n	800ac1c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	3324      	adds	r3, #36	; 0x24
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 f8fa 	bl	800bdec <xTaskRemoveFromEventList>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00b      	beq.n	800ac1c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2201      	movs	r2, #1
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	e007      	b.n	800ac1c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac10:	3301      	adds	r3, #1
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	b25a      	sxtb	r2, r3
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac20:	e001      	b.n	800ac26 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	637b      	str	r3, [r7, #52]	; 0x34
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f383 8811 	msr	BASEPRI, r3
}
 800ac30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3738      	adds	r7, #56	; 0x38
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08c      	sub	sp, #48	; 0x30
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10a      	bne.n	800ac6c <xQueueReceive+0x30>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	623b      	str	r3, [r7, #32]
}
 800ac68:	bf00      	nop
 800ac6a:	e7fe      	b.n	800ac6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d103      	bne.n	800ac7a <xQueueReceive+0x3e>
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <xQueueReceive+0x42>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <xQueueReceive+0x44>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10a      	bne.n	800ac9a <xQueueReceive+0x5e>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	61fb      	str	r3, [r7, #28]
}
 800ac96:	bf00      	nop
 800ac98:	e7fe      	b.n	800ac98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac9a:	f001 fa69 	bl	800c170 <xTaskGetSchedulerState>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <xQueueReceive+0x6e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <xQueueReceive+0x72>
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <xQueueReceive+0x74>
 800acae:	2300      	movs	r3, #0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <xQueueReceive+0x8e>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	61bb      	str	r3, [r7, #24]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acca:	f002 f8ab 	bl	800ce24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01f      	beq.n	800ad1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acde:	f000 fabe 	bl	800b25e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	1e5a      	subs	r2, r3, #1
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00f      	beq.n	800ad12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	3310      	adds	r3, #16
 800acf6:	4618      	mov	r0, r3
 800acf8:	f001 f878 	bl	800bdec <xTaskRemoveFromEventList>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d007      	beq.n	800ad12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad02:	4b3d      	ldr	r3, [pc, #244]	; (800adf8 <xQueueReceive+0x1bc>)
 800ad04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad12:	f002 f8b7 	bl	800ce84 <vPortExitCritical>
				return pdPASS;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e069      	b.n	800adee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d103      	bne.n	800ad28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad20:	f002 f8b0 	bl	800ce84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e062      	b.n	800adee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad2e:	f107 0310 	add.w	r3, r7, #16
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 f8be 	bl	800beb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad3c:	f002 f8a2 	bl	800ce84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad40:	f000 fe18 	bl	800b974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad44:	f002 f86e 	bl	800ce24 <vPortEnterCritical>
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad54:	d103      	bne.n	800ad5e <xQueueReceive+0x122>
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad64:	b25b      	sxtb	r3, r3
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad6a:	d103      	bne.n	800ad74 <xQueueReceive+0x138>
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad74:	f002 f886 	bl	800ce84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad78:	1d3a      	adds	r2, r7, #4
 800ad7a:	f107 0310 	add.w	r3, r7, #16
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 f8ad 	bl	800bee0 <xTaskCheckForTimeOut>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d123      	bne.n	800add4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8e:	f000 fade 	bl	800b34e <prvIsQueueEmpty>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d017      	beq.n	800adc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	3324      	adds	r3, #36	; 0x24
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 ffd3 	bl	800bd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ada6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ada8:	f000 fa7f 	bl	800b2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adac:	f000 fdf0 	bl	800b990 <xTaskResumeAll>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d189      	bne.n	800acca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800adb6:	4b10      	ldr	r3, [pc, #64]	; (800adf8 <xQueueReceive+0x1bc>)
 800adb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	e780      	b.n	800acca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adca:	f000 fa6e 	bl	800b2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adce:	f000 fddf 	bl	800b990 <xTaskResumeAll>
 800add2:	e77a      	b.n	800acca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800add4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add6:	f000 fa68 	bl	800b2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adda:	f000 fdd9 	bl	800b990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade0:	f000 fab5 	bl	800b34e <prvIsQueueEmpty>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f43f af6f 	beq.w	800acca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3730      	adds	r7, #48	; 0x30
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	e000ed04 	.word	0xe000ed04

0800adfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08e      	sub	sp, #56	; 0x38
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae06:	2300      	movs	r3, #0
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10a      	bne.n	800ae2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	623b      	str	r3, [r7, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	61fb      	str	r3, [r7, #28]
}
 800ae48:	bf00      	nop
 800ae4a:	e7fe      	b.n	800ae4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae4c:	f001 f990 	bl	800c170 <xTaskGetSchedulerState>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d102      	bne.n	800ae5c <xQueueSemaphoreTake+0x60>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <xQueueSemaphoreTake+0x64>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <xQueueSemaphoreTake+0x66>
 800ae60:	2300      	movs	r3, #0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	61bb      	str	r3, [r7, #24]
}
 800ae78:	bf00      	nop
 800ae7a:	e7fe      	b.n	800ae7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae7c:	f001 ffd2 	bl	800ce24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d024      	beq.n	800aed6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8e:	1e5a      	subs	r2, r3, #1
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae9c:	f001 fade 	bl	800c45c <pvTaskIncrementMutexHeldCount>
 800aea0:	4602      	mov	r2, r0
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00f      	beq.n	800aece <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb0:	3310      	adds	r3, #16
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 ff9a 	bl	800bdec <xTaskRemoveFromEventList>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d007      	beq.n	800aece <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aebe:	4b54      	ldr	r3, [pc, #336]	; (800b010 <xQueueSemaphoreTake+0x214>)
 800aec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aece:	f001 ffd9 	bl	800ce84 <vPortExitCritical>
				return pdPASS;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e097      	b.n	800b006 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d111      	bne.n	800af00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	617b      	str	r3, [r7, #20]
}
 800aef4:	bf00      	nop
 800aef6:	e7fe      	b.n	800aef6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aef8:	f001 ffc4 	bl	800ce84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aefc:	2300      	movs	r3, #0
 800aefe:	e082      	b.n	800b006 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af02:	2b00      	cmp	r3, #0
 800af04:	d106      	bne.n	800af14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af06:	f107 030c 	add.w	r3, r7, #12
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 ffd2 	bl	800beb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af14:	f001 ffb6 	bl	800ce84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af18:	f000 fd2c 	bl	800b974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af1c:	f001 ff82 	bl	800ce24 <vPortEnterCritical>
 800af20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af26:	b25b      	sxtb	r3, r3
 800af28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af2c:	d103      	bne.n	800af36 <xQueueSemaphoreTake+0x13a>
 800af2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af3c:	b25b      	sxtb	r3, r3
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af42:	d103      	bne.n	800af4c <xQueueSemaphoreTake+0x150>
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af4c:	f001 ff9a 	bl	800ce84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af50:	463a      	mov	r2, r7
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 ffc1 	bl	800bee0 <xTaskCheckForTimeOut>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d132      	bne.n	800afca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af66:	f000 f9f2 	bl	800b34e <prvIsQueueEmpty>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d026      	beq.n	800afbe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d109      	bne.n	800af8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800af78:	f001 ff54 	bl	800ce24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	4618      	mov	r0, r3
 800af82:	f001 f913 	bl	800c1ac <xTaskPriorityInherit>
 800af86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af88:	f001 ff7c 	bl	800ce84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	3324      	adds	r3, #36	; 0x24
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	4611      	mov	r1, r2
 800af94:	4618      	mov	r0, r3
 800af96:	f000 fed9 	bl	800bd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af9c:	f000 f985 	bl	800b2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afa0:	f000 fcf6 	bl	800b990 <xTaskResumeAll>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f47f af68 	bne.w	800ae7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800afac:	4b18      	ldr	r3, [pc, #96]	; (800b010 <xQueueSemaphoreTake+0x214>)
 800afae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	e75e      	b.n	800ae7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800afbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afc0:	f000 f973 	bl	800b2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afc4:	f000 fce4 	bl	800b990 <xTaskResumeAll>
 800afc8:	e758      	b.n	800ae7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800afca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afcc:	f000 f96d 	bl	800b2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afd0:	f000 fcde 	bl	800b990 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afd6:	f000 f9ba 	bl	800b34e <prvIsQueueEmpty>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f43f af4d 	beq.w	800ae7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00d      	beq.n	800b004 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800afe8:	f001 ff1c 	bl	800ce24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800afec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afee:	f000 f8b4 	bl	800b15a <prvGetDisinheritPriorityAfterTimeout>
 800aff2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800affa:	4618      	mov	r0, r3
 800affc:	f001 f9ac 	bl	800c358 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b000:	f001 ff40 	bl	800ce84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b006:	4618      	mov	r0, r3
 800b008:	3738      	adds	r7, #56	; 0x38
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	e000ed04 	.word	0xe000ed04

0800b014 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08e      	sub	sp, #56	; 0x38
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	623b      	str	r3, [r7, #32]
}
 800b03c:	bf00      	nop
 800b03e:	e7fe      	b.n	800b03e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d103      	bne.n	800b04e <xQueueReceiveFromISR+0x3a>
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <xQueueReceiveFromISR+0x3e>
 800b04e:	2301      	movs	r3, #1
 800b050:	e000      	b.n	800b054 <xQueueReceiveFromISR+0x40>
 800b052:	2300      	movs	r3, #0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	61fb      	str	r3, [r7, #28]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b06e:	f001 ffbb 	bl	800cfe8 <vPortValidateInterruptPriority>
	__asm volatile
 800b072:	f3ef 8211 	mrs	r2, BASEPRI
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	61ba      	str	r2, [r7, #24]
 800b088:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b08a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b092:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	2b00      	cmp	r3, #0
 800b098:	d02f      	beq.n	800b0fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0a8:	f000 f8d9 	bl	800b25e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	1e5a      	subs	r2, r3, #1
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0bc:	d112      	bne.n	800b0e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d016      	beq.n	800b0f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	3310      	adds	r3, #16
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fe8e 	bl	800bdec <xTaskRemoveFromEventList>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00e      	beq.n	800b0f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e007      	b.n	800b0f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	b25a      	sxtb	r2, r3
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0f8:	e001      	b.n	800b0fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f383 8811 	msr	BASEPRI, r3
}
 800b108:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3738      	adds	r7, #56	; 0x38
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <vQueueDelete+0x28>
	__asm volatile
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	60bb      	str	r3, [r7, #8]
}
 800b138:	bf00      	nop
 800b13a:	e7fe      	b.n	800b13a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f95f 	bl	800b400 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f002 f857 	bl	800d200 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b15a:	b480      	push	{r7}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	e001      	b.n	800b17c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b17c:	68fb      	ldr	r3, [r7, #12]
	}
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b086      	sub	sp, #24
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10d      	bne.n	800b1c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d14d      	bne.n	800b24c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f001 f861 	bl	800c27c <xTaskPriorityDisinherit>
 800b1ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	609a      	str	r2, [r3, #8]
 800b1c2:	e043      	b.n	800b24c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d119      	bne.n	800b1fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6858      	ldr	r0, [r3, #4]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68b9      	ldr	r1, [r7, #8]
 800b1d6:	f002 f957 	bl	800d488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	441a      	add	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d32b      	bcc.n	800b24c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	605a      	str	r2, [r3, #4]
 800b1fc:	e026      	b.n	800b24c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68d8      	ldr	r0, [r3, #12]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	461a      	mov	r2, r3
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	f002 f93d 	bl	800d488 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b216:	425b      	negs	r3, r3
 800b218:	441a      	add	r2, r3
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d207      	bcs.n	800b23a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	425b      	negs	r3, r3
 800b234:	441a      	add	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d105      	bne.n	800b24c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	3b01      	subs	r3, #1
 800b24a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b254:	697b      	ldr	r3, [r7, #20]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d018      	beq.n	800b2a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	441a      	add	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	429a      	cmp	r2, r3
 800b288:	d303      	bcc.n	800b292 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68d9      	ldr	r1, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	461a      	mov	r2, r3
 800b29c:	6838      	ldr	r0, [r7, #0]
 800b29e:	f002 f8f3 	bl	800d488 <memcpy>
	}
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2b2:	f001 fdb7 	bl	800ce24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2be:	e011      	b.n	800b2e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d012      	beq.n	800b2ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3324      	adds	r3, #36	; 0x24
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 fd8d 	bl	800bdec <xTaskRemoveFromEventList>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2d8:	f000 fe64 	bl	800bfa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dce9      	bgt.n	800b2c0 <prvUnlockQueue+0x16>
 800b2ec:	e000      	b.n	800b2f0 <prvUnlockQueue+0x46>
					break;
 800b2ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	22ff      	movs	r2, #255	; 0xff
 800b2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2f8:	f001 fdc4 	bl	800ce84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2fc:	f001 fd92 	bl	800ce24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b306:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b308:	e011      	b.n	800b32e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d012      	beq.n	800b338 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3310      	adds	r3, #16
 800b316:	4618      	mov	r0, r3
 800b318:	f000 fd68 	bl	800bdec <xTaskRemoveFromEventList>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b322:	f000 fe3f 	bl	800bfa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	3b01      	subs	r3, #1
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b32e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b332:	2b00      	cmp	r3, #0
 800b334:	dce9      	bgt.n	800b30a <prvUnlockQueue+0x60>
 800b336:	e000      	b.n	800b33a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b338:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	22ff      	movs	r2, #255	; 0xff
 800b33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b342:	f001 fd9f 	bl	800ce84 <vPortExitCritical>
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b356:	f001 fd65 	bl	800ce24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b362:	2301      	movs	r3, #1
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	e001      	b.n	800b36c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b36c:	f001 fd8a 	bl	800ce84 <vPortExitCritical>

	return xReturn;
 800b370:	68fb      	ldr	r3, [r7, #12]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b382:	f001 fd4f 	bl	800ce24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	429a      	cmp	r2, r3
 800b390:	d102      	bne.n	800b398 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b392:	2301      	movs	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	e001      	b.n	800b39c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b39c:	f001 fd72 	bl	800ce84 <vPortExitCritical>

	return xReturn;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	e014      	b.n	800b3e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3bc:	4a0f      	ldr	r2, [pc, #60]	; (800b3fc <vQueueAddToRegistry+0x50>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10b      	bne.n	800b3e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3c8:	490c      	ldr	r1, [pc, #48]	; (800b3fc <vQueueAddToRegistry+0x50>)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3d2:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <vQueueAddToRegistry+0x50>)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	4413      	add	r3, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3de:	e006      	b.n	800b3ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b07      	cmp	r3, #7
 800b3ea:	d9e7      	bls.n	800b3bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	20000bb4 	.word	0x20000bb4

0800b400 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	e016      	b.n	800b43c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b40e:	4a10      	ldr	r2, [pc, #64]	; (800b450 <vQueueUnregisterQueue+0x50>)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	4413      	add	r3, r2
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d10b      	bne.n	800b436 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b41e:	4a0c      	ldr	r2, [pc, #48]	; (800b450 <vQueueUnregisterQueue+0x50>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2100      	movs	r1, #0
 800b424:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b428:	4a09      	ldr	r2, [pc, #36]	; (800b450 <vQueueUnregisterQueue+0x50>)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	4413      	add	r3, r2
 800b430:	2200      	movs	r2, #0
 800b432:	605a      	str	r2, [r3, #4]
				break;
 800b434:	e006      	b.n	800b444 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b07      	cmp	r3, #7
 800b440:	d9e5      	bls.n	800b40e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	20000bb4 	.word	0x20000bb4

0800b454 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b464:	f001 fcde 	bl	800ce24 <vPortEnterCritical>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b46e:	b25b      	sxtb	r3, r3
 800b470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b474:	d103      	bne.n	800b47e <vQueueWaitForMessageRestricted+0x2a>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b484:	b25b      	sxtb	r3, r3
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b48a:	d103      	bne.n	800b494 <vQueueWaitForMessageRestricted+0x40>
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b494:	f001 fcf6 	bl	800ce84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	3324      	adds	r3, #36	; 0x24
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 fc73 	bl	800bd94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4ae:	6978      	ldr	r0, [r7, #20]
 800b4b0:	f7ff fefb 	bl	800b2aa <prvUnlockQueue>
	}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08e      	sub	sp, #56	; 0x38
 800b4c0:	af04      	add	r7, sp, #16
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	623b      	str	r3, [r7, #32]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <xTaskCreateStatic+0x46>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	61fb      	str	r3, [r7, #28]
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b502:	23bc      	movs	r3, #188	; 0xbc
 800b504:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2bbc      	cmp	r3, #188	; 0xbc
 800b50a:	d00a      	beq.n	800b522 <xTaskCreateStatic+0x66>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	61bb      	str	r3, [r7, #24]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b522:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	2b00      	cmp	r3, #0
 800b528:	d01e      	beq.n	800b568 <xTaskCreateStatic+0xac>
 800b52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01b      	beq.n	800b568 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b538:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	2202      	movs	r2, #2
 800b53e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b542:	2300      	movs	r3, #0
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	f107 0314 	add.w	r3, r7, #20
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 f850 	bl	800b600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b562:	f000 f8f3 	bl	800b74c <prvAddNewTaskToReadyList>
 800b566:	e001      	b.n	800b56c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b56c:	697b      	ldr	r3, [r7, #20]
	}
 800b56e:	4618      	mov	r0, r3
 800b570:	3728      	adds	r7, #40	; 0x28
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b576:	b580      	push	{r7, lr}
 800b578:	b08c      	sub	sp, #48	; 0x30
 800b57a:	af04      	add	r7, sp, #16
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	603b      	str	r3, [r7, #0]
 800b582:	4613      	mov	r3, r2
 800b584:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 fd6c 	bl	800d068 <pvPortMalloc>
 800b590:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00e      	beq.n	800b5b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b598:	20bc      	movs	r0, #188	; 0xbc
 800b59a:	f001 fd65 	bl	800d068 <pvPortMalloc>
 800b59e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	631a      	str	r2, [r3, #48]	; 0x30
 800b5ac:	e005      	b.n	800b5ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5ae:	6978      	ldr	r0, [r7, #20]
 800b5b0:	f001 fe26 	bl	800d200 <vPortFree>
 800b5b4:	e001      	b.n	800b5ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d017      	beq.n	800b5f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5c8:	88fa      	ldrh	r2, [r7, #6]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 f80e 	bl	800b600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5e4:	69f8      	ldr	r0, [r7, #28]
 800b5e6:	f000 f8b1 	bl	800b74c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	e002      	b.n	800b5f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3720      	adds	r7, #32
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	461a      	mov	r2, r3
 800b618:	21a5      	movs	r1, #165	; 0xa5
 800b61a:	f001 ff43 	bl	800d4a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b628:	3b01      	subs	r3, #1
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	f023 0307 	bic.w	r3, r3, #7
 800b636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	f003 0307 	and.w	r3, r3, #7
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	617b      	str	r3, [r7, #20]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01f      	beq.n	800b69e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b65e:	2300      	movs	r3, #0
 800b660:	61fb      	str	r3, [r7, #28]
 800b662:	e012      	b.n	800b68a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	4413      	add	r3, r2
 800b66a:	7819      	ldrb	r1, [r3, #0]
 800b66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	3334      	adds	r3, #52	; 0x34
 800b674:	460a      	mov	r2, r1
 800b676:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	4413      	add	r3, r2
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d006      	beq.n	800b692 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	3301      	adds	r3, #1
 800b688:	61fb      	str	r3, [r7, #28]
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	2b0f      	cmp	r3, #15
 800b68e:	d9e9      	bls.n	800b664 <prvInitialiseNewTask+0x64>
 800b690:	e000      	b.n	800b694 <prvInitialiseNewTask+0x94>
			{
				break;
 800b692:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b69c:	e003      	b.n	800b6a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	2b37      	cmp	r3, #55	; 0x37
 800b6aa:	d901      	bls.n	800b6b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6ac:	2337      	movs	r3, #55	; 0x37
 800b6ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	2200      	movs	r2, #0
 800b6c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fe0a 	bl	800a2e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	3318      	adds	r3, #24
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe fe05 	bl	800a2e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	3354      	adds	r3, #84	; 0x54
 800b700:	2260      	movs	r2, #96	; 0x60
 800b702:	2100      	movs	r1, #0
 800b704:	4618      	mov	r0, r3
 800b706:	f001 fecd 	bl	800d4a4 <memset>
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	4a0c      	ldr	r2, [pc, #48]	; (800b740 <prvInitialiseNewTask+0x140>)
 800b70e:	659a      	str	r2, [r3, #88]	; 0x58
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	4a0c      	ldr	r2, [pc, #48]	; (800b744 <prvInitialiseNewTask+0x144>)
 800b714:	65da      	str	r2, [r3, #92]	; 0x5c
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <prvInitialiseNewTask+0x148>)
 800b71a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	68f9      	ldr	r1, [r7, #12]
 800b720:	69b8      	ldr	r0, [r7, #24]
 800b722:	f001 fa51 	bl	800cbc8 <pxPortInitialiseStack>
 800b726:	4602      	mov	r2, r0
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b736:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b738:	bf00      	nop
 800b73a:	3720      	adds	r7, #32
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	0800d76c 	.word	0x0800d76c
 800b744:	0800d78c 	.word	0x0800d78c
 800b748:	0800d74c 	.word	0x0800d74c

0800b74c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b754:	f001 fb66 	bl	800ce24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b758:	4b2d      	ldr	r3, [pc, #180]	; (800b810 <prvAddNewTaskToReadyList+0xc4>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3301      	adds	r3, #1
 800b75e:	4a2c      	ldr	r2, [pc, #176]	; (800b810 <prvAddNewTaskToReadyList+0xc4>)
 800b760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b762:	4b2c      	ldr	r3, [pc, #176]	; (800b814 <prvAddNewTaskToReadyList+0xc8>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b76a:	4a2a      	ldr	r2, [pc, #168]	; (800b814 <prvAddNewTaskToReadyList+0xc8>)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b770:	4b27      	ldr	r3, [pc, #156]	; (800b810 <prvAddNewTaskToReadyList+0xc4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d110      	bne.n	800b79a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b778:	f000 fc38 	bl	800bfec <prvInitialiseTaskLists>
 800b77c:	e00d      	b.n	800b79a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b77e:	4b26      	ldr	r3, [pc, #152]	; (800b818 <prvAddNewTaskToReadyList+0xcc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d109      	bne.n	800b79a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b786:	4b23      	ldr	r3, [pc, #140]	; (800b814 <prvAddNewTaskToReadyList+0xc8>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	429a      	cmp	r2, r3
 800b792:	d802      	bhi.n	800b79a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b794:	4a1f      	ldr	r2, [pc, #124]	; (800b814 <prvAddNewTaskToReadyList+0xc8>)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b79a:	4b20      	ldr	r3, [pc, #128]	; (800b81c <prvAddNewTaskToReadyList+0xd0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	4a1e      	ldr	r2, [pc, #120]	; (800b81c <prvAddNewTaskToReadyList+0xd0>)
 800b7a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7a4:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <prvAddNewTaskToReadyList+0xd0>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b0:	4b1b      	ldr	r3, [pc, #108]	; (800b820 <prvAddNewTaskToReadyList+0xd4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d903      	bls.n	800b7c0 <prvAddNewTaskToReadyList+0x74>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	4a18      	ldr	r2, [pc, #96]	; (800b820 <prvAddNewTaskToReadyList+0xd4>)
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4a15      	ldr	r2, [pc, #84]	; (800b824 <prvAddNewTaskToReadyList+0xd8>)
 800b7ce:	441a      	add	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fe fd8f 	bl	800a2fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7dc:	f001 fb52 	bl	800ce84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7e0:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <prvAddNewTaskToReadyList+0xcc>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00e      	beq.n	800b806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <prvAddNewTaskToReadyList+0xc8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d207      	bcs.n	800b806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <prvAddNewTaskToReadyList+0xdc>)
 800b7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	200010c8 	.word	0x200010c8
 800b814:	20000bf4 	.word	0x20000bf4
 800b818:	200010d4 	.word	0x200010d4
 800b81c:	200010e4 	.word	0x200010e4
 800b820:	200010d0 	.word	0x200010d0
 800b824:	20000bf8 	.word	0x20000bf8
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d017      	beq.n	800b86e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b83e:	4b13      	ldr	r3, [pc, #76]	; (800b88c <vTaskDelay+0x60>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <vTaskDelay+0x30>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	60bb      	str	r3, [r7, #8]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b85c:	f000 f88a 	bl	800b974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b860:	2100      	movs	r1, #0
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fe0e 	bl	800c484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b868:	f000 f892 	bl	800b990 <xTaskResumeAll>
 800b86c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d107      	bne.n	800b884 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b874:	4b06      	ldr	r3, [pc, #24]	; (800b890 <vTaskDelay+0x64>)
 800b876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b884:	bf00      	nop
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	200010f0 	.word	0x200010f0
 800b890:	e000ed04 	.word	0xe000ed04

0800b894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	; 0x28
 800b898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8a2:	463a      	mov	r2, r7
 800b8a4:	1d39      	adds	r1, r7, #4
 800b8a6:	f107 0308 	add.w	r3, r7, #8
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fcc4 	bl	800a238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	9202      	str	r2, [sp, #8]
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	460a      	mov	r2, r1
 800b8c2:	4924      	ldr	r1, [pc, #144]	; (800b954 <vTaskStartScheduler+0xc0>)
 800b8c4:	4824      	ldr	r0, [pc, #144]	; (800b958 <vTaskStartScheduler+0xc4>)
 800b8c6:	f7ff fdf9 	bl	800b4bc <xTaskCreateStatic>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4a23      	ldr	r2, [pc, #140]	; (800b95c <vTaskStartScheduler+0xc8>)
 800b8ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8d0:	4b22      	ldr	r3, [pc, #136]	; (800b95c <vTaskStartScheduler+0xc8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e001      	b.n	800b8e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d102      	bne.n	800b8ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8e8:	f000 fe20 	bl	800c52c <xTimerCreateTimerTask>
 800b8ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d11b      	bne.n	800b92c <vTaskStartScheduler+0x98>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	613b      	str	r3, [r7, #16]
}
 800b906:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b908:	4b15      	ldr	r3, [pc, #84]	; (800b960 <vTaskStartScheduler+0xcc>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3354      	adds	r3, #84	; 0x54
 800b90e:	4a15      	ldr	r2, [pc, #84]	; (800b964 <vTaskStartScheduler+0xd0>)
 800b910:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b912:	4b15      	ldr	r3, [pc, #84]	; (800b968 <vTaskStartScheduler+0xd4>)
 800b914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b918:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b91a:	4b14      	ldr	r3, [pc, #80]	; (800b96c <vTaskStartScheduler+0xd8>)
 800b91c:	2201      	movs	r2, #1
 800b91e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b920:	4b13      	ldr	r3, [pc, #76]	; (800b970 <vTaskStartScheduler+0xdc>)
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b926:	f001 f9db 	bl	800cce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b92a:	e00e      	b.n	800b94a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b932:	d10a      	bne.n	800b94a <vTaskStartScheduler+0xb6>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <vTaskStartScheduler+0xb4>
}
 800b94a:	bf00      	nop
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	0800d670 	.word	0x0800d670
 800b958:	0800bfbd 	.word	0x0800bfbd
 800b95c:	200010ec 	.word	0x200010ec
 800b960:	20000bf4 	.word	0x20000bf4
 800b964:	20000010 	.word	0x20000010
 800b968:	200010e8 	.word	0x200010e8
 800b96c:	200010d4 	.word	0x200010d4
 800b970:	200010cc 	.word	0x200010cc

0800b974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b974:	b480      	push	{r7}
 800b976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b978:	4b04      	ldr	r3, [pc, #16]	; (800b98c <vTaskSuspendAll+0x18>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3301      	adds	r3, #1
 800b97e:	4a03      	ldr	r2, [pc, #12]	; (800b98c <vTaskSuspendAll+0x18>)
 800b980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b982:	bf00      	nop
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	200010f0 	.word	0x200010f0

0800b990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b99e:	4b42      	ldr	r3, [pc, #264]	; (800baa8 <xTaskResumeAll+0x118>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10a      	bne.n	800b9bc <xTaskResumeAll+0x2c>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	603b      	str	r3, [r7, #0]
}
 800b9b8:	bf00      	nop
 800b9ba:	e7fe      	b.n	800b9ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9bc:	f001 fa32 	bl	800ce24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9c0:	4b39      	ldr	r3, [pc, #228]	; (800baa8 <xTaskResumeAll+0x118>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	4a38      	ldr	r2, [pc, #224]	; (800baa8 <xTaskResumeAll+0x118>)
 800b9c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ca:	4b37      	ldr	r3, [pc, #220]	; (800baa8 <xTaskResumeAll+0x118>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d162      	bne.n	800ba98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9d2:	4b36      	ldr	r3, [pc, #216]	; (800baac <xTaskResumeAll+0x11c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d05e      	beq.n	800ba98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9da:	e02f      	b.n	800ba3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9dc:	4b34      	ldr	r3, [pc, #208]	; (800bab0 <xTaskResumeAll+0x120>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3318      	adds	r3, #24
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe fce3 	bl	800a3b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fe fcde 	bl	800a3b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fc:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <xTaskResumeAll+0x124>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d903      	bls.n	800ba0c <xTaskResumeAll+0x7c>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba08:	4a2a      	ldr	r2, [pc, #168]	; (800bab4 <xTaskResumeAll+0x124>)
 800ba0a:	6013      	str	r3, [r2, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4a27      	ldr	r2, [pc, #156]	; (800bab8 <xTaskResumeAll+0x128>)
 800ba1a:	441a      	add	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7fe fc69 	bl	800a2fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2c:	4b23      	ldr	r3, [pc, #140]	; (800babc <xTaskResumeAll+0x12c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d302      	bcc.n	800ba3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba36:	4b22      	ldr	r3, [pc, #136]	; (800bac0 <xTaskResumeAll+0x130>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba3c:	4b1c      	ldr	r3, [pc, #112]	; (800bab0 <xTaskResumeAll+0x120>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1cb      	bne.n	800b9dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba4a:	f000 fb71 	bl	800c130 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba4e:	4b1d      	ldr	r3, [pc, #116]	; (800bac4 <xTaskResumeAll+0x134>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d010      	beq.n	800ba7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba5a:	f000 f859 	bl	800bb10 <xTaskIncrementTick>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba64:	4b16      	ldr	r3, [pc, #88]	; (800bac0 <xTaskResumeAll+0x130>)
 800ba66:	2201      	movs	r2, #1
 800ba68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f1      	bne.n	800ba5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba76:	4b13      	ldr	r3, [pc, #76]	; (800bac4 <xTaskResumeAll+0x134>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba7c:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <xTaskResumeAll+0x130>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d009      	beq.n	800ba98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba84:	2301      	movs	r3, #1
 800ba86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <xTaskResumeAll+0x138>)
 800ba8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba98:	f001 f9f4 	bl	800ce84 <vPortExitCritical>

	return xAlreadyYielded;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	200010f0 	.word	0x200010f0
 800baac:	200010c8 	.word	0x200010c8
 800bab0:	20001088 	.word	0x20001088
 800bab4:	200010d0 	.word	0x200010d0
 800bab8:	20000bf8 	.word	0x20000bf8
 800babc:	20000bf4 	.word	0x20000bf4
 800bac0:	200010dc 	.word	0x200010dc
 800bac4:	200010d8 	.word	0x200010d8
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bad2:	4b05      	ldr	r3, [pc, #20]	; (800bae8 <xTaskGetTickCount+0x1c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bad8:	687b      	ldr	r3, [r7, #4]
}
 800bada:	4618      	mov	r0, r3
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	200010cc 	.word	0x200010cc

0800baec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800baf2:	f001 fa79 	bl	800cfe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800baf6:	2300      	movs	r3, #0
 800baf8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bafa:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <xTaskGetTickCountFromISR+0x20>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb00:	683b      	ldr	r3, [r7, #0]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	200010cc 	.word	0x200010cc

0800bb10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb16:	2300      	movs	r3, #0
 800bb18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb1a:	4b4f      	ldr	r3, [pc, #316]	; (800bc58 <xTaskIncrementTick+0x148>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f040 808f 	bne.w	800bc42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb24:	4b4d      	ldr	r3, [pc, #308]	; (800bc5c <xTaskIncrementTick+0x14c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb2c:	4a4b      	ldr	r2, [pc, #300]	; (800bc5c <xTaskIncrementTick+0x14c>)
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d120      	bne.n	800bb7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb38:	4b49      	ldr	r3, [pc, #292]	; (800bc60 <xTaskIncrementTick+0x150>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	603b      	str	r3, [r7, #0]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <xTaskIncrementTick+0x46>
 800bb58:	4b41      	ldr	r3, [pc, #260]	; (800bc60 <xTaskIncrementTick+0x150>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	4b41      	ldr	r3, [pc, #260]	; (800bc64 <xTaskIncrementTick+0x154>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a3f      	ldr	r2, [pc, #252]	; (800bc60 <xTaskIncrementTick+0x150>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	4a3f      	ldr	r2, [pc, #252]	; (800bc64 <xTaskIncrementTick+0x154>)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	4b3e      	ldr	r3, [pc, #248]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	4a3d      	ldr	r2, [pc, #244]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	f000 fadb 	bl	800c130 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb7a:	4b3c      	ldr	r3, [pc, #240]	; (800bc6c <xTaskIncrementTick+0x15c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d349      	bcc.n	800bc18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb84:	4b36      	ldr	r3, [pc, #216]	; (800bc60 <xTaskIncrementTick+0x150>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d104      	bne.n	800bb98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb8e:	4b37      	ldr	r3, [pc, #220]	; (800bc6c <xTaskIncrementTick+0x15c>)
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb94:	601a      	str	r2, [r3, #0]
					break;
 800bb96:	e03f      	b.n	800bc18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb98:	4b31      	ldr	r3, [pc, #196]	; (800bc60 <xTaskIncrementTick+0x150>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d203      	bcs.n	800bbb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbb0:	4a2e      	ldr	r2, [pc, #184]	; (800bc6c <xTaskIncrementTick+0x15c>)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbb6:	e02f      	b.n	800bc18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fbf9 	bl	800a3b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d004      	beq.n	800bbd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	3318      	adds	r3, #24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe fbf0 	bl	800a3b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd8:	4b25      	ldr	r3, [pc, #148]	; (800bc70 <xTaskIncrementTick+0x160>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d903      	bls.n	800bbe8 <xTaskIncrementTick+0xd8>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	4a22      	ldr	r2, [pc, #136]	; (800bc70 <xTaskIncrementTick+0x160>)
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4a1f      	ldr	r2, [pc, #124]	; (800bc74 <xTaskIncrementTick+0x164>)
 800bbf6:	441a      	add	r2, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7fe fb7b 	bl	800a2fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc08:	4b1b      	ldr	r3, [pc, #108]	; (800bc78 <xTaskIncrementTick+0x168>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d3b8      	bcc.n	800bb84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc12:	2301      	movs	r3, #1
 800bc14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc16:	e7b5      	b.n	800bb84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc18:	4b17      	ldr	r3, [pc, #92]	; (800bc78 <xTaskIncrementTick+0x168>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1e:	4915      	ldr	r1, [pc, #84]	; (800bc74 <xTaskIncrementTick+0x164>)
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	440b      	add	r3, r1
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d901      	bls.n	800bc34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc30:	2301      	movs	r3, #1
 800bc32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc34:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <xTaskIncrementTick+0x16c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d007      	beq.n	800bc4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	e004      	b.n	800bc4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc42:	4b0f      	ldr	r3, [pc, #60]	; (800bc80 <xTaskIncrementTick+0x170>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	4a0d      	ldr	r2, [pc, #52]	; (800bc80 <xTaskIncrementTick+0x170>)
 800bc4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc4c:	697b      	ldr	r3, [r7, #20]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	200010f0 	.word	0x200010f0
 800bc5c:	200010cc 	.word	0x200010cc
 800bc60:	20001080 	.word	0x20001080
 800bc64:	20001084 	.word	0x20001084
 800bc68:	200010e0 	.word	0x200010e0
 800bc6c:	200010e8 	.word	0x200010e8
 800bc70:	200010d0 	.word	0x200010d0
 800bc74:	20000bf8 	.word	0x20000bf8
 800bc78:	20000bf4 	.word	0x20000bf4
 800bc7c:	200010dc 	.word	0x200010dc
 800bc80:	200010d8 	.word	0x200010d8

0800bc84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc8a:	4b2a      	ldr	r3, [pc, #168]	; (800bd34 <vTaskSwitchContext+0xb0>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc92:	4b29      	ldr	r3, [pc, #164]	; (800bd38 <vTaskSwitchContext+0xb4>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc98:	e046      	b.n	800bd28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc9a:	4b27      	ldr	r3, [pc, #156]	; (800bd38 <vTaskSwitchContext+0xb4>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca0:	4b26      	ldr	r3, [pc, #152]	; (800bd3c <vTaskSwitchContext+0xb8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	e010      	b.n	800bcca <vTaskSwitchContext+0x46>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	607b      	str	r3, [r7, #4]
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <vTaskSwitchContext+0x3e>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	491d      	ldr	r1, [pc, #116]	; (800bd40 <vTaskSwitchContext+0xbc>)
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0e4      	beq.n	800bca8 <vTaskSwitchContext+0x24>
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4613      	mov	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4a15      	ldr	r2, [pc, #84]	; (800bd40 <vTaskSwitchContext+0xbc>)
 800bcea:	4413      	add	r3, r2
 800bcec:	60bb      	str	r3, [r7, #8]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	605a      	str	r2, [r3, #4]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	3308      	adds	r3, #8
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d104      	bne.n	800bd0e <vTaskSwitchContext+0x8a>
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	605a      	str	r2, [r3, #4]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	4a0b      	ldr	r2, [pc, #44]	; (800bd44 <vTaskSwitchContext+0xc0>)
 800bd16:	6013      	str	r3, [r2, #0]
 800bd18:	4a08      	ldr	r2, [pc, #32]	; (800bd3c <vTaskSwitchContext+0xb8>)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <vTaskSwitchContext+0xc0>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3354      	adds	r3, #84	; 0x54
 800bd24:	4a08      	ldr	r2, [pc, #32]	; (800bd48 <vTaskSwitchContext+0xc4>)
 800bd26:	6013      	str	r3, [r2, #0]
}
 800bd28:	bf00      	nop
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	200010f0 	.word	0x200010f0
 800bd38:	200010dc 	.word	0x200010dc
 800bd3c:	200010d0 	.word	0x200010d0
 800bd40:	20000bf8 	.word	0x20000bf8
 800bd44:	20000bf4 	.word	0x20000bf4
 800bd48:	20000010 	.word	0x20000010

0800bd4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	60fb      	str	r3, [r7, #12]
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd72:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <vTaskPlaceOnEventList+0x44>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3318      	adds	r3, #24
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7fe fae1 	bl	800a342 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd80:	2101      	movs	r1, #1
 800bd82:	6838      	ldr	r0, [r7, #0]
 800bd84:	f000 fb7e 	bl	800c484 <prvAddCurrentTaskToDelayedList>
}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	20000bf4 	.word	0x20000bf4

0800bd94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10a      	bne.n	800bdbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	617b      	str	r3, [r7, #20]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdbc:	4b0a      	ldr	r3, [pc, #40]	; (800bde8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3318      	adds	r3, #24
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7fe fa98 	bl	800a2fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	68b8      	ldr	r0, [r7, #8]
 800bdda:	f000 fb53 	bl	800c484 <prvAddCurrentTaskToDelayedList>
	}
 800bdde:	bf00      	nop
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	20000bf4 	.word	0x20000bf4

0800bdec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10a      	bne.n	800be18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	60fb      	str	r3, [r7, #12]
}
 800be14:	bf00      	nop
 800be16:	e7fe      	b.n	800be16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	3318      	adds	r3, #24
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe fac9 	bl	800a3b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be22:	4b1e      	ldr	r3, [pc, #120]	; (800be9c <xTaskRemoveFromEventList+0xb0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d11d      	bne.n	800be66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	3304      	adds	r3, #4
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe fac0 	bl	800a3b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be38:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <xTaskRemoveFromEventList+0xb4>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d903      	bls.n	800be48 <xTaskRemoveFromEventList+0x5c>
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be44:	4a16      	ldr	r2, [pc, #88]	; (800bea0 <xTaskRemoveFromEventList+0xb4>)
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4a13      	ldr	r2, [pc, #76]	; (800bea4 <xTaskRemoveFromEventList+0xb8>)
 800be56:	441a      	add	r2, r3
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7fe fa4b 	bl	800a2fa <vListInsertEnd>
 800be64:	e005      	b.n	800be72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	3318      	adds	r3, #24
 800be6a:	4619      	mov	r1, r3
 800be6c:	480e      	ldr	r0, [pc, #56]	; (800bea8 <xTaskRemoveFromEventList+0xbc>)
 800be6e:	f7fe fa44 	bl	800a2fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be76:	4b0d      	ldr	r3, [pc, #52]	; (800beac <xTaskRemoveFromEventList+0xc0>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d905      	bls.n	800be8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be80:	2301      	movs	r3, #1
 800be82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <xTaskRemoveFromEventList+0xc4>)
 800be86:	2201      	movs	r2, #1
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	e001      	b.n	800be90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be8c:	2300      	movs	r3, #0
 800be8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be90:	697b      	ldr	r3, [r7, #20]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	200010f0 	.word	0x200010f0
 800bea0:	200010d0 	.word	0x200010d0
 800bea4:	20000bf8 	.word	0x20000bf8
 800bea8:	20001088 	.word	0x20001088
 800beac:	20000bf4 	.word	0x20000bf4
 800beb0:	200010dc 	.word	0x200010dc

0800beb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <vTaskInternalSetTimeOutState+0x24>)
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <vTaskInternalSetTimeOutState+0x28>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	200010e0 	.word	0x200010e0
 800bedc:	200010cc 	.word	0x200010cc

0800bee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b088      	sub	sp, #32
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	613b      	str	r3, [r7, #16]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60fb      	str	r3, [r7, #12]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf22:	f000 ff7f 	bl	800ce24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf26:	4b1d      	ldr	r3, [pc, #116]	; (800bf9c <xTaskCheckForTimeOut+0xbc>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf3e:	d102      	bne.n	800bf46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf40:	2300      	movs	r3, #0
 800bf42:	61fb      	str	r3, [r7, #28]
 800bf44:	e023      	b.n	800bf8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <xTaskCheckForTimeOut+0xc0>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d007      	beq.n	800bf62 <xTaskCheckForTimeOut+0x82>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d302      	bcc.n	800bf62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	e015      	b.n	800bf8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d20b      	bcs.n	800bf84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	1ad2      	subs	r2, r2, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ff9b 	bl	800beb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	61fb      	str	r3, [r7, #28]
 800bf82:	e004      	b.n	800bf8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf8e:	f000 ff79 	bl	800ce84 <vPortExitCritical>

	return xReturn;
 800bf92:	69fb      	ldr	r3, [r7, #28]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	200010cc 	.word	0x200010cc
 800bfa0:	200010e0 	.word	0x200010e0

0800bfa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfa8:	4b03      	ldr	r3, [pc, #12]	; (800bfb8 <vTaskMissedYield+0x14>)
 800bfaa:	2201      	movs	r2, #1
 800bfac:	601a      	str	r2, [r3, #0]
}
 800bfae:	bf00      	nop
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	200010dc 	.word	0x200010dc

0800bfbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfc4:	f000 f852 	bl	800c06c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <prvIdleTask+0x28>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d9f9      	bls.n	800bfc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfd0:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <prvIdleTask+0x2c>)
 800bfd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfe0:	e7f0      	b.n	800bfc4 <prvIdleTask+0x8>
 800bfe2:	bf00      	nop
 800bfe4:	20000bf8 	.word	0x20000bf8
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bff2:	2300      	movs	r3, #0
 800bff4:	607b      	str	r3, [r7, #4]
 800bff6:	e00c      	b.n	800c012 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4a12      	ldr	r2, [pc, #72]	; (800c04c <prvInitialiseTaskLists+0x60>)
 800c004:	4413      	add	r3, r2
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe f94a 	bl	800a2a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3301      	adds	r3, #1
 800c010:	607b      	str	r3, [r7, #4]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b37      	cmp	r3, #55	; 0x37
 800c016:	d9ef      	bls.n	800bff8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c018:	480d      	ldr	r0, [pc, #52]	; (800c050 <prvInitialiseTaskLists+0x64>)
 800c01a:	f7fe f941 	bl	800a2a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c01e:	480d      	ldr	r0, [pc, #52]	; (800c054 <prvInitialiseTaskLists+0x68>)
 800c020:	f7fe f93e 	bl	800a2a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c024:	480c      	ldr	r0, [pc, #48]	; (800c058 <prvInitialiseTaskLists+0x6c>)
 800c026:	f7fe f93b 	bl	800a2a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c02a:	480c      	ldr	r0, [pc, #48]	; (800c05c <prvInitialiseTaskLists+0x70>)
 800c02c:	f7fe f938 	bl	800a2a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c030:	480b      	ldr	r0, [pc, #44]	; (800c060 <prvInitialiseTaskLists+0x74>)
 800c032:	f7fe f935 	bl	800a2a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c036:	4b0b      	ldr	r3, [pc, #44]	; (800c064 <prvInitialiseTaskLists+0x78>)
 800c038:	4a05      	ldr	r2, [pc, #20]	; (800c050 <prvInitialiseTaskLists+0x64>)
 800c03a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c03c:	4b0a      	ldr	r3, [pc, #40]	; (800c068 <prvInitialiseTaskLists+0x7c>)
 800c03e:	4a05      	ldr	r2, [pc, #20]	; (800c054 <prvInitialiseTaskLists+0x68>)
 800c040:	601a      	str	r2, [r3, #0]
}
 800c042:	bf00      	nop
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000bf8 	.word	0x20000bf8
 800c050:	20001058 	.word	0x20001058
 800c054:	2000106c 	.word	0x2000106c
 800c058:	20001088 	.word	0x20001088
 800c05c:	2000109c 	.word	0x2000109c
 800c060:	200010b4 	.word	0x200010b4
 800c064:	20001080 	.word	0x20001080
 800c068:	20001084 	.word	0x20001084

0800c06c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c072:	e019      	b.n	800c0a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c074:	f000 fed6 	bl	800ce24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c078:	4b10      	ldr	r3, [pc, #64]	; (800c0bc <prvCheckTasksWaitingTermination+0x50>)
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3304      	adds	r3, #4
 800c084:	4618      	mov	r0, r3
 800c086:	f7fe f995 	bl	800a3b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c08a:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <prvCheckTasksWaitingTermination+0x54>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3b01      	subs	r3, #1
 800c090:	4a0b      	ldr	r2, [pc, #44]	; (800c0c0 <prvCheckTasksWaitingTermination+0x54>)
 800c092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c094:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <prvCheckTasksWaitingTermination+0x58>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3b01      	subs	r3, #1
 800c09a:	4a0a      	ldr	r2, [pc, #40]	; (800c0c4 <prvCheckTasksWaitingTermination+0x58>)
 800c09c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c09e:	f000 fef1 	bl	800ce84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f810 	bl	800c0c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0a8:	4b06      	ldr	r3, [pc, #24]	; (800c0c4 <prvCheckTasksWaitingTermination+0x58>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e1      	bne.n	800c074 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0b0:	bf00      	nop
 800c0b2:	bf00      	nop
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000109c 	.word	0x2000109c
 800c0c0:	200010c8 	.word	0x200010c8
 800c0c4:	200010b0 	.word	0x200010b0

0800c0c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3354      	adds	r3, #84	; 0x54
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f001 f9fb 	bl	800d4d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d108      	bne.n	800c0f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 f889 	bl	800d200 <vPortFree>
				vPortFree( pxTCB );
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 f886 	bl	800d200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0f4:	e018      	b.n	800c128 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d103      	bne.n	800c108 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 f87d 	bl	800d200 <vPortFree>
	}
 800c106:	e00f      	b.n	800c128 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d00a      	beq.n	800c128 <prvDeleteTCB+0x60>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	60fb      	str	r3, [r7, #12]
}
 800c124:	bf00      	nop
 800c126:	e7fe      	b.n	800c126 <prvDeleteTCB+0x5e>
	}
 800c128:	bf00      	nop
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c136:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <prvResetNextTaskUnblockTime+0x38>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d104      	bne.n	800c14a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c140:	4b0a      	ldr	r3, [pc, #40]	; (800c16c <prvResetNextTaskUnblockTime+0x3c>)
 800c142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c146:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c148:	e008      	b.n	800c15c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14a:	4b07      	ldr	r3, [pc, #28]	; (800c168 <prvResetNextTaskUnblockTime+0x38>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	4a04      	ldr	r2, [pc, #16]	; (800c16c <prvResetNextTaskUnblockTime+0x3c>)
 800c15a:	6013      	str	r3, [r2, #0]
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	20001080 	.word	0x20001080
 800c16c:	200010e8 	.word	0x200010e8

0800c170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <xTaskGetSchedulerState+0x34>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d102      	bne.n	800c184 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c17e:	2301      	movs	r3, #1
 800c180:	607b      	str	r3, [r7, #4]
 800c182:	e008      	b.n	800c196 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c184:	4b08      	ldr	r3, [pc, #32]	; (800c1a8 <xTaskGetSchedulerState+0x38>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c18c:	2302      	movs	r3, #2
 800c18e:	607b      	str	r3, [r7, #4]
 800c190:	e001      	b.n	800c196 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c192:	2300      	movs	r3, #0
 800c194:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c196:	687b      	ldr	r3, [r7, #4]
	}
 800c198:	4618      	mov	r0, r3
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	200010d4 	.word	0x200010d4
 800c1a8:	200010f0 	.word	0x200010f0

0800c1ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d051      	beq.n	800c266 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c6:	4b2a      	ldr	r3, [pc, #168]	; (800c270 <xTaskPriorityInherit+0xc4>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d241      	bcs.n	800c254 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	db06      	blt.n	800c1e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d8:	4b25      	ldr	r3, [pc, #148]	; (800c270 <xTaskPriorityInherit+0xc4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	6959      	ldr	r1, [r3, #20]
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4a1f      	ldr	r2, [pc, #124]	; (800c274 <xTaskPriorityInherit+0xc8>)
 800c1f8:	4413      	add	r3, r2
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	d122      	bne.n	800c244 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	3304      	adds	r3, #4
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe f8d6 	bl	800a3b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c208:	4b19      	ldr	r3, [pc, #100]	; (800c270 <xTaskPriorityInherit+0xc4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <xTaskPriorityInherit+0xcc>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d903      	bls.n	800c226 <xTaskPriorityInherit+0x7a>
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c222:	4a15      	ldr	r2, [pc, #84]	; (800c278 <xTaskPriorityInherit+0xcc>)
 800c224:	6013      	str	r3, [r2, #0]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4a10      	ldr	r2, [pc, #64]	; (800c274 <xTaskPriorityInherit+0xc8>)
 800c234:	441a      	add	r2, r3
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	3304      	adds	r3, #4
 800c23a:	4619      	mov	r1, r3
 800c23c:	4610      	mov	r0, r2
 800c23e:	f7fe f85c 	bl	800a2fa <vListInsertEnd>
 800c242:	e004      	b.n	800c24e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c244:	4b0a      	ldr	r3, [pc, #40]	; (800c270 <xTaskPriorityInherit+0xc4>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c24e:	2301      	movs	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	e008      	b.n	800c266 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <xTaskPriorityInherit+0xc4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25e:	429a      	cmp	r2, r3
 800c260:	d201      	bcs.n	800c266 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c262:	2301      	movs	r3, #1
 800c264:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c266:	68fb      	ldr	r3, [r7, #12]
	}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20000bf4 	.word	0x20000bf4
 800c274:	20000bf8 	.word	0x20000bf8
 800c278:	200010d0 	.word	0x200010d0

0800c27c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c288:	2300      	movs	r3, #0
 800c28a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d056      	beq.n	800c340 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c292:	4b2e      	ldr	r3, [pc, #184]	; (800c34c <xTaskPriorityDisinherit+0xd0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d00a      	beq.n	800c2b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	60fb      	str	r3, [r7, #12]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10a      	bne.n	800c2d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	60bb      	str	r3, [r7, #8]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d02c      	beq.n	800c340 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d128      	bne.n	800c340 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe f85e 	bl	800a3b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c304:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c310:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <xTaskPriorityDisinherit+0xd4>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d903      	bls.n	800c320 <xTaskPriorityDisinherit+0xa4>
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	4a0c      	ldr	r2, [pc, #48]	; (800c350 <xTaskPriorityDisinherit+0xd4>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4a09      	ldr	r2, [pc, #36]	; (800c354 <xTaskPriorityDisinherit+0xd8>)
 800c32e:	441a      	add	r2, r3
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	3304      	adds	r3, #4
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f7fd ffdf 	bl	800a2fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c340:	697b      	ldr	r3, [r7, #20]
	}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20000bf4 	.word	0x20000bf4
 800c350:	200010d0 	.word	0x200010d0
 800c354:	20000bf8 	.word	0x20000bf8

0800c358 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c366:	2301      	movs	r3, #1
 800c368:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d06a      	beq.n	800c446 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10a      	bne.n	800c38e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	60fb      	str	r3, [r7, #12]
}
 800c38a:	bf00      	nop
 800c38c:	e7fe      	b.n	800c38c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d902      	bls.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	e002      	b.n	800c3a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a8:	69fa      	ldr	r2, [r7, #28]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d04b      	beq.n	800c446 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d146      	bne.n	800c446 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c3b8:	4b25      	ldr	r3, [pc, #148]	; (800c450 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d10a      	bne.n	800c3d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	60bb      	str	r3, [r7, #8]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	69fa      	ldr	r2, [r7, #28]
 800c3e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	db04      	blt.n	800c3f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	6959      	ldr	r1, [r3, #20]
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4a13      	ldr	r2, [pc, #76]	; (800c454 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c406:	4413      	add	r3, r2
 800c408:	4299      	cmp	r1, r3
 800c40a:	d11c      	bne.n	800c446 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	3304      	adds	r3, #4
 800c410:	4618      	mov	r0, r3
 800c412:	f7fd ffcf 	bl	800a3b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c41a:	4b0f      	ldr	r3, [pc, #60]	; (800c458 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d903      	bls.n	800c42a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c426:	4a0c      	ldr	r2, [pc, #48]	; (800c458 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42e:	4613      	mov	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4a07      	ldr	r2, [pc, #28]	; (800c454 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c438:	441a      	add	r2, r3
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4619      	mov	r1, r3
 800c440:	4610      	mov	r0, r2
 800c442:	f7fd ff5a 	bl	800a2fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c446:	bf00      	nop
 800c448:	3720      	adds	r7, #32
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20000bf4 	.word	0x20000bf4
 800c454:	20000bf8 	.word	0x20000bf8
 800c458:	200010d0 	.word	0x200010d0

0800c45c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <pvTaskIncrementMutexHeldCount+0x24>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c468:	4b05      	ldr	r3, [pc, #20]	; (800c480 <pvTaskIncrementMutexHeldCount+0x24>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c46e:	3201      	adds	r2, #1
 800c470:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c472:	4b03      	ldr	r3, [pc, #12]	; (800c480 <pvTaskIncrementMutexHeldCount+0x24>)
 800c474:	681b      	ldr	r3, [r3, #0]
	}
 800c476:	4618      	mov	r0, r3
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	20000bf4 	.word	0x20000bf4

0800c484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c48e:	4b21      	ldr	r3, [pc, #132]	; (800c514 <prvAddCurrentTaskToDelayedList+0x90>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c494:	4b20      	ldr	r3, [pc, #128]	; (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fd ff8a 	bl	800a3b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4a6:	d10a      	bne.n	800c4be <prvAddCurrentTaskToDelayedList+0x3a>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d007      	beq.n	800c4be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ae:	4b1a      	ldr	r3, [pc, #104]	; (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4819      	ldr	r0, [pc, #100]	; (800c51c <prvAddCurrentTaskToDelayedList+0x98>)
 800c4b8:	f7fd ff1f 	bl	800a2fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4bc:	e026      	b.n	800c50c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4c6:	4b14      	ldr	r3, [pc, #80]	; (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d209      	bcs.n	800c4ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4d6:	4b12      	ldr	r3, [pc, #72]	; (800c520 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b0f      	ldr	r3, [pc, #60]	; (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	f7fd ff2d 	bl	800a342 <vListInsert>
}
 800c4e8:	e010      	b.n	800c50c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ea:	4b0e      	ldr	r3, [pc, #56]	; (800c524 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f7fd ff23 	bl	800a342 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	429a      	cmp	r2, r3
 800c504:	d202      	bcs.n	800c50c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c506:	4a08      	ldr	r2, [pc, #32]	; (800c528 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6013      	str	r3, [r2, #0]
}
 800c50c:	bf00      	nop
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	200010cc 	.word	0x200010cc
 800c518:	20000bf4 	.word	0x20000bf4
 800c51c:	200010b4 	.word	0x200010b4
 800c520:	20001084 	.word	0x20001084
 800c524:	20001080 	.word	0x20001080
 800c528:	200010e8 	.word	0x200010e8

0800c52c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08a      	sub	sp, #40	; 0x28
 800c530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c536:	f000 fb07 	bl	800cb48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c53a:	4b1c      	ldr	r3, [pc, #112]	; (800c5ac <xTimerCreateTimerTask+0x80>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d021      	beq.n	800c586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c54a:	1d3a      	adds	r2, r7, #4
 800c54c:	f107 0108 	add.w	r1, r7, #8
 800c550:	f107 030c 	add.w	r3, r7, #12
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd fe89 	bl	800a26c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	9202      	str	r2, [sp, #8]
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	2302      	movs	r3, #2
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2300      	movs	r3, #0
 800c56a:	460a      	mov	r2, r1
 800c56c:	4910      	ldr	r1, [pc, #64]	; (800c5b0 <xTimerCreateTimerTask+0x84>)
 800c56e:	4811      	ldr	r0, [pc, #68]	; (800c5b4 <xTimerCreateTimerTask+0x88>)
 800c570:	f7fe ffa4 	bl	800b4bc <xTaskCreateStatic>
 800c574:	4603      	mov	r3, r0
 800c576:	4a10      	ldr	r2, [pc, #64]	; (800c5b8 <xTimerCreateTimerTask+0x8c>)
 800c578:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c57a:	4b0f      	ldr	r3, [pc, #60]	; (800c5b8 <xTimerCreateTimerTask+0x8c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c582:	2301      	movs	r3, #1
 800c584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	613b      	str	r3, [r7, #16]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5a2:	697b      	ldr	r3, [r7, #20]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20001124 	.word	0x20001124
 800c5b0:	0800d678 	.word	0x0800d678
 800c5b4:	0800c6f1 	.word	0x0800c6f1
 800c5b8:	20001128 	.word	0x20001128

0800c5bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	; 0x28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	623b      	str	r3, [r7, #32]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5ea:	4b1a      	ldr	r3, [pc, #104]	; (800c654 <xTimerGenericCommand+0x98>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d02a      	beq.n	800c648 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b05      	cmp	r3, #5
 800c602:	dc18      	bgt.n	800c636 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c604:	f7ff fdb4 	bl	800c170 <xTaskGetSchedulerState>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d109      	bne.n	800c622 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c60e:	4b11      	ldr	r3, [pc, #68]	; (800c654 <xTimerGenericCommand+0x98>)
 800c610:	6818      	ldr	r0, [r3, #0]
 800c612:	f107 0110 	add.w	r1, r7, #16
 800c616:	2300      	movs	r3, #0
 800c618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c61a:	f7fe f8e9 	bl	800a7f0 <xQueueGenericSend>
 800c61e:	6278      	str	r0, [r7, #36]	; 0x24
 800c620:	e012      	b.n	800c648 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c622:	4b0c      	ldr	r3, [pc, #48]	; (800c654 <xTimerGenericCommand+0x98>)
 800c624:	6818      	ldr	r0, [r3, #0]
 800c626:	f107 0110 	add.w	r1, r7, #16
 800c62a:	2300      	movs	r3, #0
 800c62c:	2200      	movs	r2, #0
 800c62e:	f7fe f8df 	bl	800a7f0 <xQueueGenericSend>
 800c632:	6278      	str	r0, [r7, #36]	; 0x24
 800c634:	e008      	b.n	800c648 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c636:	4b07      	ldr	r3, [pc, #28]	; (800c654 <xTimerGenericCommand+0x98>)
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f107 0110 	add.w	r1, r7, #16
 800c63e:	2300      	movs	r3, #0
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	f7fe f9d3 	bl	800a9ec <xQueueGenericSendFromISR>
 800c646:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3728      	adds	r7, #40	; 0x28
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20001124 	.word	0x20001124

0800c658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c662:	4b22      	ldr	r3, [pc, #136]	; (800c6ec <prvProcessExpiredTimer+0x94>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	3304      	adds	r3, #4
 800c670:	4618      	mov	r0, r3
 800c672:	f7fd fe9f 	bl	800a3b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	d022      	beq.n	800c6ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	699a      	ldr	r2, [r3, #24]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	18d1      	adds	r1, r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	6978      	ldr	r0, [r7, #20]
 800c692:	f000 f8d1 	bl	800c838 <prvInsertTimerInActiveList>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d01f      	beq.n	800c6dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c69c:	2300      	movs	r3, #0
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	6978      	ldr	r0, [r7, #20]
 800c6a8:	f7ff ff88 	bl	800c5bc <xTimerGenericCommand>
 800c6ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d113      	bne.n	800c6dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	60fb      	str	r3, [r7, #12]
}
 800c6c6:	bf00      	nop
 800c6c8:	e7fe      	b.n	800c6c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6d0:	f023 0301 	bic.w	r3, r3, #1
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	6978      	ldr	r0, [r7, #20]
 800c6e2:	4798      	blx	r3
}
 800c6e4:	bf00      	nop
 800c6e6:	3718      	adds	r7, #24
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	2000111c 	.word	0x2000111c

0800c6f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6f8:	f107 0308 	add.w	r3, r7, #8
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 f857 	bl	800c7b0 <prvGetNextExpireTime>
 800c702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	4619      	mov	r1, r3
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f000 f803 	bl	800c714 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c70e:	f000 f8d5 	bl	800c8bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c712:	e7f1      	b.n	800c6f8 <prvTimerTask+0x8>

0800c714 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c71e:	f7ff f929 	bl	800b974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c722:	f107 0308 	add.w	r3, r7, #8
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f866 	bl	800c7f8 <prvSampleTimeNow>
 800c72c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d130      	bne.n	800c796 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10a      	bne.n	800c750 <prvProcessTimerOrBlockTask+0x3c>
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d806      	bhi.n	800c750 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c742:	f7ff f925 	bl	800b990 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c746:	68f9      	ldr	r1, [r7, #12]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7ff ff85 	bl	800c658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c74e:	e024      	b.n	800c79a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d008      	beq.n	800c768 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c756:	4b13      	ldr	r3, [pc, #76]	; (800c7a4 <prvProcessTimerOrBlockTask+0x90>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <prvProcessTimerOrBlockTask+0x50>
 800c760:	2301      	movs	r3, #1
 800c762:	e000      	b.n	800c766 <prvProcessTimerOrBlockTask+0x52>
 800c764:	2300      	movs	r3, #0
 800c766:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c768:	4b0f      	ldr	r3, [pc, #60]	; (800c7a8 <prvProcessTimerOrBlockTask+0x94>)
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4619      	mov	r1, r3
 800c776:	f7fe fe6d 	bl	800b454 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c77a:	f7ff f909 	bl	800b990 <xTaskResumeAll>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10a      	bne.n	800c79a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c784:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <prvProcessTimerOrBlockTask+0x98>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
}
 800c794:	e001      	b.n	800c79a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c796:	f7ff f8fb 	bl	800b990 <xTaskResumeAll>
}
 800c79a:	bf00      	nop
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20001120 	.word	0x20001120
 800c7a8:	20001124 	.word	0x20001124
 800c7ac:	e000ed04 	.word	0xe000ed04

0800c7b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7b8:	4b0e      	ldr	r3, [pc, #56]	; (800c7f4 <prvGetNextExpireTime+0x44>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d101      	bne.n	800c7c6 <prvGetNextExpireTime+0x16>
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	e000      	b.n	800c7c8 <prvGetNextExpireTime+0x18>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d105      	bne.n	800c7e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7d4:	4b07      	ldr	r3, [pc, #28]	; (800c7f4 <prvGetNextExpireTime+0x44>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	e001      	b.n	800c7e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	2000111c 	.word	0x2000111c

0800c7f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c800:	f7ff f964 	bl	800bacc <xTaskGetTickCount>
 800c804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c806:	4b0b      	ldr	r3, [pc, #44]	; (800c834 <prvSampleTimeNow+0x3c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d205      	bcs.n	800c81c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c810:	f000 f936 	bl	800ca80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	601a      	str	r2, [r3, #0]
 800c81a:	e002      	b.n	800c822 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c822:	4a04      	ldr	r2, [pc, #16]	; (800c834 <prvSampleTimeNow+0x3c>)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c828:	68fb      	ldr	r3, [r7, #12]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	2000112c 	.word	0x2000112c

0800c838 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c846:	2300      	movs	r3, #0
 800c848:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d812      	bhi.n	800c884 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	1ad2      	subs	r2, r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d302      	bcc.n	800c872 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c86c:	2301      	movs	r3, #1
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	e01b      	b.n	800c8aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c872:	4b10      	ldr	r3, [pc, #64]	; (800c8b4 <prvInsertTimerInActiveList+0x7c>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3304      	adds	r3, #4
 800c87a:	4619      	mov	r1, r3
 800c87c:	4610      	mov	r0, r2
 800c87e:	f7fd fd60 	bl	800a342 <vListInsert>
 800c882:	e012      	b.n	800c8aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d206      	bcs.n	800c89a <prvInsertTimerInActiveList+0x62>
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	d302      	bcc.n	800c89a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c894:	2301      	movs	r3, #1
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	e007      	b.n	800c8aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <prvInsertTimerInActiveList+0x80>)
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f7fd fd4c 	bl	800a342 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c8aa:	697b      	ldr	r3, [r7, #20]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	20001120 	.word	0x20001120
 800c8b8:	2000111c 	.word	0x2000111c

0800c8bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08e      	sub	sp, #56	; 0x38
 800c8c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8c2:	e0ca      	b.n	800ca5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	da18      	bge.n	800c8fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8ca:	1d3b      	adds	r3, r7, #4
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10a      	bne.n	800c8ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	61fb      	str	r3, [r7, #28]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f2:	6850      	ldr	r0, [r2, #4]
 800c8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f6:	6892      	ldr	r2, [r2, #8]
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f2c0 80aa 	blt.w	800ca58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d004      	beq.n	800c91a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c912:	3304      	adds	r3, #4
 800c914:	4618      	mov	r0, r3
 800c916:	f7fd fd4d 	bl	800a3b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c91a:	463b      	mov	r3, r7
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7ff ff6b 	bl	800c7f8 <prvSampleTimeNow>
 800c922:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b09      	cmp	r3, #9
 800c928:	f200 8097 	bhi.w	800ca5a <prvProcessReceivedCommands+0x19e>
 800c92c:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <prvProcessReceivedCommands+0x78>)
 800c92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c932:	bf00      	nop
 800c934:	0800c95d 	.word	0x0800c95d
 800c938:	0800c95d 	.word	0x0800c95d
 800c93c:	0800c95d 	.word	0x0800c95d
 800c940:	0800c9d1 	.word	0x0800c9d1
 800c944:	0800c9e5 	.word	0x0800c9e5
 800c948:	0800ca2f 	.word	0x0800ca2f
 800c94c:	0800c95d 	.word	0x0800c95d
 800c950:	0800c95d 	.word	0x0800c95d
 800c954:	0800c9d1 	.word	0x0800c9d1
 800c958:	0800c9e5 	.word	0x0800c9e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c962:	f043 0301 	orr.w	r3, r3, #1
 800c966:	b2da      	uxtb	r2, r3
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	699b      	ldr	r3, [r3, #24]
 800c974:	18d1      	adds	r1, r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c97c:	f7ff ff5c 	bl	800c838 <prvInsertTimerInActiveList>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d069      	beq.n	800ca5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c98c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c994:	f003 0304 	and.w	r3, r3, #4
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d05e      	beq.n	800ca5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	441a      	add	r2, r3
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ae:	f7ff fe05 	bl	800c5bc <xTimerGenericCommand>
 800c9b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d14f      	bne.n	800ca5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	61bb      	str	r3, [r7, #24]
}
 800c9cc:	bf00      	nop
 800c9ce:	e7fe      	b.n	800c9ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d6:	f023 0301 	bic.w	r3, r3, #1
 800c9da:	b2da      	uxtb	r2, r3
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c9e2:	e03a      	b.n	800ca5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ea:	f043 0301 	orr.w	r3, r3, #1
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	617b      	str	r3, [r7, #20]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	699a      	ldr	r2, [r3, #24]
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	18d1      	adds	r1, r2, r3
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca28:	f7ff ff06 	bl	800c838 <prvInsertTimerInActiveList>
					break;
 800ca2c:	e015      	b.n	800ca5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca34:	f003 0302 	and.w	r3, r3, #2
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d103      	bne.n	800ca44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ca3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca3e:	f000 fbdf 	bl	800d200 <vPortFree>
 800ca42:	e00a      	b.n	800ca5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca4a:	f023 0301 	bic.w	r3, r3, #1
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca56:	e000      	b.n	800ca5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca5a:	4b08      	ldr	r3, [pc, #32]	; (800ca7c <prvProcessReceivedCommands+0x1c0>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	1d39      	adds	r1, r7, #4
 800ca60:	2200      	movs	r2, #0
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fe f8ea 	bl	800ac3c <xQueueReceive>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f47f af2a 	bne.w	800c8c4 <prvProcessReceivedCommands+0x8>
	}
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	3730      	adds	r7, #48	; 0x30
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20001124 	.word	0x20001124

0800ca80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca86:	e048      	b.n	800cb1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca88:	4b2d      	ldr	r3, [pc, #180]	; (800cb40 <prvSwitchTimerLists+0xc0>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca92:	4b2b      	ldr	r3, [pc, #172]	; (800cb40 <prvSwitchTimerLists+0xc0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fd fc87 	bl	800a3b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6a1b      	ldr	r3, [r3, #32]
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab4:	f003 0304 	and.w	r3, r3, #4
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d02e      	beq.n	800cb1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	699b      	ldr	r3, [r3, #24]
 800cac0:	693a      	ldr	r2, [r7, #16]
 800cac2:	4413      	add	r3, r2
 800cac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d90e      	bls.n	800caec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cada:	4b19      	ldr	r3, [pc, #100]	; (800cb40 <prvSwitchTimerLists+0xc0>)
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3304      	adds	r3, #4
 800cae2:	4619      	mov	r1, r3
 800cae4:	4610      	mov	r0, r2
 800cae6:	f7fd fc2c 	bl	800a342 <vListInsert>
 800caea:	e016      	b.n	800cb1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800caec:	2300      	movs	r3, #0
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	2300      	movs	r3, #0
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	2100      	movs	r1, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7ff fd60 	bl	800c5bc <xTimerGenericCommand>
 800cafc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	603b      	str	r3, [r7, #0]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb1a:	4b09      	ldr	r3, [pc, #36]	; (800cb40 <prvSwitchTimerLists+0xc0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1b1      	bne.n	800ca88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb24:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <prvSwitchTimerLists+0xc0>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb2a:	4b06      	ldr	r3, [pc, #24]	; (800cb44 <prvSwitchTimerLists+0xc4>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a04      	ldr	r2, [pc, #16]	; (800cb40 <prvSwitchTimerLists+0xc0>)
 800cb30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb32:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <prvSwitchTimerLists+0xc4>)
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	6013      	str	r3, [r2, #0]
}
 800cb38:	bf00      	nop
 800cb3a:	3718      	adds	r7, #24
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	2000111c 	.word	0x2000111c
 800cb44:	20001120 	.word	0x20001120

0800cb48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb4e:	f000 f969 	bl	800ce24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb52:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <prvCheckForValidListAndQueue+0x60>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d120      	bne.n	800cb9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb5a:	4814      	ldr	r0, [pc, #80]	; (800cbac <prvCheckForValidListAndQueue+0x64>)
 800cb5c:	f7fd fba0 	bl	800a2a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb60:	4813      	ldr	r0, [pc, #76]	; (800cbb0 <prvCheckForValidListAndQueue+0x68>)
 800cb62:	f7fd fb9d 	bl	800a2a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <prvCheckForValidListAndQueue+0x6c>)
 800cb68:	4a10      	ldr	r2, [pc, #64]	; (800cbac <prvCheckForValidListAndQueue+0x64>)
 800cb6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb6c:	4b12      	ldr	r3, [pc, #72]	; (800cbb8 <prvCheckForValidListAndQueue+0x70>)
 800cb6e:	4a10      	ldr	r2, [pc, #64]	; (800cbb0 <prvCheckForValidListAndQueue+0x68>)
 800cb70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb72:	2300      	movs	r3, #0
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <prvCheckForValidListAndQueue+0x74>)
 800cb78:	4a11      	ldr	r2, [pc, #68]	; (800cbc0 <prvCheckForValidListAndQueue+0x78>)
 800cb7a:	2110      	movs	r1, #16
 800cb7c:	200a      	movs	r0, #10
 800cb7e:	f7fd fcab 	bl	800a4d8 <xQueueGenericCreateStatic>
 800cb82:	4603      	mov	r3, r0
 800cb84:	4a08      	ldr	r2, [pc, #32]	; (800cba8 <prvCheckForValidListAndQueue+0x60>)
 800cb86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <prvCheckForValidListAndQueue+0x60>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d005      	beq.n	800cb9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb90:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <prvCheckForValidListAndQueue+0x60>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	490b      	ldr	r1, [pc, #44]	; (800cbc4 <prvCheckForValidListAndQueue+0x7c>)
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe fc08 	bl	800b3ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb9c:	f000 f972 	bl	800ce84 <vPortExitCritical>
}
 800cba0:	bf00      	nop
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20001124 	.word	0x20001124
 800cbac:	200010f4 	.word	0x200010f4
 800cbb0:	20001108 	.word	0x20001108
 800cbb4:	2000111c 	.word	0x2000111c
 800cbb8:	20001120 	.word	0x20001120
 800cbbc:	200011d0 	.word	0x200011d0
 800cbc0:	20001130 	.word	0x20001130
 800cbc4:	0800d680 	.word	0x0800d680

0800cbc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3b04      	subs	r3, #4
 800cbd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cbe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3b04      	subs	r3, #4
 800cbe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	f023 0201 	bic.w	r2, r3, #1
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3b04      	subs	r3, #4
 800cbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbf8:	4a0c      	ldr	r2, [pc, #48]	; (800cc2c <pxPortInitialiseStack+0x64>)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3b14      	subs	r3, #20
 800cc02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3b04      	subs	r3, #4
 800cc0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f06f 0202 	mvn.w	r2, #2
 800cc16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3b20      	subs	r3, #32
 800cc1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3714      	adds	r7, #20
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	0800cc31 	.word	0x0800cc31

0800cc30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc3a:	4b12      	ldr	r3, [pc, #72]	; (800cc84 <prvTaskExitError+0x54>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc42:	d00a      	beq.n	800cc5a <prvTaskExitError+0x2a>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	60fb      	str	r3, [r7, #12]
}
 800cc56:	bf00      	nop
 800cc58:	e7fe      	b.n	800cc58 <prvTaskExitError+0x28>
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	60bb      	str	r3, [r7, #8]
}
 800cc6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc6e:	bf00      	nop
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0fc      	beq.n	800cc70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc76:	bf00      	nop
 800cc78:	bf00      	nop
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	2000000c 	.word	0x2000000c
	...

0800cc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc90:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <pxCurrentTCBConst2>)
 800cc92:	6819      	ldr	r1, [r3, #0]
 800cc94:	6808      	ldr	r0, [r1, #0]
 800cc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9a:	f380 8809 	msr	PSP, r0
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f04f 0000 	mov.w	r0, #0
 800cca6:	f380 8811 	msr	BASEPRI, r0
 800ccaa:	4770      	bx	lr
 800ccac:	f3af 8000 	nop.w

0800ccb0 <pxCurrentTCBConst2>:
 800ccb0:	20000bf4 	.word	0x20000bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop

0800ccb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ccb8:	4808      	ldr	r0, [pc, #32]	; (800ccdc <prvPortStartFirstTask+0x24>)
 800ccba:	6800      	ldr	r0, [r0, #0]
 800ccbc:	6800      	ldr	r0, [r0, #0]
 800ccbe:	f380 8808 	msr	MSP, r0
 800ccc2:	f04f 0000 	mov.w	r0, #0
 800ccc6:	f380 8814 	msr	CONTROL, r0
 800ccca:	b662      	cpsie	i
 800cccc:	b661      	cpsie	f
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	df00      	svc	0
 800ccd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ccda:	bf00      	nop
 800ccdc:	e000ed08 	.word	0xe000ed08

0800cce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cce6:	4b46      	ldr	r3, [pc, #280]	; (800ce00 <xPortStartScheduler+0x120>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a46      	ldr	r2, [pc, #280]	; (800ce04 <xPortStartScheduler+0x124>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d10a      	bne.n	800cd06 <xPortStartScheduler+0x26>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	613b      	str	r3, [r7, #16]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd06:	4b3e      	ldr	r3, [pc, #248]	; (800ce00 <xPortStartScheduler+0x120>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a3f      	ldr	r2, [pc, #252]	; (800ce08 <xPortStartScheduler+0x128>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d10a      	bne.n	800cd26 <xPortStartScheduler+0x46>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60fb      	str	r3, [r7, #12]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd26:	4b39      	ldr	r3, [pc, #228]	; (800ce0c <xPortStartScheduler+0x12c>)
 800cd28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	22ff      	movs	r2, #255	; 0xff
 800cd36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	4b31      	ldr	r3, [pc, #196]	; (800ce10 <xPortStartScheduler+0x130>)
 800cd4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd4e:	4b31      	ldr	r3, [pc, #196]	; (800ce14 <xPortStartScheduler+0x134>)
 800cd50:	2207      	movs	r2, #7
 800cd52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd54:	e009      	b.n	800cd6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd56:	4b2f      	ldr	r3, [pc, #188]	; (800ce14 <xPortStartScheduler+0x134>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	4a2d      	ldr	r2, [pc, #180]	; (800ce14 <xPortStartScheduler+0x134>)
 800cd5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd60:	78fb      	ldrb	r3, [r7, #3]
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd6a:	78fb      	ldrb	r3, [r7, #3]
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd72:	2b80      	cmp	r3, #128	; 0x80
 800cd74:	d0ef      	beq.n	800cd56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd76:	4b27      	ldr	r3, [pc, #156]	; (800ce14 <xPortStartScheduler+0x134>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f1c3 0307 	rsb	r3, r3, #7
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	d00a      	beq.n	800cd98 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	60bb      	str	r3, [r7, #8]
}
 800cd94:	bf00      	nop
 800cd96:	e7fe      	b.n	800cd96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd98:	4b1e      	ldr	r3, [pc, #120]	; (800ce14 <xPortStartScheduler+0x134>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	021b      	lsls	r3, r3, #8
 800cd9e:	4a1d      	ldr	r2, [pc, #116]	; (800ce14 <xPortStartScheduler+0x134>)
 800cda0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cda2:	4b1c      	ldr	r3, [pc, #112]	; (800ce14 <xPortStartScheduler+0x134>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cdaa:	4a1a      	ldr	r2, [pc, #104]	; (800ce14 <xPortStartScheduler+0x134>)
 800cdac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cdb6:	4b18      	ldr	r3, [pc, #96]	; (800ce18 <xPortStartScheduler+0x138>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <xPortStartScheduler+0x138>)
 800cdbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cdc2:	4b15      	ldr	r3, [pc, #84]	; (800ce18 <xPortStartScheduler+0x138>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a14      	ldr	r2, [pc, #80]	; (800ce18 <xPortStartScheduler+0x138>)
 800cdc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cdcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdce:	f000 f8dd 	bl	800cf8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdd2:	4b12      	ldr	r3, [pc, #72]	; (800ce1c <xPortStartScheduler+0x13c>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cdd8:	f000 f8fc 	bl	800cfd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cddc:	4b10      	ldr	r3, [pc, #64]	; (800ce20 <xPortStartScheduler+0x140>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a0f      	ldr	r2, [pc, #60]	; (800ce20 <xPortStartScheduler+0x140>)
 800cde2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cde6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cde8:	f7ff ff66 	bl	800ccb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdec:	f7fe ff4a 	bl	800bc84 <vTaskSwitchContext>
	prvTaskExitError();
 800cdf0:	f7ff ff1e 	bl	800cc30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	e000ed00 	.word	0xe000ed00
 800ce04:	410fc271 	.word	0x410fc271
 800ce08:	410fc270 	.word	0x410fc270
 800ce0c:	e000e400 	.word	0xe000e400
 800ce10:	20001220 	.word	0x20001220
 800ce14:	20001224 	.word	0x20001224
 800ce18:	e000ed20 	.word	0xe000ed20
 800ce1c:	2000000c 	.word	0x2000000c
 800ce20:	e000ef34 	.word	0xe000ef34

0800ce24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	607b      	str	r3, [r7, #4]
}
 800ce3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce3e:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <vPortEnterCritical+0x58>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3301      	adds	r3, #1
 800ce44:	4a0d      	ldr	r2, [pc, #52]	; (800ce7c <vPortEnterCritical+0x58>)
 800ce46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce48:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <vPortEnterCritical+0x58>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d10f      	bne.n	800ce70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce50:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <vPortEnterCritical+0x5c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00a      	beq.n	800ce70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	603b      	str	r3, [r7, #0]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <vPortEnterCritical+0x4a>
	}
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	2000000c 	.word	0x2000000c
 800ce80:	e000ed04 	.word	0xe000ed04

0800ce84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce8a:	4b12      	ldr	r3, [pc, #72]	; (800ced4 <vPortExitCritical+0x50>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10a      	bne.n	800cea8 <vPortExitCritical+0x24>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	607b      	str	r3, [r7, #4]
}
 800cea4:	bf00      	nop
 800cea6:	e7fe      	b.n	800cea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cea8:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <vPortExitCritical+0x50>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3b01      	subs	r3, #1
 800ceae:	4a09      	ldr	r2, [pc, #36]	; (800ced4 <vPortExitCritical+0x50>)
 800ceb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ceb2:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <vPortExitCritical+0x50>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d105      	bne.n	800cec6 <vPortExitCritical+0x42>
 800ceba:	2300      	movs	r3, #0
 800cebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	f383 8811 	msr	BASEPRI, r3
}
 800cec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cec6:	bf00      	nop
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	2000000c 	.word	0x2000000c
	...

0800cee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cee0:	f3ef 8009 	mrs	r0, PSP
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	4b15      	ldr	r3, [pc, #84]	; (800cf40 <pxCurrentTCBConst>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	f01e 0f10 	tst.w	lr, #16
 800cef0:	bf08      	it	eq
 800cef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefa:	6010      	str	r0, [r2, #0]
 800cefc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf04:	f380 8811 	msr	BASEPRI, r0
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f7fe feb8 	bl	800bc84 <vTaskSwitchContext>
 800cf14:	f04f 0000 	mov.w	r0, #0
 800cf18:	f380 8811 	msr	BASEPRI, r0
 800cf1c:	bc09      	pop	{r0, r3}
 800cf1e:	6819      	ldr	r1, [r3, #0]
 800cf20:	6808      	ldr	r0, [r1, #0]
 800cf22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf26:	f01e 0f10 	tst.w	lr, #16
 800cf2a:	bf08      	it	eq
 800cf2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf30:	f380 8809 	msr	PSP, r0
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	f3af 8000 	nop.w

0800cf40 <pxCurrentTCBConst>:
 800cf40:	20000bf4 	.word	0x20000bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop

0800cf48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	607b      	str	r3, [r7, #4]
}
 800cf60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf62:	f7fe fdd5 	bl	800bb10 <xTaskIncrementTick>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf6c:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <xPortSysTickHandler+0x40>)
 800cf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	2300      	movs	r3, #0
 800cf76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f383 8811 	msr	BASEPRI, r3
}
 800cf7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf90:	4b0b      	ldr	r3, [pc, #44]	; (800cfc0 <vPortSetupTimerInterrupt+0x34>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf96:	4b0b      	ldr	r3, [pc, #44]	; (800cfc4 <vPortSetupTimerInterrupt+0x38>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <vPortSetupTimerInterrupt+0x3c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a0a      	ldr	r2, [pc, #40]	; (800cfcc <vPortSetupTimerInterrupt+0x40>)
 800cfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa6:	099b      	lsrs	r3, r3, #6
 800cfa8:	4a09      	ldr	r2, [pc, #36]	; (800cfd0 <vPortSetupTimerInterrupt+0x44>)
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfae:	4b04      	ldr	r3, [pc, #16]	; (800cfc0 <vPortSetupTimerInterrupt+0x34>)
 800cfb0:	2207      	movs	r2, #7
 800cfb2:	601a      	str	r2, [r3, #0]
}
 800cfb4:	bf00      	nop
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	e000e010 	.word	0xe000e010
 800cfc4:	e000e018 	.word	0xe000e018
 800cfc8:	20000000 	.word	0x20000000
 800cfcc:	10624dd3 	.word	0x10624dd3
 800cfd0:	e000e014 	.word	0xe000e014

0800cfd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cfd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cfe4 <vPortEnableVFP+0x10>
 800cfd8:	6801      	ldr	r1, [r0, #0]
 800cfda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cfde:	6001      	str	r1, [r0, #0]
 800cfe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfe2:	bf00      	nop
 800cfe4:	e000ed88 	.word	0xe000ed88

0800cfe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfee:	f3ef 8305 	mrs	r3, IPSR
 800cff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b0f      	cmp	r3, #15
 800cff8:	d914      	bls.n	800d024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cffa:	4a17      	ldr	r2, [pc, #92]	; (800d058 <vPortValidateInterruptPriority+0x70>)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	4413      	add	r3, r2
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d004:	4b15      	ldr	r3, [pc, #84]	; (800d05c <vPortValidateInterruptPriority+0x74>)
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	7afa      	ldrb	r2, [r7, #11]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d20a      	bcs.n	800d024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	607b      	str	r3, [r7, #4]
}
 800d020:	bf00      	nop
 800d022:	e7fe      	b.n	800d022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d024:	4b0e      	ldr	r3, [pc, #56]	; (800d060 <vPortValidateInterruptPriority+0x78>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d02c:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <vPortValidateInterruptPriority+0x7c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	429a      	cmp	r2, r3
 800d032:	d90a      	bls.n	800d04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	603b      	str	r3, [r7, #0]
}
 800d046:	bf00      	nop
 800d048:	e7fe      	b.n	800d048 <vPortValidateInterruptPriority+0x60>
	}
 800d04a:	bf00      	nop
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	e000e3f0 	.word	0xe000e3f0
 800d05c:	20001220 	.word	0x20001220
 800d060:	e000ed0c 	.word	0xe000ed0c
 800d064:	20001224 	.word	0x20001224

0800d068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b08a      	sub	sp, #40	; 0x28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d070:	2300      	movs	r3, #0
 800d072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d074:	f7fe fc7e 	bl	800b974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d078:	4b5b      	ldr	r3, [pc, #364]	; (800d1e8 <pvPortMalloc+0x180>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d080:	f000 f920 	bl	800d2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d084:	4b59      	ldr	r3, [pc, #356]	; (800d1ec <pvPortMalloc+0x184>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f040 8093 	bne.w	800d1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d01d      	beq.n	800d0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d098:	2208      	movs	r2, #8
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4413      	add	r3, r2
 800d09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f003 0307 	and.w	r3, r3, #7
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d014      	beq.n	800d0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f023 0307 	bic.w	r3, r3, #7
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00a      	beq.n	800d0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	617b      	str	r3, [r7, #20]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d06e      	beq.n	800d1b8 <pvPortMalloc+0x150>
 800d0da:	4b45      	ldr	r3, [pc, #276]	; (800d1f0 <pvPortMalloc+0x188>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d869      	bhi.n	800d1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0e4:	4b43      	ldr	r3, [pc, #268]	; (800d1f4 <pvPortMalloc+0x18c>)
 800d0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0e8:	4b42      	ldr	r3, [pc, #264]	; (800d1f4 <pvPortMalloc+0x18c>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0ee:	e004      	b.n	800d0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	429a      	cmp	r2, r3
 800d102:	d903      	bls.n	800d10c <pvPortMalloc+0xa4>
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1f1      	bne.n	800d0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d10c:	4b36      	ldr	r3, [pc, #216]	; (800d1e8 <pvPortMalloc+0x180>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d112:	429a      	cmp	r2, r3
 800d114:	d050      	beq.n	800d1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2208      	movs	r2, #8
 800d11c:	4413      	add	r3, r2
 800d11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	685a      	ldr	r2, [r3, #4]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	1ad2      	subs	r2, r2, r3
 800d130:	2308      	movs	r3, #8
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	429a      	cmp	r2, r3
 800d136:	d91f      	bls.n	800d178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4413      	add	r3, r2
 800d13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	f003 0307 	and.w	r3, r3, #7
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <pvPortMalloc+0xf8>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	613b      	str	r3, [r7, #16]
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	685a      	ldr	r2, [r3, #4]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	1ad2      	subs	r2, r2, r3
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d172:	69b8      	ldr	r0, [r7, #24]
 800d174:	f000 f908 	bl	800d388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d178:	4b1d      	ldr	r3, [pc, #116]	; (800d1f0 <pvPortMalloc+0x188>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	4a1b      	ldr	r2, [pc, #108]	; (800d1f0 <pvPortMalloc+0x188>)
 800d184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d186:	4b1a      	ldr	r3, [pc, #104]	; (800d1f0 <pvPortMalloc+0x188>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b1b      	ldr	r3, [pc, #108]	; (800d1f8 <pvPortMalloc+0x190>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d203      	bcs.n	800d19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d192:	4b17      	ldr	r3, [pc, #92]	; (800d1f0 <pvPortMalloc+0x188>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <pvPortMalloc+0x190>)
 800d198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <pvPortMalloc+0x184>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	431a      	orrs	r2, r3
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1ae:	4b13      	ldr	r3, [pc, #76]	; (800d1fc <pvPortMalloc+0x194>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4a11      	ldr	r2, [pc, #68]	; (800d1fc <pvPortMalloc+0x194>)
 800d1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1b8:	f7fe fbea 	bl	800b990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00a      	beq.n	800d1dc <pvPortMalloc+0x174>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	60fb      	str	r3, [r7, #12]
}
 800d1d8:	bf00      	nop
 800d1da:	e7fe      	b.n	800d1da <pvPortMalloc+0x172>
	return pvReturn;
 800d1dc:	69fb      	ldr	r3, [r7, #28]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3728      	adds	r7, #40	; 0x28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20001de8 	.word	0x20001de8
 800d1ec:	20001dfc 	.word	0x20001dfc
 800d1f0:	20001dec 	.word	0x20001dec
 800d1f4:	20001de0 	.word	0x20001de0
 800d1f8:	20001df0 	.word	0x20001df0
 800d1fc:	20001df4 	.word	0x20001df4

0800d200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d04d      	beq.n	800d2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d212:	2308      	movs	r3, #8
 800d214:	425b      	negs	r3, r3
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	4413      	add	r3, r2
 800d21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	4b24      	ldr	r3, [pc, #144]	; (800d2b8 <vPortFree+0xb8>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4013      	ands	r3, r2
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10a      	bne.n	800d244 <vPortFree+0x44>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	60fb      	str	r3, [r7, #12]
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00a      	beq.n	800d262 <vPortFree+0x62>
	__asm volatile
 800d24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	60bb      	str	r3, [r7, #8]
}
 800d25e:	bf00      	nop
 800d260:	e7fe      	b.n	800d260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	685a      	ldr	r2, [r3, #4]
 800d266:	4b14      	ldr	r3, [pc, #80]	; (800d2b8 <vPortFree+0xb8>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4013      	ands	r3, r2
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d01e      	beq.n	800d2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d11a      	bne.n	800d2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	4b0e      	ldr	r3, [pc, #56]	; (800d2b8 <vPortFree+0xb8>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	43db      	mvns	r3, r3
 800d282:	401a      	ands	r2, r3
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d288:	f7fe fb74 	bl	800b974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	685a      	ldr	r2, [r3, #4]
 800d290:	4b0a      	ldr	r3, [pc, #40]	; (800d2bc <vPortFree+0xbc>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4413      	add	r3, r2
 800d296:	4a09      	ldr	r2, [pc, #36]	; (800d2bc <vPortFree+0xbc>)
 800d298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d29a:	6938      	ldr	r0, [r7, #16]
 800d29c:	f000 f874 	bl	800d388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <vPortFree+0xc0>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	4a06      	ldr	r2, [pc, #24]	; (800d2c0 <vPortFree+0xc0>)
 800d2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2aa:	f7fe fb71 	bl	800b990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2ae:	bf00      	nop
 800d2b0:	3718      	adds	r7, #24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20001dfc 	.word	0x20001dfc
 800d2bc:	20001dec 	.word	0x20001dec
 800d2c0:	20001df8 	.word	0x20001df8

0800d2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2d0:	4b27      	ldr	r3, [pc, #156]	; (800d370 <prvHeapInit+0xac>)
 800d2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f003 0307 	and.w	r3, r3, #7
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00c      	beq.n	800d2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	3307      	adds	r3, #7
 800d2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f023 0307 	bic.w	r3, r3, #7
 800d2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2ec:	68ba      	ldr	r2, [r7, #8]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	4a1f      	ldr	r2, [pc, #124]	; (800d370 <prvHeapInit+0xac>)
 800d2f4:	4413      	add	r3, r2
 800d2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2fc:	4a1d      	ldr	r2, [pc, #116]	; (800d374 <prvHeapInit+0xb0>)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d302:	4b1c      	ldr	r3, [pc, #112]	; (800d374 <prvHeapInit+0xb0>)
 800d304:	2200      	movs	r2, #0
 800d306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	4413      	add	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d310:	2208      	movs	r2, #8
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	1a9b      	subs	r3, r3, r2
 800d316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f023 0307 	bic.w	r3, r3, #7
 800d31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4a15      	ldr	r2, [pc, #84]	; (800d378 <prvHeapInit+0xb4>)
 800d324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d326:	4b14      	ldr	r3, [pc, #80]	; (800d378 <prvHeapInit+0xb4>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2200      	movs	r2, #0
 800d32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d32e:	4b12      	ldr	r3, [pc, #72]	; (800d378 <prvHeapInit+0xb4>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	1ad2      	subs	r2, r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d344:	4b0c      	ldr	r3, [pc, #48]	; (800d378 <prvHeapInit+0xb4>)
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	4a0a      	ldr	r2, [pc, #40]	; (800d37c <prvHeapInit+0xb8>)
 800d352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	4a09      	ldr	r2, [pc, #36]	; (800d380 <prvHeapInit+0xbc>)
 800d35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d35c:	4b09      	ldr	r3, [pc, #36]	; (800d384 <prvHeapInit+0xc0>)
 800d35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d362:	601a      	str	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	20001228 	.word	0x20001228
 800d374:	20001de0 	.word	0x20001de0
 800d378:	20001de8 	.word	0x20001de8
 800d37c:	20001df0 	.word	0x20001df0
 800d380:	20001dec 	.word	0x20001dec
 800d384:	20001dfc 	.word	0x20001dfc

0800d388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d390:	4b28      	ldr	r3, [pc, #160]	; (800d434 <prvInsertBlockIntoFreeList+0xac>)
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	e002      	b.n	800d39c <prvInsertBlockIntoFreeList+0x14>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	60fb      	str	r3, [r7, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d8f7      	bhi.n	800d396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d108      	bne.n	800d3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	441a      	add	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	441a      	add	r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d118      	bne.n	800d410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	4b15      	ldr	r3, [pc, #84]	; (800d438 <prvInsertBlockIntoFreeList+0xb0>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d00d      	beq.n	800d406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	441a      	add	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	e008      	b.n	800d418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d406:	4b0c      	ldr	r3, [pc, #48]	; (800d438 <prvInsertBlockIntoFreeList+0xb0>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
 800d40e:	e003      	b.n	800d418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d002      	beq.n	800d426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d426:	bf00      	nop
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20001de0 	.word	0x20001de0
 800d438:	20001de8 	.word	0x20001de8

0800d43c <__libc_init_array>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	4d0d      	ldr	r5, [pc, #52]	; (800d474 <__libc_init_array+0x38>)
 800d440:	4c0d      	ldr	r4, [pc, #52]	; (800d478 <__libc_init_array+0x3c>)
 800d442:	1b64      	subs	r4, r4, r5
 800d444:	10a4      	asrs	r4, r4, #2
 800d446:	2600      	movs	r6, #0
 800d448:	42a6      	cmp	r6, r4
 800d44a:	d109      	bne.n	800d460 <__libc_init_array+0x24>
 800d44c:	4d0b      	ldr	r5, [pc, #44]	; (800d47c <__libc_init_array+0x40>)
 800d44e:	4c0c      	ldr	r4, [pc, #48]	; (800d480 <__libc_init_array+0x44>)
 800d450:	f000 f8f2 	bl	800d638 <_init>
 800d454:	1b64      	subs	r4, r4, r5
 800d456:	10a4      	asrs	r4, r4, #2
 800d458:	2600      	movs	r6, #0
 800d45a:	42a6      	cmp	r6, r4
 800d45c:	d105      	bne.n	800d46a <__libc_init_array+0x2e>
 800d45e:	bd70      	pop	{r4, r5, r6, pc}
 800d460:	f855 3b04 	ldr.w	r3, [r5], #4
 800d464:	4798      	blx	r3
 800d466:	3601      	adds	r6, #1
 800d468:	e7ee      	b.n	800d448 <__libc_init_array+0xc>
 800d46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d46e:	4798      	blx	r3
 800d470:	3601      	adds	r6, #1
 800d472:	e7f2      	b.n	800d45a <__libc_init_array+0x1e>
 800d474:	0800d7ac 	.word	0x0800d7ac
 800d478:	0800d7ac 	.word	0x0800d7ac
 800d47c:	0800d7ac 	.word	0x0800d7ac
 800d480:	0800d7b0 	.word	0x0800d7b0

0800d484 <__retarget_lock_acquire_recursive>:
 800d484:	4770      	bx	lr

0800d486 <__retarget_lock_release_recursive>:
 800d486:	4770      	bx	lr

0800d488 <memcpy>:
 800d488:	440a      	add	r2, r1
 800d48a:	4291      	cmp	r1, r2
 800d48c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d490:	d100      	bne.n	800d494 <memcpy+0xc>
 800d492:	4770      	bx	lr
 800d494:	b510      	push	{r4, lr}
 800d496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d49a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d49e:	4291      	cmp	r1, r2
 800d4a0:	d1f9      	bne.n	800d496 <memcpy+0xe>
 800d4a2:	bd10      	pop	{r4, pc}

0800d4a4 <memset>:
 800d4a4:	4402      	add	r2, r0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d100      	bne.n	800d4ae <memset+0xa>
 800d4ac:	4770      	bx	lr
 800d4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d4b2:	e7f9      	b.n	800d4a8 <memset+0x4>

0800d4b4 <cleanup_glue>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	6809      	ldr	r1, [r1, #0]
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	b109      	cbz	r1, 800d4c2 <cleanup_glue+0xe>
 800d4be:	f7ff fff9 	bl	800d4b4 <cleanup_glue>
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ca:	f000 b869 	b.w	800d5a0 <_free_r>
	...

0800d4d0 <_reclaim_reent>:
 800d4d0:	4b2c      	ldr	r3, [pc, #176]	; (800d584 <_reclaim_reent+0xb4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4283      	cmp	r3, r0
 800d4d6:	b570      	push	{r4, r5, r6, lr}
 800d4d8:	4604      	mov	r4, r0
 800d4da:	d051      	beq.n	800d580 <_reclaim_reent+0xb0>
 800d4dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d4de:	b143      	cbz	r3, 800d4f2 <_reclaim_reent+0x22>
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d14a      	bne.n	800d57c <_reclaim_reent+0xac>
 800d4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e8:	6819      	ldr	r1, [r3, #0]
 800d4ea:	b111      	cbz	r1, 800d4f2 <_reclaim_reent+0x22>
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 f857 	bl	800d5a0 <_free_r>
 800d4f2:	6961      	ldr	r1, [r4, #20]
 800d4f4:	b111      	cbz	r1, 800d4fc <_reclaim_reent+0x2c>
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f000 f852 	bl	800d5a0 <_free_r>
 800d4fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d4fe:	b111      	cbz	r1, 800d506 <_reclaim_reent+0x36>
 800d500:	4620      	mov	r0, r4
 800d502:	f000 f84d 	bl	800d5a0 <_free_r>
 800d506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d508:	b111      	cbz	r1, 800d510 <_reclaim_reent+0x40>
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 f848 	bl	800d5a0 <_free_r>
 800d510:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d512:	b111      	cbz	r1, 800d51a <_reclaim_reent+0x4a>
 800d514:	4620      	mov	r0, r4
 800d516:	f000 f843 	bl	800d5a0 <_free_r>
 800d51a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d51c:	b111      	cbz	r1, 800d524 <_reclaim_reent+0x54>
 800d51e:	4620      	mov	r0, r4
 800d520:	f000 f83e 	bl	800d5a0 <_free_r>
 800d524:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d526:	b111      	cbz	r1, 800d52e <_reclaim_reent+0x5e>
 800d528:	4620      	mov	r0, r4
 800d52a:	f000 f839 	bl	800d5a0 <_free_r>
 800d52e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d530:	b111      	cbz	r1, 800d538 <_reclaim_reent+0x68>
 800d532:	4620      	mov	r0, r4
 800d534:	f000 f834 	bl	800d5a0 <_free_r>
 800d538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d53a:	b111      	cbz	r1, 800d542 <_reclaim_reent+0x72>
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 f82f 	bl	800d5a0 <_free_r>
 800d542:	69a3      	ldr	r3, [r4, #24]
 800d544:	b1e3      	cbz	r3, 800d580 <_reclaim_reent+0xb0>
 800d546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d548:	4620      	mov	r0, r4
 800d54a:	4798      	blx	r3
 800d54c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d54e:	b1b9      	cbz	r1, 800d580 <_reclaim_reent+0xb0>
 800d550:	4620      	mov	r0, r4
 800d552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d556:	f7ff bfad 	b.w	800d4b4 <cleanup_glue>
 800d55a:	5949      	ldr	r1, [r1, r5]
 800d55c:	b941      	cbnz	r1, 800d570 <_reclaim_reent+0xa0>
 800d55e:	3504      	adds	r5, #4
 800d560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d562:	2d80      	cmp	r5, #128	; 0x80
 800d564:	68d9      	ldr	r1, [r3, #12]
 800d566:	d1f8      	bne.n	800d55a <_reclaim_reent+0x8a>
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 f819 	bl	800d5a0 <_free_r>
 800d56e:	e7ba      	b.n	800d4e6 <_reclaim_reent+0x16>
 800d570:	680e      	ldr	r6, [r1, #0]
 800d572:	4620      	mov	r0, r4
 800d574:	f000 f814 	bl	800d5a0 <_free_r>
 800d578:	4631      	mov	r1, r6
 800d57a:	e7ef      	b.n	800d55c <_reclaim_reent+0x8c>
 800d57c:	2500      	movs	r5, #0
 800d57e:	e7ef      	b.n	800d560 <_reclaim_reent+0x90>
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	bf00      	nop
 800d584:	20000010 	.word	0x20000010

0800d588 <__malloc_lock>:
 800d588:	4801      	ldr	r0, [pc, #4]	; (800d590 <__malloc_lock+0x8>)
 800d58a:	f7ff bf7b 	b.w	800d484 <__retarget_lock_acquire_recursive>
 800d58e:	bf00      	nop
 800d590:	20001e00 	.word	0x20001e00

0800d594 <__malloc_unlock>:
 800d594:	4801      	ldr	r0, [pc, #4]	; (800d59c <__malloc_unlock+0x8>)
 800d596:	f7ff bf76 	b.w	800d486 <__retarget_lock_release_recursive>
 800d59a:	bf00      	nop
 800d59c:	20001e00 	.word	0x20001e00

0800d5a0 <_free_r>:
 800d5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5a2:	2900      	cmp	r1, #0
 800d5a4:	d044      	beq.n	800d630 <_free_r+0x90>
 800d5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5aa:	9001      	str	r0, [sp, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800d5b2:	bfb8      	it	lt
 800d5b4:	18e4      	addlt	r4, r4, r3
 800d5b6:	f7ff ffe7 	bl	800d588 <__malloc_lock>
 800d5ba:	4a1e      	ldr	r2, [pc, #120]	; (800d634 <_free_r+0x94>)
 800d5bc:	9801      	ldr	r0, [sp, #4]
 800d5be:	6813      	ldr	r3, [r2, #0]
 800d5c0:	b933      	cbnz	r3, 800d5d0 <_free_r+0x30>
 800d5c2:	6063      	str	r3, [r4, #4]
 800d5c4:	6014      	str	r4, [r2, #0]
 800d5c6:	b003      	add	sp, #12
 800d5c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5cc:	f7ff bfe2 	b.w	800d594 <__malloc_unlock>
 800d5d0:	42a3      	cmp	r3, r4
 800d5d2:	d908      	bls.n	800d5e6 <_free_r+0x46>
 800d5d4:	6825      	ldr	r5, [r4, #0]
 800d5d6:	1961      	adds	r1, r4, r5
 800d5d8:	428b      	cmp	r3, r1
 800d5da:	bf01      	itttt	eq
 800d5dc:	6819      	ldreq	r1, [r3, #0]
 800d5de:	685b      	ldreq	r3, [r3, #4]
 800d5e0:	1949      	addeq	r1, r1, r5
 800d5e2:	6021      	streq	r1, [r4, #0]
 800d5e4:	e7ed      	b.n	800d5c2 <_free_r+0x22>
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	b10b      	cbz	r3, 800d5f0 <_free_r+0x50>
 800d5ec:	42a3      	cmp	r3, r4
 800d5ee:	d9fa      	bls.n	800d5e6 <_free_r+0x46>
 800d5f0:	6811      	ldr	r1, [r2, #0]
 800d5f2:	1855      	adds	r5, r2, r1
 800d5f4:	42a5      	cmp	r5, r4
 800d5f6:	d10b      	bne.n	800d610 <_free_r+0x70>
 800d5f8:	6824      	ldr	r4, [r4, #0]
 800d5fa:	4421      	add	r1, r4
 800d5fc:	1854      	adds	r4, r2, r1
 800d5fe:	42a3      	cmp	r3, r4
 800d600:	6011      	str	r1, [r2, #0]
 800d602:	d1e0      	bne.n	800d5c6 <_free_r+0x26>
 800d604:	681c      	ldr	r4, [r3, #0]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	6053      	str	r3, [r2, #4]
 800d60a:	4421      	add	r1, r4
 800d60c:	6011      	str	r1, [r2, #0]
 800d60e:	e7da      	b.n	800d5c6 <_free_r+0x26>
 800d610:	d902      	bls.n	800d618 <_free_r+0x78>
 800d612:	230c      	movs	r3, #12
 800d614:	6003      	str	r3, [r0, #0]
 800d616:	e7d6      	b.n	800d5c6 <_free_r+0x26>
 800d618:	6825      	ldr	r5, [r4, #0]
 800d61a:	1961      	adds	r1, r4, r5
 800d61c:	428b      	cmp	r3, r1
 800d61e:	bf04      	itt	eq
 800d620:	6819      	ldreq	r1, [r3, #0]
 800d622:	685b      	ldreq	r3, [r3, #4]
 800d624:	6063      	str	r3, [r4, #4]
 800d626:	bf04      	itt	eq
 800d628:	1949      	addeq	r1, r1, r5
 800d62a:	6021      	streq	r1, [r4, #0]
 800d62c:	6054      	str	r4, [r2, #4]
 800d62e:	e7ca      	b.n	800d5c6 <_free_r+0x26>
 800d630:	b003      	add	sp, #12
 800d632:	bd30      	pop	{r4, r5, pc}
 800d634:	20001e04 	.word	0x20001e04

0800d638 <_init>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	bf00      	nop
 800d63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63e:	bc08      	pop	{r3}
 800d640:	469e      	mov	lr, r3
 800d642:	4770      	bx	lr

0800d644 <_fini>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	bf00      	nop
 800d648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d64a:	bc08      	pop	{r3}
 800d64c:	469e      	mov	lr, r3
 800d64e:	4770      	bx	lr
