
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800ce50  0800ce50  0001ce50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf9c  0800cf9c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf9c  0800cf9c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf9c  0800cf9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf9c  0800cf9c  0001cf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfa0  0800cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800cfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d4c  20000074  0800d018  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001dc0  0800d018  00021dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d210  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058ec  00000000  00000000  0004d2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002590  00000000  00000000  00052ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002328  00000000  00000000  00055130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000387a0  00000000  00000000  00057458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c43e  00000000  00000000  0008fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014fd14  00000000  00000000  000bc036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020bd4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2e4  00000000  00000000  0020bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ce38 	.word	0x0800ce38

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800ce38 	.word	0x0800ce38

08000200 <ADC_Init>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//initialize ADC thread
void ADC_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <ADC_Init+0x28>)
 8000206:	2101      	movs	r1, #1
 8000208:	2001      	movs	r0, #1
 800020a:	f009 fc87 	bl	8009b1c <osSemaphoreNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ADC_Init+0x2c>)
 8000212:	6013      	str	r3, [r2, #0]
	thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <ADC_Init+0x30>)
 8000216:	4907      	ldr	r1, [pc, #28]	; (8000234 <ADC_Init+0x34>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ADC_Init+0x38>)
 800021a:	f009 fbd2 	bl	80099c2 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <ADC_Init+0x3c>)
 8000222:	6013      	str	r3, [r2, #0]

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800ce88 	.word	0x0800ce88
 800022c:	200000ac 	.word	0x200000ac
 8000230:	0800ce98 	.word	0x0800ce98
 8000234:	20000108 	.word	0x20000108
 8000238:	080002b5 	.word	0x080002b5
 800023c:	20000104 	.word	0x20000104

08000240 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e01d      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000256:	4619      	mov	r1, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3303      	adds	r3, #3
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	440b      	add	r3, r1
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	3206      	adds	r2, #6
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800026a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026e:	4413      	add	r3, r2
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b299      	uxth	r1, r3
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b02      	cmp	r3, #2
 800028e:	ddde      	ble.n	800024e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f009 fccb 	bl	8009c30 <osSemaphoreRelease>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000090 	.word	0x20000090
 80002a8:	55555556 	.word	0x55555556
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <ADC_collect>:

//collect raw adc data through the DMA
void ADC_collect(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	memset(ADC_buffer_raw, 0, sizeof(ADC_buffer_raw));
 80002c0:	2212      	movs	r2, #18
 80002c2:	2100      	movs	r1, #0
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <ADC_collect+0x40>)
 80002c6:	f00c fced 	bl	800cca4 <memset>
//	HAL_ADC_Start(hadc, (uint32_t*)ADC_buffer_raw, 9);
	HAL_ADC_Start(&hadc1);
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <ADC_collect+0x44>)
 80002cc:	f001 fcbc 	bl	8001c48 <HAL_ADC_Start>
  for(;;)
  {
//	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
//	  // process adc buffer good
      HAL_ADC_PollForConversion(&hadc1, 1);
 80002d0:	2101      	movs	r1, #1
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <ADC_collect+0x44>)
 80002d4:	f001 fd1b 	bl	8001d0e <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES = HAL_ADC_GetValue(&hadc1);
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <ADC_collect+0x44>)
 80002da:	f001 fda7 	bl	8001e2c <HAL_ADC_GetValue>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <ADC_collect+0x48>)
 80002e4:	801a      	strh	r2, [r3, #0]
      HAL_Delay(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f001 f950 	bl	800158c <HAL_Delay>
    osDelay(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f009 fbfa 	bl	8009ae6 <osDelay>
      HAL_ADC_PollForConversion(&hadc1, 1);
 80002f2:	e7ed      	b.n	80002d0 <ADC_collect+0x1c>
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000108 	.word	0x20000108
 80002fc:	200000b0 	.word	0x200000b0

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000304:	f001 f909 	bl	800151a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000308:	f000 f828 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030c:	f000 fa62 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000310:	f000 f9d0 	bl	80006b4 <MX_DMA_Init>
  MX_FMC_Init();
 8000314:	f000 f9f8 	bl	8000708 <MX_FMC_Init>
  MX_I2C1_Init();
 8000318:	f000 f92c 	bl	8000574 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 800031c:	f000 f96a 	bl	80005f4 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000320:	f000 f98a 	bl	8000638 <MX_SPI2_Init>
  MX_CAN1_Init();
 8000324:	f000 f8f0 	bl	8000508 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000328:	f000 f866 	bl	80003f8 <MX_ADC1_Init>
  MX_FATFS_Init();
 800032c:	f008 ffca 	bl	80092c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000330:	f009 fac6 	bl	80098c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <main+0x50>)
 8000336:	2100      	movs	r1, #0
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <main+0x54>)
 800033a:	f009 fb42 	bl	80099c2 <osThreadNew>
 800033e:	4603      	mov	r3, r0
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <main+0x58>)
 8000342:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init();
 8000344:	f7ff ff5c 	bl	8000200 <ADC_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000348:	f009 fb00 	bl	800994c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800034c:	e7fe      	b.n	800034c <main+0x4c>
 800034e:	bf00      	nop
 8000350:	0800cebc 	.word	0x0800cebc
 8000354:	08000c71 	.word	0x08000c71
 8000358:	20000380 	.word	0x20000380

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b096      	sub	sp, #88	; 0x58
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	2244      	movs	r2, #68	; 0x44
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f00c fc9a 	bl	800cca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800037e:	2000      	movs	r0, #0
 8000380:	f003 fa7e 	bl	8003880 <HAL_PWREx_ControlVoltageScaling>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800038a:	f000 fc8b 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000396:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000398:	2302      	movs	r3, #2
 800039a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039c:	2303      	movs	r3, #3
 800039e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80003a4:	231e      	movs	r3, #30
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ac:	2302      	movs	r3, #2
 80003ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 fb15 	bl	80039e8 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003c4:	f000 fc6e 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2303      	movs	r3, #3
 80003ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003dc:	463b      	mov	r3, r7
 80003de:	2105      	movs	r1, #5
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 ff1b 	bl	800421c <HAL_RCC_ClockConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003ec:	f000 fc5a 	bl	8000ca4 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3758      	adds	r7, #88	; 0x58
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800040e:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000410:	4a39      	ldr	r2, [pc, #228]	; (80004f8 <MX_ADC1_Init+0x100>)
 8000412:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000414:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000416:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800041a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041c:	4b35      	ldr	r3, [pc, #212]	; (80004f4 <MX_ADC1_Init+0xfc>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000422:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <MX_ADC1_Init+0xfc>)
 800042a:	2201      	movs	r2, #1
 800042c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800042e:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000430:	2208      	movs	r2, #8
 8000432:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000434:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800043a:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <MX_ADC1_Init+0xfc>)
 800043c:	2201      	movs	r2, #1
 800043e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000440:	4b2c      	ldr	r3, [pc, #176]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000442:	2203      	movs	r2, #3
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000456:	2200      	movs	r2, #0
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <MX_ADC1_Init+0xfc>)
 800045c:	2201      	movs	r2, #1
 800045e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000464:	2200      	movs	r2, #0
 8000466:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000468:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_ADC1_Init+0xfc>)
 800046a:	2200      	movs	r2, #0
 800046c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000470:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000472:	2204      	movs	r2, #4
 8000474:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000476:	481f      	ldr	r0, [pc, #124]	; (80004f4 <MX_ADC1_Init+0xfc>)
 8000478:	f001 fa9a 	bl	80019b0 <HAL_ADC_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000482:	f000 fc0f 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <MX_ADC1_Init+0x104>)
 8000488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048a:	2306      	movs	r3, #6
 800048c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800048e:	2305      	movs	r3, #5
 8000490:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000492:	237f      	movs	r3, #127	; 0x7f
 8000494:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000496:	2304      	movs	r3, #4
 8000498:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049e:	463b      	mov	r3, r7
 80004a0:	4619      	mov	r1, r3
 80004a2:	4814      	ldr	r0, [pc, #80]	; (80004f4 <MX_ADC1_Init+0xfc>)
 80004a4:	f001 fe98 	bl	80021d8 <HAL_ADC_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004ae:	f000 fbf9 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_ADC1_Init+0x108>)
 80004b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004b6:	230c      	movs	r3, #12
 80004b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ba:	463b      	mov	r3, r7
 80004bc:	4619      	mov	r1, r3
 80004be:	480d      	ldr	r0, [pc, #52]	; (80004f4 <MX_ADC1_Init+0xfc>)
 80004c0:	f001 fe8a 	bl	80021d8 <HAL_ADC_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80004ca:	f000 fbeb 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <MX_ADC1_Init+0x10c>)
 80004d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004d2:	2312      	movs	r3, #18
 80004d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d6:	463b      	mov	r3, r7
 80004d8:	4619      	mov	r1, r3
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <MX_ADC1_Init+0xfc>)
 80004dc:	f001 fe7c 	bl	80021d8 <HAL_ADC_ConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80004e6:	f000 fbdd 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000108 	.word	0x20000108
 80004f8:	50040000 	.word	0x50040000
 80004fc:	14f00020 	.word	0x14f00020
 8000500:	19200040 	.word	0x19200040
 8000504:	1d500080 	.word	0x1d500080

08000508 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_CAN1_Init+0x64>)
 800050e:	4a18      	ldr	r2, [pc, #96]	; (8000570 <MX_CAN1_Init+0x68>)
 8000510:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_CAN1_Init+0x64>)
 8000514:	2214      	movs	r2, #20
 8000516:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_CAN1_Init+0x64>)
 8000526:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800052a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_CAN1_Init+0x64>)
 800052e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000532:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_CAN1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_CAN1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_CAN1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_CAN1_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_CAN1_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_CAN1_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_CAN1_Init+0x64>)
 800055a:	f002 faf1 	bl	8002b40 <HAL_CAN_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000564:	f000 fb9e 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200001d0 	.word	0x200001d0
 8000570:	40006400 	.word	0x40006400

08000574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_I2C1_Init+0x74>)
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <MX_I2C1_Init+0x78>)
 800057c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <MX_I2C1_Init+0x7c>)
 8000582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_I2C1_Init+0x74>)
 800058c:	2201      	movs	r2, #1
 800058e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005b0:	f003 f820 	bl	80035f4 <HAL_I2C_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ba:	f000 fb73 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005be:	2100      	movs	r1, #0
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005c2:	f003 f8a6 	bl	8003712 <HAL_I2CEx_ConfigAnalogFilter>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005cc:	f000 fb6a 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005d4:	f003 f8e8 	bl	80037a8 <HAL_I2CEx_ConfigDigitalFilter>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005de:	f000 fb61 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200001f8 	.word	0x200001f8
 80005ec:	40005400 	.word	0x40005400
 80005f0:	307075b1 	.word	0x307075b1

080005f4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <MX_SDMMC1_SD_Init+0x40>)
 80005fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 800060c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000610:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <MX_SDMMC1_SD_Init+0x3c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	2000024c 	.word	0x2000024c
 8000634:	50062400 	.word	0x50062400

08000638 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_SPI2_Init+0x74>)
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_SPI2_Init+0x78>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_SPI2_Init+0x74>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_SPI2_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_SPI2_Init+0x74>)
 8000652:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000656:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_SPI2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_SPI2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_SPI2_Init+0x74>)
 8000666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_SPI2_Init+0x74>)
 800066e:	2208      	movs	r2, #8
 8000670:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_SPI2_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_SPI2_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_SPI2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_SPI2_Init+0x74>)
 8000686:	2207      	movs	r2, #7
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_SPI2_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_SPI2_Init+0x74>)
 8000692:	2208      	movs	r2, #8
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_SPI2_Init+0x74>)
 8000698:	f007 fb4b 	bl	8007d32 <HAL_SPI_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 faff 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200002cc 	.word	0x200002cc
 80006b0:	40003800 	.word	0x40003800

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_DMA_Init+0x50>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <MX_DMA_Init+0x50>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6493      	str	r3, [r2, #72]	; 0x48
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_DMA_Init+0x50>)
 80006c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_DMA_Init+0x50>)
 80006d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <MX_DMA_Init+0x50>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6493      	str	r3, [r2, #72]	; 0x48
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_DMA_Init+0x50>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2105      	movs	r1, #5
 80006ee:	200e      	movs	r0, #14
 80006f0:	f002 fbda 	bl	8002ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006f4:	200e      	movs	r0, #14
 80006f6:	f002 fbf3 	bl	8002ee0 <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f00c fac5 	bl	800cca4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MX_FMC_Init+0xc4>)
 800071c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000720:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_FMC_Init+0xc4>)
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <MX_FMC_Init+0xc8>)
 8000726:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_FMC_Init+0xc4>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_FMC_Init+0xc4>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_FMC_Init+0xc4>)
 8000736:	2204      	movs	r2, #4
 8000738:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_FMC_Init+0xc4>)
 800073c:	2210      	movs	r2, #16
 800073e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_FMC_Init+0xc4>)
 8000742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000746:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_FMC_Init+0xc4>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_FMC_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_FMC_Init+0xc4>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_FMC_Init+0xc4>)
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_FMC_Init+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_FMC_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_FMC_Init+0xc4>)
 8000770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_FMC_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_FMC_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_FMC_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_FMC_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800078e:	230f      	movs	r3, #15
 8000790:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000792:	230f      	movs	r3, #15
 8000794:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000796:	23ff      	movs	r3, #255	; 0xff
 8000798:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800079e:	230f      	movs	r3, #15
 80007a0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_FMC_Init+0xc4>)
 80007b6:	f007 fb5f 	bl	8007e78 <HAL_SRAM_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80007c0:	f000 fa70 	bl	8000ca4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000330 	.word	0x20000330
 80007d0:	a0000104 	.word	0xa0000104

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ea:	4bb2      	ldr	r3, [pc, #712]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4ab1      	ldr	r2, [pc, #708]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80007f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4baf      	ldr	r3, [pc, #700]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4bac      	ldr	r3, [pc, #688]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4aab      	ldr	r2, [pc, #684]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4ba9      	ldr	r3, [pc, #676]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	4ba6      	ldr	r3, [pc, #664]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4aa5      	ldr	r2, [pc, #660]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4ba3      	ldr	r3, [pc, #652]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a9f      	ldr	r2, [pc, #636]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b9d      	ldr	r3, [pc, #628]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b9a      	ldr	r3, [pc, #616]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a99      	ldr	r2, [pc, #612]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b97      	ldr	r3, [pc, #604]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b94      	ldr	r3, [pc, #592]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a93      	ldr	r2, [pc, #588]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b91      	ldr	r3, [pc, #580]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800087a:	f003 f8a5 	bl	80039c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b8d      	ldr	r3, [pc, #564]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a8c      	ldr	r2, [pc, #560]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b8a      	ldr	r3, [pc, #552]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a86      	ldr	r2, [pc, #536]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b84      	ldr	r3, [pc, #528]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b81      	ldr	r3, [pc, #516]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a80      	ldr	r2, [pc, #512]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b7e      	ldr	r3, [pc, #504]	; (8000ab4 <MX_GPIO_Init+0x2e0>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f244 0114 	movw	r1, #16404	; 0x4014
 80008cc:	487a      	ldr	r0, [pc, #488]	; (8000ab8 <MX_GPIO_Init+0x2e4>)
 80008ce:	f002 fe79 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	4878      	ldr	r0, [pc, #480]	; (8000abc <MX_GPIO_Init+0x2e8>)
 80008da:	f002 fe73 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f002 fe6d 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2104      	movs	r1, #4
 80008ee:	4874      	ldr	r0, [pc, #464]	; (8000ac0 <MX_GPIO_Init+0x2ec>)
 80008f0:	f002 fe68 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80008f4:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000906:	2305      	movs	r3, #5
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	486c      	ldr	r0, [pc, #432]	; (8000ac4 <MX_GPIO_Init+0x2f0>)
 8000912:	f002 fcad 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000916:	f244 0314 	movw	r3, #16404	; 0x4014
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4862      	ldr	r0, [pc, #392]	; (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000930:	f002 fc9e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000934:	2310      	movs	r3, #16
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000944:	2302      	movs	r3, #2
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	485c      	ldr	r0, [pc, #368]	; (8000ac0 <MX_GPIO_Init+0x2ec>)
 8000950:	f002 fc8e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000966:	2307      	movs	r3, #7
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f002 fc7c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000978:	23b0      	movs	r3, #176	; 0xb0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000988:	230a      	movs	r3, #10
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	484c      	ldr	r0, [pc, #304]	; (8000ac4 <MX_GPIO_Init+0x2f0>)
 8000994:	f002 fc6c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8000998:	f44f 7308 	mov.w	r3, #544	; 0x220
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009aa:	230d      	movs	r3, #13
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4842      	ldr	r0, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x2ec>)
 80009b6:	f002 fc5b 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80009ba:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80009cc:	2305      	movs	r3, #5
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	483c      	ldr	r0, [pc, #240]	; (8000ac8 <MX_GPIO_Init+0x2f4>)
 80009d8:	f002 fc4a 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80009dc:	2302      	movs	r3, #2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4834      	ldr	r0, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0x2f0>)
 80009f2:	f002 fc3d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80009f6:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000a14:	f002 fc2c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000a36:	f002 fc1b 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a3a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000a58:	f002 fc0a 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a6c:	230d      	movs	r3, #13
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <MX_GPIO_Init+0x2f8>)
 8000a78:	f002 fbfa 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f002 fbe8 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab2:	e00d      	b.n	8000ad0 <MX_GPIO_Init+0x2fc>
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48001c00 	.word	0x48001c00
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	48002000 	.word	0x48002000
 8000ac8:	48001800 	.word	0x48001800
 8000acc:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4862      	ldr	r0, [pc, #392]	; (8000c60 <MX_GPIO_Init+0x48c>)
 8000ad8:	f002 fbca 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000adc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae2:	2312      	movs	r3, #18
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000aee:	2304      	movs	r3, #4
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	485a      	ldr	r0, [pc, #360]	; (8000c64 <MX_GPIO_Init+0x490>)
 8000afa:	f002 fbb9 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4853      	ldr	r0, [pc, #332]	; (8000c60 <MX_GPIO_Init+0x48c>)
 8000b14:	f002 fbac 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000b18:	2384      	movs	r3, #132	; 0x84
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	484b      	ldr	r0, [pc, #300]	; (8000c60 <MX_GPIO_Init+0x48c>)
 8000b34:	f002 fb9c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4844      	ldr	r0, [pc, #272]	; (8000c68 <MX_GPIO_Init+0x494>)
 8000b56:	f002 fb8b 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	483a      	ldr	r0, [pc, #232]	; (8000c60 <MX_GPIO_Init+0x48c>)
 8000b76:	f002 fb7b 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f002 fb6e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f002 fb5f 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f002 fb4e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000be6:	230b      	movs	r3, #11
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <MX_GPIO_Init+0x498>)
 8000bf2:	f002 fb3d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c06:	230a      	movs	r3, #10
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f002 fb2c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_GPIO_Init+0x494>)
 8000c30:	f002 fb1e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c46:	2306      	movs	r3, #6
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0x494>)
 8000c52:	f002 fb0d 	bl	8003270 <HAL_GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	48000800 	.word	0x48000800
 8000c64:	48001800 	.word	0x48001800
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	48001400 	.word	0x48001400

08000c70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f008 ff34 	bl	8009ae6 <osDelay>
 8000c7e:	e7fb      	b.n	8000c78 <StartDefaultTask+0x8>

08000c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c92:	f000 fc5b 	bl	800154c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40001000 	.word	0x40001000

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210f      	movs	r1, #15
 8000cea:	f06f 0001 	mvn.w	r0, #1
 8000cee:	f002 f8db 	bl	8002ea8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0b2      	sub	sp, #200	; 0xc8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	229c      	movs	r2, #156	; 0x9c
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00b ffbf 	bl	800cca4 <memset>
  if(hadc->Instance==ADC1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a5d      	ldr	r2, [pc, #372]	; (8000ea0 <HAL_ADC_MspInit+0x1a0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	f040 80b2 	bne.w	8000e96 <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fd46 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000d6e:	f7ff ff99 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a39      	ldr	r2, [pc, #228]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <HAL_ADC_MspInit+0x1a4>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000dd2:	2318      	movs	r3, #24
 8000dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000de8:	4619      	mov	r1, r3
 8000dea:	482f      	ldr	r0, [pc, #188]	; (8000ea8 <HAL_ADC_MspInit+0x1a8>)
 8000dec:	f002 fa40 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000df0:	2387      	movs	r3, #135	; 0x87
 8000df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df6:	230b      	movs	r3, #11
 8000df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f002 fa30 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e16:	230b      	movs	r3, #11
 8000e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4820      	ldr	r0, [pc, #128]	; (8000eac <HAL_ADC_MspInit+0x1ac>)
 8000e2a:	f002 fa21 	bl	8003270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_ADC_MspInit+0x1b4>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e36:	2205      	movs	r2, #5
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e5e:	2220      	movs	r2, #32
 8000e60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e64:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e6c:	f002 f846 	bl	8002efc <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8000e76:	f7ff ff15 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_ADC_MspInit+0x1b0>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2105      	movs	r1, #5
 8000e8a:	2012      	movs	r0, #18
 8000e8c:	f002 f80c 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e90:	2012      	movs	r0, #18
 8000e92:	f002 f825 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37c8      	adds	r7, #200	; 0xc8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	50040000 	.word	0x50040000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	20000170 	.word	0x20000170
 8000eb4:	40020044 	.word	0x40020044

08000eb8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_CAN_MspInit+0x80>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d129      	bne.n	8000f2e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000f0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f002 f9a1 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40006400 	.word	0x40006400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0b2      	sub	sp, #200	; 0xc8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	229c      	movs	r2, #156	; 0x9c
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00b fe9f 	bl	800cca4 <memset>
  if(hi2c->Instance==I2C1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a33      	ldr	r2, [pc, #204]	; (8001038 <HAL_I2C_MspInit+0xf8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d15e      	bne.n	800102e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fc39 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff fe8c 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	4a2a      	ldr	r2, [pc, #168]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8000faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fbc:	f002 fd04 	bl	80039c8 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fc0:	2340      	movs	r3, #64	; 0x40
 8000fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc6:	2312      	movs	r3, #18
 8000fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <HAL_I2C_MspInit+0x100>)
 8000fe6:	f002 f943 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff2:	2312      	movs	r3, #18
 8000ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001004:	2304      	movs	r3, #4
 8001006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_I2C_MspInit+0x104>)
 8001012:	f002 f92d 	bl	8003270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_I2C_MspInit+0xfc>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_I2C_MspInit+0xfc>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	37c8      	adds	r7, #200	; 0xc8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40005400 	.word	0x40005400
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400
 8001044:	48001800 	.word	0x48001800

08001048 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0b2      	sub	sp, #200	; 0xc8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	229c      	movs	r2, #156	; 0x9c
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f00b fe1b 	bl	800cca4 <memset>
  if(hsd->Instance==SDMMC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <HAL_SD_MspInit+0x108>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d167      	bne.n	8001148 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001078:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800107c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800107e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fbb2 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001096:	f7ff fe05 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_SD_MspInit+0x10c>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a21      	ldr	r2, [pc, #132]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_SD_MspInit+0x10c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010e2:	2304      	movs	r3, #4
 80010e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010fa:	230c      	movs	r3, #12
 80010fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001104:	4619      	mov	r1, r3
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <HAL_SD_MspInit+0x110>)
 8001108:	f002 f8b2 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 800110c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001126:	230c      	movs	r3, #12
 8001128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001130:	4619      	mov	r1, r3
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <HAL_SD_MspInit+0x114>)
 8001134:	f002 f89c 	bl	8003270 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2105      	movs	r1, #5
 800113c:	2031      	movs	r0, #49	; 0x31
 800113e:	f001 feb3 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001142:	2031      	movs	r0, #49	; 0x31
 8001144:	f001 fecc 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	37c8      	adds	r7, #200	; 0xc8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	50062400 	.word	0x50062400
 8001154:	40021000 	.word	0x40021000
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48000800 	.word	0x48000800

08001160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a25      	ldr	r2, [pc, #148]	; (8001214 <HAL_SPI_MspInit+0xb4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d144      	bne.n	800120c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a24      	ldr	r2, [pc, #144]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_SPI_MspInit+0xb8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011da:	2305      	movs	r3, #5
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <HAL_SPI_MspInit+0xbc>)
 80011e6:	f002 f843 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80011ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011fc:	2305      	movs	r3, #5
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <HAL_SPI_MspInit+0xc0>)
 8001208:	f002 f832 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40003800 	.word	0x40003800
 8001218:	40021000 	.word	0x40021000
 800121c:	48002000 	.word	0x48002000
 8001220:	48000400 	.word	0x48000400

08001224 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <HAL_FMC_MspInit+0xe0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d15d      	bne.n	80012fc <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_FMC_MspInit+0xe0>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_FMC_MspInit+0xe4>)
 8001248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <HAL_FMC_MspInit+0xe4>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6513      	str	r3, [r2, #80]	; 0x50
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_FMC_MspInit+0xe4>)
 8001254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800125e:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001262:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001270:	230c      	movs	r3, #12
 8001272:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4824      	ldr	r0, [pc, #144]	; (800130c <HAL_FMC_MspInit+0xe8>)
 800127a:	f001 fff9 	bl	8003270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800127e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001282:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	230c      	movs	r3, #12
 8001292:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <HAL_FMC_MspInit+0xec>)
 800129a:	f001 ffe9 	bl	8003270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4817      	ldr	r0, [pc, #92]	; (8001314 <HAL_FMC_MspInit+0xf0>)
 80012b8:	f001 ffda 	bl	8003270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80012bc:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80012c0:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ce:	230c      	movs	r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <HAL_FMC_MspInit+0xf4>)
 80012d8:	f001 ffca 	bl	8003270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80012dc:	233f      	movs	r3, #63	; 0x3f
 80012de:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ec:	230c      	movs	r3, #12
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <HAL_FMC_MspInit+0xf8>)
 80012f6:	f001 ffbb 	bl	8003270 <HAL_GPIO_Init>
 80012fa:	e000      	b.n	80012fe <HAL_FMC_MspInit+0xda>
    return;
 80012fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000384 	.word	0x20000384
 8001308:	40021000 	.word	0x40021000
 800130c:	48001000 	.word	0x48001000
 8001310:	48000c00 	.word	0x48000c00
 8001314:	48000400 	.word	0x48000400
 8001318:	48001400 	.word	0x48001400
 800131c:	48001800 	.word	0x48001800

08001320 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001328:	f7ff ff7c 	bl	8001224 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_InitTick+0xe0>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a33      	ldr	r2, [pc, #204]	; (8001414 <HAL_InitTick+0xe0>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_InitTick+0xe0>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135a:	f107 0210 	add.w	r2, r7, #16
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f003 f955 	bl	8004614 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001374:	f003 f922 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8001378:	6378      	str	r0, [r7, #52]	; 0x34
 800137a:	e004      	b.n	8001386 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800137c:	f003 f91e 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8001380:	4603      	mov	r3, r0
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001388:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_InitTick+0xe4>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	3b01      	subs	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_InitTick+0xe8>)
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_InitTick+0xec>)
 8001398:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_InitTick+0xe8>)
 800139c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_InitTick+0xe8>)
 80013a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_InitTick+0xe8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_InitTick+0xe8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_InitTick+0xe8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013ba:	4818      	ldr	r0, [pc, #96]	; (800141c <HAL_InitTick+0xe8>)
 80013bc:	f006 fda4 	bl	8007f08 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11b      	bne.n	8001406 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013ce:	4813      	ldr	r0, [pc, #76]	; (800141c <HAL_InitTick+0xe8>)
 80013d0:	f006 fdfc 	bl	8007fcc <HAL_TIM_Base_Start_IT>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d111      	bne.n	8001406 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e2:	2036      	movs	r0, #54	; 0x36
 80013e4:	f001 fd7c 	bl	8002ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d808      	bhi.n	8001400 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	2036      	movs	r0, #54	; 0x36
 80013f4:	f001 fd58 	bl	8002ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_InitTick+0xf0>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e002      	b.n	8001406 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800140a:	4618      	mov	r0, r3
 800140c:	3738      	adds	r7, #56	; 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	431bde83 	.word	0x431bde83
 800141c:	20000388 	.word	0x20000388
 8001420:	40001000 	.word	0x40001000
 8001424:	20000004 	.word	0x20000004

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA1_Channel4_IRQHandler+0x10>)
 800145a:	f001 fdf7 	bl	800304c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000170 	.word	0x20000170

08001468 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <ADC1_IRQHandler+0x10>)
 800146e:	f000 fcea 	bl	8001e46 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000108 	.word	0x20000108

0800147c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <SDMMC1_IRQHandler+0x10>)
 8001482:	f005 f9d9 	bl	8006838 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000024c 	.word	0x2000024c

08001490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM6_DAC_IRQHandler+0x10>)
 8001496:	f006 fe09 	bl	80080ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000388 	.word	0x20000388

080014a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f00b fba1 	bl	800cc3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7fe ff01 	bl	8000300 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800150c:	0800cfa4 	.word	0x0800cfa4
  ldr r2, =_sbss
 8001510:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001514:	20001dc0 	.word	0x20001dc0

08001518 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <CAN1_RX0_IRQHandler>

0800151a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f001 fcb4 	bl	8002e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	200f      	movs	r0, #15
 800152c:	f7ff ff02 	bl	8001334 <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e001      	b.n	8001540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153c:	f7ff fbb8 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	200003d4 	.word	0x200003d4

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200003d4 	.word	0x200003d4

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	609a      	str	r2, [r3, #8]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3360      	adds	r3, #96	; 0x60
 800164e:	461a      	mov	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LL_ADC_SetOffset+0x44>)
 800165e:	4013      	ands	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	4313      	orrs	r3, r2
 800166c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	03fff000 	.word	0x03fff000

08001684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3360      	adds	r3, #96	; 0x60
 8001692:	461a      	mov	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3360      	adds	r3, #96	; 0x60
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3330      	adds	r3, #48	; 0x30
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	4413      	add	r3, r2
 8001750:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	211f      	movs	r1, #31
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0e9b      	lsrs	r3, r3, #26
 800176a:	f003 011f 	and.w	r1, r3, #31
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3314      	adds	r3, #20
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0e5b      	lsrs	r3, r3, #25
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	0d1b      	lsrs	r3, r3, #20
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2107      	movs	r1, #7
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	401a      	ands	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0d1b      	lsrs	r3, r3, #20
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	431a      	orrs	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0318 	and.w	r3, r3, #24
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <LL_ADC_SetChannelSingleDiff+0x44>)
 800182c:	40d9      	lsrs	r1, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	400b      	ands	r3, r1
 8001832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	0007ffff 	.word	0x0007ffff

08001850 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6093      	str	r3, [r2, #8]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018d8:	d101      	bne.n	80018de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <LL_ADC_IsEnabled+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_ADC_IsEnabled+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800194a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800194e:	f043 0204 	orr.w	r2, r3, #4
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b04      	cmp	r3, #4
 8001974:	d101      	bne.n	800197a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d101      	bne.n	80019a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e12f      	b.n	8001c2a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff f991 	bl	8000d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff3f 	bl	8001874 <LL_ADC_IsDeepPowerDownEnabled>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff25 	bl	8001850 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff5a 	bl	80018c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff3e 	bl	800189c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a20:	4b84      	ldr	r3, [pc, #528]	; (8001c34 <HAL_ADC_Init+0x284>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	4a84      	ldr	r2, [pc, #528]	; (8001c38 <HAL_ADC_Init+0x288>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff3c 	bl	80018c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f043 0210 	orr.w	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff75 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 80c8 	bne.w	8001c18 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 80c4 	bne.w	8001c18 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a98:	f043 0202 	orr.w	r2, r3, #2
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <LL_ADC_IsEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10b      	bne.n	8001ac8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab0:	4862      	ldr	r0, [pc, #392]	; (8001c3c <HAL_ADC_Init+0x28c>)
 8001ab2:	f7ff ff2f 	bl	8001914 <LL_ADC_IsEnabled>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	485f      	ldr	r0, [pc, #380]	; (8001c40 <HAL_ADC_Init+0x290>)
 8001ac4:	f7ff fd86 	bl	80015d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e5b      	ldrb	r3, [r3, #25]
 8001acc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ad8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ade:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d106      	bne.n	8001b04 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	3b01      	subs	r3, #1
 8001afc:	045b      	lsls	r3, r3, #17
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_ADC_Init+0x294>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff12 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001b3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff1f 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8001b4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d140      	bne.n	8001bd4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d13d      	bne.n	8001bd4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7e1b      	ldrb	r3, [r3, #24]
 8001b60:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b62:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b6a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b7a:	f023 0306 	bic.w	r3, r3, #6
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d118      	bne.n	8001bc4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bae:	4311      	orrs	r1, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10c      	bne.n	8001bf6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f023 010f 	bic.w	r1, r3, #15
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	e007      	b.n	8001c06 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 020f 	bic.w	r2, r2, #15
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	f043 0201 	orr.w	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	659a      	str	r2, [r3, #88]	; 0x58
 8001c16:	e007      	b.n	8001c28 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000
 8001c38:	053e2d63 	.word	0x053e2d63
 8001c3c:	50040000 	.word	0x50040000
 8001c40:	50040300 	.word	0x50040300
 8001c44:	fff0c007 	.word	0xfff0c007

08001c48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe84 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d14f      	bne.n	8001d00 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Start+0x26>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e04b      	b.n	8001d06 <HAL_ADC_Start+0xbe>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 feaa 	bl	80029d0 <ADC_Enable>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d137      	bne.n	8001cf6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	f023 0206 	bic.w	r2, r3, #6
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb4:	e002      	b.n	8001cbc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	221c      	movs	r2, #28
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe23 	bl	800193a <LL_ADC_REG_StartConversion>
 8001cf4:	e006      	b.n	8001d04 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
 8001d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d102      	bne.n	8001d26 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d20:	2308      	movs	r3, #8
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	e010      	b.n	8001d48 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e06f      	b.n	8001e24 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001d44:	2304      	movs	r3, #4
 8001d46:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fc14 	bl	8001574 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d4e:	e021      	b.n	8001d94 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d56:	d01d      	beq.n	8001d94 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d58:	f7ff fc0c 	bl	8001574 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d302      	bcc.n	8001d6e <HAL_ADC_PollForConversion+0x60>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d112      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f043 0204 	orr.w	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e047      	b.n	8001e24 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0d6      	beq.n	8001d50 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fcaa 	bl	800170c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01c      	beq.n	8001df8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7e5b      	ldrb	r3, [r3, #25]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d111      	bne.n	8001df8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d104      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e008      	b.n	8001e22 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b088      	sub	sp, #32
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x56>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fe4c 	bl	8002b2c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x6a>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d05e      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d059      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc13 	bl	800170c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d03e      	beq.n	8001f6a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d135      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d12e      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fd26 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11a      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020c 	bic.w	r2, r2, #12
 8001f2a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d112      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f50:	e00b      	b.n	8001f6a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe f968 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	220c      	movs	r2, #12
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x146>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d072      	beq.n	800207c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d06d      	beq.n	800207c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fbe4 	bl	800178a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fc2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fb9f 	bl	800170c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fce:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d047      	beq.n	800206e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x1b2>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d03f      	beq.n	800206e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d13a      	bne.n	800206e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d133      	bne.n	800206e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12e      	bne.n	800206e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fcb7 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11a      	bne.n	8002056 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800202e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d112      	bne.n	800206e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
 8002054:	e00b      	b.n	800206e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f043 0210 	orr.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fd34 	bl	8002adc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2260      	movs	r2, #96	; 0x60
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	d011      	beq.n	80020aa <HAL_ADC_IRQHandler+0x264>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f886 	bl	80021ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <HAL_ADC_IRQHandler+0x294>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fd1a 	bl	8002b04 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_ADC_IRQHandler+0x2c4>
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fd0c 	bl	8002b18 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d02a      	beq.n	800216a <HAL_ADC_IRQHandler+0x324>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d025      	beq.n	800216a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002126:	2301      	movs	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e008      	b.n	800213e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10e      	bne.n	8002162 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	f043 0202 	orr.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f830 	bl	80021c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2210      	movs	r2, #16
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x360>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d013      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	f043 0208 	orr.w	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fca5 	bl	8002af0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b0b6      	sub	sp, #216	; 0xd8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x22>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e3d5      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x7ce>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fbab 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 83ba 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d824      	bhi.n	8002266 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	3b02      	subs	r3, #2
 8002222:	2b03      	cmp	r3, #3
 8002224:	d81b      	bhi.n	800225e <HAL_ADC_ConfigChannel+0x86>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_ADC_ConfigChannel+0x54>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800223d 	.word	0x0800223d
 8002230:	08002245 	.word	0x08002245
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002255 	.word	0x08002255
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	220c      	movs	r2, #12
 8002240:	605a      	str	r2, [r3, #4]
          break;
 8002242:	e011      	b.n	8002268 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2212      	movs	r2, #18
 8002248:	605a      	str	r2, [r3, #4]
          break;
 800224a:	e00d      	b.n	8002268 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2218      	movs	r2, #24
 8002250:	605a      	str	r2, [r3, #4]
          break;
 8002252:	e009      	b.n	8002268 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225a:	605a      	str	r2, [r3, #4]
          break;
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2206      	movs	r2, #6
 8002262:	605a      	str	r2, [r3, #4]
          break;
 8002264:	e000      	b.n	8002268 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002266:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	f7ff fa5c 	bl	8001732 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb6f 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8002284:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fb7b 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8002292:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002296:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 81c1 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 81bc 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b2:	d10f      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	f7ff fa76 	bl	80017b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fa0a 	bl	80016e6 <LL_ADC_SetSamplingTimeCommonConfig>
 80022d2:	e00e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	461a      	mov	r2, r3
 80022e2:	f7ff fa65 	bl	80017b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f9fa 	bl	80016e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	08db      	lsrs	r3, r3, #3
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d00a      	beq.n	800232a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002324:	f7ff f98a 	bl	800163c <LL_ADC_SetOffset>
 8002328:	e17b      	b.n	8002622 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f9a7 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x17e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f99c 	bl	8001684 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x1bc>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f991 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e004      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1d4>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e018      	b.n	80023de <HAL_ADC_ConfigChannel+0x206>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e004      	b.n	80023de <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f960 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f944 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x244>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f939 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x282>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f92e 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800243a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800243e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800244e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x29a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x2cc>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800248a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800248e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800249a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f8fd 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f8e1 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x30a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f8d6 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x348>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2102      	movs	r1, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f8cb 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x360>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e016      	b.n	8002566 <HAL_ADC_ConfigChannel+0x38e>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800254a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800254c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e004      	b.n	8002566 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800255c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002566:	429a      	cmp	r2, r3
 8002568:	d106      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f89c 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f880 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x3cc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2103      	movs	r1, #3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f875 	bl	8001684 <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	e017      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x3fc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2103      	movs	r1, #3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f86a 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x414>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	e011      	b.n	8002610 <HAL_ADC_ConfigChannel+0x438>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	2103      	movs	r1, #3
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f847 	bl	80016b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f974 	bl	8001914 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8140 	bne.w	80028b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff f8e1 	bl	8001808 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a8f      	ldr	r2, [pc, #572]	; (8002888 <HAL_ADC_ConfigChannel+0x6b0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	f040 8131 	bne.w	80028b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x4a2>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b09      	cmp	r3, #9
 8002670:	bf94      	ite	ls
 8002672:	2301      	movls	r3, #1
 8002674:	2300      	movhi	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e019      	b.n	80026ae <HAL_ADC_ConfigChannel+0x4d6>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800268c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d079      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x4f6>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	069b      	lsls	r3, r3, #26
 80026c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026cc:	e015      	b.n	80026fa <HAL_ADC_ConfigChannel+0x522>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_ADC_ConfigChannel+0x542>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	e017      	b.n	800274a <HAL_ADC_ConfigChannel+0x572>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800272c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e003      	b.n	800273e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	ea42 0103 	orr.w	r1, r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x598>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	3301      	adds	r3, #1
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	e018      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x5ca>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a2:	430b      	orrs	r3, r1
 80027a4:	e081      	b.n	80028aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x5ea>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	3301      	adds	r3, #1
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c0:	e015      	b.n	80027ee <HAL_ADC_ConfigChannel+0x616>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	069b      	lsls	r3, r3, #26
 80027ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_ADC_ConfigChannel+0x636>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	3301      	adds	r3, #1
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	e017      	b.n	800283e <HAL_ADC_ConfigChannel+0x666>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	61fb      	str	r3, [r7, #28]
  return result;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e003      	b.n	8002832 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	ea42 0103 	orr.w	r1, r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_ADC_ConfigChannel+0x692>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	3301      	adds	r3, #1
 8002856:	f003 021f 	and.w	r2, r3, #31
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	3b1e      	subs	r3, #30
 8002862:	051b      	lsls	r3, r3, #20
 8002864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002868:	e01e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x6d0>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	613b      	str	r3, [r7, #16]
  return result;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e006      	b.n	8002894 <HAL_ADC_ConfigChannel+0x6bc>
 8002886:	bf00      	nop
 8002888:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	3b1e      	subs	r3, #30
 80028a2:	051b      	lsls	r3, r3, #20
 80028a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a8:	430b      	orrs	r3, r1
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	6892      	ldr	r2, [r2, #8]
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe ff7e 	bl	80017b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d06c      	beq.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c0:	483c      	ldr	r0, [pc, #240]	; (80029b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80028c2:	f7fe fead 	bl	8001620 <LL_ADC_GetCommonPathInternalCh>
 80028c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d127      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d121      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a35      	ldr	r2, [pc, #212]	; (80029bc <HAL_ADC_ConfigChannel+0x7e4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d157      	bne.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028f2:	4619      	mov	r1, r3
 80028f4:	482f      	ldr	r0, [pc, #188]	; (80029b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80028f6:	f7fe fe80 	bl	80015fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_ADC_ConfigChannel+0x7e8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	4a30      	ldr	r2, [pc, #192]	; (80029c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002914:	e002      	b.n	800291c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002922:	e03a      	b.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d113      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x77e>
 800292e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d12a      	bne.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294c:	4619      	mov	r1, r3
 800294e:	4819      	ldr	r0, [pc, #100]	; (80029b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002950:	f7fe fe53 	bl	80015fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002954:	e021      	b.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_ADC_ConfigChannel+0x7f4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d11c      	bne.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d116      	bne.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a12      	ldr	r2, [pc, #72]	; (80029bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d111      	bne.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800297a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800297e:	4619      	mov	r1, r3
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002982:	f7fe fe3a 	bl	80015fa <LL_ADC_SetCommonPathInternalCh>
 8002986:	e008      	b.n	800299a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80029a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	37d8      	adds	r7, #216	; 0xd8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	80080000 	.word	0x80080000
 80029b4:	50040300 	.word	0x50040300
 80029b8:	c7520000 	.word	0xc7520000
 80029bc:	50040000 	.word	0x50040000
 80029c0:	20000000 	.word	0x20000000
 80029c4:	053e2d63 	.word	0x053e2d63
 80029c8:	cb840000 	.word	0xcb840000
 80029cc:	80000001 	.word	0x80000001

080029d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe ff97 	bl	8001914 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d169      	bne.n	8002ac0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <ADC_Enable+0xfc>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e055      	b.n	8002ac2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe ff66 	bl	80018ec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a20:	482b      	ldr	r0, [pc, #172]	; (8002ad0 <ADC_Enable+0x100>)
 8002a22:	f7fe fdfd 	bl	8001620 <LL_ADC_GetCommonPathInternalCh>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <ADC_Enable+0x104>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <ADC_Enable+0x108>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a4a:	e002      	b.n	8002a52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fd8c 	bl	8001574 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a5e:	e028      	b.n	8002ab2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe ff55 	bl	8001914 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe ff39 	bl	80018ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a7a:	f7fe fd7b 	bl	8001574 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d914      	bls.n	8002ab2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d00d      	beq.n	8002ab2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d1cf      	bne.n	8002a60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	8000003f 	.word	0x8000003f
 8002ad0:	50040300 	.word	0x50040300
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	053e2d63 	.word	0x053e2d63

08002adc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0ed      	b.n	8002d2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe f9aa 	bl	8000eb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b74:	f7fe fcfe 	bl	8001574 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b7a:	e012      	b.n	8002ba2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b7c:	f7fe fcfa 	bl	8001574 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b0a      	cmp	r3, #10
 8002b88:	d90b      	bls.n	8002ba2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2205      	movs	r2, #5
 8002b9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0c5      	b.n	8002d2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0e5      	beq.n	8002b7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0202 	bic.w	r2, r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc0:	f7fe fcd8 	bl	8001574 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bc6:	e012      	b.n	8002bee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc8:	f7fe fcd4 	bl	8001574 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d90b      	bls.n	8002bee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2205      	movs	r2, #5
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09f      	b.n	8002d2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e5      	bne.n	8002bc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7e1b      	ldrb	r3, [r3, #24]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d108      	bne.n	8002c16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e5b      	ldrb	r3, [r3, #25]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e007      	b.n	8002c50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e9b      	ldrb	r3, [r3, #26]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d108      	bne.n	8002c6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e007      	b.n	8002c7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0220 	bic.w	r2, r2, #32
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7edb      	ldrb	r3, [r3, #27]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0210 	bic.w	r2, r2, #16
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e007      	b.n	8002ca4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0210 	orr.w	r2, r2, #16
 8002ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7f1b      	ldrb	r3, [r3, #28]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d108      	bne.n	8002cbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0208 	orr.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0208 	bic.w	r2, r2, #8
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7f5b      	ldrb	r3, [r3, #29]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0204 	orr.w	r2, r2, #4
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e007      	b.n	8002cf8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0204 	bic.w	r2, r2, #4
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	ea42 0103 	orr.w	r1, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	; (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff4c 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eba:	f7ff ff61 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002ebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6978      	ldr	r0, [r7, #20]
 8002ec6:	f7ff ffb1 	bl	8002e2c <NVIC_EncodePriority>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff80 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff54 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e08d      	b.n	800302a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_DMA_Init+0x138>)
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d80f      	bhi.n	8002f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b45      	ldr	r3, [pc, #276]	; (8003038 <HAL_DMA_Init+0x13c>)
 8002f22:	4413      	add	r3, r2
 8002f24:	4a45      	ldr	r2, [pc, #276]	; (800303c <HAL_DMA_Init+0x140>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	009a      	lsls	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a42      	ldr	r2, [pc, #264]	; (8003040 <HAL_DMA_Init+0x144>)
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
 8002f38:	e00e      	b.n	8002f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_DMA_Init+0x148>)
 8002f42:	4413      	add	r3, r2
 8002f44:	4a3d      	ldr	r2, [pc, #244]	; (800303c <HAL_DMA_Init+0x140>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <HAL_DMA_Init+0x14c>)
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f8fe 	bl	80031ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb8:	d102      	bne.n	8002fc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fd4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_DMA_Init+0x104>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d80c      	bhi.n	8003000 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f91e 	bl	8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	e008      	b.n	8003012 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40020407 	.word	0x40020407
 8003038:	bffdfff8 	.word	0xbffdfff8
 800303c:	cccccccd 	.word	0xcccccccd
 8003040:	40020000 	.word	0x40020000
 8003044:	bffdfbf8 	.word	0xbffdfbf8
 8003048:	40020400 	.word	0x40020400

0800304c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f003 031c 	and.w	r3, r3, #28
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d026      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x7a>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d021      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f003 021c 	and.w	r2, r3, #28
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2104      	movs	r1, #4
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d071      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80030c4:	e06c      	b.n	80031a0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f003 031c 	and.w	r3, r3, #28
 80030ce:	2202      	movs	r2, #2
 80030d0:	409a      	lsls	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d02e      	beq.n	8003138 <HAL_DMA_IRQHandler+0xec>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d029      	beq.n	8003138 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 020a 	bic.w	r2, r2, #10
 8003100:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f003 021c 	and.w	r2, r3, #28
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2102      	movs	r1, #2
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d038      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003136:	e033      	b.n	80031a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f003 031c 	and.w	r3, r3, #28
 8003140:	2208      	movs	r2, #8
 8003142:	409a      	lsls	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02a      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x156>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d025      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 020e 	bic.w	r2, r2, #14
 8003164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f003 021c 	and.w	r2, r3, #28
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f202 	lsl.w	r2, r1, r2
 8003178:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
}
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d80a      	bhi.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6493      	str	r3, [r2, #72]	; 0x48
 80031d4:	e007      	b.n	80031e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031e0:	4413      	add	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	3b08      	subs	r3, #8
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40020407 	.word	0x40020407
 800321c:	4002081c 	.word	0x4002081c
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	40020880 	.word	0x40020880

08003228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a08      	ldr	r2, [pc, #32]	; (800326c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800324a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3b01      	subs	r3, #1
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	1000823f 	.word	0x1000823f
 800326c:	40020940 	.word	0x40020940

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327e:	e166      	b.n	800354e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8158 	beq.w	8003548 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d005      	beq.n	80032b0 <HAL_GPIO_Init+0x40>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d130      	bne.n	8003312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e6:	2201      	movs	r2, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 0201 	and.w	r2, r3, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b03      	cmp	r3, #3
 800331c:	d017      	beq.n	800334e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d123      	bne.n	80033a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	220f      	movs	r2, #15
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	6939      	ldr	r1, [r7, #16]
 800339e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80b2 	beq.w	8003548 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_GPIO_Init+0x2fc>)
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	4a60      	ldr	r2, [pc, #384]	; (800356c <HAL_GPIO_Init+0x2fc>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6613      	str	r3, [r2, #96]	; 0x60
 80033f0:	4b5e      	ldr	r3, [pc, #376]	; (800356c <HAL_GPIO_Init+0x2fc>)
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033fc:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_GPIO_Init+0x300>)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	220f      	movs	r2, #15
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003426:	d02b      	beq.n	8003480 <HAL_GPIO_Init+0x210>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a52      	ldr	r2, [pc, #328]	; (8003574 <HAL_GPIO_Init+0x304>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d025      	beq.n	800347c <HAL_GPIO_Init+0x20c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a51      	ldr	r2, [pc, #324]	; (8003578 <HAL_GPIO_Init+0x308>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01f      	beq.n	8003478 <HAL_GPIO_Init+0x208>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a50      	ldr	r2, [pc, #320]	; (800357c <HAL_GPIO_Init+0x30c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d019      	beq.n	8003474 <HAL_GPIO_Init+0x204>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4f      	ldr	r2, [pc, #316]	; (8003580 <HAL_GPIO_Init+0x310>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_GPIO_Init+0x200>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_GPIO_Init+0x314>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00d      	beq.n	800346c <HAL_GPIO_Init+0x1fc>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_GPIO_Init+0x318>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <HAL_GPIO_Init+0x1f8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a4c      	ldr	r2, [pc, #304]	; (800358c <HAL_GPIO_Init+0x31c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_GPIO_Init+0x1f4>
 8003460:	2307      	movs	r3, #7
 8003462:	e00e      	b.n	8003482 <HAL_GPIO_Init+0x212>
 8003464:	2308      	movs	r3, #8
 8003466:	e00c      	b.n	8003482 <HAL_GPIO_Init+0x212>
 8003468:	2306      	movs	r3, #6
 800346a:	e00a      	b.n	8003482 <HAL_GPIO_Init+0x212>
 800346c:	2305      	movs	r3, #5
 800346e:	e008      	b.n	8003482 <HAL_GPIO_Init+0x212>
 8003470:	2304      	movs	r3, #4
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x212>
 8003474:	2303      	movs	r3, #3
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x212>
 8003478:	2302      	movs	r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x212>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x212>
 8003480:	2300      	movs	r3, #0
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003492:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_GPIO_Init+0x300>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034c4:	4a32      	ldr	r2, [pc, #200]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ee:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034f4:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003518:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_GPIO_Init+0x320>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <HAL_GPIO_Init+0x320>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <HAL_GPIO_Init+0x320>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3301      	adds	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f ae91 	bne.w	8003280 <HAL_GPIO_Init+0x10>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000
 8003574:	48000400 	.word	0x48000400
 8003578:	48000800 	.word	0x48000800
 800357c:	48000c00 	.word	0x48000c00
 8003580:	48001000 	.word	0x48001000
 8003584:	48001400 	.word	0x48001400
 8003588:	48001800 	.word	0x48001800
 800358c:	48001c00 	.word	0x48001c00
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e081      	b.n	800370a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fc90 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2224      	movs	r2, #36	; 0x24
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	e006      	b.n	800367c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800367a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d104      	bne.n	800368e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800369c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69d9      	ldr	r1, [r3, #28]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b20      	cmp	r3, #32
 8003726:	d138      	bne.n	800379a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003732:	2302      	movs	r3, #2
 8003734:	e032      	b.n	800379c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2224      	movs	r2, #36	; 0x24
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003764:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d139      	bne.n	8003832 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e033      	b.n	8003834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	; 0x24
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d102      	bne.n	8003858 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003856:	e00b      	b.n	8003870 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_PWREx_GetVoltageRange+0x3c>)
 800385a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d102      	bne.n	800386e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386c:	e000      	b.n	8003870 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800386e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40007000 	.word	0x40007000

08003880 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d141      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800388e:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d131      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800389c:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a2:	4a46      	ldr	r2, [pc, #280]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ac:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b4:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038bc:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2232      	movs	r2, #50	; 0x32
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d2:	e002      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d102      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f2      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ee:	4b33      	ldr	r3, [pc, #204]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d158      	bne.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e057      	b.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003900:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003906:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003910:	e04d      	b.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003918:	d141      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d131      	bne.n	800398c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392e:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003946:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2232      	movs	r2, #50	; 0x32
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	0c9b      	lsrs	r3, r3, #18
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800395e:	e002      	b.n	8003966 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d102      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f2      	bne.n	8003960 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d112      	bne.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e011      	b.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003992:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800399c:	e007      	b.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039a6:	4a05      	ldr	r2, [pc, #20]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40007000 	.word	0x40007000
 80039c0:	20000000 	.word	0x20000000
 80039c4:	431bde83 	.word	0x431bde83

080039c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d6:	6053      	str	r3, [r2, #4]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f000 bc08 	b.w	800420c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fc:	4b96      	ldr	r3, [pc, #600]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a06:	4b94      	ldr	r3, [pc, #592]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80e4 	beq.w	8003be6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4c>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	f040 808b 	bne.w	8003b42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 8087 	bne.w	8003b42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a34:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_OscConfig+0x64>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e3df      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	4b81      	ldr	r3, [pc, #516]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCC_OscConfig+0x7e>
 8003a5c:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a64:	e005      	b.n	8003a72 <HAL_RCC_OscConfig+0x8a>
 8003a66:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d223      	bcs.n	8003abe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fdfc 	bl	8004678 <RCC_SetFlashLatencyFromMSIRange>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e3c0      	b.n	800420c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a8a:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a72      	ldr	r2, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b70      	ldr	r3, [pc, #448]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	496d      	ldr	r1, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa8:	4b6b      	ldr	r3, [pc, #428]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	4968      	ldr	r1, [pc, #416]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	e025      	b.n	8003b0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003abe:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a65      	ldr	r2, [pc, #404]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4960      	ldr	r1, [pc, #384]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003adc:	4b5e      	ldr	r3, [pc, #376]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	495b      	ldr	r1, [pc, #364]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fdbc 	bl	8004678 <RCC_SetFlashLatencyFromMSIRange>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e380      	b.n	800420c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b0a:	f000 fcc1 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b51      	ldr	r3, [pc, #324]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	4950      	ldr	r1, [pc, #320]	; (8003c5c <HAL_RCC_OscConfig+0x274>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a4e      	ldr	r2, [pc, #312]	; (8003c60 <HAL_RCC_OscConfig+0x278>)
 8003b28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fc00 	bl	8001334 <HAL_InitTick>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d052      	beq.n	8003be4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	e364      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d032      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a42      	ldr	r2, [pc, #264]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b56:	f7fd fd0d 	bl	8001574 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fd09 	bl	8001574 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e34d      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b70:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a35      	ldr	r2, [pc, #212]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4930      	ldr	r1, [pc, #192]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	492b      	ldr	r1, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
 8003bae:	e01a      	b.n	8003be6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bbc:	f7fd fcda 	bl	8001574 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc4:	f7fd fcd6 	bl	8001574 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e31a      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1dc>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d073      	beq.n	8003cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x21c>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d10e      	bne.n	8003c1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d10b      	bne.n	8003c1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d063      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2f0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d15f      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e2f7      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_OscConfig+0x24c>
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e025      	b.n	8003c80 <HAL_RCC_OscConfig+0x298>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c3c:	d114      	bne.n	8003c68 <HAL_RCC_OscConfig+0x280>
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a02      	ldr	r2, [pc, #8]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e013      	b.n	8003c80 <HAL_RCC_OscConfig+0x298>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	0800cee0 	.word	0x0800cee0
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000004 	.word	0x20000004
 8003c68:	4ba0      	ldr	r3, [pc, #640]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a9f      	ldr	r2, [pc, #636]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b9d      	ldr	r3, [pc, #628]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a9c      	ldr	r2, [pc, #624]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fc74 	bl	8001574 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd fc70 	bl	8001574 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e2b4      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca2:	4b92      	ldr	r3, [pc, #584]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2a8>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fc60 	bl	8001574 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fc5c 	bl	8001574 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e2a0      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cca:	4b88      	ldr	r3, [pc, #544]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d0>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d060      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x310>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d119      	bne.n	8003d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d116      	bne.n	8003d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	4b7c      	ldr	r3, [pc, #496]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x328>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e27d      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b76      	ldr	r3, [pc, #472]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	4973      	ldr	r1, [pc, #460]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d24:	e040      	b.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d023      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2e:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6e      	ldr	r2, [pc, #440]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fc1b 	bl	8001574 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fd fc17 	bl	8001574 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e25b      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d54:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	495f      	ldr	r1, [pc, #380]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
 8003d74:	e018      	b.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5c      	ldr	r2, [pc, #368]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fd fbf7 	bl	8001574 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8a:	f7fd fbf3 	bl	8001574 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e237      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fd fbd2 	bl	8001574 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fd fbce 	bl	8001574 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e212      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de6:	4b41      	ldr	r3, [pc, #260]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x3ec>
 8003df4:	e01b      	b.n	8003e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4b3d      	ldr	r3, [pc, #244]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fd fbb5 	bl	8001574 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fd fbb1 	bl	8001574 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1f5      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e20:	4b32      	ldr	r3, [pc, #200]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1ef      	bne.n	8003e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	; 0x58
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d118      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e80:	f7fd fb78 	bl	8001574 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fd fb74 	bl	8001574 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1b8      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d108      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4d8>
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ebe:	e029      	b.n	8003f14 <HAL_RCC_OscConfig+0x52c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d115      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x50c>
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a07      	ldr	r2, [pc, #28]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	4a03      	ldr	r2, [pc, #12]	; (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x52c>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	4b9d      	ldr	r3, [pc, #628]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	4a9c      	ldr	r2, [pc, #624]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f04:	4b99      	ldr	r3, [pc, #612]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	4a98      	ldr	r2, [pc, #608]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d016      	beq.n	8003f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fd fb2a 	bl	8001574 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fd fb26 	bl	8001574 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e168      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	4b8c      	ldr	r3, [pc, #560]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ed      	beq.n	8003f24 <HAL_RCC_OscConfig+0x53c>
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fb13 	bl	8001574 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd fb0f 	bl	8001574 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e151      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f68:	4b80      	ldr	r3, [pc, #512]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ed      	bne.n	8003f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f76:	7ffb      	ldrb	r3, [r7, #31]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b7b      	ldr	r3, [pc, #492]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	4a7a      	ldr	r2, [pc, #488]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d03c      	beq.n	800400e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f9c:	4b73      	ldr	r3, [pc, #460]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa2:	4a72      	ldr	r2, [pc, #456]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fd fae2 	bl	8001574 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb4:	f7fd fade 	bl	8001574 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e122      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fc6:	4b69      	ldr	r3, [pc, #420]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ef      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x5cc>
 8003fd4:	e01b      	b.n	800400e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fdc:	4a63      	ldr	r2, [pc, #396]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fac5 	bl	8001574 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fee:	f7fd fac1 	bl	8001574 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e105      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004000:	4b5a      	ldr	r3, [pc, #360]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8004002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ef      	bne.n	8003fee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80f9 	beq.w	800420a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	2b02      	cmp	r3, #2
 800401e:	f040 80cf 	bne.w	80041c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004022:	4b52      	ldr	r3, [pc, #328]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0203 	and.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d12c      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	3b01      	subs	r3, #1
 8004042:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d123      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d11b      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d113      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	3b01      	subs	r3, #1
 8004076:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d109      	bne.n	8004090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	3b01      	subs	r3, #1
 800408a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d071      	beq.n	8004174 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d068      	beq.n	8004168 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004096:	4b35      	ldr	r3, [pc, #212]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040a2:	4b32      	ldr	r3, [pc, #200]	; (800416c <HAL_RCC_OscConfig+0x784>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0ac      	b.n	800420c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_RCC_OscConfig+0x784>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2d      	ldr	r2, [pc, #180]	; (800416c <HAL_RCC_OscConfig+0x784>)
 80040b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040be:	f7fd fa59 	bl	8001574 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fd fa55 	bl	8001574 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e099      	b.n	800420c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_RCC_OscConfig+0x784>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e4:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_RCC_OscConfig+0x784>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCC_OscConfig+0x788>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040f4:	3a01      	subs	r2, #1
 80040f6:	0112      	lsls	r2, r2, #4
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040fe:	0212      	lsls	r2, r2, #8
 8004100:	4311      	orrs	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0552      	lsls	r2, r2, #21
 800410c:	4311      	orrs	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004112:	0852      	lsrs	r2, r2, #1
 8004114:	3a01      	subs	r2, #1
 8004116:	0652      	lsls	r2, r2, #25
 8004118:	4311      	orrs	r1, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800411e:	06d2      	lsls	r2, r2, #27
 8004120:	430a      	orrs	r2, r1
 8004122:	4912      	ldr	r1, [pc, #72]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8004124:	4313      	orrs	r3, r2
 8004126:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_RCC_OscConfig+0x784>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0f      	ldr	r2, [pc, #60]	; (800416c <HAL_RCC_OscConfig+0x784>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004134:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_RCC_OscConfig+0x784>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a0c      	ldr	r2, [pc, #48]	; (800416c <HAL_RCC_OscConfig+0x784>)
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004140:	f7fd fa18 	bl	8001574 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004148:	f7fd fa14 	bl	8001574 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e058      	b.n	800420c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <HAL_RCC_OscConfig+0x784>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004166:	e050      	b.n	800420a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e04f      	b.n	800420c <HAL_RCC_OscConfig+0x824>
 800416c:	40021000 	.word	0x40021000
 8004170:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d144      	bne.n	800420a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 8004186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004196:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004198:	f7fd f9ec 	bl	8001574 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd f9e8 	bl	8001574 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e02c      	b.n	800420c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x7b8>
 80041be:	e024      	b.n	800420a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d01f      	beq.n	8004206 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 80041cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd f9cf 	bl	8001574 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041da:	f7fd f9cb 	bl	8001574 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e00f      	b.n	800420c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4905      	ldr	r1, [pc, #20]	; (8004214 <HAL_RCC_OscConfig+0x82c>)
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCC_OscConfig+0x830>)
 8004200:	4013      	ands	r3, r2
 8004202:	60cb      	str	r3, [r1, #12]
 8004204:	e001      	b.n	800420a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	feeefffc 	.word	0xfeeefffc

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e11d      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b90      	ldr	r3, [pc, #576]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b8d      	ldr	r3, [pc, #564]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	498b      	ldr	r1, [pc, #556]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b89      	ldr	r3, [pc, #548]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e105      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b7e      	ldr	r3, [pc, #504]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	497b      	ldr	r1, [pc, #492]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d079      	beq.n	8004392 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d11e      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b75      	ldr	r3, [pc, #468]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0dc      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80042b6:	f000 fa39 	bl	800472c <RCC_GetSysClockFreqFromPLLSource>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a70      	ldr	r2, [pc, #448]	; (8004480 <HAL_RCC_ClockConfig+0x264>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d946      	bls.n	8004350 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042c2:	4b6e      	ldr	r3, [pc, #440]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d140      	bne.n	8004350 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ce:	4b6b      	ldr	r3, [pc, #428]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d6:	4a69      	ldr	r2, [pc, #420]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e035      	b.n	8004350 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ec:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d115      	bne.n	8004324 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b9      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004304:	4b5d      	ldr	r3, [pc, #372]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0ad      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0a5      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004324:	f000 f8b4 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004328:	4603      	mov	r3, r0
 800432a:	4a55      	ldr	r2, [pc, #340]	; (8004480 <HAL_RCC_ClockConfig+0x264>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d90f      	bls.n	8004350 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004330:	4b52      	ldr	r3, [pc, #328]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004344:	4a4d      	ldr	r2, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004350:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 0203 	bic.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4947      	ldr	r1, [pc, #284]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004362:	f7fd f907 	bl	8001574 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004368:	e00a      	b.n	8004380 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436a:	f7fd f903 	bl	8001574 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e077      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004380:	4b3e      	ldr	r3, [pc, #248]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 020c 	and.w	r2, r3, #12
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	429a      	cmp	r2, r3
 8004390:	d1eb      	bne.n	800436a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d105      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004398:	4b38      	ldr	r3, [pc, #224]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800439e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b31      	ldr	r3, [pc, #196]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043bc:	429a      	cmp	r2, r3
 80043be:	d208      	bcs.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	492b      	ldr	r1, [pc, #172]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d210      	bcs.n	8004402 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 020f 	bic.w	r2, r3, #15
 80043e8:	4923      	ldr	r1, [pc, #140]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <HAL_RCC_ClockConfig+0x25c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e036      	b.n	8004470 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4918      	ldr	r1, [pc, #96]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442c:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4910      	ldr	r1, [pc, #64]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004440:	f000 f826 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_RCC_ClockConfig+0x260>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	490c      	ldr	r1, [pc, #48]	; (8004484 <HAL_RCC_ClockConfig+0x268>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x26c>)
 800445e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_ClockConfig+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc ff65 	bl	8001334 <HAL_InitTick>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]

  return status;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40022000 	.word	0x40022000
 800447c:	40021000 	.word	0x40021000
 8004480:	04c4b400 	.word	0x04c4b400
 8004484:	0800cee0 	.word	0x0800cee0
 8004488:	20000000 	.word	0x20000000
 800448c:	20000004 	.word	0x20000004

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449e:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x34>
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d121      	bne.n	8004502 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d11e      	bne.n	8004502 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044c4:	4b34      	ldr	r3, [pc, #208]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	e005      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ec:	4a2b      	ldr	r2, [pc, #172]	; (800459c <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10d      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d102      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004508:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e004      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d101      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004514:	4b22      	ldr	r3, [pc, #136]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004516:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b0c      	cmp	r3, #12
 800451c:	d134      	bne.n	8004588 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d003      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0xa6>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d003      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0xac>
 8004534:	e005      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004538:	617b      	str	r3, [r7, #20]
      break;
 800453a:	e005      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800453c:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800453e:	617b      	str	r3, [r7, #20]
      break;
 8004540:	e002      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	617b      	str	r3, [r7, #20]
      break;
 8004546:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004548:	4b13      	ldr	r3, [pc, #76]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	3301      	adds	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	0a1b      	lsrs	r3, r3, #8
 800455c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	fb03 f202 	mul.w	r2, r3, r2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_RCC_GetSysClockFreq+0x108>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	0e5b      	lsrs	r3, r3, #25
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	3301      	adds	r3, #1
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004588:	69bb      	ldr	r3, [r7, #24]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	; 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	0800cef8 	.word	0x0800cef8
 80045a0:	00f42400 	.word	0x00f42400

080045a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4904      	ldr	r1, [pc, #16]	; (80045e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	0800cef0 	.word	0x0800cef0

080045e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045ec:	f7ff ffda 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0adb      	lsrs	r3, r3, #11
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800cef0 	.word	0x0800cef0

08004614 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	220f      	movs	r2, #15
 8004622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_RCC_GetClockConfig+0x60>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	40022000 	.word	0x40022000

08004678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004690:	f7ff f8d6 	bl	8003840 <HAL_PWREx_GetVoltageRange>
 8004694:	6178      	str	r0, [r7, #20]
 8004696:	e014      	b.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b22      	ldr	r3, [pc, #136]	; (8004724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	4a21      	ldr	r2, [pc, #132]	; (8004724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	6593      	str	r3, [r2, #88]	; 0x58
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046b0:	f7ff f8c6 	bl	8003840 <HAL_PWREx_GetVoltageRange>
 80046b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d10b      	bne.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d913      	bls.n	80046f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2ba0      	cmp	r3, #160	; 0xa0
 80046d4:	d902      	bls.n	80046dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046d6:	2302      	movs	r3, #2
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e00d      	b.n	80046f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046dc:	2301      	movs	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e00a      	b.n	80046f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b7f      	cmp	r3, #127	; 0x7f
 80046e6:	d902      	bls.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80046e8:	2302      	movs	r3, #2
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e004      	b.n	80046f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b70      	cmp	r3, #112	; 0x70
 80046f2:	d101      	bne.n	80046f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046f4:	2301      	movs	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f023 020f 	bic.w	r2, r3, #15
 8004700:	4909      	ldr	r1, [pc, #36]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004708:	4b07      	ldr	r3, [pc, #28]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d001      	beq.n	800471a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	40022000 	.word	0x40022000

0800472c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d00b      	beq.n	800475a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d825      	bhi.n	8004794 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d008      	beq.n	8004760 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d11f      	bne.n	8004794 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004756:	613b      	str	r3, [r7, #16]
    break;
 8004758:	e01f      	b.n	800479a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800475a:	4b24      	ldr	r3, [pc, #144]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800475c:	613b      	str	r3, [r7, #16]
    break;
 800475e:	e01c      	b.n	800479a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e005      	b.n	8004788 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004788:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004790:	613b      	str	r3, [r7, #16]
    break;
 8004792:	e002      	b.n	800479a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
    break;
 8004798:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	3301      	adds	r3, #1
 80047a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	fb03 f202 	mul.w	r2, r3, r2
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0e5b      	lsrs	r3, r3, #25
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	3301      	adds	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80047da:	683b      	ldr	r3, [r7, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40021000 	.word	0x40021000
 80047ec:	00f42400 	.word	0x00f42400
 80047f0:	0800cef8 	.word	0x0800cef8

080047f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047fc:	2300      	movs	r3, #0
 80047fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004800:	2300      	movs	r3, #0
 8004802:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480c:	2b00      	cmp	r3, #0
 800480e:	d040      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d02a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d825      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800481c:	2b60      	cmp	r3, #96	; 0x60
 800481e:	d026      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004820:	2b60      	cmp	r3, #96	; 0x60
 8004822:	d821      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d006      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d81d      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d010      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004834:	e018      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004836:	4b89      	ldr	r3, [pc, #548]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4a88      	ldr	r2, [pc, #544]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004842:	e015      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f001 fa82 	bl	8005d54 <RCCEx_PLLSAI1_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004854:	e00c      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3320      	adds	r3, #32
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f001 fb6d 	bl	8005f3c <RCCEx_PLLSAI2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	74fb      	strb	r3, [r7, #19]
      break;
 800486c:	e000      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800486e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004876:	4b79      	ldr	r3, [pc, #484]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800487c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004884:	4975      	ldr	r1, [pc, #468]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800488c:	e001      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d047      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d030      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	d82a      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80048ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b2:	d02a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80048b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b8:	d824      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80048ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d81e      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d010      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048d0:	e018      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4a61      	ldr	r2, [pc, #388]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048de:	e015      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fa34 	bl	8005d54 <RCCEx_PLLSAI1_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048f0:	e00c      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3320      	adds	r3, #32
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fb1f 	bl	8005f3c <RCCEx_PLLSAI2_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004902:	e003      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	74fb      	strb	r3, [r7, #19]
      break;
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800490a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490c:	7cfb      	ldrb	r3, [r7, #19]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004912:	4b52      	ldr	r3, [pc, #328]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	494e      	ldr	r1, [pc, #312]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004928:	e001      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 809f 	beq.w	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493c:	2300      	movs	r3, #0
 800493e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004940:	4b46      	ldr	r3, [pc, #280]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004950:	2300      	movs	r3, #0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6593      	str	r3, [r2, #88]	; 0x58
 8004962:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3a      	ldr	r2, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800497e:	f7fc fdf9 	bl	8001574 <HAL_GetTick>
 8004982:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004984:	e009      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fc fdf5 	bl	8001574 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d902      	bls.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	74fb      	strb	r3, [r7, #19]
        break;
 8004998:	e005      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800499a:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ef      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d15b      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01f      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d019      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d6:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f6:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d016      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fc fdb4 	bl	8001574 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fc fdb0 	bl	8001574 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d902      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	74fb      	strb	r3, [r7, #19]
            break;
 8004a26:	e006      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ec      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	74bb      	strb	r3, [r7, #18]
 8004a5a:	e005      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a68:	7c7b      	ldrb	r3, [r7, #17]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d105      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4ba0      	ldr	r3, [pc, #640]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4a9f      	ldr	r2, [pc, #636]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a86:	4b9a      	ldr	r3, [pc, #616]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f023 0203 	bic.w	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	4996      	ldr	r1, [pc, #600]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa8:	4b91      	ldr	r3, [pc, #580]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	f023 020c 	bic.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	498e      	ldr	r1, [pc, #568]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aca:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	4985      	ldr	r1, [pc, #532]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aec:	4b80      	ldr	r3, [pc, #512]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afa:	497d      	ldr	r1, [pc, #500]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b0e:	4b78      	ldr	r3, [pc, #480]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	4974      	ldr	r1, [pc, #464]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3e:	496c      	ldr	r1, [pc, #432]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b52:	4b67      	ldr	r3, [pc, #412]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b60:	4963      	ldr	r1, [pc, #396]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b74:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b82:	495b      	ldr	r1, [pc, #364]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b96:	4b56      	ldr	r3, [pc, #344]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	4952      	ldr	r1, [pc, #328]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	494a      	ldr	r1, [pc, #296]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bda:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	4941      	ldr	r1, [pc, #260]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	4939      	ldr	r1, [pc, #228]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2c:	4930      	ldr	r1, [pc, #192]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3e:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c48:	60d3      	str	r3, [r2, #12]
 8004c4a:	e011      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f879 	bl	8005d54 <RCCEx_PLLSAI1_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d04d      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c84:	d108      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c96:	e012      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9e:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb6:	490e      	ldr	r1, [pc, #56]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd2:	60d3      	str	r3, [r2, #12]
 8004cd4:	e020      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a02      	ldr	r2, [pc, #8]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	60d3      	str	r3, [r2, #12]
 8004cec:	e014      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f825 	bl	8005d54 <RCCEx_PLLSAI1_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d028      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d24:	4b7a      	ldr	r3, [pc, #488]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d32:	4977      	ldr	r1, [pc, #476]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d42:	d106      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d44:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4a71      	ldr	r2, [pc, #452]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d4e:	60d3      	str	r3, [r2, #12]
 8004d50:	e011      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d5a:	d10c      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fff6 	bl	8005d54 <RCCEx_PLLSAI1_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d6c:	7cfb      	ldrb	r3, [r7, #19]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004d72:	7cfb      	ldrb	r3, [r7, #19]
 8004d74:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d82:	4b63      	ldr	r3, [pc, #396]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	495f      	ldr	r1, [pc, #380]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	2102      	movs	r1, #2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 ffd1 	bl	8005d54 <RCCEx_PLLSAI1_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00b      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dcc:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd2:	f023 0204 	bic.w	r2, r3, #4
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ddc:	494c      	ldr	r1, [pc, #304]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004df0:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df6:	f023 0218 	bic.w	r2, r3, #24
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	4943      	ldr	r1, [pc, #268]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d035      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e14:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e20:	f7fc fba8 	bl	8001574 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e26:	e009      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e28:	f7fc fba4 	bl	8001574 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d902      	bls.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	74fb      	strb	r3, [r7, #19]
        break;
 8004e3a:	e005      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e3c:	4b34      	ldr	r3, [pc, #208]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ef      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004e4e:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5e:	492c      	ldr	r1, [pc, #176]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3320      	adds	r3, #32
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 f865 	bl	8005f3c <RCCEx_PLLSAI2_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01e      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004e8c:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	491c      	ldr	r1, [pc, #112]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	d10c      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 f840 	bl	8005f3c <RCCEx_PLLSAI2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d017      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	490a      	ldr	r1, [pc, #40]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f04:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f06:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000

08004f14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f26:	d13e      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004f28:	4bb6      	ldr	r3, [pc, #728]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3a:	d028      	beq.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f42:	f200 86f2 	bhi.w	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f54:	d00e      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004f56:	f000 bee8 	b.w	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f5a:	4baa      	ldr	r3, [pc, #680]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	f040 86e2 	bne.w	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	61fb      	str	r3, [r7, #28]
      break;
 8004f70:	f000 bedd 	b.w	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004f74:	4ba3      	ldr	r3, [pc, #652]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	f040 86d7 	bne.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8004f84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004f88:	61fb      	str	r3, [r7, #28]
      break;
 8004f8a:	f000 bed2 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f8e:	4b9d      	ldr	r3, [pc, #628]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f9a:	f040 86cc 	bne.w	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8004f9e:	4b9a      	ldr	r3, [pc, #616]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004fa0:	61fb      	str	r3, [r7, #28]
      break;
 8004fa2:	f000 bec8 	b.w	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa6:	4b97      	ldr	r3, [pc, #604]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d036      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d840      	bhi.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d003      	beq.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d020      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004fc8:	e039      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004fca:	4b8e      	ldr	r3, [pc, #568]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d116      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004fd6:	4b8b      	ldr	r3, [pc, #556]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004fe2:	4b88      	ldr	r3, [pc, #544]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	e005      	b.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004fee:	4b85      	ldr	r3, [pc, #532]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	4a84      	ldr	r2, [pc, #528]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005000:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005002:	e01f      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	61bb      	str	r3, [r7, #24]
      break;
 8005008:	e01c      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800500a:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d102      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005018:	4b7d      	ldr	r3, [pc, #500]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800501a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800501c:	e012      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
      break;
 8005022:	e00f      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005024:	4b77      	ldr	r3, [pc, #476]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005030:	d102      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005032:	4b77      	ldr	r3, [pc, #476]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005036:	e005      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
      break;
 800503c:	e002      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
      break;
 8005042:	bf00      	nop
    }

    switch(PeriphClk)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800504a:	f000 8604 	beq.w	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005054:	f200 8671 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505e:	f000 8467 	beq.w	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005068:	f200 8667 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005072:	f000 852f 	beq.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507c:	f200 865d 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005086:	f000 8185 	beq.w	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005090:	f200 8653 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800509a:	f000 80cb 	beq.w	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050a4:	f200 8649 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	f000 842e 	beq.w	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	f200 863f 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c2:	f000 83e2 	beq.w	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050cc:	f200 8635 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d6:	f000 80ad 	beq.w	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e0:	f200 862b 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	f000 809b 	beq.w	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f4:	f200 8621 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fe:	f000 8089 	beq.w	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	f200 8617 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	f000 8552 	beq.w	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	f200 860d 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005126:	f000 84fe 	beq.w	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005130:	f200 8603 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	f000 849f 	beq.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005144:	f200 85f9 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	f000 846a 	beq.w	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b80      	cmp	r3, #128	; 0x80
 8005154:	f200 85f1 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b20      	cmp	r3, #32
 800515c:	d84c      	bhi.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 85ea 	beq.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3b01      	subs	r3, #1
 800516a:	2b1f      	cmp	r3, #31
 800516c:	f200 85e5 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	08005589 	.word	0x08005589
 800517c:	080055f7 	.word	0x080055f7
 8005180:	08005d3b 	.word	0x08005d3b
 8005184:	0800568b 	.word	0x0800568b
 8005188:	08005d3b 	.word	0x08005d3b
 800518c:	08005d3b 	.word	0x08005d3b
 8005190:	08005d3b 	.word	0x08005d3b
 8005194:	08005703 	.word	0x08005703
 8005198:	08005d3b 	.word	0x08005d3b
 800519c:	08005d3b 	.word	0x08005d3b
 80051a0:	08005d3b 	.word	0x08005d3b
 80051a4:	08005d3b 	.word	0x08005d3b
 80051a8:	08005d3b 	.word	0x08005d3b
 80051ac:	08005d3b 	.word	0x08005d3b
 80051b0:	08005d3b 	.word	0x08005d3b
 80051b4:	08005787 	.word	0x08005787
 80051b8:	08005d3b 	.word	0x08005d3b
 80051bc:	08005d3b 	.word	0x08005d3b
 80051c0:	08005d3b 	.word	0x08005d3b
 80051c4:	08005d3b 	.word	0x08005d3b
 80051c8:	08005d3b 	.word	0x08005d3b
 80051cc:	08005d3b 	.word	0x08005d3b
 80051d0:	08005d3b 	.word	0x08005d3b
 80051d4:	08005d3b 	.word	0x08005d3b
 80051d8:	08005d3b 	.word	0x08005d3b
 80051dc:	08005d3b 	.word	0x08005d3b
 80051e0:	08005d3b 	.word	0x08005d3b
 80051e4:	08005d3b 	.word	0x08005d3b
 80051e8:	08005d3b 	.word	0x08005d3b
 80051ec:	08005d3b 	.word	0x08005d3b
 80051f0:	08005d3b 	.word	0x08005d3b
 80051f4:	08005809 	.word	0x08005809
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	f000 83e6 	beq.w	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005200:	f000 bd9b 	b.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005204:	40021000 	.word	0x40021000
 8005208:	0007a120 	.word	0x0007a120
 800520c:	0800cef8 	.word	0x0800cef8
 8005210:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005214:	69b9      	ldr	r1, [r7, #24]
 8005216:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800521a:	f000 ff83 	bl	8006124 <RCCEx_GetSAIxPeriphCLKFreq>
 800521e:	61f8      	str	r0, [r7, #28]
      break;
 8005220:	f000 bd8e 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800522a:	f000 ff7b 	bl	8006124 <RCCEx_GetSAIxPeriphCLKFreq>
 800522e:	61f8      	str	r0, [r7, #28]
      break;
 8005230:	f000 bd86 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005234:	4b9a      	ldr	r3, [pc, #616]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800524e:	f200 8092 	bhi.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005258:	d029      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005260:	f200 8089 	bhi.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d07b      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005270:	d04a      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8005272:	e080      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005274:	4b8a      	ldr	r3, [pc, #552]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d17d      	bne.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005280:	4b87      	ldr	r3, [pc, #540]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 800528c:	4b84      	ldr	r3, [pc, #528]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	e005      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005298:	4b81      	ldr	r3, [pc, #516]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	4a7f      	ldr	r2, [pc, #508]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80052a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052aa:	61fb      	str	r3, [r7, #28]
          break;
 80052ac:	e066      	b.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80052ae:	4b7c      	ldr	r3, [pc, #496]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ba:	d162      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80052bc:	4b78      	ldr	r3, [pc, #480]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c8:	d15b      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80052ca:	4b75      	ldr	r3, [pc, #468]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	fb03 f202 	mul.w	r2, r3, r2
 80052de:	4b70      	ldr	r3, [pc, #448]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	3301      	adds	r3, #1
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80052f0:	4b6b      	ldr	r3, [pc, #428]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	0d5b      	lsrs	r3, r3, #21
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	3301      	adds	r3, #1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	61fb      	str	r3, [r7, #28]
          break;
 8005306:	e03c      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005308:	4b65      	ldr	r3, [pc, #404]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005314:	d138      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005316:	4b62      	ldr	r3, [pc, #392]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005322:	d131      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005324:	4b5e      	ldr	r3, [pc, #376]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	fb03 f202 	mul.w	r2, r3, r2
 8005338:	4b59      	ldr	r3, [pc, #356]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	3301      	adds	r3, #1
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800534a:	4b55      	ldr	r3, [pc, #340]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	0d5b      	lsrs	r3, r3, #21
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	3301      	adds	r3, #1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	61fb      	str	r3, [r7, #28]
          break;
 8005360:	e012      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005362:	4b4f      	ldr	r3, [pc, #316]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d10e      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005370:	4b4d      	ldr	r3, [pc, #308]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005372:	61fb      	str	r3, [r7, #28]
          break;
 8005374:	e00b      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8005376:	bf00      	nop
 8005378:	f000 bce2 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800537c:	bf00      	nop
 800537e:	f000 bcdf 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005382:	bf00      	nop
 8005384:	f000 bcdc 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005388:	bf00      	nop
 800538a:	f000 bcd9 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800538e:	bf00      	nop
        break;
 8005390:	f000 bcd6 	b.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005394:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800539a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a2:	d13d      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b0:	f040 84c5 	bne.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80053b4:	4b3a      	ldr	r3, [pc, #232]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	f040 84bd 	bne.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80053c4:	4b36      	ldr	r3, [pc, #216]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ce:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	fb03 f202 	mul.w	r2, r3, r2
 80053d8:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	3301      	adds	r3, #1
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80053ea:	4b2d      	ldr	r3, [pc, #180]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0edb      	lsrs	r3, r3, #27
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80053fc:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005408:	2311      	movs	r3, #17
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e001      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800540e:	2307      	movs	r3, #7
 8005410:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]
      break;
 800541c:	f000 bc8f 	b.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005420:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005432:	d016      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800543a:	f200 809b 	bhi.w	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005444:	d032      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800544c:	f200 8092 	bhi.w	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8084 	beq.w	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800545e:	d052      	beq.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8005460:	e088      	b.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005462:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b02      	cmp	r3, #2
 800546c:	f040 8084 	bne.w	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	e005      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549a:	61fb      	str	r3, [r7, #28]
          break;
 800549c:	e06c      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	0800cef8 	.word	0x0800cef8
 80054a8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054ac:	4ba5      	ldr	r3, [pc, #660]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b8:	d160      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80054ba:	4ba2      	ldr	r3, [pc, #648]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c6:	d159      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054c8:	4b9e      	ldr	r3, [pc, #632]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	fb03 f202 	mul.w	r2, r3, r2
 80054dc:	4b99      	ldr	r3, [pc, #612]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	3301      	adds	r3, #1
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80054ee:	4b95      	ldr	r3, [pc, #596]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	0d5b      	lsrs	r3, r3, #21
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	3301      	adds	r3, #1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	61fb      	str	r3, [r7, #28]
          break;
 8005504:	e03a      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005506:	4b8f      	ldr	r3, [pc, #572]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d135      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005514:	4b8b      	ldr	r3, [pc, #556]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d12e      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005522:	4b88      	ldr	r3, [pc, #544]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	fb03 f202 	mul.w	r2, r3, r2
 8005536:	4b83      	ldr	r3, [pc, #524]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	3301      	adds	r3, #1
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
 8005546:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005548:	4b7e      	ldr	r3, [pc, #504]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	0d5b      	lsrs	r3, r3, #21
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	3301      	adds	r3, #1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	61fb      	str	r3, [r7, #28]
          break;
 800555e:	e00f      	b.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005560:	4b78      	ldr	r3, [pc, #480]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b02      	cmp	r3, #2
 800556c:	d10a      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800556e:	4b76      	ldr	r3, [pc, #472]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005570:	61fb      	str	r3, [r7, #28]
          break;
 8005572:	e007      	b.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005574:	bf00      	nop
 8005576:	e3e2      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005578:	bf00      	nop
 800557a:	e3e0      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800557c:	bf00      	nop
 800557e:	e3de      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005580:	bf00      	nop
 8005582:	e3dc      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005584:	bf00      	nop
      break;
 8005586:	e3da      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005588:	4b6e      	ldr	r3, [pc, #440]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d827      	bhi.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055b9 	.word	0x080055b9
 80055a8:	080055c1 	.word	0x080055c1
 80055ac:	080055d5 	.word	0x080055d5
          frequency = HAL_RCC_GetPCLK2Freq();
 80055b0:	f7ff f81a 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 80055b4:	61f8      	str	r0, [r7, #28]
          break;
 80055b6:	e01d      	b.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80055b8:	f7fe ff6a 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80055bc:	61f8      	str	r0, [r7, #28]
          break;
 80055be:	e019      	b.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055c0:	4b60      	ldr	r3, [pc, #384]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055cc:	d10f      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80055ce:	4b5f      	ldr	r3, [pc, #380]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80055d0:	61fb      	str	r3, [r7, #28]
          break;
 80055d2:	e00c      	b.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055d4:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d107      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80055e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e6:	61fb      	str	r3, [r7, #28]
          break;
 80055e8:	e003      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80055ea:	bf00      	nop
 80055ec:	e3a8      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80055ee:	bf00      	nop
 80055f0:	e3a6      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80055f2:	bf00      	nop
        break;
 80055f4:	e3a4      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80055f6:	4b53      	ldr	r3, [pc, #332]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d83a      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005608:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005645 	.word	0x08005645
 8005614:	0800567f 	.word	0x0800567f
 8005618:	0800567f 	.word	0x0800567f
 800561c:	0800567f 	.word	0x0800567f
 8005620:	0800564d 	.word	0x0800564d
 8005624:	0800567f 	.word	0x0800567f
 8005628:	0800567f 	.word	0x0800567f
 800562c:	0800567f 	.word	0x0800567f
 8005630:	08005655 	.word	0x08005655
 8005634:	0800567f 	.word	0x0800567f
 8005638:	0800567f 	.word	0x0800567f
 800563c:	0800567f 	.word	0x0800567f
 8005640:	08005669 	.word	0x08005669
          frequency = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fe ffba 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005648:	61f8      	str	r0, [r7, #28]
          break;
 800564a:	e01d      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800564c:	f7fe ff20 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005650:	61f8      	str	r0, [r7, #28]
          break;
 8005652:	e019      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005654:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005660:	d10f      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8005662:	4b3a      	ldr	r3, [pc, #232]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005664:	61fb      	str	r3, [r7, #28]
          break;
 8005666:	e00c      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005668:	4b36      	ldr	r3, [pc, #216]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d107      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567a:	61fb      	str	r3, [r7, #28]
          break;
 800567c:	e003      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800567e:	bf00      	nop
 8005680:	e35e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005682:	bf00      	nop
 8005684:	e35c      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005686:	bf00      	nop
        break;
 8005688:	e35a      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800568a:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d021      	beq.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b30      	cmp	r3, #48	; 0x30
 80056a0:	d829      	bhi.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d011      	beq.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d823      	bhi.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d004      	beq.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80056ba:	e01c      	b.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056bc:	f7fe ff7e 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80056c0:	61f8      	str	r0, [r7, #28]
          break;
 80056c2:	e01d      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80056c4:	f7fe fee4 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80056c8:	61f8      	str	r0, [r7, #28]
          break;
 80056ca:	e019      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d8:	d10f      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80056dc:	61fb      	str	r3, [r7, #28]
          break;
 80056de:	e00c      	b.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056e0:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d107      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80056ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f2:	61fb      	str	r3, [r7, #28]
          break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80056f6:	bf00      	nop
 80056f8:	e322      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80056fa:	bf00      	nop
 80056fc:	e320      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80056fe:	bf00      	nop
        break;
 8005700:	e31e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2bc0      	cmp	r3, #192	; 0xc0
 8005712:	d027      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2bc0      	cmp	r3, #192	; 0xc0
 8005718:	d82f      	bhi.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d017      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d829      	bhi.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d004      	beq.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8005732:	e022      	b.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe ff42 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005738:	61f8      	str	r0, [r7, #28]
          break;
 800573a:	e023      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800573c:	f7fe fea8 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005740:	61f8      	str	r0, [r7, #28]
          break;
 8005742:	e01f      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005744:	40021000 	.word	0x40021000
 8005748:	02dc6c00 	.word	0x02dc6c00
 800574c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005750:	4b9b      	ldr	r3, [pc, #620]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d10f      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800575e:	4b99      	ldr	r3, [pc, #612]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005760:	61fb      	str	r3, [r7, #28]
          break;
 8005762:	e00c      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005764:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d107      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	61fb      	str	r3, [r7, #28]
          break;
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800577a:	bf00      	nop
 800577c:	e2e0      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800577e:	bf00      	nop
 8005780:	e2de      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005782:	bf00      	nop
        break;
 8005784:	e2dc      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005786:	4b8e      	ldr	r3, [pc, #568]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005798:	d025      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a0:	d82c      	bhi.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a8:	d013      	beq.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b0:	d824      	bhi.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057be:	d004      	beq.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80057c0:	e01c      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fe fefb 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80057c6:	61f8      	str	r0, [r7, #28]
          break;
 80057c8:	e01d      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80057ca:	f7fe fe61 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80057ce:	61f8      	str	r0, [r7, #28]
          break;
 80057d0:	e019      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d10f      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80057e0:	4b78      	ldr	r3, [pc, #480]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80057e2:	61fb      	str	r3, [r7, #28]
          break;
 80057e4:	e00c      	b.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057e6:	4b76      	ldr	r3, [pc, #472]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80057f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f8:	61fb      	str	r3, [r7, #28]
          break;
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80057fc:	bf00      	nop
 80057fe:	e29f      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005800:	bf00      	nop
 8005802:	e29d      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005804:	bf00      	nop
        break;
 8005806:	e29b      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005808:	4b6d      	ldr	r3, [pc, #436]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800581a:	d025      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005822:	d82c      	bhi.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582a:	d013      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005832:	d824      	bhi.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d004      	beq.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005842:	e01c      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe feba 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005848:	61f8      	str	r0, [r7, #28]
          break;
 800584a:	e01d      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800584c:	f7fe fe20 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005850:	61f8      	str	r0, [r7, #28]
          break;
 8005852:	e019      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005860:	d10f      	bne.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8005862:	4b58      	ldr	r3, [pc, #352]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005864:	61fb      	str	r3, [r7, #28]
          break;
 8005866:	e00c      	b.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005868:	4b55      	ldr	r3, [pc, #340]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d107      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	61fb      	str	r3, [r7, #28]
          break;
 800587c:	e003      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800587e:	bf00      	nop
 8005880:	e25e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005882:	bf00      	nop
 8005884:	e25c      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005886:	bf00      	nop
        break;
 8005888:	e25a      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800588a:	4b4d      	ldr	r3, [pc, #308]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800589c:	d007      	beq.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058a4:	d12f      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fe fdf3 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80058aa:	61f8      	str	r0, [r7, #28]
          break;
 80058ac:	e02e      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80058ae:	4b44      	ldr	r3, [pc, #272]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ba:	d126      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80058c8:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	fb03 f202 	mul.w	r2, r3, r2
 80058dc:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3301      	adds	r3, #1
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80058ee:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	0e5b      	lsrs	r3, r3, #25
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	3301      	adds	r3, #1
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005902:	61fb      	str	r3, [r7, #28]
          break;
 8005904:	e001      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005906:	bf00      	nop
 8005908:	e21a      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800590a:	bf00      	nop
        break;
 800590c:	e218      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fe62 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8005924:	61f8      	str	r0, [r7, #28]
        break;
 8005926:	e20b      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005928:	f7fe fdb2 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800592c:	61f8      	str	r0, [r7, #28]
        break;
 800592e:	e207      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005930:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005936:	f003 0318 	and.w	r3, r3, #24
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b10      	cmp	r3, #16
 8005940:	d010      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b10      	cmp	r3, #16
 8005946:	d834      	bhi.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d024      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005954:	e02d      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800595c:	f000 fbe2 	bl	8006124 <RCCEx_GetSAIxPeriphCLKFreq>
 8005960:	61f8      	str	r0, [r7, #28]
          break;
 8005962:	e02b      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d122      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005970:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	e005      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599a:	61fb      	str	r3, [r7, #28]
          break;
 800599c:	e00b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059aa:	d106      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059ae:	61fb      	str	r3, [r7, #28]
          break;
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80059b2:	bf00      	nop
 80059b4:	e1c4      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059b6:	bf00      	nop
 80059b8:	e1c2      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059ba:	bf00      	nop
        break;
 80059bc:	e1c0      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	0800cef8 	.word	0x0800cef8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80059cc:	4b96      	ldr	r3, [pc, #600]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	d013      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e6:	d819      	bhi.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d004      	beq.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80059f6:	e011      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe fde0 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80059fc:	61f8      	str	r0, [r7, #28]
          break;
 80059fe:	e010      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a00:	f7fe fd46 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005a04:	61f8      	str	r0, [r7, #28]
          break;
 8005a06:	e00c      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a08:	4b87      	ldr	r3, [pc, #540]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a14:	d104      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005a16:	4b85      	ldr	r3, [pc, #532]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005a18:	61fb      	str	r3, [r7, #28]
          break;
 8005a1a:	e001      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005a1c:	bf00      	nop
 8005a1e:	e18f      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a20:	bf00      	nop
        break;
 8005a22:	e18d      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a24:	4b80      	ldr	r3, [pc, #512]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a36:	d013      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3e:	d819      	bhi.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a4c:	d004      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005a4e:	e011      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fe fdb4 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005a54:	61f8      	str	r0, [r7, #28]
          break;
 8005a56:	e010      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a58:	f7fe fd1a 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005a5c:	61f8      	str	r0, [r7, #28]
          break;
 8005a5e:	e00c      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a60:	4b71      	ldr	r3, [pc, #452]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d104      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005a6e:	4b6f      	ldr	r3, [pc, #444]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005a70:	61fb      	str	r3, [r7, #28]
          break;
 8005a72:	e001      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005a74:	bf00      	nop
 8005a76:	e163      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a78:	bf00      	nop
        break;
 8005a7a:	e161      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005a7c:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a8e:	d013      	beq.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a96:	d819      	bhi.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa4:	d004      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005aa6:	e011      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fe fd88 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005aac:	61f8      	str	r0, [r7, #28]
          break;
 8005aae:	e010      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ab0:	f7fe fcee 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005ab4:	61f8      	str	r0, [r7, #28]
          break;
 8005ab6:	e00c      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ab8:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac4:	d104      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005ac6:	4b59      	ldr	r3, [pc, #356]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ac8:	61fb      	str	r3, [r7, #28]
          break;
 8005aca:	e001      	b.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005acc:	bf00      	nop
 8005ace:	e137      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ad0:	bf00      	nop
        break;
 8005ad2:	e135      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005ad4:	4b54      	ldr	r3, [pc, #336]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d011      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d818      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d004      	beq.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005af8:	e011      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005afa:	f7fe fd5f 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005afe:	61f8      	str	r0, [r7, #28]
          break;
 8005b00:	e010      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fe fcc5 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005b06:	61f8      	str	r0, [r7, #28]
          break;
 8005b08:	e00c      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b0a:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d104      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005b18:	4b44      	ldr	r3, [pc, #272]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b1a:	61fb      	str	r3, [r7, #28]
          break;
 8005b1c:	e001      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005b1e:	bf00      	nop
 8005b20:	e10e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b22:	bf00      	nop
        break;
 8005b24:	e10c      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005b26:	4b40      	ldr	r3, [pc, #256]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b38:	d02c      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b40:	d833      	bhi.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b48:	d01a      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b50:	d82b      	bhi.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b5e:	d004      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005b60:	e023      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7fe fd2b 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005b66:	61f8      	str	r0, [r7, #28]
          break;
 8005b68:	e026      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d11a      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005b78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b7c:	61fb      	str	r3, [r7, #28]
          break;
 8005b7e:	e016      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b80:	4b29      	ldr	r3, [pc, #164]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8c:	d111      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b90:	61fb      	str	r3, [r7, #28]
          break;
 8005b92:	e00e      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b94:	4b24      	ldr	r3, [pc, #144]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba6:	61fb      	str	r3, [r7, #28]
          break;
 8005ba8:	e005      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005baa:	bf00      	nop
 8005bac:	e0c8      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bae:	bf00      	nop
 8005bb0:	e0c6      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bb2:	bf00      	nop
 8005bb4:	e0c4      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bb6:	bf00      	nop
        break;
 8005bb8:	e0c2      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bcc:	d030      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd4:	d837      	bhi.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bdc:	d01a      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be4:	d82f      	bhi.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf2:	d004      	beq.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005bf4:	e027      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bf6:	f7fe fce1 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005bfa:	61f8      	str	r0, [r7, #28]
          break;
 8005bfc:	e02a      	b.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d11e      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005c0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c10:	61fb      	str	r3, [r7, #28]
          break;
 8005c12:	e01a      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c20:	d115      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005c22:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c24:	61fb      	str	r3, [r7, #28]
          break;
 8005c26:	e012      	b.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c30:	4b46      	ldr	r3, [pc, #280]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d109      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c42:	61fb      	str	r3, [r7, #28]
          break;
 8005c44:	e005      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005c46:	bf00      	nop
 8005c48:	e07a      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c4a:	bf00      	nop
 8005c4c:	e078      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c4e:	bf00      	nop
 8005c50:	e076      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c52:	bf00      	nop
        break;
 8005c54:	e074      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005c56:	4b3d      	ldr	r3, [pc, #244]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c68:	d02c      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c70:	d855      	bhi.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c7e:	d004      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005c80:	e04d      	b.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c82:	f7fe fc05 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8005c86:	61f8      	str	r0, [r7, #28]
          break;
 8005c88:	e04e      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c8a:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d145      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c96:	4b2d      	ldr	r3, [pc, #180]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005ca2:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	e005      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005cae:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc0:	61fb      	str	r3, [r7, #28]
          break;
 8005cc2:	e02e      	b.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ccc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cd0:	d129      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d122      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	fb03 f202 	mul.w	r2, r3, r2
 8005cf4:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	3301      	adds	r3, #1
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	0d5b      	lsrs	r3, r3, #21
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	3301      	adds	r3, #1
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	61fb      	str	r3, [r7, #28]
          break;
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005d1e:	bf00      	nop
 8005d20:	e00e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d22:	bf00      	nop
 8005d24:	e00c      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d26:	bf00      	nop
        break;
 8005d28:	e00a      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e008      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005d32:	bf00      	nop
 8005d34:	e004      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005d36:	bf00      	nop
 8005d38:	e002      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005d3e:	bf00      	nop
    }
  }

  return(frequency);
 8005d40:	69fb      	ldr	r3, [r7, #28]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	0800cef8 	.word	0x0800cef8

08005d54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d62:	4b72      	ldr	r3, [pc, #456]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d6e:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 0203 	and.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d103      	bne.n	8005d86 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
       ||
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d142      	bne.n	8005e0c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
 8005d8a:	e03f      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d018      	beq.n	8005dc6 <RCCEx_PLLSAI1_Config+0x72>
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d825      	bhi.n	8005de4 <RCCEx_PLLSAI1_Config+0x90>
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d002      	beq.n	8005da2 <RCCEx_PLLSAI1_Config+0x4e>
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d009      	beq.n	8005db4 <RCCEx_PLLSAI1_Config+0x60>
 8005da0:	e020      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005da2:	4b62      	ldr	r3, [pc, #392]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d11d      	bne.n	8005dea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db2:	e01a      	b.n	8005dea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005db4:	4b5d      	ldr	r3, [pc, #372]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d116      	bne.n	8005dee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dc4:	e013      	b.n	8005dee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dc6:	4b59      	ldr	r3, [pc, #356]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10f      	bne.n	8005df2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dd2:	4b56      	ldr	r3, [pc, #344]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005de2:	e006      	b.n	8005df2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e004      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005dea:	bf00      	nop
 8005dec:	e002      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d108      	bne.n	8005e0c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005dfa:	4b4c      	ldr	r3, [pc, #304]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f023 0203 	bic.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4949      	ldr	r1, [pc, #292]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 8086 	bne.w	8005f20 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e14:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a44      	ldr	r2, [pc, #272]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e20:	f7fb fba8 	bl	8001574 <HAL_GetTick>
 8005e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e26:	e009      	b.n	8005e3c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e28:	f7fb fba4 	bl	8001574 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d902      	bls.n	8005e3c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	73fb      	strb	r3, [r7, #15]
        break;
 8005e3a:	e005      	b.n	8005e48 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ef      	bne.n	8005e28 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d168      	bne.n	8005f20 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d113      	bne.n	8005e7c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e54:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	4b35      	ldr	r3, [pc, #212]	; (8005f30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6892      	ldr	r2, [r2, #8]
 8005e60:	0211      	lsls	r1, r2, #8
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68d2      	ldr	r2, [r2, #12]
 8005e66:	06d2      	lsls	r2, r2, #27
 8005e68:	4311      	orrs	r1, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6852      	ldr	r2, [r2, #4]
 8005e6e:	3a01      	subs	r2, #1
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	430a      	orrs	r2, r1
 8005e74:	492d      	ldr	r1, [pc, #180]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	610b      	str	r3, [r1, #16]
 8005e7a:	e02d      	b.n	8005ed8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d115      	bne.n	8005eae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e82:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6892      	ldr	r2, [r2, #8]
 8005e8e:	0211      	lsls	r1, r2, #8
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6912      	ldr	r2, [r2, #16]
 8005e94:	0852      	lsrs	r2, r2, #1
 8005e96:	3a01      	subs	r2, #1
 8005e98:	0552      	lsls	r2, r2, #21
 8005e9a:	4311      	orrs	r1, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6852      	ldr	r2, [r2, #4]
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	0112      	lsls	r2, r2, #4
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	4921      	ldr	r1, [pc, #132]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	610b      	str	r3, [r1, #16]
 8005eac:	e014      	b.n	8005ed8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eae:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6892      	ldr	r2, [r2, #8]
 8005eba:	0211      	lsls	r1, r2, #8
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6952      	ldr	r2, [r2, #20]
 8005ec0:	0852      	lsrs	r2, r2, #1
 8005ec2:	3a01      	subs	r2, #1
 8005ec4:	0652      	lsls	r2, r2, #25
 8005ec6:	4311      	orrs	r1, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6852      	ldr	r2, [r2, #4]
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	0112      	lsls	r2, r2, #4
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	4916      	ldr	r1, [pc, #88]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fb fb46 	bl	8001574 <HAL_GetTick>
 8005ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eea:	e009      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eec:	f7fb fb42 	bl	8001574 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d902      	bls.n	8005f00 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	73fb      	strb	r3, [r7, #15]
          break;
 8005efe:	e005      	b.n	8005f0c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ef      	beq.n	8005eec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	4904      	ldr	r1, [pc, #16]	; (8005f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	07ff800f 	.word	0x07ff800f
 8005f34:	ff9f800f 	.word	0xff9f800f
 8005f38:	f9ff800f 	.word	0xf9ff800f

08005f3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f4a:	4b72      	ldr	r3, [pc, #456]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f56:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0203 	and.w	r2, r3, #3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d103      	bne.n	8005f6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
       ||
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d142      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	73fb      	strb	r3, [r7, #15]
 8005f72:	e03f      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d018      	beq.n	8005fae <RCCEx_PLLSAI2_Config+0x72>
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d825      	bhi.n	8005fcc <RCCEx_PLLSAI2_Config+0x90>
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d002      	beq.n	8005f8a <RCCEx_PLLSAI2_Config+0x4e>
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d009      	beq.n	8005f9c <RCCEx_PLLSAI2_Config+0x60>
 8005f88:	e020      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f8a:	4b62      	ldr	r3, [pc, #392]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d11d      	bne.n	8005fd2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f9a:	e01a      	b.n	8005fd2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f9c:	4b5d      	ldr	r3, [pc, #372]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d116      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fac:	e013      	b.n	8005fd6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fae:	4b59      	ldr	r3, [pc, #356]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fba:	4b56      	ldr	r3, [pc, #344]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fca:	e006      	b.n	8005fda <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	e004      	b.n	8005fdc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e002      	b.n	8005fdc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e000      	b.n	8005fdc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fda:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d108      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005fe2:	4b4c      	ldr	r3, [pc, #304]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f023 0203 	bic.w	r2, r3, #3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4949      	ldr	r1, [pc, #292]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f040 8086 	bne.w	8006108 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ffc:	4b45      	ldr	r3, [pc, #276]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a44      	ldr	r2, [pc, #272]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006008:	f7fb fab4 	bl	8001574 <HAL_GetTick>
 800600c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800600e:	e009      	b.n	8006024 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006010:	f7fb fab0 	bl	8001574 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d902      	bls.n	8006024 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	73fb      	strb	r3, [r7, #15]
        break;
 8006022:	e005      	b.n	8006030 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006024:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ef      	bne.n	8006010 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d168      	bne.n	8006108 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d113      	bne.n	8006064 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800603c:	4b35      	ldr	r3, [pc, #212]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	4b35      	ldr	r3, [pc, #212]	; (8006118 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006042:	4013      	ands	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6892      	ldr	r2, [r2, #8]
 8006048:	0211      	lsls	r1, r2, #8
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68d2      	ldr	r2, [r2, #12]
 800604e:	06d2      	lsls	r2, r2, #27
 8006050:	4311      	orrs	r1, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6852      	ldr	r2, [r2, #4]
 8006056:	3a01      	subs	r2, #1
 8006058:	0112      	lsls	r2, r2, #4
 800605a:	430a      	orrs	r2, r1
 800605c:	492d      	ldr	r1, [pc, #180]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605e:	4313      	orrs	r3, r2
 8006060:	614b      	str	r3, [r1, #20]
 8006062:	e02d      	b.n	80060c0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d115      	bne.n	8006096 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800606a:	4b2a      	ldr	r3, [pc, #168]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	4b2b      	ldr	r3, [pc, #172]	; (800611c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6892      	ldr	r2, [r2, #8]
 8006076:	0211      	lsls	r1, r2, #8
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6912      	ldr	r2, [r2, #16]
 800607c:	0852      	lsrs	r2, r2, #1
 800607e:	3a01      	subs	r2, #1
 8006080:	0552      	lsls	r2, r2, #21
 8006082:	4311      	orrs	r1, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6852      	ldr	r2, [r2, #4]
 8006088:	3a01      	subs	r2, #1
 800608a:	0112      	lsls	r2, r2, #4
 800608c:	430a      	orrs	r2, r1
 800608e:	4921      	ldr	r1, [pc, #132]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006090:	4313      	orrs	r3, r2
 8006092:	614b      	str	r3, [r1, #20]
 8006094:	e014      	b.n	80060c0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006096:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	4b21      	ldr	r3, [pc, #132]	; (8006120 <RCCEx_PLLSAI2_Config+0x1e4>)
 800609c:	4013      	ands	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6892      	ldr	r2, [r2, #8]
 80060a2:	0211      	lsls	r1, r2, #8
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6952      	ldr	r2, [r2, #20]
 80060a8:	0852      	lsrs	r2, r2, #1
 80060aa:	3a01      	subs	r2, #1
 80060ac:	0652      	lsls	r2, r2, #25
 80060ae:	4311      	orrs	r1, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6852      	ldr	r2, [r2, #4]
 80060b4:	3a01      	subs	r2, #1
 80060b6:	0112      	lsls	r2, r2, #4
 80060b8:	430a      	orrs	r2, r1
 80060ba:	4916      	ldr	r1, [pc, #88]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060c0:	4b14      	ldr	r3, [pc, #80]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a13      	ldr	r2, [pc, #76]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fb fa52 	bl	8001574 <HAL_GetTick>
 80060d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060d2:	e009      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060d4:	f7fb fa4e 	bl	8001574 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d902      	bls.n	80060e8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	73fb      	strb	r3, [r7, #15]
          break;
 80060e6:	e005      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ef      	beq.n	80060d4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	4904      	ldr	r1, [pc, #16]	; (8006114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40021000 	.word	0x40021000
 8006118:	07ff800f 	.word	0x07ff800f
 800611c:	ff9f800f 	.word	0xff9f800f
 8006120:	f9ff800f 	.word	0xf9ff800f

08006124 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006140:	d10b      	bne.n	800615a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006142:	4b7e      	ldr	r3, [pc, #504]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006148:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800614c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b60      	cmp	r3, #96	; 0x60
 8006152:	d112      	bne.n	800617a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006154:	4b7a      	ldr	r3, [pc, #488]	; (8006340 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	e00f      	b.n	800617a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006160:	d10b      	bne.n	800617a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006162:	4b76      	ldr	r3, [pc, #472]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800616c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006174:	d101      	bne.n	800617a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006176:	4b72      	ldr	r3, [pc, #456]	; (8006340 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006178:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 80d6 	bne.w	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d003      	beq.n	8006194 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	d13b      	bne.n	800620c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006194:	4b69      	ldr	r3, [pc, #420]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a0:	f040 80c4 	bne.w	800632c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80061a4:	4b65      	ldr	r3, [pc, #404]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80bd 	beq.w	800632c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061b2:	4b62      	ldr	r3, [pc, #392]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	3301      	adds	r3, #1
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061c6:	4b5d      	ldr	r3, [pc, #372]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80061d2:	4b5a      	ldr	r3, [pc, #360]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	0edb      	lsrs	r3, r3, #27
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80061e4:	4b55      	ldr	r3, [pc, #340]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80061f0:	2311      	movs	r3, #17
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e001      	b.n	80061fa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80061f6:	2307      	movs	r3, #7
 80061f8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	fb03 f202 	mul.w	r2, r3, r2
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800620a:	e08f      	b.n	800632c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d13a      	bne.n	8006288 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006212:	4b4a      	ldr	r3, [pc, #296]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800621a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800621e:	f040 8086 	bne.w	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006222:	4b46      	ldr	r3, [pc, #280]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d07f      	beq.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800622e:	4b43      	ldr	r3, [pc, #268]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	3301      	adds	r3, #1
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006242:	4b3e      	ldr	r3, [pc, #248]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800624e:	4b3b      	ldr	r3, [pc, #236]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	0edb      	lsrs	r3, r3, #27
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006260:	4b36      	ldr	r3, [pc, #216]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800626c:	2311      	movs	r3, #17
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e001      	b.n	8006276 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006272:	2307      	movs	r3, #7
 8006274:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	fb03 f202 	mul.w	r2, r3, r2
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	e052      	b.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d003      	beq.n	8006296 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d109      	bne.n	80062aa <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d144      	bne.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80062a4:	4b27      	ldr	r3, [pc, #156]	; (8006344 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80062a6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062a8:	e041      	b.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d003      	beq.n	80062b8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b6:	d13a      	bne.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80062b8:	4b20      	ldr	r3, [pc, #128]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c4:	d133      	bne.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80062c6:	4b1d      	ldr	r3, [pc, #116]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d02d      	beq.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80062d2:	4b1a      	ldr	r3, [pc, #104]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	3301      	adds	r3, #1
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80062e6:	4b15      	ldr	r3, [pc, #84]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	0edb      	lsrs	r3, r3, #27
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006310:	2311      	movs	r3, #17
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e001      	b.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006316:	2307      	movs	r3, #7
 8006318:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	fb03 f202 	mul.w	r2, r3, r2
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	e000      	b.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800632c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3724      	adds	r7, #36	; 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40021000 	.word	0x40021000
 8006340:	001fff68 	.word	0x001fff68
 8006344:	00f42400 	.word	0x00f42400

08006348 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e078      	b.n	800644c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fa fe6b 	bl	8001048 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2203      	movs	r2, #3
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f86a 	bl	8006454 <HAL_SD_InitCard>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e060      	b.n	800644c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800638a:	f107 0308 	add.w	r3, r7, #8
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fdb5 	bl	8006f00 <HAL_SD_GetCardStatus>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e055      	b.n	800644c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80063a0:	7e3b      	ldrb	r3, [r7, #24]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80063a6:	7e7b      	ldrb	r3, [r7, #25]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10a      	bne.n	80063ca <HAL_SD_Init+0x82>
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_SD_Init+0x78>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80063c8:	e00b      	b.n	80063e2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d104      	bne.n	80063dc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80063da:	e002      	b.n	80063e2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fe6b 	bl	80070c4 <HAL_SD_ConfigWideBusOperation>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e029      	b.n	800644c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80063f8:	f7fb f8bc 	bl	8001574 <HAL_GetTick>
 80063fc:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80063fe:	e014      	b.n	800642a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006400:	f7fb f8b8 	bl	8001574 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640e:	d10c      	bne.n	800642a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e010      	b.n	800644c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 ff5e 	bl	80072ec <HAL_SD_GetCardState>
 8006430:	4603      	mov	r3, r0
 8006432:	2b04      	cmp	r3, #4
 8006434:	d1e4      	bne.n	8006400 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	; 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af04      	add	r7, sp, #16
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800645c:	2300      	movs	r3, #0
 800645e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800646c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006470:	f7fe fd50 	bl	8004f14 <HAL_RCCEx_GetPeriphCLKFreq>
 8006474:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e079      	b.n	8006584 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	4a3d      	ldr	r2, [pc, #244]	; (800658c <HAL_SD_InitCard+0x138>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	091b      	lsrs	r3, r3, #4
 800649c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d107      	bne.n	80064bc <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0210 	orr.w	r2, r2, #16
 80064ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681d      	ldr	r5, [r3, #0]
 80064c0:	466c      	mov	r4, sp
 80064c2:	f107 0314 	add.w	r3, r7, #20
 80064c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064ce:	f107 0308 	add.w	r3, r7, #8
 80064d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064d4:	4628      	mov	r0, r5
 80064d6:	f002 f90f 	bl	80086f8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f002 f952 	bl	8008788 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80064f0:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_SD_InitCard+0x13c>)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	3301      	adds	r3, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fb f846 	bl	800158c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 ffd3 	bl	80074ac <SD_PowerON>
 8006506:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e02e      	b.n	8006584 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 ff00 	bl	800732c <SD_InitCard>
 800652c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e01b      	b.n	8006584 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006554:	4618      	mov	r0, r3
 8006556:	f002 f9ad 	bl	80088b4 <SDMMC_CmdBlockLength>
 800655a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00f      	beq.n	8006582 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a0b      	ldr	r2, [pc, #44]	; (8006594 <HAL_SD_InitCard+0x140>)
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3728      	adds	r7, #40	; 0x28
 8006588:	46bd      	mov	sp, r7
 800658a:	bdb0      	pop	{r4, r5, r7, pc}
 800658c:	014f8b59 	.word	0x014f8b59
 8006590:	00012110 	.word	0x00012110
 8006594:	1fe00fff 	.word	0x1fe00fff

08006598 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e08d      	b.n	80066dc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 8086 	bne.w	80066da <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80065d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	441a      	add	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	429a      	cmp	r2, r3
 80065e0:	d907      	bls.n	80065f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e074      	b.n	80066dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2200      	movs	r2, #0
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	025a      	lsls	r2, r3, #9
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d002      	beq.n	800661e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	025b      	lsls	r3, r3, #9
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800661e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006622:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	025b      	lsls	r3, r3, #9
 8006628:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800662a:	2390      	movs	r3, #144	; 0x90
 800662c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800662e:	2302      	movs	r3, #2
 8006630:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006632:	2300      	movs	r3, #0
 8006634:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8006636:	2300      	movs	r3, #0
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f107 0210 	add.w	r2, r7, #16
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f002 f909 	bl	800885c <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006658:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2201      	movs	r2, #1
 8006668:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d90a      	bls.n	8006686 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2282      	movs	r2, #130	; 0x82
 8006674:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800667c:	4618      	mov	r0, r3
 800667e:	f002 f95f 	bl	8008940 <SDMMC_CmdReadMultiBlock>
 8006682:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006684:	e009      	b.n	800669a <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2281      	movs	r2, #129	; 0x81
 800668a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006692:	4618      	mov	r0, r3
 8006694:	f002 f931 	bl	80088fa <SDMMC_CmdReadSingleBlock>
 8006698:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d012      	beq.n	80066c6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a0f      	ldr	r2, [pc, #60]	; (80066e4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e00a      	b.n	80066dc <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80066d4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e000      	b.n	80066dc <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3730      	adds	r7, #48	; 0x30
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	1fe00fff 	.word	0x1fe00fff

080066e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d107      	bne.n	8006710 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e08d      	b.n	800682c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 8086 	bne.w	800682a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	429a      	cmp	r2, r3
 8006730:	d907      	bls.n	8006742 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e074      	b.n	800682c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2203      	movs	r2, #3
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2200      	movs	r2, #0
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	025a      	lsls	r2, r3, #9
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d002      	beq.n	800676e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	025b      	lsls	r3, r3, #9
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006772:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	025b      	lsls	r3, r3, #9
 8006778:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800677a:	2390      	movs	r3, #144	; 0x90
 800677c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006782:	2300      	movs	r3, #0
 8006784:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006786:	2300      	movs	r3, #0
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f107 0210 	add.w	r2, r7, #16
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f002 f861 	bl	800885c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d90a      	bls.n	80067d6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	22a0      	movs	r2, #160	; 0xa0
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067cc:	4618      	mov	r0, r3
 80067ce:	f002 f8fd 	bl	80089cc <SDMMC_CmdWriteMultiBlock>
 80067d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80067d4:	e009      	b.n	80067ea <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2290      	movs	r2, #144	; 0x90
 80067da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 f8cf 	bl	8008986 <SDMMC_CmdWriteSingleBlock>
 80067e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a0f      	ldr	r2, [pc, #60]	; (8006834 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	431a      	orrs	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e00a      	b.n	800682c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006824:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	4618      	mov	r0, r3
 800682e:	3730      	adds	r7, #48	; 0x30
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	1fe00fff 	.word	0x1fe00fff

08006838 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <HAL_SD_IRQHandler+0x2e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 f98e 	bl	8007b80 <SD_Read_IT>
 8006864:	e199      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80ae 	beq.w	80069d2 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800687e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800688e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006892:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068a2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b2:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d038      	beq.n	8006930 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_SD_IRQHandler+0x9a>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d011      	beq.n	80068f6 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f002 f89c 	bl	8008a14 <SDMMC_CmdStopTransfer>
 80068dc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f957 	bl	8006ba4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a90      	ldr	r2, [pc, #576]	; (8006b3c <HAL_SD_IRQHandler+0x304>)
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_SD_IRQHandler+0xe8>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f002 fd63 	bl	80093ec <HAL_SD_RxCpltCallback>
 8006926:	e138      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f002 fd55 	bl	80093d8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800692e:	e134      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 812f 	beq.w	8006b9a <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2200      	movs	r2, #0
 8006942:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2200      	movs	r2, #0
 8006952:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_SD_IRQHandler+0x130>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d011      	beq.n	800698c <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f002 f851 	bl	8008a14 <SDMMC_CmdStopTransfer>
 8006972:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f90c 	bl	8006ba4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <HAL_SD_IRQHandler+0x176>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f002 fd12 	bl	80093d8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <HAL_SD_IRQHandler+0x192>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80e8 	beq.w	8006b9a <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 fd0e 	bl	80093ec <HAL_SD_RxCpltCallback>
}
 80069d0:	e0e3      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_SD_IRQHandler+0x1ba>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f919 	bl	8007c22 <SD_Write_IT>
 80069f0:	e0d3      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 809f 	beq.w	8006b40 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	f043 0202 	orr.w	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	f043 0208 	orr.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	f043 0210 	orr.w	r2, r3, #16
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a33      	ldr	r2, [pc, #204]	; (8006b3c <HAL_SD_IRQHandler+0x304>)
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006a80:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a90:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ab0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 ffac 	bl	8008a14 <SDMMC_CmdStopTransfer>
 8006abc:	4602      	mov	r2, r0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f852 	bl	8006ba4 <HAL_SD_ErrorCallback>
}
 8006b00:	e04b      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d046      	beq.n	8006b9a <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d042      	beq.n	8006b9a <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f835 	bl	8006ba4 <HAL_SD_ErrorCallback>
}
 8006b3a:	e02e      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
 8006b3c:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d025      	beq.n	8006b9a <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f8d4 	bl	8007d1e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006b76:	e010      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f8bc 	bl	8007cf6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006b7e:	e00c      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 f8bd 	bl	8007d0a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006b90:	e003      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 f8a5 	bl	8007ce2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006b98:	e7ff      	b.n	8006b9a <HAL_SD_IRQHandler+0x362>
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop

08006ba4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc6:	0f9b      	lsrs	r3, r3, #30
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd2:	0e9b      	lsrs	r3, r3, #26
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be4:	0e1b      	lsrs	r3, r3, #24
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c18:	0d1b      	lsrs	r3, r3, #20
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c36:	0bdb      	lsrs	r3, r3, #15
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c48:	0b9b      	lsrs	r3, r3, #14
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5a:	0b5b      	lsrs	r3, r3, #13
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6c:	0b1b      	lsrs	r3, r3, #12
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d163      	bne.n	8006d50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8c:	009a      	lsls	r2, r3, #2
 8006c8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c92:	4013      	ands	r3, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c98:	0f92      	lsrs	r2, r2, #30
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca4:	0edb      	lsrs	r3, r3, #27
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb6:	0e1b      	lsrs	r3, r3, #24
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc8:	0d5b      	lsrs	r3, r3, #21
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cda:	0c9b      	lsrs	r3, r3, #18
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cec:	0bdb      	lsrs	r3, r3, #15
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	7e1b      	ldrb	r3, [r3, #24]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	3302      	adds	r3, #2
 8006d10:	2201      	movs	r2, #1
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006d1a:	fb03 f202 	mul.w	r2, r3, r2
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	7a1b      	ldrb	r3, [r3, #8]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d3c:	0a52      	lsrs	r2, r2, #9
 8006d3e:	fb03 f202 	mul.w	r2, r3, r2
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4c:	659a      	str	r2, [r3, #88]	; 0x58
 8006d4e:	e031      	b.n	8006db4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d11d      	bne.n	8006d94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	029a      	lsls	r2, r3, #10
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d88:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	659a      	str	r2, [r3, #88]	; 0x58
 8006d92:	e00f      	b.n	8006db4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a58      	ldr	r2, [pc, #352]	; (8006efc <HAL_SD_GetCardCSD+0x344>)
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e09d      	b.n	8006ef0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db8:	0b9b      	lsrs	r3, r3, #14
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dca:	09db      	lsrs	r3, r3, #7
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	0fdb      	lsrs	r3, r3, #31
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df8:	0f5b      	lsrs	r3, r3, #29
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0a:	0e9b      	lsrs	r3, r3, #26
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1c:	0d9b      	lsrs	r3, r3, #22
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2e:	0d5b      	lsrs	r3, r3, #21
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e5e:	0bdb      	lsrs	r3, r3, #15
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e72:	0b9b      	lsrs	r3, r3, #14
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e86:	0b5b      	lsrs	r3, r3, #13
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9a:	0b1b      	lsrs	r3, r3, #12
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eae:	0a9b      	lsrs	r3, r3, #10
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	1fe00fff 	.word	0x1fe00fff

08006f00 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b094      	sub	sp, #80	; 0x50
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006f10:	f107 0308 	add.w	r3, r7, #8
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fbd4 	bl	80076c4 <SD_SendSDStatus>
 8006f1c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d011      	beq.n	8006f48 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a4f      	ldr	r2, [pc, #316]	; (8007068 <HAL_SD_GetCardStatus+0x168>)
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006f46:	e070      	b.n	800702a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	099b      	lsrs	r3, r3, #6
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	0e1b      	lsrs	r3, r3, #24
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	061a      	lsls	r2, r3, #24
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f8e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006f98:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	0e1b      	lsrs	r3, r3, #24
 8006f9e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	0d1b      	lsrs	r3, r3, #20
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	0a9b      	lsrs	r3, r3, #10
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	b2da      	uxtb	r2, r3
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	0e1b      	lsrs	r3, r3, #24
 8007024:	b2da      	uxtb	r2, r3
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fc3e 	bl	80088b4 <SDMMC_CmdBlockLength>
 8007038:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800703a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <HAL_SD_GetCardStatus+0x168>)
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800705c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007060:	4618      	mov	r0, r3
 8007062:	3750      	adds	r7, #80	; 0x50
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	1fe00fff 	.word	0x1fe00fff

0800706c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80070c4:	b5b0      	push	{r4, r5, r7, lr}
 80070c6:	b090      	sub	sp, #64	; 0x40
 80070c8:	af04      	add	r7, sp, #16
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2203      	movs	r2, #3
 80070d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d02e      	beq.n	8007142 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ea:	d106      	bne.n	80070fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38
 80070f8:	e029      	b.n	800714e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007100:	d10a      	bne.n	8007118 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fbd6 	bl	80078b4 <SD_WideBus_Enable>
 8007108:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
 8007116:	e01a      	b.n	800714e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fc13 	bl	800794a <SD_WideBus_Disable>
 8007124:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	639a      	str	r2, [r3, #56]	; 0x38
 8007132:	e00c      	b.n	800714e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
 8007140:	e005      	b.n	800714e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d007      	beq.n	8007166 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a60      	ldr	r2, [pc, #384]	; (80072dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007164:	e097      	b.n	8007296 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007166:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800716a:	f7fd fed3 	bl	8004f14 <HAL_RCCEx_GetPeriphCLKFreq>
 800716e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8086 	beq.w	8007284 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	4952      	ldr	r1, [pc, #328]	; (80072e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007196:	fba1 1303 	umull	r1, r3, r1, r3
 800719a:	0e1b      	lsrs	r3, r3, #24
 800719c:	429a      	cmp	r2, r3
 800719e:	d303      	bcc.n	80071a8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e05a      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b0:	d103      	bne.n	80071ba <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	e051      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c2:	d126      	bne.n	8007212 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10e      	bne.n	80071ea <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	4a45      	ldr	r2, [pc, #276]	; (80072e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d906      	bls.n	80071e2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	4a42      	ldr	r2, [pc, #264]	; (80072e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	0e5b      	lsrs	r3, r3, #25
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	e03d      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	e039      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	4a3b      	ldr	r2, [pc, #236]	; (80072e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d906      	bls.n	800720a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	4a38      	ldr	r2, [pc, #224]	; (80072e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	0e5b      	lsrs	r3, r3, #25
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e029      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e025      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10e      	bne.n	8007238 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	4a32      	ldr	r2, [pc, #200]	; (80072e8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d906      	bls.n	8007230 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	4a2e      	ldr	r2, [pc, #184]	; (80072e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e016      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e012      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d906      	bls.n	8007258 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800724e:	fba2 2303 	umull	r2, r3, r2, r3
 8007252:	0e1b      	lsrs	r3, r3, #24
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e002      	b.n	800725e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681d      	ldr	r5, [r3, #0]
 8007268:	466c      	mov	r4, sp
 800726a:	f107 0318 	add.w	r3, r7, #24
 800726e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007276:	f107 030c 	add.w	r3, r7, #12
 800727a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800727c:	4628      	mov	r0, r5
 800727e:	f001 fa3b 	bl	80086f8 <SDMMC_Init>
 8007282:	e008      	b.n	8007296 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fb08 	bl	80088b4 <SDMMC_CmdBlockLength>
 80072a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00c      	beq.n	80072c6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_SD_ConfigWideBusOperation+0x218>)
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80072ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3730      	adds	r7, #48	; 0x30
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bdb0      	pop	{r4, r5, r7, pc}
 80072da:	bf00      	nop
 80072dc:	1fe00fff 	.word	0x1fe00fff
 80072e0:	55e63b89 	.word	0x55e63b89
 80072e4:	02faf080 	.word	0x02faf080
 80072e8:	017d7840 	.word	0x017d7840

080072ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fab0 	bl	8007864 <SD_SendStatus>
 8007304:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	0a5b      	lsrs	r3, r3, #9
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007322:	693b      	ldr	r3, [r7, #16]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800732c:	b5b0      	push	{r4, r5, r7, lr}
 800732e:	b090      	sub	sp, #64	; 0x40
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007334:	2301      	movs	r3, #1
 8007336:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fa35 	bl	80087ac <SDMMC_GetPowerState>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d102      	bne.n	800734e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007348:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800734c:	e0a9      	b.n	80074a2 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2b03      	cmp	r3, #3
 8007354:	d02e      	beq.n	80073b4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fc7a 	bl	8008c54 <SDMMC_CmdSendCID>
 8007360:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <SD_InitCard+0x40>
    {
      return errorstate;
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	e09a      	b.n	80074a2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fa5f 	bl	8008836 <SDMMC_GetResponse>
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2104      	movs	r1, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fa56 	bl	8008836 <SDMMC_GetResponse>
 800738a:	4602      	mov	r2, r0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2108      	movs	r1, #8
 8007396:	4618      	mov	r0, r3
 8007398:	f001 fa4d 	bl	8008836 <SDMMC_GetResponse>
 800739c:	4602      	mov	r2, r0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	210c      	movs	r1, #12
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fa44 	bl	8008836 <SDMMC_GetResponse>
 80073ae:	4602      	mov	r2, r0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d00d      	beq.n	80073d8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f107 020e 	add.w	r2, r7, #14
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fc83 	bl	8008cd2 <SDMMC_CmdSetRelAdd>
 80073cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <SD_InitCard+0xac>
    {
      return errorstate;
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	e064      	b.n	80074a2 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d036      	beq.n	800744e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	461a      	mov	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f001 fc4c 	bl	8008c92 <SDMMC_CmdSendCSD>
 80073fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <SD_InitCard+0xda>
    {
      return errorstate;
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	e04d      	b.n	80074a2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fa12 	bl	8008836 <SDMMC_GetResponse>
 8007412:	4602      	mov	r2, r0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2104      	movs	r1, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fa09 	bl	8008836 <SDMMC_GetResponse>
 8007424:	4602      	mov	r2, r0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2108      	movs	r1, #8
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fa00 	bl	8008836 <SDMMC_GetResponse>
 8007436:	4602      	mov	r2, r0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	210c      	movs	r1, #12
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f9f7 	bl	8008836 <SDMMC_GetResponse>
 8007448:	4602      	mov	r2, r0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2104      	movs	r1, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f001 f9ee 	bl	8008836 <SDMMC_GetResponse>
 800745a:	4603      	mov	r3, r0
 800745c:	0d1a      	lsrs	r2, r3, #20
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007462:	f107 0310 	add.w	r3, r7, #16
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fba5 	bl	8006bb8 <HAL_SD_GetCardCSD>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007478:	e013      	b.n	80074a2 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6819      	ldr	r1, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	2200      	movs	r2, #0
 8007486:	461c      	mov	r4, r3
 8007488:	4615      	mov	r5, r2
 800748a:	4622      	mov	r2, r4
 800748c:	462b      	mov	r3, r5
 800748e:	4608      	mov	r0, r1
 8007490:	f001 faf6 	bl	8008a80 <SDMMC_CmdSelDesel>
 8007494:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <SD_InitCard+0x174>
  {
    return errorstate;
 800749c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749e:	e000      	b.n	80074a2 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3740      	adds	r7, #64	; 0x40
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080074ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80074c0:	f7fa f858 	bl	8001574 <HAL_GetTick>
 80074c4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fafc 	bl	8008ac8 <SDMMC_CmdGoIdleState>
 80074d0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <SD_PowerON+0x30>
  {
    return errorstate;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e0ed      	b.n	80076b8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fb0f 	bl	8008b04 <SDMMC_CmdOperCond>
 80074e6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00d      	beq.n	800750a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 fae5 	bl	8008ac8 <SDMMC_CmdGoIdleState>
 80074fe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <SD_PowerON+0x64>
    {
      return errorstate;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	e0d6      	b.n	80076b8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	2b01      	cmp	r3, #1
 8007516:	d137      	bne.n	8007588 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fb10 	bl	8008b44 <SDMMC_CmdAppCommand>
 8007524:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02d      	beq.n	8007588 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800752c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007530:	e0c2      	b.n	80076b8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f001 fb03 	bl	8008b44 <SDMMC_CmdAppCommand>
 800753e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <SD_PowerON+0x9e>
    {
      return errorstate;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	e0b6      	b.n	80076b8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	495c      	ldr	r1, [pc, #368]	; (80076c0 <SD_PowerON+0x214>)
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fb1a 	bl	8008b8a <SDMMC_CmdAppOperCommand>
 8007556:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800755e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007562:	e0a9      	b.n	80076b8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2100      	movs	r1, #0
 800756a:	4618      	mov	r0, r3
 800756c:	f001 f963 	bl	8008836 <SDMMC_GetResponse>
 8007570:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	0fdb      	lsrs	r3, r3, #31
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <SD_PowerON+0xd2>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <SD_PowerON+0xd4>
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]

    count++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800758e:	4293      	cmp	r3, r2
 8007590:	d802      	bhi.n	8007598 <SD_PowerON+0xec>
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0cc      	beq.n	8007532 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800759e:	4293      	cmp	r3, r2
 80075a0:	d902      	bls.n	80075a8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075a6:	e087      	b.n	80076b8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d07e      	beq.n	80076b0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d17a      	bne.n	80076b6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d075      	beq.n	80076b6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0208 	orr.w	r2, r2, #8
 80075e0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 fbda 	bl	8008da0 <SDMMC_CmdVoltageSwitch>
 80075ec:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <SD_PowerON+0x162>
        {
          return errorstate;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	e05f      	b.n	80076b8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075f8:	f7f9 ffbc 	bl	8001574 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007606:	d102      	bne.n	800760e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800760c:	e054      	b.n	80076b8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800761c:	d1ec      	bne.n	80075f8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007626:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007636:	d002      	beq.n	800763e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800763c:	e03c      	b.n	80076b8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800763e:	2001      	movs	r0, #1
 8007640:	f000 fb44 	bl	8007ccc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0204 	orr.w	r2, r2, #4
 8007652:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007654:	e00a      	b.n	800766c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007656:	f7f9 ff8d 	bl	8001574 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007664:	d102      	bne.n	800766c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800766a:	e025      	b.n	80076b8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800767a:	d1ec      	bne.n	8007656 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007694:	d102      	bne.n	800769c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800769a:	e00d      	b.n	80076b8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2213      	movs	r2, #19
 80076a2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
 80076ae:	e002      	b.n	80076b6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	c1100000 	.word	0xc1100000

080076c4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08c      	sub	sp, #48	; 0x30
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80076ce:	f7f9 ff51 	bl	8001574 <HAL_GetTick>
 80076d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 f8a9 	bl	8008836 <SDMMC_GetResponse>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ee:	d102      	bne.n	80076f6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076f4:	e0b0      	b.n	8007858 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2140      	movs	r1, #64	; 0x40
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f8d9 	bl	80088b4 <SDMMC_CmdBlockLength>
 8007702:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	e0a0      	b.n	8007858 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f001 fa0e 	bl	8008b44 <SDMMC_CmdAppCommand>
 8007728:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	e08d      	b.n	8007858 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800773c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007740:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007746:	2360      	movs	r3, #96	; 0x60
 8007748:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800774a:	2302      	movs	r3, #2
 800774c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800774e:	2300      	movs	r3, #0
 8007750:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007752:	2301      	movs	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f107 0208 	add.w	r2, r7, #8
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f001 f87b 	bl	800885c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f001 faf6 	bl	8008d5c <SDMMC_CmdStatusRegister>
 8007770:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d02b      	beq.n	80077d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	e069      	b.n	8007858 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d013      	beq.n	80077ba <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007792:	2300      	movs	r3, #0
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007796:	e00d      	b.n	80077b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 ffd5 	bl	800874c <SDMMC_ReadFIFO>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	601a      	str	r2, [r3, #0]
        pData++;
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	3304      	adds	r3, #4
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	3301      	adds	r3, #1
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	2b07      	cmp	r3, #7
 80077b8:	d9ee      	bls.n	8007798 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077ba:	f7f9 fedb 	bl	8001574 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c8:	d102      	bne.n	80077d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80077ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077ce:	e043      	b.n	8007858 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0d2      	beq.n	8007784 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80077ec:	2308      	movs	r3, #8
 80077ee:	e033      	b.n	8007858 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80077fe:	2302      	movs	r3, #2
 8007800:	e02a      	b.n	8007858 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007810:	2320      	movs	r3, #32
 8007812:	e021      	b.n	8007858 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 ff97 	bl	800874c <SDMMC_ReadFIFO>
 800781e:	4602      	mov	r2, r0
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	601a      	str	r2, [r3, #0]
    pData++;
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	3304      	adds	r3, #4
 8007828:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800782a:	f7f9 fea3 	bl	8001574 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007838:	d102      	bne.n	8007840 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800783a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800783e:	e00b      	b.n	8007858 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e2      	bne.n	8007814 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a03      	ldr	r2, [pc, #12]	; (8007860 <SD_SendSDStatus+0x19c>)
 8007854:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3730      	adds	r7, #48	; 0x30
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	18000f3a 	.word	0x18000f3a

08007864 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007878:	e018      	b.n	80078ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f001 fa45 	bl	8008d16 <SDMMC_CmdSendStatus>
 800788c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e009      	b.n	80078ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 ffc9 	bl	8008836 <SDMMC_GetResponse>
 80078a4:	4602      	mov	r2, r0
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	2300      	movs	r3, #0
 80078c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 ffb3 	bl	8008836 <SDMMC_GetResponse>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078da:	d102      	bne.n	80078e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078e0:	e02f      	b.n	8007942 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078e2:	f107 030c 	add.w	r3, r7, #12
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f879 	bl	80079e0 <SD_FindSCR>
 80078ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	e023      	b.n	8007942 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01c      	beq.n	800793e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790c:	041b      	lsls	r3, r3, #16
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f001 f917 	bl	8008b44 <SDMMC_CmdAppCommand>
 8007916:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	e00f      	b.n	8007942 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2102      	movs	r1, #2
 8007928:	4618      	mov	r0, r3
 800792a:	f001 f94e 	bl	8008bca <SDMMC_CmdBusWidth>
 800792e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	e003      	b.n	8007942 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800793a:	2300      	movs	r3, #0
 800793c:	e001      	b.n	8007942 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800793e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff68 	bl	8008836 <SDMMC_GetResponse>
 8007966:	4603      	mov	r3, r0
 8007968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007970:	d102      	bne.n	8007978 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007976:	e02f      	b.n	80079d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007978:	f107 030c 	add.w	r3, r7, #12
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f82e 	bl	80079e0 <SD_FindSCR>
 8007984:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	e023      	b.n	80079d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01c      	beq.n	80079d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a2:	041b      	lsls	r3, r3, #16
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f001 f8cc 	bl	8008b44 <SDMMC_CmdAppCommand>
 80079ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	e00f      	b.n	80079d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 f903 	bl	8008bca <SDMMC_CmdBusWidth>
 80079c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	e003      	b.n	80079d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e001      	b.n	80079d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08e      	sub	sp, #56	; 0x38
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079ea:	f7f9 fdc3 	bl	8001574 <HAL_GetTick>
 80079ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80079f4:	2300      	movs	r3, #0
 80079f6:	60bb      	str	r3, [r7, #8]
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2108      	movs	r1, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 ff54 	bl	80088b4 <SDMMC_CmdBlockLength>
 8007a0c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	e0ad      	b.n	8007b74 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a20:	041b      	lsls	r3, r3, #16
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f001 f88d 	bl	8008b44 <SDMMC_CmdAppCommand>
 8007a2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	e09e      	b.n	8007b74 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a3a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007a40:	2330      	movs	r3, #48	; 0x30
 8007a42:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a44:	2302      	movs	r3, #2
 8007a46:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f107 0210 	add.w	r2, r7, #16
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fefe 	bl	800885c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f001 f8d3 	bl	8008c10 <SDMMC_CmdSendSCR>
 8007a6a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d027      	beq.n	8007ac2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	e07e      	b.n	8007b74 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d113      	bne.n	8007aac <SD_FindSCR+0xcc>
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d110      	bne.n	8007aac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fe5c 	bl	800874c <SDMMC_ReadFIFO>
 8007a94:	4603      	mov	r3, r0
 8007a96:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fe55 	bl	800874c <SDMMC_ReadFIFO>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	60fb      	str	r3, [r7, #12]
      index++;
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007aac:	f7f9 fd62 	bl	8001574 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aba:	d102      	bne.n	8007ac2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac0:	e058      	b.n	8007b74 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac8:	f240 532a 	movw	r3, #1322	; 0x52a
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0d1      	beq.n	8007a76 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007ae8:	2308      	movs	r3, #8
 8007aea:	e043      	b.n	8007b74 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2202      	movs	r2, #2
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b02:	2302      	movs	r3, #2
 8007b04:	e036      	b.n	8007b74 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	e029      	b.n	8007b74 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <SD_FindSCR+0x19c>)
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	061a      	lsls	r2, r3, #24
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	0e1b      	lsrs	r3, r3, #24
 8007b44:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	601a      	str	r2, [r3, #0]
    scr++;
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	061a      	lsls	r2, r3, #24
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	0a1b      	lsrs	r3, r3, #8
 8007b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	0e1b      	lsrs	r3, r3, #24
 8007b6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3738      	adds	r7, #56	; 0x38
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	18000f3a 	.word	0x18000f3a

08007b80 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d03f      	beq.n	8007c1a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e033      	b.n	8007c08 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fdd1 	bl	800874c <SDMMC_ReadFIFO>
 8007baa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	0e1b      	lsrs	r3, r3, #24
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	3301      	adds	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b07      	cmp	r3, #7
 8007c0c:	d9c8      	bls.n	8007ba0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d043      	beq.n	8007cc4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e037      	b.n	8007cb2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	021a      	lsls	r2, r3, #8
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	041a      	lsls	r2, r3, #16
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	061a      	lsls	r2, r3, #24
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f107 0208 	add.w	r2, r7, #8
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fd5d 	bl	8008766 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b07      	cmp	r3, #7
 8007cb6:	d9c4      	bls.n	8007c42 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e095      	b.n	8007e70 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d54:	d009      	beq.n	8007d6a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	61da      	str	r2, [r3, #28]
 8007d5c:	e005      	b.n	8007d6a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7f9 f9eb 	bl	8001160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007da0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007daa:	d902      	bls.n	8007db2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e002      	b.n	8007db8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007db6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007dc0:	d007      	beq.n	8007dd2 <HAL_SPI_Init+0xa0>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dca:	d002      	beq.n	8007dd2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e14:	ea42 0103 	orr.w	r1, r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	0c1b      	lsrs	r3, r3, #16
 8007e2e:	f003 0204 	and.w	r2, r3, #4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007e4e:	ea42 0103 	orr.w	r1, r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e038      	b.n	8007f00 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7f9 fa3c 	bl	8001320 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f000 fafa 	bl	80084ac <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	f000 fb8c 	bl	80085e0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6858      	ldr	r0, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	f000 fbd5 	bl	8008684 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	6892      	ldr	r2, [r2, #8]
 8007ee2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	6892      	ldr	r2, [r2, #8]
 8007eee:	f041 0101 	orr.w	r1, r1, #1
 8007ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e049      	b.n	8007fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f841 	bl	8007fb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 f9f8 	bl	800833c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
	...

08007fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d001      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e04f      	b.n	8008084 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a23      	ldr	r2, [pc, #140]	; (8008090 <HAL_TIM_Base_Start_IT+0xc4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01d      	beq.n	8008042 <HAL_TIM_Base_Start_IT+0x76>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800e:	d018      	beq.n	8008042 <HAL_TIM_Base_Start_IT+0x76>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1f      	ldr	r2, [pc, #124]	; (8008094 <HAL_TIM_Base_Start_IT+0xc8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_TIM_Base_Start_IT+0x76>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <HAL_TIM_Base_Start_IT+0xcc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_TIM_Base_Start_IT+0x76>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_TIM_Base_Start_IT+0xd0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_TIM_Base_Start_IT+0x76>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1b      	ldr	r2, [pc, #108]	; (80080a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_TIM_Base_Start_IT+0x76>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a19      	ldr	r2, [pc, #100]	; (80080a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d115      	bne.n	800806e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800804a:	4013      	ands	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b06      	cmp	r3, #6
 8008052:	d015      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0xb4>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805a:	d011      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806c:	e008      	b.n	8008080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e000      	b.n	8008082 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008080:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40013400 	.word	0x40013400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	00010007 	.word	0x00010007

080080ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d122      	bne.n	8008108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d11b      	bne.n	8008108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0202 	mvn.w	r2, #2
 80080d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f905 	bl	80082fe <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8f7 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f908 	bl	8008312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b04      	cmp	r3, #4
 8008114:	d122      	bne.n	800815c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b04      	cmp	r3, #4
 8008122:	d11b      	bne.n	800815c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0204 	mvn.w	r2, #4
 800812c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2202      	movs	r2, #2
 8008132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f8db 	bl	80082fe <HAL_TIM_IC_CaptureCallback>
 8008148:	e005      	b.n	8008156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f8cd 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f8de 	bl	8008312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b08      	cmp	r3, #8
 8008168:	d122      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b08      	cmp	r3, #8
 8008176:	d11b      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0208 	mvn.w	r2, #8
 8008180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f8b1 	bl	80082fe <HAL_TIM_IC_CaptureCallback>
 800819c:	e005      	b.n	80081aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8a3 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8b4 	bl	8008312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f003 0310 	and.w	r3, r3, #16
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d122      	bne.n	8008204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b10      	cmp	r3, #16
 80081ca:	d11b      	bne.n	8008204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0210 	mvn.w	r2, #16
 80081d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2208      	movs	r2, #8
 80081da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f887 	bl	80082fe <HAL_TIM_IC_CaptureCallback>
 80081f0:	e005      	b.n	80081fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f879 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f88a 	bl	8008312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b01      	cmp	r3, #1
 8008210:	d10e      	bne.n	8008230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b01      	cmp	r3, #1
 800821e:	d107      	bne.n	8008230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0201 	mvn.w	r2, #1
 8008228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7f8 fd28 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823a:	2b80      	cmp	r3, #128	; 0x80
 800823c:	d10e      	bne.n	800825c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008248:	2b80      	cmp	r3, #128	; 0x80
 800824a:	d107      	bne.n	800825c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f914 	bl	8008484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826a:	d10e      	bne.n	800828a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008276:	2b80      	cmp	r3, #128	; 0x80
 8008278:	d107      	bne.n	800828a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f907 	bl	8008498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b40      	cmp	r3, #64	; 0x40
 8008296:	d10e      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a2:	2b40      	cmp	r3, #64	; 0x40
 80082a4:	d107      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f838 	bl	8008326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d10e      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d107      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f06f 0220 	mvn.w	r2, #32
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f8c7 	bl	8008470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e2:	bf00      	nop
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a40      	ldr	r2, [pc, #256]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835a:	d00f      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <TIM_Base_SetConfig+0x118>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00b      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a3c      	ldr	r2, [pc, #240]	; (8008458 <TIM_Base_SetConfig+0x11c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d007      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a3b      	ldr	r2, [pc, #236]	; (800845c <TIM_Base_SetConfig+0x120>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a3a      	ldr	r2, [pc, #232]	; (8008460 <TIM_Base_SetConfig+0x124>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d108      	bne.n	800838e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2f      	ldr	r2, [pc, #188]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01f      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839c:	d01b      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a2c      	ldr	r2, [pc, #176]	; (8008454 <TIM_Base_SetConfig+0x118>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d017      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a2b      	ldr	r2, [pc, #172]	; (8008458 <TIM_Base_SetConfig+0x11c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <TIM_Base_SetConfig+0x120>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a29      	ldr	r2, [pc, #164]	; (8008460 <TIM_Base_SetConfig+0x124>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a28      	ldr	r2, [pc, #160]	; (8008464 <TIM_Base_SetConfig+0x128>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a27      	ldr	r2, [pc, #156]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a26      	ldr	r2, [pc, #152]	; (800846c <TIM_Base_SetConfig+0x130>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d108      	bne.n	80083e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a10      	ldr	r2, [pc, #64]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00f      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a12      	ldr	r2, [pc, #72]	; (8008460 <TIM_Base_SetConfig+0x124>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00b      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a11      	ldr	r2, [pc, #68]	; (8008464 <TIM_Base_SetConfig+0x128>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a10      	ldr	r2, [pc, #64]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a0f      	ldr	r2, [pc, #60]	; (800846c <TIM_Base_SetConfig+0x130>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d103      	bne.n	800843c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	615a      	str	r2, [r3, #20]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40014000 	.word	0x40014000
 8008468:	40014400 	.word	0x40014400
 800846c:	40014800 	.word	0x40014800

08008470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	f023 0101 	bic.w	r1, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d102      	bne.n	80084dc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80084d6:	2340      	movs	r3, #64	; 0x40
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	e001      	b.n	80084e0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80084ec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80084f2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80084f8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80084fe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008504:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800850a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008510:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008516:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800851c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800854e:	4b23      	ldr	r3, [pc, #140]	; (80085dc <FMC_NORSRAM_Init+0x130>)
 8008550:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008558:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008560:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008568:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008570:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	43db      	mvns	r3, r3
 8008580:	ea02 0103 	and.w	r1, r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4319      	orrs	r1, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800859a:	d10c      	bne.n	80085b6 <FMC_NORSRAM_Init+0x10a>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d006      	beq.n	80085cc <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	0008fb7f 	.word	0x0008fb7f

080085e0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	431a      	orrs	r2, r3
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	021b      	lsls	r3, r3, #8
 8008608:	431a      	orrs	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	079b      	lsls	r3, r3, #30
 8008610:	431a      	orrs	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	431a      	orrs	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	3b01      	subs	r3, #1
 8008620:	051b      	lsls	r3, r3, #20
 8008622:	431a      	orrs	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	3b02      	subs	r3, #2
 800862a:	061b      	lsls	r3, r3, #24
 800862c:	ea42 0103 	orr.w	r1, r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	3201      	adds	r2, #1
 8008638:	4319      	orrs	r1, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800864c:	d113      	bne.n	8008676 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008656:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	3b01      	subs	r3, #1
 800865e:	051b      	lsls	r3, r3, #20
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	431a      	orrs	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008698:	d121      	bne.n	80086de <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a2:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6819      	ldr	r1, [r3, #0]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	4319      	orrs	r1, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	4319      	orrs	r1, r3
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	079b      	lsls	r3, r3, #30
 80086c0:	4319      	orrs	r1, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	4319      	orrs	r1, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	041b      	lsls	r3, r3, #16
 80086ce:	430b      	orrs	r3, r1
 80086d0:	ea42 0103 	orr.w	r1, r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086dc:	e005      	b.n	80086ea <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80086e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80086f8:	b084      	sub	sp, #16
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	f107 001c 	add.w	r0, r7, #28
 8008706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800870e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008710:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008712:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008716:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800871a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800871e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	4b07      	ldr	r3, [pc, #28]	; (8008748 <SDMMC_Init+0x50>)
 800872c:	4013      	ands	r3, r2
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	b004      	add	sp, #16
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	ffc02c00 	.word	0xffc02c00

0800874c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f043 0203 	orr.w	r2, r3, #3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800879c:	2002      	movs	r0, #2
 800879e:	f7f8 fef5 	bl	800158c <HAL_Delay>

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0303 	and.w	r3, r3, #3
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80087ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80087f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <SDMMC_SendCommand+0x50>)
 8008800:	4013      	ands	r3, r2
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	fffee0c0 	.word	0xfffee0c0

0800881c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	b2db      	uxtb	r3, r3
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3314      	adds	r3, #20
 8008844:	461a      	mov	r2, r3
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	4413      	add	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008882:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008888:	431a      	orrs	r2, r3
                       Data->DPSM);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800888e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0

}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80088c2:	2310      	movs	r3, #16
 80088c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088d6:	f107 0308 	add.w	r3, r7, #8
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ff73 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80088e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e6:	2110      	movs	r1, #16
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fa7b 	bl	8008de4 <SDMMC_GetCmdResp1>
 80088ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088f0:	69fb      	ldr	r3, [r7, #28]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008908:	2311      	movs	r3, #17
 800890a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800890c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800891a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800891c:	f107 0308 	add.w	r3, r7, #8
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ff50 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008928:	f241 3288 	movw	r2, #5000	; 0x1388
 800892c:	2111      	movs	r1, #17
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa58 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008936:	69fb      	ldr	r3, [r7, #28]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3720      	adds	r7, #32
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800894e:	2312      	movs	r3, #18
 8008950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800895c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008960:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008962:	f107 0308 	add.w	r3, r7, #8
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff2d 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800896e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008972:	2112      	movs	r1, #18
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa35 	bl	8008de4 <SDMMC_GetCmdResp1>
 800897a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008994:	2318      	movs	r3, #24
 8008996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800899c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089a8:	f107 0308 	add.w	r3, r7, #8
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff ff0a 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80089b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b8:	2118      	movs	r1, #24
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa12 	bl	8008de4 <SDMMC_GetCmdResp1>
 80089c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089c2:	69fb      	ldr	r3, [r7, #28]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80089da:	2319      	movs	r3, #25
 80089dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff fee7 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80089fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fe:	2119      	movs	r1, #25
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f9ef 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a08:	69fb      	ldr	r3, [r7, #28]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3720      	adds	r7, #32
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008a20:	230c      	movs	r3, #12
 8008a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a32:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a4c:	f107 0308 	add.w	r3, r7, #8
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff feb8 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008a58:	4a08      	ldr	r2, [pc, #32]	; (8008a7c <SDMMC_CmdStopTransfer+0x68>)
 8008a5a:	210c      	movs	r1, #12
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9c1 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008a62:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008a70:	69fb      	ldr	r3, [r7, #28]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3720      	adds	r7, #32
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	05f5e100 	.word	0x05f5e100

08008a80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	; 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008a90:	2307      	movs	r3, #7
 8008a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a98:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008aa4:	f107 0310 	add.w	r3, r7, #16
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7ff fe8c 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab4:	2107      	movs	r1, #7
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f994 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008abc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3728      	adds	r7, #40	; 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fe6b 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fbb8 	bl	8009268 <SDMMC_GetCmdError>
 8008af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008afa:	69fb      	ldr	r3, [r7, #28]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3720      	adds	r7, #32
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008b0c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008b12:	2308      	movs	r3, #8
 8008b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b26:	f107 0308 	add.w	r3, r7, #8
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff fe4b 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fb4a 	bl	80091cc <SDMMC_GetCmdResp7>
 8008b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008b52:	2337      	movs	r3, #55	; 0x37
 8008b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b66:	f107 0308 	add.w	r3, r7, #8
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff fe2b 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b76:	2137      	movs	r1, #55	; 0x37
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f933 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b80:	69fb      	ldr	r3, [r7, #28]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b088      	sub	sp, #32
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008b98:	2329      	movs	r3, #41	; 0x29
 8008b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fe08 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa4f 	bl	800905c <SDMMC_GetCmdResp3>
 8008bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b088      	sub	sp, #32
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008bd8:	2306      	movs	r3, #6
 8008bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fde8 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	2106      	movs	r1, #6
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f8f0 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c06:	69fb      	ldr	r3, [r7, #28]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008c1c:	2333      	movs	r3, #51	; 0x33
 8008c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c30:	f107 0308 	add.w	r3, r7, #8
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff fdc6 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c40:	2133      	movs	r1, #51	; 0x33
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f8ce 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008c48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3720      	adds	r7, #32
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008c60:	2302      	movs	r3, #2
 8008c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c74:	f107 0308 	add.w	r3, r7, #8
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff fda4 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9a1 	bl	8008fc8 <SDMMC_GetCmdResp2>
 8008c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c88:	69fb      	ldr	r3, [r7, #28]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3720      	adds	r7, #32
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b088      	sub	sp, #32
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008ca0:	2309      	movs	r3, #9
 8008ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cb4:	f107 0308 	add.w	r3, r7, #8
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fd84 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f981 	bl	8008fc8 <SDMMC_GetCmdResp2>
 8008cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3720      	adds	r7, #32
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b088      	sub	sp, #32
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cea:	2300      	movs	r3, #0
 8008cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cf4:	f107 0308 	add.w	r3, r7, #8
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff fd64 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	2103      	movs	r1, #3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f9e9 	bl	80090dc <SDMMC_GetCmdResp6>
 8008d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b088      	sub	sp, #32
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008d24:	230d      	movs	r3, #13
 8008d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d38:	f107 0308 	add.w	r3, r7, #8
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff fd42 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d48:	210d      	movs	r1, #13
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f84a 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008d50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d52:	69fb      	ldr	r3, [r7, #28]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008d68:	230d      	movs	r3, #13
 8008d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d7c:	f107 0308 	add.w	r3, r7, #8
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff fd20 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8c:	210d      	movs	r1, #13
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f828 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d96:	69fb      	ldr	r3, [r7, #28]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3720      	adds	r7, #32
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008dac:	230b      	movs	r3, #11
 8008dae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dc0:	f107 0308 	add.w	r3, r7, #8
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fcfe 	bl	80087c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd0:	210b      	movs	r1, #11
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f806 	bl	8008de4 <SDMMC_GetCmdResp1>
 8008dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dda:	69fb      	ldr	r3, [r7, #28]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3720      	adds	r7, #32
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	460b      	mov	r3, r1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008df2:	4b70      	ldr	r3, [pc, #448]	; (8008fb4 <SDMMC_GetCmdResp1+0x1d0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a70      	ldr	r2, [pc, #448]	; (8008fb8 <SDMMC_GetCmdResp1+0x1d4>)
 8008df8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfc:	0a5a      	lsrs	r2, r3, #9
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	fb02 f303 	mul.w	r3, r2, r3
 8008e04:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	1e5a      	subs	r2, r3, #1
 8008e0a:	61fa      	str	r2, [r7, #28]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e14:	e0c9      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	4b67      	ldr	r3, [pc, #412]	; (8008fbc <SDMMC_GetCmdResp1+0x1d8>)
 8008e20:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0ef      	beq.n	8008e06 <SDMMC_GetCmdResp1+0x22>
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1ea      	bne.n	8008e06 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d004      	beq.n	8008e46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2204      	movs	r2, #4
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e42:	2304      	movs	r3, #4
 8008e44:	e0b1      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e0a6      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4a58      	ldr	r2, [pc, #352]	; (8008fc0 <SDMMC_GetCmdResp1+0x1dc>)
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7ff fcda 	bl	800881c <SDMMC_GetCommandResponse>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d001      	beq.n	8008e76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e099      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e76:	2100      	movs	r1, #0
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fcdc 	bl	8008836 <SDMMC_GetResponse>
 8008e7e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4b50      	ldr	r3, [pc, #320]	; (8008fc4 <SDMMC_GetCmdResp1+0x1e0>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e08d      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da02      	bge.n	8008e9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e98:	e087      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ea4:	2340      	movs	r3, #64	; 0x40
 8008ea6:	e080      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008eb2:	2380      	movs	r3, #128	; 0x80
 8008eb4:	e079      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ec4:	e071      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ed4:	e069      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee4:	e061      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ef4:	e059      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f04:	e051      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f14:	e049      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f24:	e041      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f34:	e039      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f44:	e031      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008f50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f54:	e029      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008f60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f64:	e021      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f74:	e019      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008f80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f84:	e011      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f94:	e009      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008fa0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008fa4:	e001      	b.n	8008faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000000 	.word	0x20000000
 8008fb8:	10624dd3 	.word	0x10624dd3
 8008fbc:	00200045 	.word	0x00200045
 8008fc0:	002000c5 	.word	0x002000c5
 8008fc4:	fdffe008 	.word	0xfdffe008

08008fc8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fd0:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <SDMMC_GetCmdResp2+0x88>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <SDMMC_GetCmdResp2+0x8c>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	0a5b      	lsrs	r3, r3, #9
 8008fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
 8008fe4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	1e5a      	subs	r2, r3, #1
 8008fea:	60fa      	str	r2, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d102      	bne.n	8008ff6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ff4:	e026      	b.n	8009044 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0ef      	beq.n	8008fe6 <SDMMC_GetCmdResp2+0x1e>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1ea      	bne.n	8008fe6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2204      	movs	r2, #4
 8009020:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009022:	2304      	movs	r3, #4
 8009024:	e00e      	b.n	8009044 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009038:	2301      	movs	r3, #1
 800903a:	e003      	b.n	8009044 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a06      	ldr	r2, [pc, #24]	; (8009058 <SDMMC_GetCmdResp2+0x90>)
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000000 	.word	0x20000000
 8009054:	10624dd3 	.word	0x10624dd3
 8009058:	002000c5 	.word	0x002000c5

0800905c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009064:	4b1a      	ldr	r3, [pc, #104]	; (80090d0 <SDMMC_GetCmdResp3+0x74>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <SDMMC_GetCmdResp3+0x78>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	0a5b      	lsrs	r3, r3, #9
 8009070:	f241 3288 	movw	r2, #5000	; 0x1388
 8009074:	fb02 f303 	mul.w	r3, r2, r3
 8009078:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	60fa      	str	r2, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009084:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009088:	e01b      	b.n	80090c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0ef      	beq.n	800907a <SDMMC_GetCmdResp3+0x1e>
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1ea      	bne.n	800907a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2204      	movs	r2, #4
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090b6:	2304      	movs	r3, #4
 80090b8:	e003      	b.n	80090c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <SDMMC_GetCmdResp3+0x7c>)
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000000 	.word	0x20000000
 80090d4:	10624dd3 	.word	0x10624dd3
 80090d8:	002000c5 	.word	0x002000c5

080090dc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	460b      	mov	r3, r1
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090ea:	4b35      	ldr	r3, [pc, #212]	; (80091c0 <SDMMC_GetCmdResp6+0xe4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a35      	ldr	r2, [pc, #212]	; (80091c4 <SDMMC_GetCmdResp6+0xe8>)
 80090f0:	fba2 2303 	umull	r2, r3, r2, r3
 80090f4:	0a5b      	lsrs	r3, r3, #9
 80090f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fa:	fb02 f303 	mul.w	r3, r2, r3
 80090fe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	1e5a      	subs	r2, r3, #1
 8009104:	61fa      	str	r2, [r7, #28]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d102      	bne.n	8009110 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800910a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800910e:	e052      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009114:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0ef      	beq.n	8009100 <SDMMC_GetCmdResp6+0x24>
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1ea      	bne.n	8009100 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2204      	movs	r2, #4
 800913a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800913c:	2304      	movs	r3, #4
 800913e:	e03a      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009152:	2301      	movs	r3, #1
 8009154:	e02f      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff fb60 	bl	800881c <SDMMC_GetCommandResponse>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	4293      	cmp	r3, r2
 8009164:	d001      	beq.n	800916a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009166:	2301      	movs	r3, #1
 8009168:	e025      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a16      	ldr	r2, [pc, #88]	; (80091c8 <SDMMC_GetCmdResp6+0xec>)
 800916e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009170:	2100      	movs	r1, #0
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff fb5f 	bl	8008836 <SDMMC_GetResponse>
 8009178:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	0c1b      	lsrs	r3, r3, #16
 8009188:	b29a      	uxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800918e:	2300      	movs	r3, #0
 8009190:	e011      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800919c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091a0:	e009      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b0:	e001      	b.n	80091b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000000 	.word	0x20000000
 80091c4:	10624dd3 	.word	0x10624dd3
 80091c8:	002000c5 	.word	0x002000c5

080091cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091d4:	4b22      	ldr	r3, [pc, #136]	; (8009260 <SDMMC_GetCmdResp7+0x94>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a22      	ldr	r2, [pc, #136]	; (8009264 <SDMMC_GetCmdResp7+0x98>)
 80091da:	fba2 2303 	umull	r2, r3, r2, r3
 80091de:	0a5b      	lsrs	r3, r3, #9
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	fb02 f303 	mul.w	r3, r2, r3
 80091e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	1e5a      	subs	r2, r3, #1
 80091ee:	60fa      	str	r2, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f8:	e02c      	b.n	8009254 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0ef      	beq.n	80091ea <SDMMC_GetCmdResp7+0x1e>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1ea      	bne.n	80091ea <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2204      	movs	r2, #4
 8009224:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009226:	2304      	movs	r3, #4
 8009228:	e014      	b.n	8009254 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800923c:	2301      	movs	r3, #1
 800923e:	e009      	b.n	8009254 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2240      	movs	r2, #64	; 0x40
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009252:	2300      	movs	r3, #0

}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000000 	.word	0x20000000
 8009264:	10624dd3 	.word	0x10624dd3

08009268 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009270:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <SDMMC_GetCmdError+0x50>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a11      	ldr	r2, [pc, #68]	; (80092bc <SDMMC_GetCmdError+0x54>)
 8009276:	fba2 2303 	umull	r2, r3, r2, r3
 800927a:	0a5b      	lsrs	r3, r3, #9
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	fb02 f303 	mul.w	r3, r2, r3
 8009284:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	60fa      	str	r2, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009290:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009294:	e009      	b.n	80092aa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f1      	beq.n	8009286 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a06      	ldr	r2, [pc, #24]	; (80092c0 <SDMMC_GetCmdError+0x58>)
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20000000 	.word	0x20000000
 80092bc:	10624dd3 	.word	0x10624dd3
 80092c0:	002000c5 	.word	0x002000c5

080092c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80092c8:	4904      	ldr	r1, [pc, #16]	; (80092dc <MX_FATFS_Init+0x18>)
 80092ca:	4805      	ldr	r0, [pc, #20]	; (80092e0 <MX_FATFS_Init+0x1c>)
 80092cc:	f000 faa4 	bl	8009818 <FATFS_LinkDriver>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <MX_FATFS_Init+0x20>)
 80092d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092d8:	bf00      	nop
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200003dc 	.word	0x200003dc
 80092e0:	0800cf28 	.word	0x0800cf28
 80092e4:	200003d8 	.word	0x200003d8

080092e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80092f2:	f000 f885 	bl	8009400 <BSP_SD_IsDetected>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d001      	beq.n	8009300 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80092fc:	2302      	movs	r3, #2
 80092fe:	e012      	b.n	8009326 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009300:	480b      	ldr	r0, [pc, #44]	; (8009330 <BSP_SD_Init+0x48>)
 8009302:	f7fd f821 	bl	8006348 <HAL_SD_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009314:	4806      	ldr	r0, [pc, #24]	; (8009330 <BSP_SD_Init+0x48>)
 8009316:	f7fd fed5 	bl	80070c4 <HAL_SD_ConfigWideBusOperation>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009324:	79fb      	ldrb	r3, [r7, #7]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	2000024c 	.word	0x2000024c

08009334 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	68f9      	ldr	r1, [r7, #12]
 800934a:	4806      	ldr	r0, [pc, #24]	; (8009364 <BSP_SD_ReadBlocks_DMA+0x30>)
 800934c:	f7fd f924 	bl	8006598 <HAL_SD_ReadBlocks_DMA>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	2000024c 	.word	0x2000024c

08009368 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	68f9      	ldr	r1, [r7, #12]
 800937e:	4806      	ldr	r0, [pc, #24]	; (8009398 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009380:	f7fd f9b2 	bl	80066e8 <HAL_SD_WriteBlocks_DMA>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	2000024c 	.word	0x2000024c

0800939c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80093a0:	4805      	ldr	r0, [pc, #20]	; (80093b8 <BSP_SD_GetCardState+0x1c>)
 80093a2:	f7fd ffa3 	bl	80072ec <HAL_SD_GetCardState>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	bf14      	ite	ne
 80093ac:	2301      	movne	r3, #1
 80093ae:	2300      	moveq	r3, #0
 80093b0:	b2db      	uxtb	r3, r3
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	2000024c 	.word	0x2000024c

080093bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4803      	ldr	r0, [pc, #12]	; (80093d4 <BSP_SD_GetCardInfo+0x18>)
 80093c8:	f7fd fe50 	bl	800706c <HAL_SD_GetCardInfo>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	2000024c 	.word	0x2000024c

080093d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80093e0:	f000 f9aa 	bl	8009738 <BSP_SD_WriteCpltCallback>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80093f4:	f000 f9b2 	bl	800975c <BSP_SD_ReadCpltCallback>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009406:	2301      	movs	r3, #1
 8009408:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800940a:	f000 f80b 	bl	8009424 <BSP_PlatformIsDetected>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009414:	2300      	movs	r3, #0
 8009416:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	b2db      	uxtb	r3, r3
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800942a:	2301      	movs	r3, #1
 800942c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800942e:	2120      	movs	r1, #32
 8009430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009434:	f7fa f8ae 	bl	8003594 <HAL_GPIO_ReadPin>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800943e:	2300      	movs	r3, #0
 8009440:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009442:	79fb      	ldrb	r3, [r7, #7]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009454:	f000 faa0 	bl	8009998 <osKernelGetTickCount>
 8009458:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800945a:	e006      	b.n	800946a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800945c:	f7ff ff9e 	bl	800939c <BSP_SD_GetCardState>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009466:	2300      	movs	r3, #0
 8009468:	e009      	b.n	800947e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800946a:	f000 fa95 	bl	8009998 <osKernelGetTickCount>
 800946e:	4602      	mov	r2, r0
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d8f0      	bhi.n	800945c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800947a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009492:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <SD_CheckStatus+0x38>)
 8009494:	2201      	movs	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009498:	f7ff ff80 	bl	800939c <BSP_SD_GetCardState>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d107      	bne.n	80094b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80094a2:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <SD_CheckStatus+0x38>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	4b04      	ldr	r3, [pc, #16]	; (80094c0 <SD_CheckStatus+0x38>)
 80094b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80094b2:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <SD_CheckStatus+0x38>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	b2db      	uxtb	r3, r3
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20000009 	.word	0x20000009

080094c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80094ce:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <SD_initialize+0x7c>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80094d4:	f000 fa18 	bl	8009908 <osKernelGetState>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d129      	bne.n	8009532 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80094de:	f7ff ff03 	bl	80092e8 <BSP_SD_Init>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d107      	bne.n	80094f8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff ffcc 	bl	8009488 <SD_CheckStatus>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	4b12      	ldr	r3, [pc, #72]	; (8009540 <SD_initialize+0x7c>)
 80094f6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80094f8:	4b11      	ldr	r3, [pc, #68]	; (8009540 <SD_initialize+0x7c>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d017      	beq.n	8009532 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8009502:	4b10      	ldr	r3, [pc, #64]	; (8009544 <SD_initialize+0x80>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d107      	bne.n	800951a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800950a:	2200      	movs	r2, #0
 800950c:	2102      	movs	r1, #2
 800950e:	200a      	movs	r0, #10
 8009510:	f000 fbd2 	bl	8009cb8 <osMessageQueueNew>
 8009514:	4603      	mov	r3, r0
 8009516:	4a0b      	ldr	r2, [pc, #44]	; (8009544 <SD_initialize+0x80>)
 8009518:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <SD_initialize+0x80>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d107      	bne.n	8009532 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8009522:	4b07      	ldr	r3, [pc, #28]	; (8009540 <SD_initialize+0x7c>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	f043 0301 	orr.w	r3, r3, #1
 800952c:	b2da      	uxtb	r2, r3
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <SD_initialize+0x7c>)
 8009530:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009532:	4b03      	ldr	r3, [pc, #12]	; (8009540 <SD_initialize+0x7c>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b2db      	uxtb	r3, r3
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000009 	.word	0x20000009
 8009544:	200003e0 	.word	0x200003e0

08009548 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff ff97 	bl	8009488 <SD_CheckStatus>
 800955a:	4603      	mov	r3, r0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009578:	f247 5030 	movw	r0, #30000	; 0x7530
 800957c:	f7ff ff66 	bl	800944c <SD_CheckStatusWithTimeout>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	da01      	bge.n	800958a <SD_read+0x26>
  {
    return res;
 8009586:	7ffb      	ldrb	r3, [r7, #31]
 8009588:	e02f      	b.n	80095ea <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	68b8      	ldr	r0, [r7, #8]
 8009590:	f7ff fed0 	bl	8009334 <BSP_SD_ReadBlocks_DMA>
 8009594:	4603      	mov	r3, r0
 8009596:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009598:	7fbb      	ldrb	r3, [r7, #30]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d124      	bne.n	80095e8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800959e:	4b15      	ldr	r3, [pc, #84]	; (80095f4 <SD_read+0x90>)
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	f107 0112 	add.w	r1, r7, #18
 80095a6:	f247 5330 	movw	r3, #30000	; 0x7530
 80095aa:	2200      	movs	r2, #0
 80095ac:	f000 fc58 	bl	8009e60 <osMessageQueueGet>
 80095b0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d117      	bne.n	80095e8 <SD_read+0x84>
 80095b8:	8a7b      	ldrh	r3, [r7, #18]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d114      	bne.n	80095e8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80095be:	f000 f9eb 	bl	8009998 <osKernelGetTickCount>
 80095c2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80095c4:	e007      	b.n	80095d6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095c6:	f7ff fee9 	bl	800939c <BSP_SD_GetCardState>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <SD_read+0x72>
              {
                res = RES_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80095d4:	e008      	b.n	80095e8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80095d6:	f000 f9df 	bl	8009998 <osKernelGetTickCount>
 80095da:	4602      	mov	r2, r0
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d9ee      	bls.n	80095c6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80095e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3720      	adds	r7, #32
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200003e0 	.word	0x200003e0

080095f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800960c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009610:	f7ff ff1c 	bl	800944c <SD_CheckStatusWithTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	da01      	bge.n	800961e <SD_write+0x26>
  {
    return res;
 800961a:	7ffb      	ldrb	r3, [r7, #31]
 800961c:	e02d      	b.n	800967a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	68b8      	ldr	r0, [r7, #8]
 8009624:	f7ff fea0 	bl	8009368 <BSP_SD_WriteBlocks_DMA>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d124      	bne.n	8009678 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800962e:	4b15      	ldr	r3, [pc, #84]	; (8009684 <SD_write+0x8c>)
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f107 0112 	add.w	r1, r7, #18
 8009636:	f247 5330 	movw	r3, #30000	; 0x7530
 800963a:	2200      	movs	r2, #0
 800963c:	f000 fc10 	bl	8009e60 <osMessageQueueGet>
 8009640:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d117      	bne.n	8009678 <SD_write+0x80>
 8009648:	8a7b      	ldrh	r3, [r7, #18]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d114      	bne.n	8009678 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800964e:	f000 f9a3 	bl	8009998 <osKernelGetTickCount>
 8009652:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009654:	e007      	b.n	8009666 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009656:	f7ff fea1 	bl	800939c <BSP_SD_GetCardState>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <SD_write+0x6e>
          {
            res = RES_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	77fb      	strb	r3, [r7, #31]
            break;
 8009664:	e008      	b.n	8009678 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009666:	f000 f997 	bl	8009998 <osKernelGetTickCount>
 800966a:	4602      	mov	r2, r0
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	f247 522f 	movw	r2, #29999	; 0x752f
 8009674:	4293      	cmp	r3, r2
 8009676:	d9ee      	bls.n	8009656 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009678:	7ffb      	ldrb	r3, [r7, #31]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3720      	adds	r7, #32
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200003e0 	.word	0x200003e0

08009688 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	; 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	603a      	str	r2, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
 8009694:	460b      	mov	r3, r1
 8009696:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800969e:	4b25      	ldr	r3, [pc, #148]	; (8009734 <SD_ioctl+0xac>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <SD_ioctl+0x28>
 80096ac:	2303      	movs	r3, #3
 80096ae:	e03c      	b.n	800972a <SD_ioctl+0xa2>

  switch (cmd)
 80096b0:	79bb      	ldrb	r3, [r7, #6]
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d834      	bhi.n	8009720 <SD_ioctl+0x98>
 80096b6:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <SD_ioctl+0x34>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	080096cd 	.word	0x080096cd
 80096c0:	080096d5 	.word	0x080096d5
 80096c4:	080096ed 	.word	0x080096ed
 80096c8:	08009707 	.word	0x08009707
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80096d2:	e028      	b.n	8009726 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fe6f 	bl	80093bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80096de:	6a3a      	ldr	r2, [r7, #32]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80096ea:	e01c      	b.n	8009726 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80096ec:	f107 0308 	add.w	r3, r7, #8
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff fe63 	bl	80093bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009704:	e00f      	b.n	8009726 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009706:	f107 0308 	add.w	r3, r7, #8
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fe56 	bl	80093bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	0a5a      	lsrs	r2, r3, #9
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800971e:	e002      	b.n	8009726 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009720:	2304      	movs	r3, #4
 8009722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800972a:	4618      	mov	r0, r3
 800972c:	3730      	adds	r7, #48	; 0x30
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000009 	.word	0x20000009

08009738 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800973e:	2302      	movs	r3, #2
 8009740:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009742:	4b05      	ldr	r3, [pc, #20]	; (8009758 <BSP_SD_WriteCpltCallback+0x20>)
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	1db9      	adds	r1, r7, #6
 8009748:	2300      	movs	r3, #0
 800974a:	2200      	movs	r2, #0
 800974c:	f000 fb28 	bl	8009da0 <osMessageQueuePut>
#endif
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	200003e0 	.word	0x200003e0

0800975c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009762:	2301      	movs	r3, #1
 8009764:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009766:	4b05      	ldr	r3, [pc, #20]	; (800977c <BSP_SD_ReadCpltCallback+0x20>)
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	1db9      	adds	r1, r7, #6
 800976c:	2300      	movs	r3, #0
 800976e:	2200      	movs	r2, #0
 8009770:	f000 fb16 	bl	8009da0 <osMessageQueuePut>
#endif
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	200003e0 	.word	0x200003e0

08009780 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009796:	4b1f      	ldr	r3, [pc, #124]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 8009798:	7a5b      	ldrb	r3, [r3, #9]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d131      	bne.n	8009804 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097a0:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097a2:	7a5b      	ldrb	r3, [r3, #9]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	4b1a      	ldr	r3, [pc, #104]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097aa:	2100      	movs	r1, #0
 80097ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80097ae:	4b19      	ldr	r3, [pc, #100]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097b0:	7a5b      	ldrb	r3, [r3, #9]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	4a17      	ldr	r2, [pc, #92]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097c0:	7a5b      	ldrb	r3, [r3, #9]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	4b13      	ldr	r3, [pc, #76]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097c8:	4413      	add	r3, r2
 80097ca:	79fa      	ldrb	r2, [r7, #7]
 80097cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097ce:	4b11      	ldr	r3, [pc, #68]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097d0:	7a5b      	ldrb	r3, [r3, #9]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	b2d1      	uxtb	r1, r2
 80097d8:	4a0e      	ldr	r2, [pc, #56]	; (8009814 <FATFS_LinkDriverEx+0x94>)
 80097da:	7251      	strb	r1, [r2, #9]
 80097dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097de:	7dbb      	ldrb	r3, [r7, #22]
 80097e0:	3330      	adds	r3, #48	; 0x30
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	3301      	adds	r3, #1
 80097ec:	223a      	movs	r2, #58	; 0x3a
 80097ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3302      	adds	r3, #2
 80097f4:	222f      	movs	r2, #47	; 0x2f
 80097f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	3303      	adds	r3, #3
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009804:	7dfb      	ldrb	r3, [r7, #23]
}
 8009806:	4618      	mov	r0, r3
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	200003e4 	.word	0x200003e4

08009818 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009822:	2200      	movs	r2, #0
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ffaa 	bl	8009780 <FATFS_LinkDriverEx>
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <__NVIC_SetPriority>:
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	6039      	str	r1, [r7, #0]
 8009842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009848:	2b00      	cmp	r3, #0
 800984a:	db0a      	blt.n	8009862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	b2da      	uxtb	r2, r3
 8009850:	490c      	ldr	r1, [pc, #48]	; (8009884 <__NVIC_SetPriority+0x4c>)
 8009852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009856:	0112      	lsls	r2, r2, #4
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	440b      	add	r3, r1
 800985c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009860:	e00a      	b.n	8009878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	b2da      	uxtb	r2, r3
 8009866:	4908      	ldr	r1, [pc, #32]	; (8009888 <__NVIC_SetPriority+0x50>)
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	3b04      	subs	r3, #4
 8009870:	0112      	lsls	r2, r2, #4
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	440b      	add	r3, r1
 8009876:	761a      	strb	r2, [r3, #24]
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	e000e100 	.word	0xe000e100
 8009888:	e000ed00 	.word	0xe000ed00

0800988c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <SysTick_Handler+0x1c>)
 8009892:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009894:	f002 f96e 	bl	800bb74 <xTaskGetSchedulerState>
 8009898:	4603      	mov	r3, r0
 800989a:	2b01      	cmp	r3, #1
 800989c:	d001      	beq.n	80098a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800989e:	f002 ff53 	bl	800c748 <xPortSysTickHandler>
  }
}
 80098a2:	bf00      	nop
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	e000e010 	.word	0xe000e010

080098ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098b0:	2100      	movs	r1, #0
 80098b2:	f06f 0004 	mvn.w	r0, #4
 80098b6:	f7ff ffbf 	bl	8009838 <__NVIC_SetPriority>
#endif
}
 80098ba:	bf00      	nop
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098c6:	f3ef 8305 	mrs	r3, IPSR
 80098ca:	603b      	str	r3, [r7, #0]
  return(result);
 80098cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098d2:	f06f 0305 	mvn.w	r3, #5
 80098d6:	607b      	str	r3, [r7, #4]
 80098d8:	e00c      	b.n	80098f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098da:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <osKernelInitialize+0x44>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d105      	bne.n	80098ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <osKernelInitialize+0x44>)
 80098e4:	2201      	movs	r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	607b      	str	r3, [r7, #4]
 80098ec:	e002      	b.n	80098f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80098ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098f4:	687b      	ldr	r3, [r7, #4]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	200003f0 	.word	0x200003f0

08009908 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800990e:	f002 f931 	bl	800bb74 <xTaskGetSchedulerState>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <osKernelGetState+0x1a>
 8009918:	2b02      	cmp	r3, #2
 800991a:	d105      	bne.n	8009928 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800991c:	2302      	movs	r3, #2
 800991e:	607b      	str	r3, [r7, #4]
      break;
 8009920:	e00c      	b.n	800993c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009922:	2303      	movs	r3, #3
 8009924:	607b      	str	r3, [r7, #4]
      break;
 8009926:	e009      	b.n	800993c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009928:	4b07      	ldr	r3, [pc, #28]	; (8009948 <osKernelGetState+0x40>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d102      	bne.n	8009936 <osKernelGetState+0x2e>
        state = osKernelReady;
 8009930:	2301      	movs	r3, #1
 8009932:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009934:	e001      	b.n	800993a <osKernelGetState+0x32>
        state = osKernelInactive;
 8009936:	2300      	movs	r3, #0
 8009938:	607b      	str	r3, [r7, #4]
      break;
 800993a:	bf00      	nop
  }

  return (state);
 800993c:	687b      	ldr	r3, [r7, #4]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200003f0 	.word	0x200003f0

0800994c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009952:	f3ef 8305 	mrs	r3, IPSR
 8009956:	603b      	str	r3, [r7, #0]
  return(result);
 8009958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <osKernelStart+0x1a>
    stat = osErrorISR;
 800995e:	f06f 0305 	mvn.w	r3, #5
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	e010      	b.n	8009988 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009966:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <osKernelStart+0x48>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d109      	bne.n	8009982 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800996e:	f7ff ff9d 	bl	80098ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009972:	4b08      	ldr	r3, [pc, #32]	; (8009994 <osKernelStart+0x48>)
 8009974:	2202      	movs	r2, #2
 8009976:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009978:	f001 fc8e 	bl	800b298 <vTaskStartScheduler>
      stat = osOK;
 800997c:	2300      	movs	r3, #0
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	e002      	b.n	8009988 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009988:	687b      	ldr	r3, [r7, #4]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	200003f0 	.word	0x200003f0

08009998 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	603b      	str	r3, [r7, #0]
  return(result);
 80099a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80099aa:	f001 fda1 	bl	800b4f0 <xTaskGetTickCountFromISR>
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	e002      	b.n	80099b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80099b2:	f001 fd8d 	bl	800b4d0 <xTaskGetTickCount>
 80099b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80099b8:	687b      	ldr	r3, [r7, #4]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b08e      	sub	sp, #56	; 0x38
 80099c6:	af04      	add	r7, sp, #16
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d2:	f3ef 8305 	mrs	r3, IPSR
 80099d6:	617b      	str	r3, [r7, #20]
  return(result);
 80099d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d17e      	bne.n	8009adc <osThreadNew+0x11a>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d07b      	beq.n	8009adc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099e4:	2380      	movs	r3, #128	; 0x80
 80099e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099e8:	2318      	movs	r3, #24
 80099ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80099f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d045      	beq.n	8009a88 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <osThreadNew+0x48>
        name = attr->name;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d008      	beq.n	8009a30 <osThreadNew+0x6e>
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	2b38      	cmp	r3, #56	; 0x38
 8009a22:	d805      	bhi.n	8009a30 <osThreadNew+0x6e>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <osThreadNew+0x72>
        return (NULL);
 8009a30:	2300      	movs	r3, #0
 8009a32:	e054      	b.n	8009ade <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	695b      	ldr	r3, [r3, #20]
 8009a40:	089b      	lsrs	r3, r3, #2
 8009a42:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00e      	beq.n	8009a6a <osThreadNew+0xa8>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2bbb      	cmp	r3, #187	; 0xbb
 8009a52:	d90a      	bls.n	8009a6a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d006      	beq.n	8009a6a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <osThreadNew+0xa8>
        mem = 1;
 8009a64:	2301      	movs	r3, #1
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	e010      	b.n	8009a8c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10c      	bne.n	8009a8c <osThreadNew+0xca>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d108      	bne.n	8009a8c <osThreadNew+0xca>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d104      	bne.n	8009a8c <osThreadNew+0xca>
          mem = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
 8009a86:	e001      	b.n	8009a8c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d110      	bne.n	8009ab4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a9a:	9202      	str	r2, [sp, #8]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6a3a      	ldr	r2, [r7, #32]
 8009aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f001 fa09 	bl	800aec0 <xTaskCreateStatic>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	e013      	b.n	8009adc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d110      	bne.n	8009adc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	f107 0310 	add.w	r3, r7, #16
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f001 fa54 	bl	800af7a <xTaskCreate>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d001      	beq.n	8009adc <osThreadNew+0x11a>
            hTask = NULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009adc:	693b      	ldr	r3, [r7, #16]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3728      	adds	r7, #40	; 0x28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aee:	f3ef 8305 	mrs	r3, IPSR
 8009af2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009af4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <osDelay+0x1c>
    stat = osErrorISR;
 8009afa:	f06f 0305 	mvn.w	r3, #5
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	e007      	b.n	8009b12 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 fb8f 	bl	800b230 <vTaskDelay>
    }
  }

  return (stat);
 8009b12:	68fb      	ldr	r3, [r7, #12]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08a      	sub	sp, #40	; 0x28
 8009b20:	af02      	add	r7, sp, #8
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2c:	f3ef 8305 	mrs	r3, IPSR
 8009b30:	613b      	str	r3, [r7, #16]
  return(result);
 8009b32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d175      	bne.n	8009c24 <osSemaphoreNew+0x108>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d072      	beq.n	8009c24 <osSemaphoreNew+0x108>
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d86e      	bhi.n	8009c24 <osSemaphoreNew+0x108>
    mem = -1;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d015      	beq.n	8009b7e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <osSemaphoreNew+0x4c>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b4f      	cmp	r3, #79	; 0x4f
 8009b60:	d902      	bls.n	8009b68 <osSemaphoreNew+0x4c>
        mem = 1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e00c      	b.n	8009b82 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d108      	bne.n	8009b82 <osSemaphoreNew+0x66>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <osSemaphoreNew+0x66>
          mem = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	e001      	b.n	8009b82 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b88:	d04c      	beq.n	8009c24 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d128      	bne.n	8009be2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d10a      	bne.n	8009bac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	9200      	str	r2, [sp, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	f000 fb0a 	bl	800a1bc <xQueueGenericCreateStatic>
 8009ba8:	61f8      	str	r0, [r7, #28]
 8009baa:	e005      	b.n	8009bb8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009bac:	2203      	movs	r2, #3
 8009bae:	2100      	movs	r1, #0
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f000 fb7b 	bl	800a2ac <xQueueGenericCreate>
 8009bb6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d022      	beq.n	8009c04 <osSemaphoreNew+0xe8>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01f      	beq.n	8009c04 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2100      	movs	r1, #0
 8009bca:	69f8      	ldr	r0, [r7, #28]
 8009bcc:	f000 fc36 	bl	800a43c <xQueueGenericSend>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d016      	beq.n	8009c04 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f000 ffb6 	bl	800ab48 <vQueueDelete>
            hSemaphore = NULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e010      	b.n	8009c04 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d108      	bne.n	8009bfa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	461a      	mov	r2, r3
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 fbb8 	bl	800a366 <xQueueCreateCountingSemaphoreStatic>
 8009bf6:	61f8      	str	r0, [r7, #28]
 8009bf8:	e004      	b.n	8009c04 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fbe9 	bl	800a3d4 <xQueueCreateCountingSemaphore>
 8009c02:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	e001      	b.n	8009c1c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c1c:	6979      	ldr	r1, [r7, #20]
 8009c1e:	69f8      	ldr	r0, [r7, #28]
 8009c20:	f001 f8c6 	bl	800adb0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c24:	69fb      	ldr	r3, [r7, #28]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d103      	bne.n	8009c4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009c46:	f06f 0303 	mvn.w	r3, #3
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	e02c      	b.n	8009ca8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c4e:	f3ef 8305 	mrs	r3, IPSR
 8009c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c54:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01a      	beq.n	8009c90 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009c5e:	f107 0308 	add.w	r3, r7, #8
 8009c62:	4619      	mov	r1, r3
 8009c64:	6938      	ldr	r0, [r7, #16]
 8009c66:	f000 fd82 	bl	800a76e <xQueueGiveFromISR>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d003      	beq.n	8009c78 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009c70:	f06f 0302 	mvn.w	r3, #2
 8009c74:	617b      	str	r3, [r7, #20]
 8009c76:	e017      	b.n	8009ca8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d014      	beq.n	8009ca8 <osSemaphoreRelease+0x78>
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <osSemaphoreRelease+0x84>)
 8009c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	e00b      	b.n	8009ca8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c90:	2300      	movs	r3, #0
 8009c92:	2200      	movs	r2, #0
 8009c94:	2100      	movs	r1, #0
 8009c96:	6938      	ldr	r0, [r7, #16]
 8009c98:	f000 fbd0 	bl	800a43c <xQueueGenericSend>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d002      	beq.n	8009ca8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009ca2:	f06f 0302 	mvn.w	r3, #2
 8009ca6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009ca8:	697b      	ldr	r3, [r7, #20]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed04 	.word	0xe000ed04

08009cb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	; 0x28
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cc8:	f3ef 8305 	mrs	r3, IPSR
 8009ccc:	613b      	str	r3, [r7, #16]
  return(result);
 8009cce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d15f      	bne.n	8009d94 <osMessageQueueNew+0xdc>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d05c      	beq.n	8009d94 <osMessageQueueNew+0xdc>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d059      	beq.n	8009d94 <osMessageQueueNew+0xdc>
    mem = -1;
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ce4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d029      	beq.n	8009d40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d012      	beq.n	8009d1a <osMessageQueueNew+0x62>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	2b4f      	cmp	r3, #79	; 0x4f
 8009cfa:	d90e      	bls.n	8009d1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	695a      	ldr	r2, [r3, #20]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	fb01 f303 	mul.w	r3, r1, r3
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d302      	bcc.n	8009d1a <osMessageQueueNew+0x62>
        mem = 1;
 8009d14:	2301      	movs	r3, #1
 8009d16:	61bb      	str	r3, [r7, #24]
 8009d18:	e014      	b.n	8009d44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <osMessageQueueNew+0x8c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10c      	bne.n	8009d44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d108      	bne.n	8009d44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d104      	bne.n	8009d44 <osMessageQueueNew+0x8c>
          mem = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e001      	b.n	8009d44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d10b      	bne.n	8009d62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691a      	ldr	r2, [r3, #16]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	2100      	movs	r1, #0
 8009d54:	9100      	str	r1, [sp, #0]
 8009d56:	68b9      	ldr	r1, [r7, #8]
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 fa2f 	bl	800a1bc <xQueueGenericCreateStatic>
 8009d5e:	61f8      	str	r0, [r7, #28]
 8009d60:	e008      	b.n	8009d74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d105      	bne.n	8009d74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009d68:	2200      	movs	r2, #0
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fa9d 	bl	800a2ac <xQueueGenericCreate>
 8009d72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00c      	beq.n	8009d94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	e001      	b.n	8009d8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d8c:	6979      	ldr	r1, [r7, #20]
 8009d8e:	69f8      	ldr	r0, [r7, #28]
 8009d90:	f001 f80e 	bl	800adb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d94:	69fb      	ldr	r3, [r7, #28]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	603b      	str	r3, [r7, #0]
 8009dac:	4613      	mov	r3, r2
 8009dae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db8:	f3ef 8305 	mrs	r3, IPSR
 8009dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8009dbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d028      	beq.n	8009e16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <osMessageQueuePut+0x36>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <osMessageQueuePut+0x36>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009dd6:	f06f 0303 	mvn.w	r3, #3
 8009dda:	61fb      	str	r3, [r7, #28]
 8009ddc:	e038      	b.n	8009e50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009de2:	f107 0210 	add.w	r2, r7, #16
 8009de6:	2300      	movs	r3, #0
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	69b8      	ldr	r0, [r7, #24]
 8009dec:	f000 fc24 	bl	800a638 <xQueueGenericSendFromISR>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d003      	beq.n	8009dfe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009df6:	f06f 0302 	mvn.w	r3, #2
 8009dfa:	61fb      	str	r3, [r7, #28]
 8009dfc:	e028      	b.n	8009e50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d025      	beq.n	8009e50 <osMessageQueuePut+0xb0>
 8009e04:	4b15      	ldr	r3, [pc, #84]	; (8009e5c <osMessageQueuePut+0xbc>)
 8009e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	e01c      	b.n	8009e50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <osMessageQueuePut+0x82>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009e22:	f06f 0303 	mvn.w	r3, #3
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	e012      	b.n	8009e50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	69b8      	ldr	r0, [r7, #24]
 8009e32:	f000 fb03 	bl	800a43c <xQueueGenericSend>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d009      	beq.n	8009e50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009e42:	f06f 0301 	mvn.w	r3, #1
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	e002      	b.n	8009e50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009e4a:	f06f 0302 	mvn.w	r3, #2
 8009e4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e50:	69fb      	ldr	r3, [r7, #28]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e76:	f3ef 8305 	mrs	r3, IPSR
 8009e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8009e7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d028      	beq.n	8009ed4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <osMessageQueueGet+0x34>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <osMessageQueueGet+0x34>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009e94:	f06f 0303 	mvn.w	r3, #3
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	e037      	b.n	8009f0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009ea0:	f107 0310 	add.w	r3, r7, #16
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	69b8      	ldr	r0, [r7, #24]
 8009eaa:	f000 fdcd 	bl	800aa48 <xQueueReceiveFromISR>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d003      	beq.n	8009ebc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009eb4:	f06f 0302 	mvn.w	r3, #2
 8009eb8:	61fb      	str	r3, [r7, #28]
 8009eba:	e027      	b.n	8009f0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d024      	beq.n	8009f0c <osMessageQueueGet+0xac>
 8009ec2:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <osMessageQueueGet+0xb8>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	e01b      	b.n	8009f0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <osMessageQueueGet+0x80>
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d103      	bne.n	8009ee8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009ee0:	f06f 0303 	mvn.w	r3, #3
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	e011      	b.n	8009f0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	69b8      	ldr	r0, [r7, #24]
 8009eee:	f000 fccb 	bl	800a888 <xQueueReceive>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d009      	beq.n	8009f0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009efe:	f06f 0301 	mvn.w	r3, #1
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	e002      	b.n	8009f0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009f06:	f06f 0302 	mvn.w	r3, #2
 8009f0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009f0c:	69fb      	ldr	r3, [r7, #28]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4a07      	ldr	r2, [pc, #28]	; (8009f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	4a06      	ldr	r2, [pc, #24]	; (8009f4c <vApplicationGetIdleTaskMemory+0x30>)
 8009f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2280      	movs	r2, #128	; 0x80
 8009f38:	601a      	str	r2, [r3, #0]
}
 8009f3a:	bf00      	nop
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	200003f4 	.word	0x200003f4
 8009f4c:	200004b0 	.word	0x200004b0

08009f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4a07      	ldr	r2, [pc, #28]	; (8009f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8009f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	4a06      	ldr	r2, [pc, #24]	; (8009f80 <vApplicationGetTimerTaskMemory+0x30>)
 8009f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6e:	601a      	str	r2, [r3, #0]
}
 8009f70:	bf00      	nop
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	200006b0 	.word	0x200006b0
 8009f80:	2000076c 	.word	0x2000076c

08009f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f103 0208 	add.w	r2, r3, #8
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f103 0208 	add.w	r2, r3, #8
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 0208 	add.w	r2, r3, #8
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
}
 800a01a:	bf00      	nop
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a026:	b480      	push	{r7}
 800a028:	b085      	sub	sp, #20
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a03c:	d103      	bne.n	800a046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e00c      	b.n	800a060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3308      	adds	r3, #8
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e002      	b.n	800a054 <vListInsert+0x2e>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d2f6      	bcs.n	800a04e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	601a      	str	r2, [r3, #0]
}
 800a08c:	bf00      	nop
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	6892      	ldr	r2, [r2, #8]
 800a0ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	6852      	ldr	r2, [r2, #4]
 800a0b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d103      	bne.n	800a0cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	1e5a      	subs	r2, r3, #1
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10a      	bne.n	800a116 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a116:	f002 fa85 	bl	800c624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	441a      	add	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a146:	3b01      	subs	r3, #1
 800a148:	68f9      	ldr	r1, [r7, #12]
 800a14a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a14c:	fb01 f303 	mul.w	r3, r1, r3
 800a150:	441a      	add	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	22ff      	movs	r2, #255	; 0xff
 800a15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	22ff      	movs	r2, #255	; 0xff
 800a162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d114      	bne.n	800a196 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01a      	beq.n	800a1aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3310      	adds	r3, #16
 800a178:	4618      	mov	r0, r3
 800a17a:	f001 fb39 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d012      	beq.n	800a1aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <xQueueGenericReset+0xcc>)
 800a186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	e009      	b.n	800a1aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3310      	adds	r3, #16
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff fef2 	bl	8009f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff feed 	bl	8009f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1aa:	f002 fa6b 	bl	800c684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1ae:	2301      	movs	r3, #1
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08e      	sub	sp, #56	; 0x38
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <xQueueGenericCreateStatic+0x52>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <xQueueGenericCreateStatic+0x56>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueGenericCreateStatic+0x58>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	623b      	str	r3, [r7, #32]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d102      	bne.n	800a23a <xQueueGenericCreateStatic+0x7e>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <xQueueGenericCreateStatic+0x82>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e000      	b.n	800a240 <xQueueGenericCreateStatic+0x84>
 800a23e:	2300      	movs	r3, #0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10a      	bne.n	800a25a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	61fb      	str	r3, [r7, #28]
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a25a:	2350      	movs	r3, #80	; 0x50
 800a25c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b50      	cmp	r3, #80	; 0x50
 800a262:	d00a      	beq.n	800a27a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61bb      	str	r3, [r7, #24]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a27a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a28e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	4613      	mov	r3, r2
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 f83f 	bl	800a320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3730      	adds	r7, #48	; 0x30
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	3350      	adds	r3, #80	; 0x50
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f002 fabf 	bl	800c868 <pvPortMalloc>
 800a2ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d011      	beq.n	800a316 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	3350      	adds	r3, #80	; 0x50
 800a2fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a304:	79fa      	ldrb	r2, [r7, #7]
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	4613      	mov	r3, r2
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f805 	bl	800a320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a316:	69bb      	ldr	r3, [r7, #24]
	}
 800a318:	4618      	mov	r0, r3
 800a31a:	3720      	adds	r7, #32
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d103      	bne.n	800a33c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	e002      	b.n	800a342 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a34e:	2101      	movs	r1, #1
 800a350:	69b8      	ldr	r0, [r7, #24]
 800a352:	f7ff fecb 	bl	800a0ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a366:	b580      	push	{r7, lr}
 800a368:	b08a      	sub	sp, #40	; 0x28
 800a36a:	af02      	add	r7, sp, #8
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	61bb      	str	r3, [r7, #24]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	429a      	cmp	r2, r3
 800a394:	d90a      	bls.n	800a3ac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	617b      	str	r3, [r7, #20]
}
 800a3a8:	bf00      	nop
 800a3aa:	e7fe      	b.n	800a3aa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff ff00 	bl	800a1bc <xQueueGenericCreateStatic>
 800a3bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3ca:	69fb      	ldr	r3, [r7, #28]
	}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	613b      	str	r3, [r7, #16]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d90a      	bls.n	800a418 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	60fb      	str	r3, [r7, #12]
}
 800a414:	bf00      	nop
 800a416:	e7fe      	b.n	800a416 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a418:	2202      	movs	r2, #2
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff45 	bl	800a2ac <xQueueGenericCreate>
 800a422:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a430:	697b      	ldr	r3, [r7, #20]
	}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08e      	sub	sp, #56	; 0x38
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a44a:	2300      	movs	r3, #0
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xQueueGenericSend+0x32>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <xQueueGenericSend+0x40>
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <xQueueGenericSend+0x44>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e000      	b.n	800a482 <xQueueGenericSend+0x46>
 800a480:	2300      	movs	r3, #0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <xQueueGenericSend+0x60>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d103      	bne.n	800a4aa <xQueueGenericSend+0x6e>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <xQueueGenericSend+0x72>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueGenericSend+0x74>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueGenericSend+0x8e>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	623b      	str	r3, [r7, #32]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ca:	f001 fb53 	bl	800bb74 <xTaskGetSchedulerState>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <xQueueGenericSend+0x9e>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <xQueueGenericSend+0xa2>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <xQueueGenericSend+0xa4>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueGenericSend+0xbe>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	61fb      	str	r3, [r7, #28]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4fa:	f002 f893 	bl	800c624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a506:	429a      	cmp	r2, r3
 800a508:	d302      	bcc.n	800a510 <xQueueGenericSend+0xd4>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d129      	bne.n	800a564 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a516:	f000 fb3a 	bl	800ab8e <prvCopyDataToQueue>
 800a51a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b00      	cmp	r3, #0
 800a522:	d010      	beq.n	800a546 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	3324      	adds	r3, #36	; 0x24
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 f961 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d013      	beq.n	800a55c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a534:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <xQueueGenericSend+0x1f8>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	e00a      	b.n	800a55c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a54c:	4b39      	ldr	r3, [pc, #228]	; (800a634 <xQueueGenericSend+0x1f8>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a55c:	f002 f892 	bl	800c684 <vPortExitCritical>
				return pdPASS;
 800a560:	2301      	movs	r3, #1
 800a562:	e063      	b.n	800a62c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a56a:	f002 f88b 	bl	800c684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	e05c      	b.n	800a62c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a578:	f107 0314 	add.w	r3, r7, #20
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 f99b 	bl	800b8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a582:	2301      	movs	r3, #1
 800a584:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a586:	f002 f87d 	bl	800c684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a58a:	f000 fef5 	bl	800b378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a58e:	f002 f849 	bl	800c624 <vPortEnterCritical>
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a598:	b25b      	sxtb	r3, r3
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59e:	d103      	bne.n	800a5a8 <xQueueGenericSend+0x16c>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ae:	b25b      	sxtb	r3, r3
 800a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5b4:	d103      	bne.n	800a5be <xQueueGenericSend+0x182>
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5be:	f002 f861 	bl	800c684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5c2:	1d3a      	adds	r2, r7, #4
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 f98a 	bl	800b8e4 <xTaskCheckForTimeOut>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d124      	bne.n	800a620 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d8:	f000 fbd1 	bl	800ad7e <prvIsQueueFull>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d018      	beq.n	800a614 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	3310      	adds	r3, #16
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 f8b0 	bl	800b750 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f2:	f000 fb5c 	bl	800acae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5f6:	f000 fecd 	bl	800b394 <xTaskResumeAll>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f47f af7c 	bne.w	800a4fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a602:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <xQueueGenericSend+0x1f8>)
 800a604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	e772      	b.n	800a4fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a616:	f000 fb4a 	bl	800acae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a61a:	f000 febb 	bl	800b394 <xTaskResumeAll>
 800a61e:	e76c      	b.n	800a4fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a622:	f000 fb44 	bl	800acae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a626:	f000 feb5 	bl	800b394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a62a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3738      	adds	r7, #56	; 0x38
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b090      	sub	sp, #64	; 0x40
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <xQueueGenericSendFromISR+0x3c>
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <xQueueGenericSendFromISR+0x40>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <xQueueGenericSendFromISR+0x42>
 800a678:	2300      	movs	r3, #0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a690:	bf00      	nop
 800a692:	e7fe      	b.n	800a692 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d103      	bne.n	800a6a2 <xQueueGenericSendFromISR+0x6a>
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <xQueueGenericSendFromISR+0x6e>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e000      	b.n	800a6a8 <xQueueGenericSendFromISR+0x70>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	623b      	str	r3, [r7, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6c2:	f002 f891 	bl	800c7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	61fa      	str	r2, [r7, #28]
 800a6dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <xQueueGenericSendFromISR+0xbc>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d12f      	bne.n	800a754 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a702:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a70a:	f000 fa40 	bl	800ab8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a70e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a716:	d112      	bne.n	800a73e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d016      	beq.n	800a74e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	3324      	adds	r3, #36	; 0x24
 800a724:	4618      	mov	r0, r3
 800a726:	f001 f863 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00e      	beq.n	800a74e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	e007      	b.n	800a74e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a73e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a742:	3301      	adds	r3, #1
 800a744:	b2db      	uxtb	r3, r3
 800a746:	b25a      	sxtb	r2, r3
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a74e:	2301      	movs	r3, #1
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a752:	e001      	b.n	800a758 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a754:	2300      	movs	r3, #0
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a762:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a766:	4618      	mov	r0, r3
 800a768:	3740      	adds	r7, #64	; 0x40
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b08e      	sub	sp, #56	; 0x38
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	623b      	str	r3, [r7, #32]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00a      	beq.n	800a7b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	61fb      	str	r3, [r7, #28]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <xQueueGiveFromISR+0x58>
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <xQueueGiveFromISR+0x5c>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <xQueueGiveFromISR+0x5e>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10a      	bne.n	800a7e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	61bb      	str	r3, [r7, #24]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7e6:	f001 ffff 	bl	800c7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a7ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	617a      	str	r2, [r7, #20]
 800a800:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a802:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a804:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a812:	429a      	cmp	r2, r3
 800a814:	d22b      	bcs.n	800a86e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a830:	d112      	bne.n	800a858 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b00      	cmp	r3, #0
 800a838:	d016      	beq.n	800a868 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	3324      	adds	r3, #36	; 0x24
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 ffd6 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00e      	beq.n	800a868 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2201      	movs	r2, #1
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e007      	b.n	800a868 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a85c:	3301      	adds	r3, #1
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	b25a      	sxtb	r2, r3
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a868:	2301      	movs	r3, #1
 800a86a:	637b      	str	r3, [r7, #52]	; 0x34
 800a86c:	e001      	b.n	800a872 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f383 8811 	msr	BASEPRI, r3
}
 800a87c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a880:	4618      	mov	r0, r3
 800a882:	3738      	adds	r7, #56	; 0x38
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08c      	sub	sp, #48	; 0x30
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a894:	2300      	movs	r3, #0
 800a896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xQueueReceive+0x30>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	623b      	str	r3, [r7, #32]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <xQueueReceive+0x3e>
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <xQueueReceive+0x42>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueReceive+0x44>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueReceive+0x5e>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	61fb      	str	r3, [r7, #28]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8e6:	f001 f945 	bl	800bb74 <xTaskGetSchedulerState>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <xQueueReceive+0x6e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <xQueueReceive+0x72>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueReceive+0x74>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueReceive+0x8e>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	61bb      	str	r3, [r7, #24]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a916:	f001 fe85 	bl	800c624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	2b00      	cmp	r3, #0
 800a924:	d01f      	beq.n	800a966 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92a:	f000 f99a 	bl	800ac62 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	1e5a      	subs	r2, r3, #1
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00f      	beq.n	800a95e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	3310      	adds	r3, #16
 800a942:	4618      	mov	r0, r3
 800a944:	f000 ff54 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d007      	beq.n	800a95e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a94e:	4b3d      	ldr	r3, [pc, #244]	; (800aa44 <xQueueReceive+0x1bc>)
 800a950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a95e:	f001 fe91 	bl	800c684 <vPortExitCritical>
				return pdPASS;
 800a962:	2301      	movs	r3, #1
 800a964:	e069      	b.n	800aa3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d103      	bne.n	800a974 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a96c:	f001 fe8a 	bl	800c684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a970:	2300      	movs	r3, #0
 800a972:	e062      	b.n	800aa3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a97a:	f107 0310 	add.w	r3, r7, #16
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 ff9a 	bl	800b8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a984:	2301      	movs	r3, #1
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a988:	f001 fe7c 	bl	800c684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a98c:	f000 fcf4 	bl	800b378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a990:	f001 fe48 	bl	800c624 <vPortEnterCritical>
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99a:	b25b      	sxtb	r3, r3
 800a99c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a0:	d103      	bne.n	800a9aa <xQueueReceive+0x122>
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b0:	b25b      	sxtb	r3, r3
 800a9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9b6:	d103      	bne.n	800a9c0 <xQueueReceive+0x138>
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9c0:	f001 fe60 	bl	800c684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9c4:	1d3a      	adds	r2, r7, #4
 800a9c6:	f107 0310 	add.w	r3, r7, #16
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 ff89 	bl	800b8e4 <xTaskCheckForTimeOut>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d123      	bne.n	800aa20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9da:	f000 f9ba 	bl	800ad52 <prvIsQueueEmpty>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d017      	beq.n	800aa14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	3324      	adds	r3, #36	; 0x24
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 feaf 	bl	800b750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f4:	f000 f95b 	bl	800acae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9f8:	f000 fccc 	bl	800b394 <xTaskResumeAll>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d189      	bne.n	800a916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa02:	4b10      	ldr	r3, [pc, #64]	; (800aa44 <xQueueReceive+0x1bc>)
 800aa04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	e780      	b.n	800a916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa16:	f000 f94a 	bl	800acae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa1a:	f000 fcbb 	bl	800b394 <xTaskResumeAll>
 800aa1e:	e77a      	b.n	800a916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa22:	f000 f944 	bl	800acae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa26:	f000 fcb5 	bl	800b394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2c:	f000 f991 	bl	800ad52 <prvIsQueueEmpty>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f43f af6f 	beq.w	800a916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3730      	adds	r7, #48	; 0x30
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	e000ed04 	.word	0xe000ed04

0800aa48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08e      	sub	sp, #56	; 0x38
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	623b      	str	r3, [r7, #32]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d103      	bne.n	800aa82 <xQueueReceiveFromISR+0x3a>
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <xQueueReceiveFromISR+0x3e>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <xQueueReceiveFromISR+0x40>
 800aa86:	2300      	movs	r3, #0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	61fb      	str	r3, [r7, #28]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaa2:	f001 fea1 	bl	800c7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800aaa6:	f3ef 8211 	mrs	r2, BASEPRI
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	61ba      	str	r2, [r7, #24]
 800aabc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aabe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d02f      	beq.n	800ab2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aad8:	68b9      	ldr	r1, [r7, #8]
 800aada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aadc:	f000 f8c1 	bl	800ac62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaf0:	d112      	bne.n	800ab18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d016      	beq.n	800ab28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	3310      	adds	r3, #16
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fe76 	bl	800b7f0 <xTaskRemoveFromEventList>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00e      	beq.n	800ab28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	e007      	b.n	800ab28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	b25a      	sxtb	r2, r3
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2c:	e001      	b.n	800ab32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	637b      	str	r3, [r7, #52]	; 0x34
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f383 8811 	msr	BASEPRI, r3
}
 800ab3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3738      	adds	r7, #56	; 0x38
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10a      	bne.n	800ab70 <vQueueDelete+0x28>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	60bb      	str	r3, [r7, #8]
}
 800ab6c:	bf00      	nop
 800ab6e:	e7fe      	b.n	800ab6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f947 	bl	800ae04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f001 ff3d 	bl	800ca00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b086      	sub	sp, #24
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	60f8      	str	r0, [r7, #12]
 800ab96:	60b9      	str	r1, [r7, #8]
 800ab98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10d      	bne.n	800abc8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d14d      	bne.n	800ac50 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fff9 	bl	800bbb0 <xTaskPriorityDisinherit>
 800abbe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	609a      	str	r2, [r3, #8]
 800abc6:	e043      	b.n	800ac50 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d119      	bne.n	800ac02 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6858      	ldr	r0, [r3, #4]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	461a      	mov	r2, r3
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	f002 f855 	bl	800cc88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	441a      	add	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d32b      	bcc.n	800ac50 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	605a      	str	r2, [r3, #4]
 800ac00:	e026      	b.n	800ac50 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68d8      	ldr	r0, [r3, #12]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	68b9      	ldr	r1, [r7, #8]
 800ac0e:	f002 f83b 	bl	800cc88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	425b      	negs	r3, r3
 800ac1c:	441a      	add	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	68da      	ldr	r2, [r3, #12]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d207      	bcs.n	800ac3e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac36:	425b      	negs	r3, r3
 800ac38:	441a      	add	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d105      	bne.n	800ac50 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac58:	697b      	ldr	r3, [r7, #20]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d018      	beq.n	800aca6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	441a      	add	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d303      	bcc.n	800ac96 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68d9      	ldr	r1, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9e:	461a      	mov	r2, r3
 800aca0:	6838      	ldr	r0, [r7, #0]
 800aca2:	f001 fff1 	bl	800cc88 <memcpy>
	}
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acb6:	f001 fcb5 	bl	800c624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acc0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acc2:	e011      	b.n	800ace8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d012      	beq.n	800acf2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3324      	adds	r3, #36	; 0x24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fd8d 	bl	800b7f0 <xTaskRemoveFromEventList>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acdc:	f000 fe64 	bl	800b9a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ace8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acec:	2b00      	cmp	r3, #0
 800acee:	dce9      	bgt.n	800acc4 <prvUnlockQueue+0x16>
 800acf0:	e000      	b.n	800acf4 <prvUnlockQueue+0x46>
					break;
 800acf2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	22ff      	movs	r2, #255	; 0xff
 800acf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acfc:	f001 fcc2 	bl	800c684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad00:	f001 fc90 	bl	800c624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad0a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad0c:	e011      	b.n	800ad32 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d012      	beq.n	800ad3c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3310      	adds	r3, #16
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fd68 	bl	800b7f0 <xTaskRemoveFromEventList>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad26:	f000 fe3f 	bl	800b9a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	dce9      	bgt.n	800ad0e <prvUnlockQueue+0x60>
 800ad3a:	e000      	b.n	800ad3e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad3c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	22ff      	movs	r2, #255	; 0xff
 800ad42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad46:	f001 fc9d 	bl	800c684 <vPortExitCritical>
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad5a:	f001 fc63 	bl	800c624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad66:	2301      	movs	r3, #1
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e001      	b.n	800ad70 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad70:	f001 fc88 	bl	800c684 <vPortExitCritical>

	return xReturn;
 800ad74:	68fb      	ldr	r3, [r7, #12]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad86:	f001 fc4d 	bl	800c624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d102      	bne.n	800ad9c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad96:	2301      	movs	r3, #1
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	e001      	b.n	800ada0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ada0:	f001 fc70 	bl	800c684 <vPortExitCritical>

	return xReturn;
 800ada4:	68fb      	ldr	r3, [r7, #12]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	e014      	b.n	800adea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800adc0:	4a0f      	ldr	r2, [pc, #60]	; (800ae00 <vQueueAddToRegistry+0x50>)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10b      	bne.n	800ade4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800adcc:	490c      	ldr	r1, [pc, #48]	; (800ae00 <vQueueAddToRegistry+0x50>)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800add6:	4a0a      	ldr	r2, [pc, #40]	; (800ae00 <vQueueAddToRegistry+0x50>)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	4413      	add	r3, r2
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ade2:	e006      	b.n	800adf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	3301      	adds	r3, #1
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b07      	cmp	r3, #7
 800adee:	d9e7      	bls.n	800adc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000b6c 	.word	0x20000b6c

0800ae04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e016      	b.n	800ae40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae12:	4a10      	ldr	r2, [pc, #64]	; (800ae54 <vQueueUnregisterQueue+0x50>)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	4413      	add	r3, r2
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d10b      	bne.n	800ae3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ae22:	4a0c      	ldr	r2, [pc, #48]	; (800ae54 <vQueueUnregisterQueue+0x50>)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2100      	movs	r1, #0
 800ae28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ae2c:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <vQueueUnregisterQueue+0x50>)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	4413      	add	r3, r2
 800ae34:	2200      	movs	r2, #0
 800ae36:	605a      	str	r2, [r3, #4]
				break;
 800ae38:	e006      	b.n	800ae48 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b07      	cmp	r3, #7
 800ae44:	d9e5      	bls.n	800ae12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	20000b6c 	.word	0x20000b6c

0800ae58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae68:	f001 fbdc 	bl	800c624 <vPortEnterCritical>
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae78:	d103      	bne.n	800ae82 <vQueueWaitForMessageRestricted+0x2a>
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae8e:	d103      	bne.n	800ae98 <vQueueWaitForMessageRestricted+0x40>
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	f001 fbf4 	bl	800c684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	3324      	adds	r3, #36	; 0x24
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 fc73 	bl	800b798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aeb2:	6978      	ldr	r0, [r7, #20]
 800aeb4:	f7ff fefb 	bl	800acae <prvUnlockQueue>
	}
 800aeb8:	bf00      	nop
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08e      	sub	sp, #56	; 0x38
 800aec4:	af04      	add	r7, sp, #16
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10a      	bne.n	800aeea <xTaskCreateStatic+0x2a>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	623b      	str	r3, [r7, #32]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10a      	bne.n	800af06 <xTaskCreateStatic+0x46>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	61fb      	str	r3, [r7, #28]
}
 800af02:	bf00      	nop
 800af04:	e7fe      	b.n	800af04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af06:	23bc      	movs	r3, #188	; 0xbc
 800af08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2bbc      	cmp	r3, #188	; 0xbc
 800af0e:	d00a      	beq.n	800af26 <xTaskCreateStatic+0x66>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	61bb      	str	r3, [r7, #24]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01e      	beq.n	800af6c <xTaskCreateStatic+0xac>
 800af2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af30:	2b00      	cmp	r3, #0
 800af32:	d01b      	beq.n	800af6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	2202      	movs	r2, #2
 800af42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af46:	2300      	movs	r3, #0
 800af48:	9303      	str	r3, [sp, #12]
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	9302      	str	r3, [sp, #8]
 800af4e:	f107 0314 	add.w	r3, r7, #20
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	68b9      	ldr	r1, [r7, #8]
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f000 f850 	bl	800b004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af66:	f000 f8f3 	bl	800b150 <prvAddNewTaskToReadyList>
 800af6a:	e001      	b.n	800af70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af70:	697b      	ldr	r3, [r7, #20]
	}
 800af72:	4618      	mov	r0, r3
 800af74:	3728      	adds	r7, #40	; 0x28
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b08c      	sub	sp, #48	; 0x30
 800af7e:	af04      	add	r7, sp, #16
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	603b      	str	r3, [r7, #0]
 800af86:	4613      	mov	r3, r2
 800af88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af8a:	88fb      	ldrh	r3, [r7, #6]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 fc6a 	bl	800c868 <pvPortMalloc>
 800af94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00e      	beq.n	800afba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af9c:	20bc      	movs	r0, #188	; 0xbc
 800af9e:	f001 fc63 	bl	800c868 <pvPortMalloc>
 800afa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	631a      	str	r2, [r3, #48]	; 0x30
 800afb0:	e005      	b.n	800afbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afb2:	6978      	ldr	r0, [r7, #20]
 800afb4:	f001 fd24 	bl	800ca00 <vPortFree>
 800afb8:	e001      	b.n	800afbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d017      	beq.n	800aff4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afcc:	88fa      	ldrh	r2, [r7, #6]
 800afce:	2300      	movs	r3, #0
 800afd0:	9303      	str	r3, [sp, #12]
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	9302      	str	r3, [sp, #8]
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 f80e 	bl	800b004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afe8:	69f8      	ldr	r0, [r7, #28]
 800afea:	f000 f8b1 	bl	800b150 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800afee:	2301      	movs	r3, #1
 800aff0:	61bb      	str	r3, [r7, #24]
 800aff2:	e002      	b.n	800affa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aff8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800affa:	69bb      	ldr	r3, [r7, #24]
	}
 800affc:	4618      	mov	r0, r3
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	461a      	mov	r2, r3
 800b01c:	21a5      	movs	r1, #165	; 0xa5
 800b01e:	f001 fe41 	bl	800cca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b02c:	3b01      	subs	r3, #1
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	f023 0307 	bic.w	r3, r3, #7
 800b03a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	617b      	str	r3, [r7, #20]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01f      	beq.n	800b0a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
 800b066:	e012      	b.n	800b08e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	4413      	add	r3, r2
 800b06e:	7819      	ldrb	r1, [r3, #0]
 800b070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	4413      	add	r3, r2
 800b076:	3334      	adds	r3, #52	; 0x34
 800b078:	460a      	mov	r2, r1
 800b07a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	4413      	add	r3, r2
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d006      	beq.n	800b096 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	3301      	adds	r3, #1
 800b08c:	61fb      	str	r3, [r7, #28]
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	2b0f      	cmp	r3, #15
 800b092:	d9e9      	bls.n	800b068 <prvInitialiseNewTask+0x64>
 800b094:	e000      	b.n	800b098 <prvInitialiseNewTask+0x94>
			{
				break;
 800b096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0a0:	e003      	b.n	800b0aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	2b37      	cmp	r3, #55	; 0x37
 800b0ae:	d901      	bls.n	800b0b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0b0:	2337      	movs	r3, #55	; 0x37
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe ff7a 	bl	8009fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	3318      	adds	r3, #24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe ff75 	bl	8009fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	3354      	adds	r3, #84	; 0x54
 800b104:	2260      	movs	r2, #96	; 0x60
 800b106:	2100      	movs	r1, #0
 800b108:	4618      	mov	r0, r3
 800b10a:	f001 fdcb 	bl	800cca4 <memset>
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	4a0c      	ldr	r2, [pc, #48]	; (800b144 <prvInitialiseNewTask+0x140>)
 800b112:	659a      	str	r2, [r3, #88]	; 0x58
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <prvInitialiseNewTask+0x144>)
 800b118:	65da      	str	r2, [r3, #92]	; 0x5c
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <prvInitialiseNewTask+0x148>)
 800b11e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	68f9      	ldr	r1, [r7, #12]
 800b124:	69b8      	ldr	r0, [r7, #24]
 800b126:	f001 f953 	bl	800c3d0 <pxPortInitialiseStack>
 800b12a:	4602      	mov	r2, r0
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b13a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b13c:	bf00      	nop
 800b13e:	3720      	adds	r7, #32
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	0800cf5c 	.word	0x0800cf5c
 800b148:	0800cf7c 	.word	0x0800cf7c
 800b14c:	0800cf3c 	.word	0x0800cf3c

0800b150 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b158:	f001 fa64 	bl	800c624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b15c:	4b2d      	ldr	r3, [pc, #180]	; (800b214 <prvAddNewTaskToReadyList+0xc4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3301      	adds	r3, #1
 800b162:	4a2c      	ldr	r2, [pc, #176]	; (800b214 <prvAddNewTaskToReadyList+0xc4>)
 800b164:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b166:	4b2c      	ldr	r3, [pc, #176]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d109      	bne.n	800b182 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b16e:	4a2a      	ldr	r2, [pc, #168]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b174:	4b27      	ldr	r3, [pc, #156]	; (800b214 <prvAddNewTaskToReadyList+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d110      	bne.n	800b19e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b17c:	f000 fc38 	bl	800b9f0 <prvInitialiseTaskLists>
 800b180:	e00d      	b.n	800b19e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b182:	4b26      	ldr	r3, [pc, #152]	; (800b21c <prvAddNewTaskToReadyList+0xcc>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b18a:	4b23      	ldr	r3, [pc, #140]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	429a      	cmp	r2, r3
 800b196:	d802      	bhi.n	800b19e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b198:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b19e:	4b20      	ldr	r3, [pc, #128]	; (800b220 <prvAddNewTaskToReadyList+0xd0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <prvAddNewTaskToReadyList+0xd0>)
 800b1a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1a8:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <prvAddNewTaskToReadyList+0xd0>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <prvAddNewTaskToReadyList+0xd4>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d903      	bls.n	800b1c4 <prvAddNewTaskToReadyList+0x74>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	4a18      	ldr	r2, [pc, #96]	; (800b224 <prvAddNewTaskToReadyList+0xd4>)
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4a15      	ldr	r2, [pc, #84]	; (800b228 <prvAddNewTaskToReadyList+0xd8>)
 800b1d2:	441a      	add	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4610      	mov	r0, r2
 800b1dc:	f7fe feff 	bl	8009fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1e0:	f001 fa50 	bl	800c684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <prvAddNewTaskToReadyList+0xcc>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00e      	beq.n	800b20a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d207      	bcs.n	800b20a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1fa:	4b0c      	ldr	r3, [pc, #48]	; (800b22c <prvAddNewTaskToReadyList+0xdc>)
 800b1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20001080 	.word	0x20001080
 800b218:	20000bac 	.word	0x20000bac
 800b21c:	2000108c 	.word	0x2000108c
 800b220:	2000109c 	.word	0x2000109c
 800b224:	20001088 	.word	0x20001088
 800b228:	20000bb0 	.word	0x20000bb0
 800b22c:	e000ed04 	.word	0xe000ed04

0800b230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d017      	beq.n	800b272 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b242:	4b13      	ldr	r3, [pc, #76]	; (800b290 <vTaskDelay+0x60>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <vTaskDelay+0x30>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	60bb      	str	r3, [r7, #8]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b260:	f000 f88a 	bl	800b378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b264:	2100      	movs	r1, #0
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fd10 	bl	800bc8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b26c:	f000 f892 	bl	800b394 <xTaskResumeAll>
 800b270:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d107      	bne.n	800b288 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b278:	4b06      	ldr	r3, [pc, #24]	; (800b294 <vTaskDelay+0x64>)
 800b27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b288:	bf00      	nop
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	200010a8 	.word	0x200010a8
 800b294:	e000ed04 	.word	0xe000ed04

0800b298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08a      	sub	sp, #40	; 0x28
 800b29c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2a6:	463a      	mov	r2, r7
 800b2a8:	1d39      	adds	r1, r7, #4
 800b2aa:	f107 0308 	add.w	r3, r7, #8
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fe34 	bl	8009f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	9202      	str	r2, [sp, #8]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	460a      	mov	r2, r1
 800b2c6:	4924      	ldr	r1, [pc, #144]	; (800b358 <vTaskStartScheduler+0xc0>)
 800b2c8:	4824      	ldr	r0, [pc, #144]	; (800b35c <vTaskStartScheduler+0xc4>)
 800b2ca:	f7ff fdf9 	bl	800aec0 <xTaskCreateStatic>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4a23      	ldr	r2, [pc, #140]	; (800b360 <vTaskStartScheduler+0xc8>)
 800b2d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2d4:	4b22      	ldr	r3, [pc, #136]	; (800b360 <vTaskStartScheduler+0xc8>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	e001      	b.n	800b2e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d102      	bne.n	800b2f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2ec:	f000 fd22 	bl	800bd34 <xTimerCreateTimerTask>
 800b2f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d11b      	bne.n	800b330 <vTaskStartScheduler+0x98>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	613b      	str	r3, [r7, #16]
}
 800b30a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b30c:	4b15      	ldr	r3, [pc, #84]	; (800b364 <vTaskStartScheduler+0xcc>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3354      	adds	r3, #84	; 0x54
 800b312:	4a15      	ldr	r2, [pc, #84]	; (800b368 <vTaskStartScheduler+0xd0>)
 800b314:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b316:	4b15      	ldr	r3, [pc, #84]	; (800b36c <vTaskStartScheduler+0xd4>)
 800b318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b31c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b31e:	4b14      	ldr	r3, [pc, #80]	; (800b370 <vTaskStartScheduler+0xd8>)
 800b320:	2201      	movs	r2, #1
 800b322:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b324:	4b13      	ldr	r3, [pc, #76]	; (800b374 <vTaskStartScheduler+0xdc>)
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b32a:	f001 f8d9 	bl	800c4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b32e:	e00e      	b.n	800b34e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b336:	d10a      	bne.n	800b34e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	60fb      	str	r3, [r7, #12]
}
 800b34a:	bf00      	nop
 800b34c:	e7fe      	b.n	800b34c <vTaskStartScheduler+0xb4>
}
 800b34e:	bf00      	nop
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	0800ce70 	.word	0x0800ce70
 800b35c:	0800b9c1 	.word	0x0800b9c1
 800b360:	200010a4 	.word	0x200010a4
 800b364:	20000bac 	.word	0x20000bac
 800b368:	20000010 	.word	0x20000010
 800b36c:	200010a0 	.word	0x200010a0
 800b370:	2000108c 	.word	0x2000108c
 800b374:	20001084 	.word	0x20001084

0800b378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b37c:	4b04      	ldr	r3, [pc, #16]	; (800b390 <vTaskSuspendAll+0x18>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	4a03      	ldr	r2, [pc, #12]	; (800b390 <vTaskSuspendAll+0x18>)
 800b384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b386:	bf00      	nop
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	200010a8 	.word	0x200010a8

0800b394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3a2:	4b42      	ldr	r3, [pc, #264]	; (800b4ac <xTaskResumeAll+0x118>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	603b      	str	r3, [r7, #0]
}
 800b3bc:	bf00      	nop
 800b3be:	e7fe      	b.n	800b3be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3c0:	f001 f930 	bl	800c624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3c4:	4b39      	ldr	r3, [pc, #228]	; (800b4ac <xTaskResumeAll+0x118>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	4a38      	ldr	r2, [pc, #224]	; (800b4ac <xTaskResumeAll+0x118>)
 800b3cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ce:	4b37      	ldr	r3, [pc, #220]	; (800b4ac <xTaskResumeAll+0x118>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d162      	bne.n	800b49c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3d6:	4b36      	ldr	r3, [pc, #216]	; (800b4b0 <xTaskResumeAll+0x11c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d05e      	beq.n	800b49c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3de:	e02f      	b.n	800b440 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e0:	4b34      	ldr	r3, [pc, #208]	; (800b4b4 <xTaskResumeAll+0x120>)
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3318      	adds	r3, #24
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe fe53 	bl	800a098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fe4e 	bl	800a098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	4b2d      	ldr	r3, [pc, #180]	; (800b4b8 <xTaskResumeAll+0x124>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d903      	bls.n	800b410 <xTaskResumeAll+0x7c>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4a2a      	ldr	r2, [pc, #168]	; (800b4b8 <xTaskResumeAll+0x124>)
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4a27      	ldr	r2, [pc, #156]	; (800b4bc <xTaskResumeAll+0x128>)
 800b41e:	441a      	add	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3304      	adds	r3, #4
 800b424:	4619      	mov	r1, r3
 800b426:	4610      	mov	r0, r2
 800b428:	f7fe fdd9 	bl	8009fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b430:	4b23      	ldr	r3, [pc, #140]	; (800b4c0 <xTaskResumeAll+0x12c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b436:	429a      	cmp	r2, r3
 800b438:	d302      	bcc.n	800b440 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b43a:	4b22      	ldr	r3, [pc, #136]	; (800b4c4 <xTaskResumeAll+0x130>)
 800b43c:	2201      	movs	r2, #1
 800b43e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b440:	4b1c      	ldr	r3, [pc, #112]	; (800b4b4 <xTaskResumeAll+0x120>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1cb      	bne.n	800b3e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b44e:	f000 fb71 	bl	800bb34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <xTaskResumeAll+0x134>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d010      	beq.n	800b480 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b45e:	f000 f859 	bl	800b514 <xTaskIncrementTick>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b468:	4b16      	ldr	r3, [pc, #88]	; (800b4c4 <xTaskResumeAll+0x130>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3b01      	subs	r3, #1
 800b472:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1f1      	bne.n	800b45e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b47a:	4b13      	ldr	r3, [pc, #76]	; (800b4c8 <xTaskResumeAll+0x134>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b480:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <xTaskResumeAll+0x130>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d009      	beq.n	800b49c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b48c:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <xTaskResumeAll+0x138>)
 800b48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b49c:	f001 f8f2 	bl	800c684 <vPortExitCritical>

	return xAlreadyYielded;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200010a8 	.word	0x200010a8
 800b4b0:	20001080 	.word	0x20001080
 800b4b4:	20001040 	.word	0x20001040
 800b4b8:	20001088 	.word	0x20001088
 800b4bc:	20000bb0 	.word	0x20000bb0
 800b4c0:	20000bac 	.word	0x20000bac
 800b4c4:	20001094 	.word	0x20001094
 800b4c8:	20001090 	.word	0x20001090
 800b4cc:	e000ed04 	.word	0xe000ed04

0800b4d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4d6:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <xTaskGetTickCount+0x1c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4dc:	687b      	ldr	r3, [r7, #4]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	20001084 	.word	0x20001084

0800b4f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f6:	f001 f977 	bl	800c7e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <xTaskGetTickCountFromISR+0x20>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b504:	683b      	ldr	r3, [r7, #0]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20001084 	.word	0x20001084

0800b514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b51e:	4b4f      	ldr	r3, [pc, #316]	; (800b65c <xTaskIncrementTick+0x148>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	f040 808f 	bne.w	800b646 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b528:	4b4d      	ldr	r3, [pc, #308]	; (800b660 <xTaskIncrementTick+0x14c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3301      	adds	r3, #1
 800b52e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b530:	4a4b      	ldr	r2, [pc, #300]	; (800b660 <xTaskIncrementTick+0x14c>)
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d120      	bne.n	800b57e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b53c:	4b49      	ldr	r3, [pc, #292]	; (800b664 <xTaskIncrementTick+0x150>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <xTaskIncrementTick+0x48>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	603b      	str	r3, [r7, #0]
}
 800b558:	bf00      	nop
 800b55a:	e7fe      	b.n	800b55a <xTaskIncrementTick+0x46>
 800b55c:	4b41      	ldr	r3, [pc, #260]	; (800b664 <xTaskIncrementTick+0x150>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	4b41      	ldr	r3, [pc, #260]	; (800b668 <xTaskIncrementTick+0x154>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a3f      	ldr	r2, [pc, #252]	; (800b664 <xTaskIncrementTick+0x150>)
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	4a3f      	ldr	r2, [pc, #252]	; (800b668 <xTaskIncrementTick+0x154>)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	4b3e      	ldr	r3, [pc, #248]	; (800b66c <xTaskIncrementTick+0x158>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	4a3d      	ldr	r2, [pc, #244]	; (800b66c <xTaskIncrementTick+0x158>)
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	f000 fadb 	bl	800bb34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b57e:	4b3c      	ldr	r3, [pc, #240]	; (800b670 <xTaskIncrementTick+0x15c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	429a      	cmp	r2, r3
 800b586:	d349      	bcc.n	800b61c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b588:	4b36      	ldr	r3, [pc, #216]	; (800b664 <xTaskIncrementTick+0x150>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d104      	bne.n	800b59c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b592:	4b37      	ldr	r3, [pc, #220]	; (800b670 <xTaskIncrementTick+0x15c>)
 800b594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b598:	601a      	str	r2, [r3, #0]
					break;
 800b59a:	e03f      	b.n	800b61c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59c:	4b31      	ldr	r3, [pc, #196]	; (800b664 <xTaskIncrementTick+0x150>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d203      	bcs.n	800b5bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5b4:	4a2e      	ldr	r2, [pc, #184]	; (800b670 <xTaskIncrementTick+0x15c>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5ba:	e02f      	b.n	800b61c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe fd69 	bl	800a098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d004      	beq.n	800b5d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	3318      	adds	r3, #24
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe fd60 	bl	800a098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5dc:	4b25      	ldr	r3, [pc, #148]	; (800b674 <xTaskIncrementTick+0x160>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d903      	bls.n	800b5ec <xTaskIncrementTick+0xd8>
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4a22      	ldr	r2, [pc, #136]	; (800b674 <xTaskIncrementTick+0x160>)
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4a1f      	ldr	r2, [pc, #124]	; (800b678 <xTaskIncrementTick+0x164>)
 800b5fa:	441a      	add	r2, r3
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4619      	mov	r1, r3
 800b602:	4610      	mov	r0, r2
 800b604:	f7fe fceb 	bl	8009fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60c:	4b1b      	ldr	r3, [pc, #108]	; (800b67c <xTaskIncrementTick+0x168>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	429a      	cmp	r2, r3
 800b614:	d3b8      	bcc.n	800b588 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b61a:	e7b5      	b.n	800b588 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b61c:	4b17      	ldr	r3, [pc, #92]	; (800b67c <xTaskIncrementTick+0x168>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	4915      	ldr	r1, [pc, #84]	; (800b678 <xTaskIncrementTick+0x164>)
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	440b      	add	r3, r1
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d901      	bls.n	800b638 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b634:	2301      	movs	r3, #1
 800b636:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b638:	4b11      	ldr	r3, [pc, #68]	; (800b680 <xTaskIncrementTick+0x16c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b640:	2301      	movs	r3, #1
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e004      	b.n	800b650 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b646:	4b0f      	ldr	r3, [pc, #60]	; (800b684 <xTaskIncrementTick+0x170>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3301      	adds	r3, #1
 800b64c:	4a0d      	ldr	r2, [pc, #52]	; (800b684 <xTaskIncrementTick+0x170>)
 800b64e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b650:	697b      	ldr	r3, [r7, #20]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	200010a8 	.word	0x200010a8
 800b660:	20001084 	.word	0x20001084
 800b664:	20001038 	.word	0x20001038
 800b668:	2000103c 	.word	0x2000103c
 800b66c:	20001098 	.word	0x20001098
 800b670:	200010a0 	.word	0x200010a0
 800b674:	20001088 	.word	0x20001088
 800b678:	20000bb0 	.word	0x20000bb0
 800b67c:	20000bac 	.word	0x20000bac
 800b680:	20001094 	.word	0x20001094
 800b684:	20001090 	.word	0x20001090

0800b688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b68e:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <vTaskSwitchContext+0xb0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b696:	4b29      	ldr	r3, [pc, #164]	; (800b73c <vTaskSwitchContext+0xb4>)
 800b698:	2201      	movs	r2, #1
 800b69a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b69c:	e046      	b.n	800b72c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b69e:	4b27      	ldr	r3, [pc, #156]	; (800b73c <vTaskSwitchContext+0xb4>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a4:	4b26      	ldr	r3, [pc, #152]	; (800b740 <vTaskSwitchContext+0xb8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	60fb      	str	r3, [r7, #12]
 800b6aa:	e010      	b.n	800b6ce <vTaskSwitchContext+0x46>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	607b      	str	r3, [r7, #4]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <vTaskSwitchContext+0x3e>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	491d      	ldr	r1, [pc, #116]	; (800b744 <vTaskSwitchContext+0xbc>)
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	440b      	add	r3, r1
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0e4      	beq.n	800b6ac <vTaskSwitchContext+0x24>
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4a15      	ldr	r2, [pc, #84]	; (800b744 <vTaskSwitchContext+0xbc>)
 800b6ee:	4413      	add	r3, r2
 800b6f0:	60bb      	str	r3, [r7, #8]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	605a      	str	r2, [r3, #4]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	3308      	adds	r3, #8
 800b704:	429a      	cmp	r2, r3
 800b706:	d104      	bne.n	800b712 <vTaskSwitchContext+0x8a>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	605a      	str	r2, [r3, #4]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <vTaskSwitchContext+0xc0>)
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	4a08      	ldr	r2, [pc, #32]	; (800b740 <vTaskSwitchContext+0xb8>)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b722:	4b09      	ldr	r3, [pc, #36]	; (800b748 <vTaskSwitchContext+0xc0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3354      	adds	r3, #84	; 0x54
 800b728:	4a08      	ldr	r2, [pc, #32]	; (800b74c <vTaskSwitchContext+0xc4>)
 800b72a:	6013      	str	r3, [r2, #0]
}
 800b72c:	bf00      	nop
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	200010a8 	.word	0x200010a8
 800b73c:	20001094 	.word	0x20001094
 800b740:	20001088 	.word	0x20001088
 800b744:	20000bb0 	.word	0x20000bb0
 800b748:	20000bac 	.word	0x20000bac
 800b74c:	20000010 	.word	0x20000010

0800b750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10a      	bne.n	800b776 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	60fb      	str	r3, [r7, #12]
}
 800b772:	bf00      	nop
 800b774:	e7fe      	b.n	800b774 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b776:	4b07      	ldr	r3, [pc, #28]	; (800b794 <vTaskPlaceOnEventList+0x44>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3318      	adds	r3, #24
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7fe fc51 	bl	800a026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b784:	2101      	movs	r1, #1
 800b786:	6838      	ldr	r0, [r7, #0]
 800b788:	f000 fa80 	bl	800bc8c <prvAddCurrentTaskToDelayedList>
}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20000bac 	.word	0x20000bac

0800b798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	617b      	str	r3, [r7, #20]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <vTaskPlaceOnEventListRestricted+0x54>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3318      	adds	r3, #24
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f7fe fc08 	bl	8009fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	68b8      	ldr	r0, [r7, #8]
 800b7de:	f000 fa55 	bl	800bc8c <prvAddCurrentTaskToDelayedList>
	}
 800b7e2:	bf00      	nop
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20000bac 	.word	0x20000bac

0800b7f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10a      	bne.n	800b81c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60fb      	str	r3, [r7, #12]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3318      	adds	r3, #24
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe fc39 	bl	800a098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b826:	4b1e      	ldr	r3, [pc, #120]	; (800b8a0 <xTaskRemoveFromEventList+0xb0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d11d      	bne.n	800b86a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	3304      	adds	r3, #4
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fc30 	bl	800a098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83c:	4b19      	ldr	r3, [pc, #100]	; (800b8a4 <xTaskRemoveFromEventList+0xb4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <xTaskRemoveFromEventList+0x5c>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	4a16      	ldr	r2, [pc, #88]	; (800b8a4 <xTaskRemoveFromEventList+0xb4>)
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4a13      	ldr	r2, [pc, #76]	; (800b8a8 <xTaskRemoveFromEventList+0xb8>)
 800b85a:	441a      	add	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f7fe fbbb 	bl	8009fde <vListInsertEnd>
 800b868:	e005      	b.n	800b876 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	3318      	adds	r3, #24
 800b86e:	4619      	mov	r1, r3
 800b870:	480e      	ldr	r0, [pc, #56]	; (800b8ac <xTaskRemoveFromEventList+0xbc>)
 800b872:	f7fe fbb4 	bl	8009fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <xTaskRemoveFromEventList+0xc0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	429a      	cmp	r2, r3
 800b882:	d905      	bls.n	800b890 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <xTaskRemoveFromEventList+0xc4>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	e001      	b.n	800b894 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b890:	2300      	movs	r3, #0
 800b892:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b894:	697b      	ldr	r3, [r7, #20]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	200010a8 	.word	0x200010a8
 800b8a4:	20001088 	.word	0x20001088
 800b8a8:	20000bb0 	.word	0x20000bb0
 800b8ac:	20001040 	.word	0x20001040
 800b8b0:	20000bac 	.word	0x20000bac
 800b8b4:	20001094 	.word	0x20001094

0800b8b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <vTaskInternalSetTimeOutState+0x24>)
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8c8:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <vTaskInternalSetTimeOutState+0x28>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	605a      	str	r2, [r3, #4]
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20001098 	.word	0x20001098
 800b8e0:	20001084 	.word	0x20001084

0800b8e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	613b      	str	r3, [r7, #16]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	60fb      	str	r3, [r7, #12]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b926:	f000 fe7d 	bl	800c624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b92a:	4b1d      	ldr	r3, [pc, #116]	; (800b9a0 <xTaskCheckForTimeOut+0xbc>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b942:	d102      	bne.n	800b94a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e023      	b.n	800b992 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <xTaskCheckForTimeOut+0xc0>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d007      	beq.n	800b966 <xTaskCheckForTimeOut+0x82>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	69ba      	ldr	r2, [r7, #24]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d302      	bcc.n	800b966 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b960:	2301      	movs	r3, #1
 800b962:	61fb      	str	r3, [r7, #28]
 800b964:	e015      	b.n	800b992 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d20b      	bcs.n	800b988 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	1ad2      	subs	r2, r2, r3
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff ff9b 	bl	800b8b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b982:	2300      	movs	r3, #0
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	e004      	b.n	800b992 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b98e:	2301      	movs	r3, #1
 800b990:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b992:	f000 fe77 	bl	800c684 <vPortExitCritical>

	return xReturn;
 800b996:	69fb      	ldr	r3, [r7, #28]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3720      	adds	r7, #32
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	20001084 	.word	0x20001084
 800b9a4:	20001098 	.word	0x20001098

0800b9a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9ac:	4b03      	ldr	r3, [pc, #12]	; (800b9bc <vTaskMissedYield+0x14>)
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]
}
 800b9b2:	bf00      	nop
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	20001094 	.word	0x20001094

0800b9c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9c8:	f000 f852 	bl	800ba70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9cc:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <prvIdleTask+0x28>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d9f9      	bls.n	800b9c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <prvIdleTask+0x2c>)
 800b9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9e4:	e7f0      	b.n	800b9c8 <prvIdleTask+0x8>
 800b9e6:	bf00      	nop
 800b9e8:	20000bb0 	.word	0x20000bb0
 800b9ec:	e000ed04 	.word	0xe000ed04

0800b9f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	607b      	str	r3, [r7, #4]
 800b9fa:	e00c      	b.n	800ba16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4a12      	ldr	r2, [pc, #72]	; (800ba50 <prvInitialiseTaskLists+0x60>)
 800ba08:	4413      	add	r3, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe faba 	bl	8009f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3301      	adds	r3, #1
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b37      	cmp	r3, #55	; 0x37
 800ba1a:	d9ef      	bls.n	800b9fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba1c:	480d      	ldr	r0, [pc, #52]	; (800ba54 <prvInitialiseTaskLists+0x64>)
 800ba1e:	f7fe fab1 	bl	8009f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba22:	480d      	ldr	r0, [pc, #52]	; (800ba58 <prvInitialiseTaskLists+0x68>)
 800ba24:	f7fe faae 	bl	8009f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba28:	480c      	ldr	r0, [pc, #48]	; (800ba5c <prvInitialiseTaskLists+0x6c>)
 800ba2a:	f7fe faab 	bl	8009f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba2e:	480c      	ldr	r0, [pc, #48]	; (800ba60 <prvInitialiseTaskLists+0x70>)
 800ba30:	f7fe faa8 	bl	8009f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba34:	480b      	ldr	r0, [pc, #44]	; (800ba64 <prvInitialiseTaskLists+0x74>)
 800ba36:	f7fe faa5 	bl	8009f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba3a:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <prvInitialiseTaskLists+0x78>)
 800ba3c:	4a05      	ldr	r2, [pc, #20]	; (800ba54 <prvInitialiseTaskLists+0x64>)
 800ba3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <prvInitialiseTaskLists+0x7c>)
 800ba42:	4a05      	ldr	r2, [pc, #20]	; (800ba58 <prvInitialiseTaskLists+0x68>)
 800ba44:	601a      	str	r2, [r3, #0]
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000bb0 	.word	0x20000bb0
 800ba54:	20001010 	.word	0x20001010
 800ba58:	20001024 	.word	0x20001024
 800ba5c:	20001040 	.word	0x20001040
 800ba60:	20001054 	.word	0x20001054
 800ba64:	2000106c 	.word	0x2000106c
 800ba68:	20001038 	.word	0x20001038
 800ba6c:	2000103c 	.word	0x2000103c

0800ba70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba76:	e019      	b.n	800baac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba78:	f000 fdd4 	bl	800c624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7c:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <prvCheckTasksWaitingTermination+0x50>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe fb05 	bl	800a098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba8e:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <prvCheckTasksWaitingTermination+0x54>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	4a0b      	ldr	r2, [pc, #44]	; (800bac4 <prvCheckTasksWaitingTermination+0x54>)
 800ba96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba98:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <prvCheckTasksWaitingTermination+0x58>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	4a0a      	ldr	r2, [pc, #40]	; (800bac8 <prvCheckTasksWaitingTermination+0x58>)
 800baa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baa2:	f000 fdef 	bl	800c684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f810 	bl	800bacc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baac:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <prvCheckTasksWaitingTermination+0x58>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e1      	bne.n	800ba78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	20001054 	.word	0x20001054
 800bac4:	20001080 	.word	0x20001080
 800bac8:	20001068 	.word	0x20001068

0800bacc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3354      	adds	r3, #84	; 0x54
 800bad8:	4618      	mov	r0, r3
 800bada:	f001 f8f9 	bl	800ccd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d108      	bne.n	800bafa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	4618      	mov	r0, r3
 800baee:	f000 ff87 	bl	800ca00 <vPortFree>
				vPortFree( pxTCB );
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 ff84 	bl	800ca00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800baf8:	e018      	b.n	800bb2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d103      	bne.n	800bb0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 ff7b 	bl	800ca00 <vPortFree>
	}
 800bb0a:	e00f      	b.n	800bb2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d00a      	beq.n	800bb2c <prvDeleteTCB+0x60>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60fb      	str	r3, [r7, #12]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <prvDeleteTCB+0x5e>
	}
 800bb2c:	bf00      	nop
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb3a:	4b0c      	ldr	r3, [pc, #48]	; (800bb6c <prvResetNextTaskUnblockTime+0x38>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d104      	bne.n	800bb4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <prvResetNextTaskUnblockTime+0x3c>)
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb4c:	e008      	b.n	800bb60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <prvResetNextTaskUnblockTime+0x38>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	4a04      	ldr	r2, [pc, #16]	; (800bb70 <prvResetNextTaskUnblockTime+0x3c>)
 800bb5e:	6013      	str	r3, [r2, #0]
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	20001038 	.word	0x20001038
 800bb70:	200010a0 	.word	0x200010a0

0800bb74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb7a:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <xTaskGetSchedulerState+0x34>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d102      	bne.n	800bb88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb82:	2301      	movs	r3, #1
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	e008      	b.n	800bb9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb88:	4b08      	ldr	r3, [pc, #32]	; (800bbac <xTaskGetSchedulerState+0x38>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d102      	bne.n	800bb96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb90:	2302      	movs	r3, #2
 800bb92:	607b      	str	r3, [r7, #4]
 800bb94:	e001      	b.n	800bb9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb96:	2300      	movs	r3, #0
 800bb98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb9a:	687b      	ldr	r3, [r7, #4]
	}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr
 800bba8:	2000108c 	.word	0x2000108c
 800bbac:	200010a8 	.word	0x200010a8

0800bbb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d056      	beq.n	800bc74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbc6:	4b2e      	ldr	r3, [pc, #184]	; (800bc80 <xTaskPriorityDisinherit+0xd0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d00a      	beq.n	800bbe6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	60fb      	str	r3, [r7, #12]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	60bb      	str	r3, [r7, #8]
}
 800bc00:	bf00      	nop
 800bc02:	e7fe      	b.n	800bc02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc08:	1e5a      	subs	r2, r3, #1
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d02c      	beq.n	800bc74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d128      	bne.n	800bc74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fa36 	bl	800a098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <xTaskPriorityDisinherit+0xd4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d903      	bls.n	800bc54 <xTaskPriorityDisinherit+0xa4>
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	4a0c      	ldr	r2, [pc, #48]	; (800bc84 <xTaskPriorityDisinherit+0xd4>)
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4a09      	ldr	r2, [pc, #36]	; (800bc88 <xTaskPriorityDisinherit+0xd8>)
 800bc62:	441a      	add	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	f7fe f9b7 	bl	8009fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc74:	697b      	ldr	r3, [r7, #20]
	}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000bac 	.word	0x20000bac
 800bc84:	20001088 	.word	0x20001088
 800bc88:	20000bb0 	.word	0x20000bb0

0800bc8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc96:	4b21      	ldr	r3, [pc, #132]	; (800bd1c <prvAddCurrentTaskToDelayedList+0x90>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc9c:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3304      	adds	r3, #4
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe f9f8 	bl	800a098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcae:	d10a      	bne.n	800bcc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d007      	beq.n	800bcc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcb6:	4b1a      	ldr	r3, [pc, #104]	; (800bd20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4819      	ldr	r0, [pc, #100]	; (800bd24 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcc0:	f7fe f98d 	bl	8009fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcc4:	e026      	b.n	800bd14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4413      	add	r3, r2
 800bccc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcce:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d209      	bcs.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcde:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4610      	mov	r0, r2
 800bcec:	f7fe f99b 	bl	800a026 <vListInsert>
}
 800bcf0:	e010      	b.n	800bd14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcf2:	4b0e      	ldr	r3, [pc, #56]	; (800bd2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	4b0a      	ldr	r3, [pc, #40]	; (800bd20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4610      	mov	r0, r2
 800bd00:	f7fe f991 	bl	800a026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d202      	bcs.n	800bd14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd0e:	4a08      	ldr	r2, [pc, #32]	; (800bd30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	6013      	str	r3, [r2, #0]
}
 800bd14:	bf00      	nop
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	20001084 	.word	0x20001084
 800bd20:	20000bac 	.word	0x20000bac
 800bd24:	2000106c 	.word	0x2000106c
 800bd28:	2000103c 	.word	0x2000103c
 800bd2c:	20001038 	.word	0x20001038
 800bd30:	200010a0 	.word	0x200010a0

0800bd34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b08a      	sub	sp, #40	; 0x28
 800bd38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd3e:	f000 fb07 	bl	800c350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd42:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <xTimerCreateTimerTask+0x80>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d021      	beq.n	800bd8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd52:	1d3a      	adds	r2, r7, #4
 800bd54:	f107 0108 	add.w	r1, r7, #8
 800bd58:	f107 030c 	add.w	r3, r7, #12
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe f8f7 	bl	8009f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd62:	6879      	ldr	r1, [r7, #4]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	9202      	str	r2, [sp, #8]
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	2300      	movs	r3, #0
 800bd72:	460a      	mov	r2, r1
 800bd74:	4910      	ldr	r1, [pc, #64]	; (800bdb8 <xTimerCreateTimerTask+0x84>)
 800bd76:	4811      	ldr	r0, [pc, #68]	; (800bdbc <xTimerCreateTimerTask+0x88>)
 800bd78:	f7ff f8a2 	bl	800aec0 <xTaskCreateStatic>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	4a10      	ldr	r2, [pc, #64]	; (800bdc0 <xTimerCreateTimerTask+0x8c>)
 800bd80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd82:	4b0f      	ldr	r3, [pc, #60]	; (800bdc0 <xTimerCreateTimerTask+0x8c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	613b      	str	r3, [r7, #16]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdaa:	697b      	ldr	r3, [r7, #20]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	200010dc 	.word	0x200010dc
 800bdb8:	0800ce78 	.word	0x0800ce78
 800bdbc:	0800bef9 	.word	0x0800bef9
 800bdc0:	200010e0 	.word	0x200010e0

0800bdc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08a      	sub	sp, #40	; 0x28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	623b      	str	r3, [r7, #32]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdf2:	4b1a      	ldr	r3, [pc, #104]	; (800be5c <xTimerGenericCommand+0x98>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d02a      	beq.n	800be50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b05      	cmp	r3, #5
 800be0a:	dc18      	bgt.n	800be3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be0c:	f7ff feb2 	bl	800bb74 <xTaskGetSchedulerState>
 800be10:	4603      	mov	r3, r0
 800be12:	2b02      	cmp	r3, #2
 800be14:	d109      	bne.n	800be2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be16:	4b11      	ldr	r3, [pc, #68]	; (800be5c <xTimerGenericCommand+0x98>)
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	f107 0110 	add.w	r1, r7, #16
 800be1e:	2300      	movs	r3, #0
 800be20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be22:	f7fe fb0b 	bl	800a43c <xQueueGenericSend>
 800be26:	6278      	str	r0, [r7, #36]	; 0x24
 800be28:	e012      	b.n	800be50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be2a:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <xTimerGenericCommand+0x98>)
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	f107 0110 	add.w	r1, r7, #16
 800be32:	2300      	movs	r3, #0
 800be34:	2200      	movs	r2, #0
 800be36:	f7fe fb01 	bl	800a43c <xQueueGenericSend>
 800be3a:	6278      	str	r0, [r7, #36]	; 0x24
 800be3c:	e008      	b.n	800be50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be3e:	4b07      	ldr	r3, [pc, #28]	; (800be5c <xTimerGenericCommand+0x98>)
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	f107 0110 	add.w	r1, r7, #16
 800be46:	2300      	movs	r3, #0
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	f7fe fbf5 	bl	800a638 <xQueueGenericSendFromISR>
 800be4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be52:	4618      	mov	r0, r3
 800be54:	3728      	adds	r7, #40	; 0x28
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	200010dc 	.word	0x200010dc

0800be60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6a:	4b22      	ldr	r3, [pc, #136]	; (800bef4 <prvProcessExpiredTimer+0x94>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	3304      	adds	r3, #4
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe f90d 	bl	800a098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d022      	beq.n	800bed2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	699a      	ldr	r2, [r3, #24]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	18d1      	adds	r1, r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	6978      	ldr	r0, [r7, #20]
 800be9a:	f000 f8d1 	bl	800c040 <prvInsertTimerInActiveList>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01f      	beq.n	800bee4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bea4:	2300      	movs	r3, #0
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	2300      	movs	r3, #0
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	2100      	movs	r1, #0
 800beae:	6978      	ldr	r0, [r7, #20]
 800beb0:	f7ff ff88 	bl	800bdc4 <xTimerGenericCommand>
 800beb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d113      	bne.n	800bee4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	60fb      	str	r3, [r7, #12]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bed8:	f023 0301 	bic.w	r3, r3, #1
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	6a1b      	ldr	r3, [r3, #32]
 800bee8:	6978      	ldr	r0, [r7, #20]
 800beea:	4798      	blx	r3
}
 800beec:	bf00      	nop
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	200010d4 	.word	0x200010d4

0800bef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf00:	f107 0308 	add.w	r3, r7, #8
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 f857 	bl	800bfb8 <prvGetNextExpireTime>
 800bf0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f000 f803 	bl	800bf1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf16:	f000 f8d5 	bl	800c0c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf1a:	e7f1      	b.n	800bf00 <prvTimerTask+0x8>

0800bf1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf26:	f7ff fa27 	bl	800b378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf2a:	f107 0308 	add.w	r3, r7, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 f866 	bl	800c000 <prvSampleTimeNow>
 800bf34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d130      	bne.n	800bf9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10a      	bne.n	800bf58 <prvProcessTimerOrBlockTask+0x3c>
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d806      	bhi.n	800bf58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf4a:	f7ff fa23 	bl	800b394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf4e:	68f9      	ldr	r1, [r7, #12]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff ff85 	bl	800be60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf56:	e024      	b.n	800bfa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d008      	beq.n	800bf70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf5e:	4b13      	ldr	r3, [pc, #76]	; (800bfac <prvProcessTimerOrBlockTask+0x90>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <prvProcessTimerOrBlockTask+0x50>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e000      	b.n	800bf6e <prvProcessTimerOrBlockTask+0x52>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf70:	4b0f      	ldr	r3, [pc, #60]	; (800bfb0 <prvProcessTimerOrBlockTask+0x94>)
 800bf72:	6818      	ldr	r0, [r3, #0]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f7fe ff6b 	bl	800ae58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf82:	f7ff fa07 	bl	800b394 <xTaskResumeAll>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf8c:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <prvProcessTimerOrBlockTask+0x98>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
}
 800bf9c:	e001      	b.n	800bfa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf9e:	f7ff f9f9 	bl	800b394 <xTaskResumeAll>
}
 800bfa2:	bf00      	nop
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	200010d8 	.word	0x200010d8
 800bfb0:	200010dc 	.word	0x200010dc
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bfc0:	4b0e      	ldr	r3, [pc, #56]	; (800bffc <prvGetNextExpireTime+0x44>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <prvGetNextExpireTime+0x16>
 800bfca:	2201      	movs	r2, #1
 800bfcc:	e000      	b.n	800bfd0 <prvGetNextExpireTime+0x18>
 800bfce:	2200      	movs	r2, #0
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d105      	bne.n	800bfe8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfdc:	4b07      	ldr	r3, [pc, #28]	; (800bffc <prvGetNextExpireTime+0x44>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e001      	b.n	800bfec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfec:	68fb      	ldr	r3, [r7, #12]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	200010d4 	.word	0x200010d4

0800c000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c008:	f7ff fa62 	bl	800b4d0 <xTaskGetTickCount>
 800c00c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c00e:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <prvSampleTimeNow+0x3c>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	429a      	cmp	r2, r3
 800c016:	d205      	bcs.n	800c024 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c018:	f000 f936 	bl	800c288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	e002      	b.n	800c02a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c02a:	4a04      	ldr	r2, [pc, #16]	; (800c03c <prvSampleTimeNow+0x3c>)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c030:	68fb      	ldr	r3, [r7, #12]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	200010e4 	.word	0x200010e4

0800c040 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c04e:	2300      	movs	r3, #0
 800c050:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	429a      	cmp	r2, r3
 800c064:	d812      	bhi.n	800c08c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	1ad2      	subs	r2, r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	429a      	cmp	r2, r3
 800c072:	d302      	bcc.n	800c07a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	617b      	str	r3, [r7, #20]
 800c078:	e01b      	b.n	800c0b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c07a:	4b10      	ldr	r3, [pc, #64]	; (800c0bc <prvInsertTimerInActiveList+0x7c>)
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3304      	adds	r3, #4
 800c082:	4619      	mov	r1, r3
 800c084:	4610      	mov	r0, r2
 800c086:	f7fd ffce 	bl	800a026 <vListInsert>
 800c08a:	e012      	b.n	800c0b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d206      	bcs.n	800c0a2 <prvInsertTimerInActiveList+0x62>
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d302      	bcc.n	800c0a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c09c:	2301      	movs	r3, #1
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	e007      	b.n	800c0b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0a2:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <prvInsertTimerInActiveList+0x80>)
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	f7fd ffba 	bl	800a026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0b2:	697b      	ldr	r3, [r7, #20]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	200010d8 	.word	0x200010d8
 800c0c0:	200010d4 	.word	0x200010d4

0800c0c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08e      	sub	sp, #56	; 0x38
 800c0c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0ca:	e0ca      	b.n	800c262 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	da18      	bge.n	800c104 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c0d2:	1d3b      	adds	r3, r7, #4
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	61fb      	str	r3, [r7, #28]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fa:	6850      	ldr	r0, [r2, #4]
 800c0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fe:	6892      	ldr	r2, [r2, #8]
 800c100:	4611      	mov	r1, r2
 800c102:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f2c0 80aa 	blt.w	800c260 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d004      	beq.n	800c122 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	3304      	adds	r3, #4
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fd ffbb 	bl	800a098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c122:	463b      	mov	r3, r7
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff ff6b 	bl	800c000 <prvSampleTimeNow>
 800c12a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b09      	cmp	r3, #9
 800c130:	f200 8097 	bhi.w	800c262 <prvProcessReceivedCommands+0x19e>
 800c134:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <prvProcessReceivedCommands+0x78>)
 800c136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13a:	bf00      	nop
 800c13c:	0800c165 	.word	0x0800c165
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c165 	.word	0x0800c165
 800c148:	0800c1d9 	.word	0x0800c1d9
 800c14c:	0800c1ed 	.word	0x0800c1ed
 800c150:	0800c237 	.word	0x0800c237
 800c154:	0800c165 	.word	0x0800c165
 800c158:	0800c165 	.word	0x0800c165
 800c15c:	0800c1d9 	.word	0x0800c1d9
 800c160:	0800c1ed 	.word	0x0800c1ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c16a:	f043 0301 	orr.w	r3, r3, #1
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	18d1      	adds	r1, r2, r3
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c184:	f7ff ff5c 	bl	800c040 <prvInsertTimerInActiveList>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d069      	beq.n	800c262 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c194:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c19c:	f003 0304 	and.w	r3, r3, #4
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d05e      	beq.n	800c262 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	441a      	add	r2, r3
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b6:	f7ff fe05 	bl	800bdc4 <xTimerGenericCommand>
 800c1ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d14f      	bne.n	800c262 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	61bb      	str	r3, [r7, #24]
}
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1de:	f023 0301 	bic.w	r3, r3, #1
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c1ea:	e03a      	b.n	800c262 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f2:	f043 0301 	orr.w	r3, r3, #1
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	617b      	str	r3, [r7, #20]
}
 800c21e:	bf00      	nop
 800c220:	e7fe      	b.n	800c220 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	699a      	ldr	r2, [r3, #24]
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	18d1      	adds	r1, r2, r3
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c230:	f7ff ff06 	bl	800c040 <prvInsertTimerInActiveList>
					break;
 800c234:	e015      	b.n	800c262 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c246:	f000 fbdb 	bl	800ca00 <vPortFree>
 800c24a:	e00a      	b.n	800c262 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c252:	f023 0301 	bic.w	r3, r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c25e:	e000      	b.n	800c262 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c260:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c262:	4b08      	ldr	r3, [pc, #32]	; (800c284 <prvProcessReceivedCommands+0x1c0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	1d39      	adds	r1, r7, #4
 800c268:	2200      	movs	r2, #0
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fb0c 	bl	800a888 <xQueueReceive>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	f47f af2a 	bne.w	800c0cc <prvProcessReceivedCommands+0x8>
	}
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	3730      	adds	r7, #48	; 0x30
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	200010dc 	.word	0x200010dc

0800c288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c28e:	e048      	b.n	800c322 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c290:	4b2d      	ldr	r3, [pc, #180]	; (800c348 <prvSwitchTimerLists+0xc0>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c29a:	4b2b      	ldr	r3, [pc, #172]	; (800c348 <prvSwitchTimerLists+0xc0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fd fef5 	bl	800a098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d02e      	beq.n	800c322 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d90e      	bls.n	800c2f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2e2:	4b19      	ldr	r3, [pc, #100]	; (800c348 <prvSwitchTimerLists+0xc0>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	f7fd fe9a 	bl	800a026 <vListInsert>
 800c2f2:	e016      	b.n	800c322 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f7ff fd60 	bl	800bdc4 <xTimerGenericCommand>
 800c304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	603b      	str	r3, [r7, #0]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <prvSwitchTimerLists+0xc0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1b1      	bne.n	800c290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c32c:	4b06      	ldr	r3, [pc, #24]	; (800c348 <prvSwitchTimerLists+0xc0>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c332:	4b06      	ldr	r3, [pc, #24]	; (800c34c <prvSwitchTimerLists+0xc4>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a04      	ldr	r2, [pc, #16]	; (800c348 <prvSwitchTimerLists+0xc0>)
 800c338:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c33a:	4a04      	ldr	r2, [pc, #16]	; (800c34c <prvSwitchTimerLists+0xc4>)
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	6013      	str	r3, [r2, #0]
}
 800c340:	bf00      	nop
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	200010d4 	.word	0x200010d4
 800c34c:	200010d8 	.word	0x200010d8

0800c350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c356:	f000 f965 	bl	800c624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c35a:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <prvCheckForValidListAndQueue+0x60>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d120      	bne.n	800c3a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c362:	4814      	ldr	r0, [pc, #80]	; (800c3b4 <prvCheckForValidListAndQueue+0x64>)
 800c364:	f7fd fe0e 	bl	8009f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c368:	4813      	ldr	r0, [pc, #76]	; (800c3b8 <prvCheckForValidListAndQueue+0x68>)
 800c36a:	f7fd fe0b 	bl	8009f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c36e:	4b13      	ldr	r3, [pc, #76]	; (800c3bc <prvCheckForValidListAndQueue+0x6c>)
 800c370:	4a10      	ldr	r2, [pc, #64]	; (800c3b4 <prvCheckForValidListAndQueue+0x64>)
 800c372:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c374:	4b12      	ldr	r3, [pc, #72]	; (800c3c0 <prvCheckForValidListAndQueue+0x70>)
 800c376:	4a10      	ldr	r2, [pc, #64]	; (800c3b8 <prvCheckForValidListAndQueue+0x68>)
 800c378:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c37a:	2300      	movs	r3, #0
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <prvCheckForValidListAndQueue+0x74>)
 800c380:	4a11      	ldr	r2, [pc, #68]	; (800c3c8 <prvCheckForValidListAndQueue+0x78>)
 800c382:	2110      	movs	r1, #16
 800c384:	200a      	movs	r0, #10
 800c386:	f7fd ff19 	bl	800a1bc <xQueueGenericCreateStatic>
 800c38a:	4603      	mov	r3, r0
 800c38c:	4a08      	ldr	r2, [pc, #32]	; (800c3b0 <prvCheckForValidListAndQueue+0x60>)
 800c38e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c390:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <prvCheckForValidListAndQueue+0x60>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c398:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <prvCheckForValidListAndQueue+0x60>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	490b      	ldr	r1, [pc, #44]	; (800c3cc <prvCheckForValidListAndQueue+0x7c>)
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fd06 	bl	800adb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3a4:	f000 f96e 	bl	800c684 <vPortExitCritical>
}
 800c3a8:	bf00      	nop
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	200010dc 	.word	0x200010dc
 800c3b4:	200010ac 	.word	0x200010ac
 800c3b8:	200010c0 	.word	0x200010c0
 800c3bc:	200010d4 	.word	0x200010d4
 800c3c0:	200010d8 	.word	0x200010d8
 800c3c4:	20001188 	.word	0x20001188
 800c3c8:	200010e8 	.word	0x200010e8
 800c3cc:	0800ce80 	.word	0x0800ce80

0800c3d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3b04      	subs	r3, #4
 800c3e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	f023 0201 	bic.w	r2, r3, #1
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3b04      	subs	r3, #4
 800c3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c400:	4a0c      	ldr	r2, [pc, #48]	; (800c434 <pxPortInitialiseStack+0x64>)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3b14      	subs	r3, #20
 800c40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3b04      	subs	r3, #4
 800c416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f06f 0202 	mvn.w	r2, #2
 800c41e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3b20      	subs	r3, #32
 800c424:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c426:	68fb      	ldr	r3, [r7, #12]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	0800c439 	.word	0x0800c439

0800c438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c442:	4b12      	ldr	r3, [pc, #72]	; (800c48c <prvTaskExitError+0x54>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c44a:	d00a      	beq.n	800c462 <prvTaskExitError+0x2a>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	60fb      	str	r3, [r7, #12]
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <prvTaskExitError+0x28>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	60bb      	str	r3, [r7, #8]
}
 800c474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c476:	bf00      	nop
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0fc      	beq.n	800c478 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c47e:	bf00      	nop
 800c480:	bf00      	nop
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	2000000c 	.word	0x2000000c

0800c490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c490:	4b07      	ldr	r3, [pc, #28]	; (800c4b0 <pxCurrentTCBConst2>)
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	6808      	ldr	r0, [r1, #0]
 800c496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f380 8809 	msr	PSP, r0
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f04f 0000 	mov.w	r0, #0
 800c4a6:	f380 8811 	msr	BASEPRI, r0
 800c4aa:	4770      	bx	lr
 800c4ac:	f3af 8000 	nop.w

0800c4b0 <pxCurrentTCBConst2>:
 800c4b0:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop

0800c4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4b8:	4808      	ldr	r0, [pc, #32]	; (800c4dc <prvPortStartFirstTask+0x24>)
 800c4ba:	6800      	ldr	r0, [r0, #0]
 800c4bc:	6800      	ldr	r0, [r0, #0]
 800c4be:	f380 8808 	msr	MSP, r0
 800c4c2:	f04f 0000 	mov.w	r0, #0
 800c4c6:	f380 8814 	msr	CONTROL, r0
 800c4ca:	b662      	cpsie	i
 800c4cc:	b661      	cpsie	f
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	df00      	svc	0
 800c4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4da:	bf00      	nop
 800c4dc:	e000ed08 	.word	0xe000ed08

0800c4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4e6:	4b46      	ldr	r3, [pc, #280]	; (800c600 <xPortStartScheduler+0x120>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a46      	ldr	r2, [pc, #280]	; (800c604 <xPortStartScheduler+0x124>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d10a      	bne.n	800c506 <xPortStartScheduler+0x26>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	613b      	str	r3, [r7, #16]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c506:	4b3e      	ldr	r3, [pc, #248]	; (800c600 <xPortStartScheduler+0x120>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a3f      	ldr	r2, [pc, #252]	; (800c608 <xPortStartScheduler+0x128>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d10a      	bne.n	800c526 <xPortStartScheduler+0x46>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	60fb      	str	r3, [r7, #12]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c526:	4b39      	ldr	r3, [pc, #228]	; (800c60c <xPortStartScheduler+0x12c>)
 800c528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	22ff      	movs	r2, #255	; 0xff
 800c536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	4b31      	ldr	r3, [pc, #196]	; (800c610 <xPortStartScheduler+0x130>)
 800c54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c54e:	4b31      	ldr	r3, [pc, #196]	; (800c614 <xPortStartScheduler+0x134>)
 800c550:	2207      	movs	r2, #7
 800c552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c554:	e009      	b.n	800c56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c556:	4b2f      	ldr	r3, [pc, #188]	; (800c614 <xPortStartScheduler+0x134>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	4a2d      	ldr	r2, [pc, #180]	; (800c614 <xPortStartScheduler+0x134>)
 800c55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	b2db      	uxtb	r3, r3
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	b2db      	uxtb	r3, r3
 800c568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c56a:	78fb      	ldrb	r3, [r7, #3]
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c572:	2b80      	cmp	r3, #128	; 0x80
 800c574:	d0ef      	beq.n	800c556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c576:	4b27      	ldr	r3, [pc, #156]	; (800c614 <xPortStartScheduler+0x134>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f1c3 0307 	rsb	r3, r3, #7
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d00a      	beq.n	800c598 <xPortStartScheduler+0xb8>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	60bb      	str	r3, [r7, #8]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c598:	4b1e      	ldr	r3, [pc, #120]	; (800c614 <xPortStartScheduler+0x134>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	021b      	lsls	r3, r3, #8
 800c59e:	4a1d      	ldr	r2, [pc, #116]	; (800c614 <xPortStartScheduler+0x134>)
 800c5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5a2:	4b1c      	ldr	r3, [pc, #112]	; (800c614 <xPortStartScheduler+0x134>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5aa:	4a1a      	ldr	r2, [pc, #104]	; (800c614 <xPortStartScheduler+0x134>)
 800c5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5b6:	4b18      	ldr	r3, [pc, #96]	; (800c618 <xPortStartScheduler+0x138>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a17      	ldr	r2, [pc, #92]	; (800c618 <xPortStartScheduler+0x138>)
 800c5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5c2:	4b15      	ldr	r3, [pc, #84]	; (800c618 <xPortStartScheduler+0x138>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a14      	ldr	r2, [pc, #80]	; (800c618 <xPortStartScheduler+0x138>)
 800c5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5ce:	f000 f8dd 	bl	800c78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5d2:	4b12      	ldr	r3, [pc, #72]	; (800c61c <xPortStartScheduler+0x13c>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5d8:	f000 f8fc 	bl	800c7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5dc:	4b10      	ldr	r3, [pc, #64]	; (800c620 <xPortStartScheduler+0x140>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a0f      	ldr	r2, [pc, #60]	; (800c620 <xPortStartScheduler+0x140>)
 800c5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5e8:	f7ff ff66 	bl	800c4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5ec:	f7ff f84c 	bl	800b688 <vTaskSwitchContext>
	prvTaskExitError();
 800c5f0:	f7ff ff22 	bl	800c438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	e000ed00 	.word	0xe000ed00
 800c604:	410fc271 	.word	0x410fc271
 800c608:	410fc270 	.word	0x410fc270
 800c60c:	e000e400 	.word	0xe000e400
 800c610:	200011d8 	.word	0x200011d8
 800c614:	200011dc 	.word	0x200011dc
 800c618:	e000ed20 	.word	0xe000ed20
 800c61c:	2000000c 	.word	0x2000000c
 800c620:	e000ef34 	.word	0xe000ef34

0800c624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	607b      	str	r3, [r7, #4]
}
 800c63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c63e:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <vPortEnterCritical+0x58>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3301      	adds	r3, #1
 800c644:	4a0d      	ldr	r2, [pc, #52]	; (800c67c <vPortEnterCritical+0x58>)
 800c646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c648:	4b0c      	ldr	r3, [pc, #48]	; (800c67c <vPortEnterCritical+0x58>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d10f      	bne.n	800c670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <vPortEnterCritical+0x5c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <vPortEnterCritical+0x4c>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	603b      	str	r3, [r7, #0]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <vPortEnterCritical+0x4a>
	}
}
 800c670:	bf00      	nop
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	2000000c 	.word	0x2000000c
 800c680:	e000ed04 	.word	0xe000ed04

0800c684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c68a:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <vPortExitCritical+0x50>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d10a      	bne.n	800c6a8 <vPortExitCritical+0x24>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	607b      	str	r3, [r7, #4]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6a8:	4b0a      	ldr	r3, [pc, #40]	; (800c6d4 <vPortExitCritical+0x50>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	4a09      	ldr	r2, [pc, #36]	; (800c6d4 <vPortExitCritical+0x50>)
 800c6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6b2:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <vPortExitCritical+0x50>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d105      	bne.n	800c6c6 <vPortExitCritical+0x42>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	f383 8811 	msr	BASEPRI, r3
}
 800c6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	2000000c 	.word	0x2000000c
	...

0800c6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6e0:	f3ef 8009 	mrs	r0, PSP
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	4b15      	ldr	r3, [pc, #84]	; (800c740 <pxCurrentTCBConst>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	f01e 0f10 	tst.w	lr, #16
 800c6f0:	bf08      	it	eq
 800c6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	6010      	str	r0, [r2, #0]
 800c6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c704:	f380 8811 	msr	BASEPRI, r0
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f7fe ffba 	bl	800b688 <vTaskSwitchContext>
 800c714:	f04f 0000 	mov.w	r0, #0
 800c718:	f380 8811 	msr	BASEPRI, r0
 800c71c:	bc09      	pop	{r0, r3}
 800c71e:	6819      	ldr	r1, [r3, #0]
 800c720:	6808      	ldr	r0, [r1, #0]
 800c722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c726:	f01e 0f10 	tst.w	lr, #16
 800c72a:	bf08      	it	eq
 800c72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c730:	f380 8809 	msr	PSP, r0
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	f3af 8000 	nop.w

0800c740 <pxCurrentTCBConst>:
 800c740:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop

0800c748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
}
 800c760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c762:	f7fe fed7 	bl	800b514 <xTaskIncrementTick>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c76c:	4b06      	ldr	r3, [pc, #24]	; (800c788 <xPortSysTickHandler+0x40>)
 800c76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	2300      	movs	r3, #0
 800c776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	f383 8811 	msr	BASEPRI, r3
}
 800c77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c78c:	b480      	push	{r7}
 800c78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c790:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <vPortSetupTimerInterrupt+0x34>)
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c796:	4b0b      	ldr	r3, [pc, #44]	; (800c7c4 <vPortSetupTimerInterrupt+0x38>)
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c79c:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <vPortSetupTimerInterrupt+0x3c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a0a      	ldr	r2, [pc, #40]	; (800c7cc <vPortSetupTimerInterrupt+0x40>)
 800c7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a6:	099b      	lsrs	r3, r3, #6
 800c7a8:	4a09      	ldr	r2, [pc, #36]	; (800c7d0 <vPortSetupTimerInterrupt+0x44>)
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7ae:	4b04      	ldr	r3, [pc, #16]	; (800c7c0 <vPortSetupTimerInterrupt+0x34>)
 800c7b0:	2207      	movs	r2, #7
 800c7b2:	601a      	str	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	e000e010 	.word	0xe000e010
 800c7c4:	e000e018 	.word	0xe000e018
 800c7c8:	20000000 	.word	0x20000000
 800c7cc:	10624dd3 	.word	0x10624dd3
 800c7d0:	e000e014 	.word	0xe000e014

0800c7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7e4 <vPortEnableVFP+0x10>
 800c7d8:	6801      	ldr	r1, [r0, #0]
 800c7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7de:	6001      	str	r1, [r0, #0]
 800c7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7e2:	bf00      	nop
 800c7e4:	e000ed88 	.word	0xe000ed88

0800c7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7ee:	f3ef 8305 	mrs	r3, IPSR
 800c7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b0f      	cmp	r3, #15
 800c7f8:	d914      	bls.n	800c824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7fa:	4a17      	ldr	r2, [pc, #92]	; (800c858 <vPortValidateInterruptPriority+0x70>)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c804:	4b15      	ldr	r3, [pc, #84]	; (800c85c <vPortValidateInterruptPriority+0x74>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	7afa      	ldrb	r2, [r7, #11]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d20a      	bcs.n	800c824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	607b      	str	r3, [r7, #4]
}
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c824:	4b0e      	ldr	r3, [pc, #56]	; (800c860 <vPortValidateInterruptPriority+0x78>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c82c:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <vPortValidateInterruptPriority+0x7c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	429a      	cmp	r2, r3
 800c832:	d90a      	bls.n	800c84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	603b      	str	r3, [r7, #0]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <vPortValidateInterruptPriority+0x60>
	}
 800c84a:	bf00      	nop
 800c84c:	3714      	adds	r7, #20
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	e000e3f0 	.word	0xe000e3f0
 800c85c:	200011d8 	.word	0x200011d8
 800c860:	e000ed0c 	.word	0xe000ed0c
 800c864:	200011dc 	.word	0x200011dc

0800c868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	; 0x28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c870:	2300      	movs	r3, #0
 800c872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c874:	f7fe fd80 	bl	800b378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c878:	4b5b      	ldr	r3, [pc, #364]	; (800c9e8 <pvPortMalloc+0x180>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c880:	f000 f920 	bl	800cac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c884:	4b59      	ldr	r3, [pc, #356]	; (800c9ec <pvPortMalloc+0x184>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4013      	ands	r3, r2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f040 8093 	bne.w	800c9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d01d      	beq.n	800c8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c898:	2208      	movs	r2, #8
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4413      	add	r3, r2
 800c89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f003 0307 	and.w	r3, r3, #7
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d014      	beq.n	800c8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f023 0307 	bic.w	r3, r3, #7
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00a      	beq.n	800c8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	617b      	str	r3, [r7, #20]
}
 800c8d0:	bf00      	nop
 800c8d2:	e7fe      	b.n	800c8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d06e      	beq.n	800c9b8 <pvPortMalloc+0x150>
 800c8da:	4b45      	ldr	r3, [pc, #276]	; (800c9f0 <pvPortMalloc+0x188>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d869      	bhi.n	800c9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8e4:	4b43      	ldr	r3, [pc, #268]	; (800c9f4 <pvPortMalloc+0x18c>)
 800c8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8e8:	4b42      	ldr	r3, [pc, #264]	; (800c9f4 <pvPortMalloc+0x18c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ee:	e004      	b.n	800c8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	429a      	cmp	r2, r3
 800c902:	d903      	bls.n	800c90c <pvPortMalloc+0xa4>
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1f1      	bne.n	800c8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c90c:	4b36      	ldr	r3, [pc, #216]	; (800c9e8 <pvPortMalloc+0x180>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c912:	429a      	cmp	r2, r3
 800c914:	d050      	beq.n	800c9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2208      	movs	r2, #8
 800c91c:	4413      	add	r3, r2
 800c91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	2308      	movs	r3, #8
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	429a      	cmp	r2, r3
 800c936:	d91f      	bls.n	800c978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4413      	add	r3, r2
 800c93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	f003 0307 	and.w	r3, r3, #7
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00a      	beq.n	800c960 <pvPortMalloc+0xf8>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	613b      	str	r3, [r7, #16]
}
 800c95c:	bf00      	nop
 800c95e:	e7fe      	b.n	800c95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	685a      	ldr	r2, [r3, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	1ad2      	subs	r2, r2, r3
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c972:	69b8      	ldr	r0, [r7, #24]
 800c974:	f000 f908 	bl	800cb88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c978:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <pvPortMalloc+0x188>)
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	4a1b      	ldr	r2, [pc, #108]	; (800c9f0 <pvPortMalloc+0x188>)
 800c984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c986:	4b1a      	ldr	r3, [pc, #104]	; (800c9f0 <pvPortMalloc+0x188>)
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	4b1b      	ldr	r3, [pc, #108]	; (800c9f8 <pvPortMalloc+0x190>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d203      	bcs.n	800c99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c992:	4b17      	ldr	r3, [pc, #92]	; (800c9f0 <pvPortMalloc+0x188>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a18      	ldr	r2, [pc, #96]	; (800c9f8 <pvPortMalloc+0x190>)
 800c998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	4b13      	ldr	r3, [pc, #76]	; (800c9ec <pvPortMalloc+0x184>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <pvPortMalloc+0x194>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	4a11      	ldr	r2, [pc, #68]	; (800c9fc <pvPortMalloc+0x194>)
 800c9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9b8:	f7fe fcec 	bl	800b394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <pvPortMalloc+0x174>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60fb      	str	r3, [r7, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <pvPortMalloc+0x172>
	return pvReturn;
 800c9dc:	69fb      	ldr	r3, [r7, #28]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3728      	adds	r7, #40	; 0x28
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20001da0 	.word	0x20001da0
 800c9ec:	20001db4 	.word	0x20001db4
 800c9f0:	20001da4 	.word	0x20001da4
 800c9f4:	20001d98 	.word	0x20001d98
 800c9f8:	20001da8 	.word	0x20001da8
 800c9fc:	20001dac 	.word	0x20001dac

0800ca00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d04d      	beq.n	800caae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca12:	2308      	movs	r3, #8
 800ca14:	425b      	negs	r3, r3
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	4413      	add	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	4b24      	ldr	r3, [pc, #144]	; (800cab8 <vPortFree+0xb8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <vPortFree+0x44>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	60fb      	str	r3, [r7, #12]
}
 800ca40:	bf00      	nop
 800ca42:	e7fe      	b.n	800ca42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00a      	beq.n	800ca62 <vPortFree+0x62>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60bb      	str	r3, [r7, #8]
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <vPortFree+0xb8>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01e      	beq.n	800caae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d11a      	bne.n	800caae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b0e      	ldr	r3, [pc, #56]	; (800cab8 <vPortFree+0xb8>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	43db      	mvns	r3, r3
 800ca82:	401a      	ands	r2, r3
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca88:	f7fe fc76 	bl	800b378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <vPortFree+0xbc>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4413      	add	r3, r2
 800ca96:	4a09      	ldr	r2, [pc, #36]	; (800cabc <vPortFree+0xbc>)
 800ca98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca9a:	6938      	ldr	r0, [r7, #16]
 800ca9c:	f000 f874 	bl	800cb88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800caa0:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <vPortFree+0xc0>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3301      	adds	r3, #1
 800caa6:	4a06      	ldr	r2, [pc, #24]	; (800cac0 <vPortFree+0xc0>)
 800caa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800caaa:	f7fe fc73 	bl	800b394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800caae:	bf00      	nop
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	20001db4 	.word	0x20001db4
 800cabc:	20001da4 	.word	0x20001da4
 800cac0:	20001db0 	.word	0x20001db0

0800cac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cad0:	4b27      	ldr	r3, [pc, #156]	; (800cb70 <prvHeapInit+0xac>)
 800cad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00c      	beq.n	800caf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3307      	adds	r3, #7
 800cae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f023 0307 	bic.w	r3, r3, #7
 800caea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	4a1f      	ldr	r2, [pc, #124]	; (800cb70 <prvHeapInit+0xac>)
 800caf4:	4413      	add	r3, r2
 800caf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cafc:	4a1d      	ldr	r2, [pc, #116]	; (800cb74 <prvHeapInit+0xb0>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb02:	4b1c      	ldr	r3, [pc, #112]	; (800cb74 <prvHeapInit+0xb0>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb10:	2208      	movs	r2, #8
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	1a9b      	subs	r3, r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f023 0307 	bic.w	r3, r3, #7
 800cb1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4a15      	ldr	r2, [pc, #84]	; (800cb78 <prvHeapInit+0xb4>)
 800cb24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb26:	4b14      	ldr	r3, [pc, #80]	; (800cb78 <prvHeapInit+0xb4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb2e:	4b12      	ldr	r3, [pc, #72]	; (800cb78 <prvHeapInit+0xb4>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb44:	4b0c      	ldr	r3, [pc, #48]	; (800cb78 <prvHeapInit+0xb4>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	4a0a      	ldr	r2, [pc, #40]	; (800cb7c <prvHeapInit+0xb8>)
 800cb52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	4a09      	ldr	r2, [pc, #36]	; (800cb80 <prvHeapInit+0xbc>)
 800cb5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb5c:	4b09      	ldr	r3, [pc, #36]	; (800cb84 <prvHeapInit+0xc0>)
 800cb5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb62:	601a      	str	r2, [r3, #0]
}
 800cb64:	bf00      	nop
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	200011e0 	.word	0x200011e0
 800cb74:	20001d98 	.word	0x20001d98
 800cb78:	20001da0 	.word	0x20001da0
 800cb7c:	20001da8 	.word	0x20001da8
 800cb80:	20001da4 	.word	0x20001da4
 800cb84:	20001db4 	.word	0x20001db4

0800cb88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb90:	4b28      	ldr	r3, [pc, #160]	; (800cc34 <prvInsertBlockIntoFreeList+0xac>)
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	e002      	b.n	800cb9c <prvInsertBlockIntoFreeList+0x14>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d8f7      	bhi.n	800cb96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d108      	bne.n	800cbca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	441a      	add	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	441a      	add	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d118      	bne.n	800cc10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <prvInsertBlockIntoFreeList+0xb0>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d00d      	beq.n	800cc06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	441a      	add	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	e008      	b.n	800cc18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc06:	4b0c      	ldr	r3, [pc, #48]	; (800cc38 <prvInsertBlockIntoFreeList+0xb0>)
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	e003      	b.n	800cc18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d002      	beq.n	800cc26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc26:	bf00      	nop
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	20001d98 	.word	0x20001d98
 800cc38:	20001da0 	.word	0x20001da0

0800cc3c <__libc_init_array>:
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	4d0d      	ldr	r5, [pc, #52]	; (800cc74 <__libc_init_array+0x38>)
 800cc40:	4c0d      	ldr	r4, [pc, #52]	; (800cc78 <__libc_init_array+0x3c>)
 800cc42:	1b64      	subs	r4, r4, r5
 800cc44:	10a4      	asrs	r4, r4, #2
 800cc46:	2600      	movs	r6, #0
 800cc48:	42a6      	cmp	r6, r4
 800cc4a:	d109      	bne.n	800cc60 <__libc_init_array+0x24>
 800cc4c:	4d0b      	ldr	r5, [pc, #44]	; (800cc7c <__libc_init_array+0x40>)
 800cc4e:	4c0c      	ldr	r4, [pc, #48]	; (800cc80 <__libc_init_array+0x44>)
 800cc50:	f000 f8f2 	bl	800ce38 <_init>
 800cc54:	1b64      	subs	r4, r4, r5
 800cc56:	10a4      	asrs	r4, r4, #2
 800cc58:	2600      	movs	r6, #0
 800cc5a:	42a6      	cmp	r6, r4
 800cc5c:	d105      	bne.n	800cc6a <__libc_init_array+0x2e>
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
 800cc60:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc64:	4798      	blx	r3
 800cc66:	3601      	adds	r6, #1
 800cc68:	e7ee      	b.n	800cc48 <__libc_init_array+0xc>
 800cc6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc6e:	4798      	blx	r3
 800cc70:	3601      	adds	r6, #1
 800cc72:	e7f2      	b.n	800cc5a <__libc_init_array+0x1e>
 800cc74:	0800cf9c 	.word	0x0800cf9c
 800cc78:	0800cf9c 	.word	0x0800cf9c
 800cc7c:	0800cf9c 	.word	0x0800cf9c
 800cc80:	0800cfa0 	.word	0x0800cfa0

0800cc84 <__retarget_lock_acquire_recursive>:
 800cc84:	4770      	bx	lr

0800cc86 <__retarget_lock_release_recursive>:
 800cc86:	4770      	bx	lr

0800cc88 <memcpy>:
 800cc88:	440a      	add	r2, r1
 800cc8a:	4291      	cmp	r1, r2
 800cc8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cc90:	d100      	bne.n	800cc94 <memcpy+0xc>
 800cc92:	4770      	bx	lr
 800cc94:	b510      	push	{r4, lr}
 800cc96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc9e:	4291      	cmp	r1, r2
 800cca0:	d1f9      	bne.n	800cc96 <memcpy+0xe>
 800cca2:	bd10      	pop	{r4, pc}

0800cca4 <memset>:
 800cca4:	4402      	add	r2, r0
 800cca6:	4603      	mov	r3, r0
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d100      	bne.n	800ccae <memset+0xa>
 800ccac:	4770      	bx	lr
 800ccae:	f803 1b01 	strb.w	r1, [r3], #1
 800ccb2:	e7f9      	b.n	800cca8 <memset+0x4>

0800ccb4 <cleanup_glue>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	6809      	ldr	r1, [r1, #0]
 800ccba:	4605      	mov	r5, r0
 800ccbc:	b109      	cbz	r1, 800ccc2 <cleanup_glue+0xe>
 800ccbe:	f7ff fff9 	bl	800ccb4 <cleanup_glue>
 800ccc2:	4621      	mov	r1, r4
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccca:	f000 b869 	b.w	800cda0 <_free_r>
	...

0800ccd0 <_reclaim_reent>:
 800ccd0:	4b2c      	ldr	r3, [pc, #176]	; (800cd84 <_reclaim_reent+0xb4>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4283      	cmp	r3, r0
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	4604      	mov	r4, r0
 800ccda:	d051      	beq.n	800cd80 <_reclaim_reent+0xb0>
 800ccdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ccde:	b143      	cbz	r3, 800ccf2 <_reclaim_reent+0x22>
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d14a      	bne.n	800cd7c <_reclaim_reent+0xac>
 800cce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce8:	6819      	ldr	r1, [r3, #0]
 800ccea:	b111      	cbz	r1, 800ccf2 <_reclaim_reent+0x22>
 800ccec:	4620      	mov	r0, r4
 800ccee:	f000 f857 	bl	800cda0 <_free_r>
 800ccf2:	6961      	ldr	r1, [r4, #20]
 800ccf4:	b111      	cbz	r1, 800ccfc <_reclaim_reent+0x2c>
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f000 f852 	bl	800cda0 <_free_r>
 800ccfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ccfe:	b111      	cbz	r1, 800cd06 <_reclaim_reent+0x36>
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 f84d 	bl	800cda0 <_free_r>
 800cd06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd08:	b111      	cbz	r1, 800cd10 <_reclaim_reent+0x40>
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f000 f848 	bl	800cda0 <_free_r>
 800cd10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cd12:	b111      	cbz	r1, 800cd1a <_reclaim_reent+0x4a>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 f843 	bl	800cda0 <_free_r>
 800cd1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd1c:	b111      	cbz	r1, 800cd24 <_reclaim_reent+0x54>
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 f83e 	bl	800cda0 <_free_r>
 800cd24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cd26:	b111      	cbz	r1, 800cd2e <_reclaim_reent+0x5e>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 f839 	bl	800cda0 <_free_r>
 800cd2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cd30:	b111      	cbz	r1, 800cd38 <_reclaim_reent+0x68>
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 f834 	bl	800cda0 <_free_r>
 800cd38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd3a:	b111      	cbz	r1, 800cd42 <_reclaim_reent+0x72>
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 f82f 	bl	800cda0 <_free_r>
 800cd42:	69a3      	ldr	r3, [r4, #24]
 800cd44:	b1e3      	cbz	r3, 800cd80 <_reclaim_reent+0xb0>
 800cd46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd48:	4620      	mov	r0, r4
 800cd4a:	4798      	blx	r3
 800cd4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd4e:	b1b9      	cbz	r1, 800cd80 <_reclaim_reent+0xb0>
 800cd50:	4620      	mov	r0, r4
 800cd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd56:	f7ff bfad 	b.w	800ccb4 <cleanup_glue>
 800cd5a:	5949      	ldr	r1, [r1, r5]
 800cd5c:	b941      	cbnz	r1, 800cd70 <_reclaim_reent+0xa0>
 800cd5e:	3504      	adds	r5, #4
 800cd60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd62:	2d80      	cmp	r5, #128	; 0x80
 800cd64:	68d9      	ldr	r1, [r3, #12]
 800cd66:	d1f8      	bne.n	800cd5a <_reclaim_reent+0x8a>
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f000 f819 	bl	800cda0 <_free_r>
 800cd6e:	e7ba      	b.n	800cce6 <_reclaim_reent+0x16>
 800cd70:	680e      	ldr	r6, [r1, #0]
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 f814 	bl	800cda0 <_free_r>
 800cd78:	4631      	mov	r1, r6
 800cd7a:	e7ef      	b.n	800cd5c <_reclaim_reent+0x8c>
 800cd7c:	2500      	movs	r5, #0
 800cd7e:	e7ef      	b.n	800cd60 <_reclaim_reent+0x90>
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
 800cd82:	bf00      	nop
 800cd84:	20000010 	.word	0x20000010

0800cd88 <__malloc_lock>:
 800cd88:	4801      	ldr	r0, [pc, #4]	; (800cd90 <__malloc_lock+0x8>)
 800cd8a:	f7ff bf7b 	b.w	800cc84 <__retarget_lock_acquire_recursive>
 800cd8e:	bf00      	nop
 800cd90:	20001db8 	.word	0x20001db8

0800cd94 <__malloc_unlock>:
 800cd94:	4801      	ldr	r0, [pc, #4]	; (800cd9c <__malloc_unlock+0x8>)
 800cd96:	f7ff bf76 	b.w	800cc86 <__retarget_lock_release_recursive>
 800cd9a:	bf00      	nop
 800cd9c:	20001db8 	.word	0x20001db8

0800cda0 <_free_r>:
 800cda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cda2:	2900      	cmp	r1, #0
 800cda4:	d044      	beq.n	800ce30 <_free_r+0x90>
 800cda6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdaa:	9001      	str	r0, [sp, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f1a1 0404 	sub.w	r4, r1, #4
 800cdb2:	bfb8      	it	lt
 800cdb4:	18e4      	addlt	r4, r4, r3
 800cdb6:	f7ff ffe7 	bl	800cd88 <__malloc_lock>
 800cdba:	4a1e      	ldr	r2, [pc, #120]	; (800ce34 <_free_r+0x94>)
 800cdbc:	9801      	ldr	r0, [sp, #4]
 800cdbe:	6813      	ldr	r3, [r2, #0]
 800cdc0:	b933      	cbnz	r3, 800cdd0 <_free_r+0x30>
 800cdc2:	6063      	str	r3, [r4, #4]
 800cdc4:	6014      	str	r4, [r2, #0]
 800cdc6:	b003      	add	sp, #12
 800cdc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdcc:	f7ff bfe2 	b.w	800cd94 <__malloc_unlock>
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	d908      	bls.n	800cde6 <_free_r+0x46>
 800cdd4:	6825      	ldr	r5, [r4, #0]
 800cdd6:	1961      	adds	r1, r4, r5
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	bf01      	itttt	eq
 800cddc:	6819      	ldreq	r1, [r3, #0]
 800cdde:	685b      	ldreq	r3, [r3, #4]
 800cde0:	1949      	addeq	r1, r1, r5
 800cde2:	6021      	streq	r1, [r4, #0]
 800cde4:	e7ed      	b.n	800cdc2 <_free_r+0x22>
 800cde6:	461a      	mov	r2, r3
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	b10b      	cbz	r3, 800cdf0 <_free_r+0x50>
 800cdec:	42a3      	cmp	r3, r4
 800cdee:	d9fa      	bls.n	800cde6 <_free_r+0x46>
 800cdf0:	6811      	ldr	r1, [r2, #0]
 800cdf2:	1855      	adds	r5, r2, r1
 800cdf4:	42a5      	cmp	r5, r4
 800cdf6:	d10b      	bne.n	800ce10 <_free_r+0x70>
 800cdf8:	6824      	ldr	r4, [r4, #0]
 800cdfa:	4421      	add	r1, r4
 800cdfc:	1854      	adds	r4, r2, r1
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	6011      	str	r1, [r2, #0]
 800ce02:	d1e0      	bne.n	800cdc6 <_free_r+0x26>
 800ce04:	681c      	ldr	r4, [r3, #0]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	6053      	str	r3, [r2, #4]
 800ce0a:	4421      	add	r1, r4
 800ce0c:	6011      	str	r1, [r2, #0]
 800ce0e:	e7da      	b.n	800cdc6 <_free_r+0x26>
 800ce10:	d902      	bls.n	800ce18 <_free_r+0x78>
 800ce12:	230c      	movs	r3, #12
 800ce14:	6003      	str	r3, [r0, #0]
 800ce16:	e7d6      	b.n	800cdc6 <_free_r+0x26>
 800ce18:	6825      	ldr	r5, [r4, #0]
 800ce1a:	1961      	adds	r1, r4, r5
 800ce1c:	428b      	cmp	r3, r1
 800ce1e:	bf04      	itt	eq
 800ce20:	6819      	ldreq	r1, [r3, #0]
 800ce22:	685b      	ldreq	r3, [r3, #4]
 800ce24:	6063      	str	r3, [r4, #4]
 800ce26:	bf04      	itt	eq
 800ce28:	1949      	addeq	r1, r1, r5
 800ce2a:	6021      	streq	r1, [r4, #0]
 800ce2c:	6054      	str	r4, [r2, #4]
 800ce2e:	e7ca      	b.n	800cdc6 <_free_r+0x26>
 800ce30:	b003      	add	sp, #12
 800ce32:	bd30      	pop	{r4, r5, pc}
 800ce34:	20001dbc 	.word	0x20001dbc

0800ce38 <_init>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	bf00      	nop
 800ce3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3e:	bc08      	pop	{r3}
 800ce40:	469e      	mov	lr, r3
 800ce42:	4770      	bx	lr

0800ce44 <_fini>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	bf00      	nop
 800ce48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4a:	bc08      	pop	{r3}
 800ce4c:	469e      	mov	lr, r3
 800ce4e:	4770      	bx	lr
